0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 01 17:33:53 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_164
0000             28            public _main
0000             29            public _automaticmode
0000             30            public _servomotion
0000             31            public _GetFrequency
0000             32            public _PrintNumber
0000             33            public _eputs
0000             34            public _GetPeriod
0000             35            public _Timer2_ISR
0000             36            public _Timer4_ISR
0000             37            public _Volts_at_Pin
0000             38            public _ADC_at_Pin
0000             39            public _InitPinADC
0000             40            public _InitADC
0000             41            public _TIMER0_Init
0000             42            public _ReceptionOff
0000             43            public _SendATCommand
0000             44            public _waitms_or_RI1
0000             45            public _RXU1
0000             46            public _getstr1
0000             47            public _getchar1_with_timeout
0000             48            public _getchar1
0000             49            public _sendstr1
0000             50            public _putchar1
0000             51            public _UART1_Init
0000             52            public _waitms
0000             53            public _Timer3us
0000             54            public _Timer5_ISR
0000             55            public __c51_external_startup
0000             56            public _msg
0000             57            public _buff
0000             58            public _automaticmode_PARM_3
0000             59            public _automaticmode_PARM_2
0000             60            public _PrintNumber_PARM_3
0000             61            public _PrintNumber_PARM_2
0000             62            public _getstr1_PARM_2
0000             63            public _overflow_count
0000             64            public _servo2
0000             65            public _servo1
0000             66            public _servo_counter
0000             67            public _peggingsidnatu
0000             68            public _direction
0000             69            public _pwm_duty2
0000             70            public _pwm_counter2
0000             71            public _pwm_duty4
0000             72            public _pwm_counter4
0000             73   ;--------------------------------------------------------
0000             74   ; Special Function Registers
0000             75   ;--------------------------------------------------------
0000             76   _ACC            DATA 0xe0
0000             77   _ADC0ASAH       DATA 0xb6
0000             78   _ADC0ASAL       DATA 0xb5
0000             79   _ADC0ASCF       DATA 0xa1
0000             80   _ADC0ASCT       DATA 0xc7
0000             81   _ADC0CF0        DATA 0xbc
0000             82   _ADC0CF1        DATA 0xb9
0000             83   _ADC0CF2        DATA 0xdf
0000             84   _ADC0CN0        DATA 0xe8
0000             85   _ADC0CN1        DATA 0xb2
0000             86   _ADC0CN2        DATA 0xb3
0000             87   _ADC0GTH        DATA 0xc4
0000             88   _ADC0GTL        DATA 0xc3
0000             89   _ADC0H          DATA 0xbe
0000             90   _ADC0L          DATA 0xbd
0000             91   _ADC0LTH        DATA 0xc6
0000             92   _ADC0LTL        DATA 0xc5
0000             93   _ADC0MX         DATA 0xbb
0000             94   _B              DATA 0xf0
0000             95   _CKCON0         DATA 0x8e
0000             96   _CKCON1         DATA 0xa6
0000             97   _CLEN0          DATA 0xc6
0000             98   _CLIE0          DATA 0xc7
0000             99   _CLIF0          DATA 0xe8
0000            100   _CLKSEL         DATA 0xa9
0000            101   _CLOUT0         DATA 0xd1
0000            102   _CLU0CF         DATA 0xb1
0000            103   _CLU0FN         DATA 0xaf
0000            104   _CLU0MX         DATA 0x84
0000            105   _CLU1CF         DATA 0xb3
0000            106   _CLU1FN         DATA 0xb2
0000            107   _CLU1MX         DATA 0x85
0000            108   _CLU2CF         DATA 0xb6
0000            109   _CLU2FN         DATA 0xb5
0000            110   _CLU2MX         DATA 0x91
0000            111   _CLU3CF         DATA 0xbf
0000            112   _CLU3FN         DATA 0xbe
0000            113   _CLU3MX         DATA 0xae
0000            114   _CMP0CN0        DATA 0x9b
0000            115   _CMP0CN1        DATA 0x99
0000            116   _CMP0MD         DATA 0x9d
0000            117   _CMP0MX         DATA 0x9f
0000            118   _CMP1CN0        DATA 0xbf
0000            119   _CMP1CN1        DATA 0xac
0000            120   _CMP1MD         DATA 0xab
0000            121   _CMP1MX         DATA 0xaa
0000            122   _CRC0CN0        DATA 0xce
0000            123   _CRC0CN1        DATA 0x86
0000            124   _CRC0CNT        DATA 0xd3
0000            125   _CRC0DAT        DATA 0xcb
0000            126   _CRC0FLIP       DATA 0xcf
0000            127   _CRC0IN         DATA 0xca
0000            128   _CRC0ST         DATA 0xd2
0000            129   _DAC0CF0        DATA 0x91
0000            130   _DAC0CF1        DATA 0x92
0000            131   _DAC0H          DATA 0x85
0000            132   _DAC0L          DATA 0x84
0000            133   _DAC1CF0        DATA 0x93
0000            134   _DAC1CF1        DATA 0x94
0000            135   _DAC1H          DATA 0x8a
0000            136   _DAC1L          DATA 0x89
0000            137   _DAC2CF0        DATA 0x95
0000            138   _DAC2CF1        DATA 0x96
0000            139   _DAC2H          DATA 0x8c
0000            140   _DAC2L          DATA 0x8b
0000            141   _DAC3CF0        DATA 0x9a
0000            142   _DAC3CF1        DATA 0x9c
0000            143   _DAC3H          DATA 0x8e
0000            144   _DAC3L          DATA 0x8d
0000            145   _DACGCF0        DATA 0x88
0000            146   _DACGCF1        DATA 0x98
0000            147   _DACGCF2        DATA 0xa2
0000            148   _DERIVID        DATA 0xad
0000            149   _DEVICEID       DATA 0xb5
0000            150   _DPH            DATA 0x83
0000            151   _DPL            DATA 0x82
0000            152   _EIE1           DATA 0xe6
0000            153   _EIE2           DATA 0xf3
0000            154   _EIP1           DATA 0xbb
0000            155   _EIP1H          DATA 0xee
0000            156   _EIP2           DATA 0xed
0000            157   _EIP2H          DATA 0xf6
0000            158   _EMI0CN         DATA 0xe7
0000            159   _FLKEY          DATA 0xb7
0000            160   _HFO0CAL        DATA 0xc7
0000            161   _HFO1CAL        DATA 0xd6
0000            162   _HFOCN          DATA 0xef
0000            163   _I2C0ADM        DATA 0xff
0000            164   _I2C0CN0        DATA 0xba
0000            165   _I2C0DIN        DATA 0xbc
0000            166   _I2C0DOUT       DATA 0xbb
0000            167   _I2C0FCN0       DATA 0xad
0000            168   _I2C0FCN1       DATA 0xab
0000            169   _I2C0FCT        DATA 0xf5
0000            170   _I2C0SLAD       DATA 0xbd
0000            171   _I2C0STAT       DATA 0xb9
0000            172   _IE             DATA 0xa8
0000            173   _IP             DATA 0xb8
0000            174   _IPH            DATA 0xf2
0000            175   _IT01CF         DATA 0xe4
0000            176   _LFO0CN         DATA 0xb1
0000            177   _P0             DATA 0x80
0000            178   _P0MASK         DATA 0xfe
0000            179   _P0MAT          DATA 0xfd
0000            180   _P0MDIN         DATA 0xf1
0000            181   _P0MDOUT        DATA 0xa4
0000            182   _P0SKIP         DATA 0xd4
0000            183   _P1             DATA 0x90
0000            184   _P1MASK         DATA 0xee
0000            185   _P1MAT          DATA 0xed
0000            186   _P1MDIN         DATA 0xf2
0000            187   _P1MDOUT        DATA 0xa5
0000            188   _P1SKIP         DATA 0xd5
0000            189   _P2             DATA 0xa0
0000            190   _P2MASK         DATA 0xfc
0000            191   _P2MAT          DATA 0xfb
0000            192   _P2MDIN         DATA 0xf3
0000            193   _P2MDOUT        DATA 0xa6
0000            194   _P2SKIP         DATA 0xcc
0000            195   _P3             DATA 0xb0
0000            196   _P3MDIN         DATA 0xf4
0000            197   _P3MDOUT        DATA 0x9c
0000            198   _PCA0CENT       DATA 0x9e
0000            199   _PCA0CLR        DATA 0x9c
0000            200   _PCA0CN0        DATA 0xd8
0000            201   _PCA0CPH0       DATA 0xfc
0000            202   _PCA0CPH1       DATA 0xea
0000            203   _PCA0CPH2       DATA 0xec
0000            204   _PCA0CPH3       DATA 0xf5
0000            205   _PCA0CPH4       DATA 0x85
0000            206   _PCA0CPH5       DATA 0xde
0000            207   _PCA0CPL0       DATA 0xfb
0000            208   _PCA0CPL1       DATA 0xe9
0000            209   _PCA0CPL2       DATA 0xeb
0000            210   _PCA0CPL3       DATA 0xf4
0000            211   _PCA0CPL4       DATA 0x84
0000            212   _PCA0CPL5       DATA 0xdd
0000            213   _PCA0CPM0       DATA 0xda
0000            214   _PCA0CPM1       DATA 0xdb
0000            215   _PCA0CPM2       DATA 0xdc
0000            216   _PCA0CPM3       DATA 0xae
0000            217   _PCA0CPM4       DATA 0xaf
0000            218   _PCA0CPM5       DATA 0xcc
0000            219   _PCA0H          DATA 0xfa
0000            220   _PCA0L          DATA 0xf9
0000            221   _PCA0MD         DATA 0xd9
0000            222   _PCA0POL        DATA 0x96
0000            223   _PCA0PWM        DATA 0xf7
0000            224   _PCON0          DATA 0x87
0000            225   _PCON1          DATA 0xcd
0000            226   _PFE0CN         DATA 0xc1
0000            227   _PRTDRV         DATA 0xf6
0000            228   _PSCTL          DATA 0x8f
0000            229   _PSTAT0         DATA 0xaa
0000            230   _PSW            DATA 0xd0
0000            231   _REF0CN         DATA 0xd1
0000            232   _REG0CN         DATA 0xc9
0000            233   _REVID          DATA 0xb6
0000            234   _RSTSRC         DATA 0xef
0000            235   _SBCON1         DATA 0x94
0000            236   _SBRLH1         DATA 0x96
0000            237   _SBRLL1         DATA 0x95
0000            238   _SBUF           DATA 0x99
0000            239   _SBUF0          DATA 0x99
0000            240   _SBUF1          DATA 0x92
0000            241   _SCON           DATA 0x98
0000            242   _SCON0          DATA 0x98
0000            243   _SCON1          DATA 0xc8
0000            244   _SFRPAGE        DATA 0xa7
0000            245   _SFRPGCN        DATA 0xbc
0000            246   _SFRSTACK       DATA 0xd7
0000            247   _SMB0ADM        DATA 0xd6
0000            248   _SMB0ADR        DATA 0xd7
0000            249   _SMB0CF         DATA 0xc1
0000            250   _SMB0CN0        DATA 0xc0
0000            251   _SMB0DAT        DATA 0xc2
0000            252   _SMB0FCN0       DATA 0xc3
0000            253   _SMB0FCN1       DATA 0xc4
0000            254   _SMB0FCT        DATA 0xef
0000            255   _SMB0RXLN       DATA 0xc5
0000            256   _SMB0TC         DATA 0xac
0000            257   _SMOD1          DATA 0x93
0000            258   _SP             DATA 0x81
0000            259   _SPI0CFG        DATA 0xa1
0000            260   _SPI0CKR        DATA 0xa2
0000            261   _SPI0CN0        DATA 0xf8
0000            262   _SPI0DAT        DATA 0xa3
0000            263   _SPI0FCN0       DATA 0x9a
0000            264   _SPI0FCN1       DATA 0x9b
0000            265   _SPI0FCT        DATA 0xf7
0000            266   _SPI0PCF        DATA 0xdf
0000            267   _TCON           DATA 0x88
0000            268   _TH0            DATA 0x8c
0000            269   _TH1            DATA 0x8d
0000            270   _TL0            DATA 0x8a
0000            271   _TL1            DATA 0x8b
0000            272   _TMOD           DATA 0x89
0000            273   _TMR2CN0        DATA 0xc8
0000            274   _TMR2CN1        DATA 0xfd
0000            275   _TMR2H          DATA 0xcf
0000            276   _TMR2L          DATA 0xce
0000            277   _TMR2RLH        DATA 0xcb
0000            278   _TMR2RLL        DATA 0xca
0000            279   _TMR3CN0        DATA 0x91
0000            280   _TMR3CN1        DATA 0xfe
0000            281   _TMR3H          DATA 0x95
0000            282   _TMR3L          DATA 0x94
0000            283   _TMR3RLH        DATA 0x93
0000            284   _TMR3RLL        DATA 0x92
0000            285   _TMR4CN0        DATA 0x98
0000            286   _TMR4CN1        DATA 0xff
0000            287   _TMR4H          DATA 0xa5
0000            288   _TMR4L          DATA 0xa4
0000            289   _TMR4RLH        DATA 0xa3
0000            290   _TMR4RLL        DATA 0xa2
0000            291   _TMR5CN0        DATA 0xc0
0000            292   _TMR5CN1        DATA 0xf1
0000            293   _TMR5H          DATA 0xd5
0000            294   _TMR5L          DATA 0xd4
0000            295   _TMR5RLH        DATA 0xd3
0000            296   _TMR5RLL        DATA 0xd2
0000            297   _UART0PCF       DATA 0xd9
0000            298   _UART1FCN0      DATA 0x9d
0000            299   _UART1FCN1      DATA 0xd8
0000            300   _UART1FCT       DATA 0xfa
0000            301   _UART1LIN       DATA 0x9e
0000            302   _UART1PCF       DATA 0xda
0000            303   _VDM0CN         DATA 0xff
0000            304   _WDTCN          DATA 0x97
0000            305   _XBR0           DATA 0xe1
0000            306   _XBR1           DATA 0xe2
0000            307   _XBR2           DATA 0xe3
0000            308   _XOSC0CN        DATA 0x86
0000            309   _DPTR           DATA 0x8382
0000            310   _TMR2RL         DATA 0xcbca
0000            311   _TMR3RL         DATA 0x9392
0000            312   _TMR4RL         DATA 0xa3a2
0000            313   _TMR5RL         DATA 0xd3d2
0000            314   _TMR0           DATA 0x8c8a
0000            315   _TMR1           DATA 0x8d8b
0000            316   _TMR2           DATA 0xcfce
0000            317   _TMR3           DATA 0x9594
0000            318   _TMR4           DATA 0xa5a4
0000            319   _TMR5           DATA 0xd5d4
0000            320   _SBRL1          DATA 0x9695
0000            321   _PCA0           DATA 0xfaf9
0000            322   _PCA0CP0        DATA 0xfcfb
0000            323   _PCA0CP1        DATA 0xeae9
0000            324   _PCA0CP2        DATA 0xeceb
0000            325   _PCA0CP3        DATA 0xf5f4
0000            326   _PCA0CP4        DATA 0x8584
0000            327   _PCA0CP5        DATA 0xdedd
0000            328   _ADC0ASA        DATA 0xb6b5
0000            329   _ADC0GT         DATA 0xc4c3
0000            330   _ADC0           DATA 0xbebd
0000            331   _ADC0LT         DATA 0xc6c5
0000            332   _DAC0           DATA 0x8584
0000            333   _DAC1           DATA 0x8a89
0000            334   _DAC2           DATA 0x8c8b
0000            335   _DAC3           DATA 0x8e8d
0000            336   ;--------------------------------------------------------
0000            337   ; special function bits
0000            338   ;--------------------------------------------------------
0000            339   _ACC_0          BIT 0xe0
0000            340   _ACC_1          BIT 0xe1
0000            341   _ACC_2          BIT 0xe2
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_4          BIT 0xe4
0000            344   _ACC_5          BIT 0xe5
0000            345   _ACC_6          BIT 0xe6
0000            346   _ACC_7          BIT 0xe7
0000            347   _TEMPE          BIT 0xe8
0000            348   _ADGN0          BIT 0xe9
0000            349   _ADGN1          BIT 0xea
0000            350   _ADWINT         BIT 0xeb
0000            351   _ADBUSY         BIT 0xec
0000            352   _ADINT          BIT 0xed
0000            353   _IPOEN          BIT 0xee
0000            354   _ADEN           BIT 0xef
0000            355   _B_0            BIT 0xf0
0000            356   _B_1            BIT 0xf1
0000            357   _B_2            BIT 0xf2
0000            358   _B_3            BIT 0xf3
0000            359   _B_4            BIT 0xf4
0000            360   _B_5            BIT 0xf5
0000            361   _B_6            BIT 0xf6
0000            362   _B_7            BIT 0xf7
0000            363   _C0FIF          BIT 0xe8
0000            364   _C0RIF          BIT 0xe9
0000            365   _C1FIF          BIT 0xea
0000            366   _C1RIF          BIT 0xeb
0000            367   _C2FIF          BIT 0xec
0000            368   _C2RIF          BIT 0xed
0000            369   _C3FIF          BIT 0xee
0000            370   _C3RIF          BIT 0xef
0000            371   _D1SRC0         BIT 0x88
0000            372   _D1SRC1         BIT 0x89
0000            373   _D1AMEN         BIT 0x8a
0000            374   _D01REFSL       BIT 0x8b
0000            375   _D3SRC0         BIT 0x8c
0000            376   _D3SRC1         BIT 0x8d
0000            377   _D3AMEN         BIT 0x8e
0000            378   _D23REFSL       BIT 0x8f
0000            379   _D0UDIS         BIT 0x98
0000            380   _D1UDIS         BIT 0x99
0000            381   _D2UDIS         BIT 0x9a
0000            382   _D3UDIS         BIT 0x9b
0000            383   _EX0            BIT 0xa8
0000            384   _ET0            BIT 0xa9
0000            385   _EX1            BIT 0xaa
0000            386   _ET1            BIT 0xab
0000            387   _ES0            BIT 0xac
0000            388   _ET2            BIT 0xad
0000            389   _ESPI0          BIT 0xae
0000            390   _EA             BIT 0xaf
0000            391   _PX0            BIT 0xb8
0000            392   _PT0            BIT 0xb9
0000            393   _PX1            BIT 0xba
0000            394   _PT1            BIT 0xbb
0000            395   _PS0            BIT 0xbc
0000            396   _PT2            BIT 0xbd
0000            397   _PSPI0          BIT 0xbe
0000            398   _P0_0           BIT 0x80
0000            399   _P0_1           BIT 0x81
0000            400   _P0_2           BIT 0x82
0000            401   _P0_3           BIT 0x83
0000            402   _P0_4           BIT 0x84
0000            403   _P0_5           BIT 0x85
0000            404   _P0_6           BIT 0x86
0000            405   _P0_7           BIT 0x87
0000            406   _P1_0           BIT 0x90
0000            407   _P1_1           BIT 0x91
0000            408   _P1_2           BIT 0x92
0000            409   _P1_3           BIT 0x93
0000            410   _P1_4           BIT 0x94
0000            411   _P1_5           BIT 0x95
0000            412   _P1_6           BIT 0x96
0000            413   _P1_7           BIT 0x97
0000            414   _P2_0           BIT 0xa0
0000            415   _P2_1           BIT 0xa1
0000            416   _P2_2           BIT 0xa2
0000            417   _P2_3           BIT 0xa3
0000            418   _P2_4           BIT 0xa4
0000            419   _P2_5           BIT 0xa5
0000            420   _P2_6           BIT 0xa6
0000            421   _P3_0           BIT 0xb0
0000            422   _P3_1           BIT 0xb1
0000            423   _P3_2           BIT 0xb2
0000            424   _P3_3           BIT 0xb3
0000            425   _P3_4           BIT 0xb4
0000            426   _P3_7           BIT 0xb7
0000            427   _CCF0           BIT 0xd8
0000            428   _CCF1           BIT 0xd9
0000            429   _CCF2           BIT 0xda
0000            430   _CCF3           BIT 0xdb
0000            431   _CCF4           BIT 0xdc
0000            432   _CCF5           BIT 0xdd
0000            433   _CR             BIT 0xde
0000            434   _CF             BIT 0xdf
0000            435   _PARITY         BIT 0xd0
0000            436   _F1             BIT 0xd1
0000            437   _OV             BIT 0xd2
0000            438   _RS0            BIT 0xd3
0000            439   _RS1            BIT 0xd4
0000            440   _F0             BIT 0xd5
0000            441   _AC             BIT 0xd6
0000            442   _CY             BIT 0xd7
0000            443   _RI             BIT 0x98
0000            444   _TI             BIT 0x99
0000            445   _RB8            BIT 0x9a
0000            446   _TB8            BIT 0x9b
0000            447   _REN            BIT 0x9c
0000            448   _CE             BIT 0x9d
0000            449   _SMODE          BIT 0x9e
0000            450   _RI1            BIT 0xc8
0000            451   _TI1            BIT 0xc9
0000            452   _RBX1           BIT 0xca
0000            453   _TBX1           BIT 0xcb
0000            454   _REN1           BIT 0xcc
0000            455   _PERR1          BIT 0xcd
0000            456   _OVR1           BIT 0xce
0000            457   _SI             BIT 0xc0
0000            458   _ACK            BIT 0xc1
0000            459   _ARBLOST        BIT 0xc2
0000            460   _ACKRQ          BIT 0xc3
0000            461   _STO            BIT 0xc4
0000            462   _STA            BIT 0xc5
0000            463   _TXMODE         BIT 0xc6
0000            464   _MASTER         BIT 0xc7
0000            465   _SPIEN          BIT 0xf8
0000            466   _TXNF           BIT 0xf9
0000            467   _NSSMD0         BIT 0xfa
0000            468   _NSSMD1         BIT 0xfb
0000            469   _RXOVRN         BIT 0xfc
0000            470   _MODF           BIT 0xfd
0000            471   _WCOL           BIT 0xfe
0000            472   _SPIF           BIT 0xff
0000            473   _IT0            BIT 0x88
0000            474   _IE0            BIT 0x89
0000            475   _IT1            BIT 0x8a
0000            476   _IE1            BIT 0x8b
0000            477   _TR0            BIT 0x8c
0000            478   _TF0            BIT 0x8d
0000            479   _TR1            BIT 0x8e
0000            480   _TF1            BIT 0x8f
0000            481   _T2XCLK0        BIT 0xc8
0000            482   _T2XCLK1        BIT 0xc9
0000            483   _TR2            BIT 0xca
0000            484   _T2SPLIT        BIT 0xcb
0000            485   _TF2CEN         BIT 0xcc
0000            486   _TF2LEN         BIT 0xcd
0000            487   _TF2L           BIT 0xce
0000            488   _TF2H           BIT 0xcf
0000            489   _T4XCLK0        BIT 0x98
0000            490   _T4XCLK1        BIT 0x99
0000            491   _TR4            BIT 0x9a
0000            492   _T4SPLIT        BIT 0x9b
0000            493   _TF4CEN         BIT 0x9c
0000            494   _TF4LEN         BIT 0x9d
0000            495   _TF4L           BIT 0x9e
0000            496   _TF4H           BIT 0x9f
0000            497   _T5XCLK0        BIT 0xc0
0000            498   _T5XCLK1        BIT 0xc1
0000            499   _TR5            BIT 0xc2
0000            500   _T5SPLIT        BIT 0xc3
0000            501   _TF5CEN         BIT 0xc4
0000            502   _TF5LEN         BIT 0xc5
0000            503   _TF5L           BIT 0xc6
0000            504   _TF5H           BIT 0xc7
0000            505   _RIE            BIT 0xd8
0000            506   _RXTO0          BIT 0xd9
0000            507   _RXTO1          BIT 0xda
0000            508   _RFRQ           BIT 0xdb
0000            509   _TIE            BIT 0xdc
0000            510   _TXHOLD         BIT 0xdd
0000            511   _TXNF1          BIT 0xde
0000            512   _TFRQ           BIT 0xdf
0000            513   ;--------------------------------------------------------
0000            514   ; overlayable register banks
0000            515   ;--------------------------------------------------------
0000            516            rbank0 segment data overlay
0000            517   ;--------------------------------------------------------
0000            518   ; internal ram data
0000            519   ;--------------------------------------------------------
0000            520            rseg R_DSEG
0000            521   _pwm_counter4:
0000            522            ds 2
0002            523   _pwm_duty4:
0002            524            ds 2
0004            525   _pwm_counter2:
0004            526            ds 2
0006            527   _pwm_duty2:
0006            528            ds 2
0008            529   _direction:
0008            530            ds 2
000A            531   _peggingsidnatu:
000A            532            ds 2
000C            533   _servo_counter:
000C            534            ds 2
000E            535   _servo1:
000E            536            ds 1
000F            537   _servo2:
000F            538            ds 1
0010            539   _overflow_count:
0010            540            ds 1
0011            541   _getstr1_PARM_2:
0011            542            ds 1
0012            543   _PrintNumber_PARM_2:
0012            544            ds 2
0014            545   _PrintNumber_PARM_3:
0014            546            ds 2
0016            547   _PrintNumber_val_1_163:
0016            548            ds 4
001A            549   _PrintNumber_j_1_164:
001A            550            ds 2
001C            551   _PrintNumber_sloc0_1_0:
001C            552            ds 2
001E            553   _PrintNumber_sloc1_1_0:
001E            554            ds 4
0022            555   _automaticmode_PARM_2:
0022            556            ds 4
0026            557   _automaticmode_PARM_3:
0026            558            ds 4
002A            559   _main_adcwheel1_1_186:
002A            560            ds 2
002C            561   _main_adcwheel2_1_186:
002C            562            ds 2
002E            563   _main_which_1_186:
002E            564            ds 2
0030            565   _main_f_1_186:
0030            566            ds 4
0034            567   _main_v_1_186:
0034            568            ds 8
003C            569   _main_sloc0_1_0:
003C            570            ds 4
0040            571   ;--------------------------------------------------------
0040            572   ; overlayable items in internal ram 
0040            573   ;--------------------------------------------------------
0000            574            rseg    R_OSEG
0000            575            rseg    R_OSEG
0000            576            rseg    R_OSEG
0000            577            rseg    R_OSEG
0000            578   _InitPinADC_PARM_2:
0000            579            ds 1
0001            580            rseg    R_OSEG
0001            581            rseg    R_OSEG
0001            582   ;--------------------------------------------------------
0001            583   ; indirectly addressable internal ram data
0001            584   ;--------------------------------------------------------
0000            585            rseg R_ISEG
0000            586   _buff:
0000            587            ds 20
0014            588   _msg:
0014            589            ds 20
0028            590   ;--------------------------------------------------------
0028            591   ; absolute internal ram data
0028            592   ;--------------------------------------------------------
0000            593            DSEG
0000            594   ;--------------------------------------------------------
0000            595   ; bit data
0000            596   ;--------------------------------------------------------
0000            597            rseg R_BSEG
0000            598   ;--------------------------------------------------------
0000            599   ; paged external ram data
0000            600   ;--------------------------------------------------------
0000            601            rseg R_PSEG
0000            602   ;--------------------------------------------------------
0000            603   ; external ram data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_XSEG
0000            606   _PrintNumber_buff_1_164:
0000            607            ds 33
0021            608   ;--------------------------------------------------------
0021            609   ; absolute external ram data
0021            610   ;--------------------------------------------------------
0000            611            XSEG
0000            612   ;--------------------------------------------------------
0000            613   ; external initialized ram data
0000            614   ;--------------------------------------------------------
0000            615            rseg R_IXSEG
0000            616            rseg R_HOME
0000            617            rseg R_GSINIT
0000            618            rseg R_CSEG
0000            619   ;--------------------------------------------------------
0000            620   ; Reset entry point and interrupt vectors
0000            621   ;--------------------------------------------------------
0000            622            CSEG at 0x0000
0000 020000     623            ljmp    _crt0
002B            624            CSEG at 0x002b
002B 020000     625            ljmp    _Timer2_ISR
008B            626            CSEG at 0x008b
008B 020000     627            ljmp    _Timer4_ISR
0093            628            CSEG at 0x0093
0093 020000     629            ljmp    _Timer5_ISR
0096            630   ;--------------------------------------------------------
0096            631   ; global & static initialisations
0096            632   ;--------------------------------------------------------
0000            633            rseg R_HOME
0000            634            rseg R_GSINIT
0000            635            rseg R_GSINIT
0000            636   ;--------------------------------------------------------
0000            637   ; data variables initialization
0000            638   ;--------------------------------------------------------
0000            639            rseg R_DINIT
0000            640   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         641            clr     a
0001 F578       642            mov     _pwm_counter4,a
0003 F579       643            mov     (_pwm_counter4 + 1),a
0005            644   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0?65535)
0005 7538FF     645            mov     _pwm_duty4,#0xFF
0008 7539FF     646            mov     (_pwm_duty4 + 1),#0xFF
000B            647   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         648            clr     a
000C F5F8       649            mov     _pwm_counter2,a
000E F5F9       650            mov     (_pwm_counter2 + 1),a
0010            651   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0?65535)
0010 75B8FF     652            mov     _pwm_duty2,#0xFF
0013 75B9FF     653            mov     (_pwm_duty2 + 1),#0xFF
0016            654   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         655            clr     a
0017 F578       656            mov     _direction,a
0019 F579       657            mov     (_direction + 1),a
001B            658   ;        EFM8_JDY40_test.c:32: volatile int peggingsidnatu=0;
001B E4         659            clr     a
001C F538       660            mov     _peggingsidnatu,a
001E F539       661            mov     (_peggingsidnatu + 1),a
0020            662   ;        EFM8_JDY40_test.c:42: volatile unsigned int servo_counter=0;
0020 E4         663            clr     a
0021 F5F8       664            mov     _servo_counter,a
0023 F5F9       665            mov     (_servo_counter + 1),a
0025            666   ;        EFM8_JDY40_test.c:43: volatile unsigned char servo1=250, servo2=250;
0025 75B8FA     667            mov     _servo1,#0xFA
0028            668   ;        EFM8_JDY40_test.c:43: 
0028 7578FA     669            mov     _servo2,#0xFA
002B            670            ; The linker places a 'ret' at the end of segment R_DINIT.
002B            671   ;--------------------------------------------------------
002B            672   ; code
002B            673   ;--------------------------------------------------------
0000            674            rseg R_CSEG
0000            675   ;------------------------------------------------------------
0000            676   ;Allocation info for local variables in function '_c51_external_startup'
0000            677   ;------------------------------------------------------------
0000            678   ;------------------------------------------------------------
0000            679   ;        EFM8_JDY40_test.c:54: char _c51_external_startup (void)
0000            680   ;        -----------------------------------------
0000            681   ;         function _c51_external_startup
0000            682   ;        -----------------------------------------
0000            683   __c51_external_startup:
0000            684            using   0
0000            685   ;        EFM8_JDY40_test.c:57: SFRPAGE = 0x00;
0000 75A700     686            mov     _SFRPAGE,#0x00
0003            687   ;        EFM8_JDY40_test.c:58: WDTCN = 0xDE; //First key
0003 7597DE     688            mov     _WDTCN,#0xDE
0006            689   ;        EFM8_JDY40_test.c:59: WDTCN = 0xAD; //Second key
0006 7597AD     690            mov     _WDTCN,#0xAD
0009            691   ;        EFM8_JDY40_test.c:61: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     692            mov     _VDM0CN,#0x80
000C            693   ;        EFM8_JDY40_test.c:62: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     694            mov     _RSTSRC,#0x06
000F            695   ;        EFM8_JDY40_test.c:69: SFRPAGE = 0x10;
000F 75A710     696            mov     _SFRPAGE,#0x10
0012            697   ;        EFM8_JDY40_test.c:70: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     698            mov     _PFE0CN,#0x20
0015            699   ;        EFM8_JDY40_test.c:71: SFRPAGE = 0x00;
0015 75A700     700            mov     _SFRPAGE,#0x00
0018            701   ;        EFM8_JDY40_test.c:92: CLKSEL = 0x00;
0018 75A900     702            mov     _CLKSEL,#0x00
001B            703   ;        EFM8_JDY40_test.c:93: CLKSEL = 0x00;
001B 75A900     704            mov     _CLKSEL,#0x00
001E            705   ;        EFM8_JDY40_test.c:94: while ((CLKSEL & 0x80) == 0);
001E            706   L002001?:
001E E5A9       707            mov     a,_CLKSEL
0020 30E700     708            jnb     acc.7,L002001?
0023            709   ;        EFM8_JDY40_test.c:95: CLKSEL = 0x03;
0023 75A903     710            mov     _CLKSEL,#0x03
0026            711   ;        EFM8_JDY40_test.c:96: CLKSEL = 0x03;
0026 75A903     712            mov     _CLKSEL,#0x03
0029            713   ;        EFM8_JDY40_test.c:97: while ((CLKSEL & 0x80) == 0);
0029            714   L002004?:
0029 E5A9       715            mov     a,_CLKSEL
002B 30E780     716            jnb     acc.7,L002004?
002E            717   ;        EFM8_JDY40_test.c:102: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     718            orl     _P0MDOUT,#0x11
0031            719   ;        EFM8_JDY40_test.c:103: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     720            orl     _P2MDOUT,#0x01
0034            721   ;        EFM8_JDY40_test.c:104: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     722            mov     _XBR0,#0x01
0037            723   ;        EFM8_JDY40_test.c:105: XBR1     = 0X00;
0037 75E200     724            mov     _XBR1,#0x00
003A            725   ;        EFM8_JDY40_test.c:106: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     726            mov     _XBR2,#0x41
003D            727   ;        EFM8_JDY40_test.c:108: P3MDOUT |= 0b10000101;
003D 439C85     728            orl     _P3MDOUT,#0x85
0040            729   ;        EFM8_JDY40_test.c:109: XBR2     = 0x41; // existing line
0040 75E341     730            mov     _XBR2,#0x41
0043            731   ;        EFM8_JDY40_test.c:110: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     732            orl     _P3MDOUT,#0x85
0046            733   ;        EFM8_JDY40_test.c:116: SCON0 = 0x10;
0046 759810     734            mov     _SCON0,#0x10
0049            735   ;        EFM8_JDY40_test.c:117: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     736            mov     _TH1,#0xE6
004C            737   ;        EFM8_JDY40_test.c:118: TL1 = TH1;      // Init Timer1
004C 858D8B     738            mov     _TL1,_TH1
004F            739   ;        EFM8_JDY40_test.c:119: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     740            anl     _TMOD,#0x0F
0052            741   ;        EFM8_JDY40_test.c:120: TMOD |=  0x20;                       
0052 438920     742            orl     _TMOD,#0x20
0055            743   ;        EFM8_JDY40_test.c:121: TR1 = 1; // START Timer1
0055 D28E       744            setb    _TR1
0057            745   ;        EFM8_JDY40_test.c:122: TI = 1;  // Indicate TX0 ready
0057 D299       746            setb    _TI
0059            747   ;        EFM8_JDY40_test.c:126: SFRPAGE=0x10;
0059 75A710     748            mov     _SFRPAGE,#0x10
005C            749   ;        EFM8_JDY40_test.c:127: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     750            mov     _TMR4CN0,#0x00
005F            751   ;        EFM8_JDY40_test.c:128: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     752            orl     _CKCON1,#0x01
0062            753   ;        EFM8_JDY40_test.c:129: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     754            mov     _TMR4RL,#0xA8
0065 75A3FD     755            mov     (_TMR4RL >> 8),#0xFD
0068            756   ;        EFM8_JDY40_test.c:130: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     757            mov     _TMR4,#0xFF
006B 75A5FF     758            mov     (_TMR4 >> 8),#0xFF
006E            759   ;        EFM8_JDY40_test.c:131: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     760            orl     _EIE2,#0x04
0071            761   ;        EFM8_JDY40_test.c:132: TR4=1;
0071 D29A       762            setb    _TR4
0073            763   ;        EFM8_JDY40_test.c:133: EA=1;
0073 D2AF       764            setb    _EA
0075            765   ;        EFM8_JDY40_test.c:136: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     766            mov     _TMR2CN0,#0x00
0078            767   ;        EFM8_JDY40_test.c:137: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     768            orl     _CKCON0,#0x10
007B            769   ;        EFM8_JDY40_test.c:138: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     770            mov     _TMR2RL,#0xA8
007E 75CBFD     771            mov     (_TMR2RL >> 8),#0xFD
0081            772   ;        EFM8_JDY40_test.c:139: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     773            mov     _TMR2,#0xFF
0084 75CFFF     774            mov     (_TMR2 >> 8),#0xFF
0087            775   ;        EFM8_JDY40_test.c:140: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       776            setb    _ET2
0089            777   ;        EFM8_JDY40_test.c:141: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       778            setb    _TR2
008B            779   ;        EFM8_JDY40_test.c:142: SFRPAGE=0x00;
008B 75A700     780            mov     _SFRPAGE,#0x00
008E            781   ;        EFM8_JDY40_test.c:145: SFRPAGE=0x10;
008E 75A710     782            mov     _SFRPAGE,#0x10
0091            783   ;        EFM8_JDY40_test.c:146: TMR5CN0=0x00;
0091 75C000     784            mov     _TMR5CN0,#0x00
0094            785   ;        EFM8_JDY40_test.c:147: TMR5=0xffff;   // Set to reload immediately
0094 75D4FF     786            mov     _TMR5,#0xFF
0097 75D5FF     787            mov     (_TMR5 >> 8),#0xFF
009A            788   ;        EFM8_JDY40_test.c:148: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
009A 43F308     789            orl     _EIE2,#0x08
009D            790   ;        EFM8_JDY40_test.c:149: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
009D D2C2       791            setb    _TR5
009F            792   ;        EFM8_JDY40_test.c:151: EA=1;
009F D2AF       793            setb    _EA
00A1            794   ;        EFM8_JDY40_test.c:153: SFRPAGE=0x00;
00A1 75A700     795            mov     _SFRPAGE,#0x00
00A4            796   ;        EFM8_JDY40_test.c:156: return 0;
00A4 758200     797            mov     dpl,#0x00
00A7 22         798            ret
00A8            799   ;------------------------------------------------------------
00A8            800   ;Allocation info for local variables in function 'Timer5_ISR'
00A8            801   ;------------------------------------------------------------
00A8            802   ;------------------------------------------------------------
00A8            803   ;        EFM8_JDY40_test.c:159: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
00A8            804   ;        -----------------------------------------
00A8            805   ;         function Timer5_ISR
00A8            806   ;        -----------------------------------------
00A8            807   _Timer5_ISR:
00A8 C0E0       808            push    acc
00AA C002       809            push    ar2
00AC C003       810            push    ar3
00AE C0D0       811            push    psw
00B0 75D000     812            mov     psw,#0x00
00B3            813   ;        EFM8_JDY40_test.c:161: SFRPAGE=0x10;
00B3 75A710     814            mov     _SFRPAGE,#0x10
00B6            815   ;        EFM8_JDY40_test.c:162: TF5H = 0; // Clear Timer5 interrupt flag
00B6 C2C7       816            clr     _TF5H
00B8            817   ;        EFM8_JDY40_test.c:163: TMR5RL=(0x10000L-(SYSCLK/(12L*100000L)));
00B8 75D2C4     818            mov     _TMR5RL,#0xC4
00BB 75D3FF     819            mov     (_TMR5RL >> 8),#0xFF
00BE            820   ;        EFM8_JDY40_test.c:164: servo_counter++;
00BE 7401       821            mov     a,#0x01
00C0 25F8       822            add     a,_servo_counter
00C2 F5F8       823            mov     _servo_counter,a
00C4 E4         824            clr     a
00C5 35F9       825            addc    a,(_servo_counter + 1)
00C7 F5F9       826            mov     (_servo_counter + 1),a
00C9            827   ;        EFM8_JDY40_test.c:165: if(servo_counter==2000)
00C9 74D0       828            mov     a,#0xD0
00CB B5F840     829            cjne    a,_servo_counter,L003002?
00CE 7407       830            mov     a,#0x07
00D0 B5F940     831            cjne    a,(_servo_counter + 1),L003002?
00D3            832   ;        EFM8_JDY40_test.c:167: servo_counter=0;
00D3 E4         833            clr     a
00D4 F5F8       834            mov     _servo_counter,a
00D6 F5F9       835            mov     (_servo_counter + 1),a
00D8            836   L003002?:
00D8            837   ;        EFM8_JDY40_test.c:169: if(servo1>=servo_counter)
00D8 AAB8       838            mov     r2,_servo1
00DA 7B00       839            mov     r3,#0x00
00DC C3         840            clr     c
00DD EA         841            mov     a,r2
00DE 95F8       842            subb    a,_servo_counter
00E0 EB         843            mov     a,r3
00E1 95F9       844            subb    a,(_servo_counter + 1)
00E3 4000       845            jc      L003004?
00E5            846   ;        EFM8_JDY40_test.c:171: SERVO1=1;
00E5 D293       847            setb    _P1_3
00E7 8000       848            sjmp    L003005?
00E9            849   L003004?:
00E9            850   ;        EFM8_JDY40_test.c:175: SERVO1=0;
00E9 C293       851            clr     _P1_3
00EB            852   L003005?:
00EB            853   ;        EFM8_JDY40_test.c:177: if(servo2>=servo_counter)
00EB AA78       854            mov     r2,_servo2
00ED 7B00       855            mov     r3,#0x00
00EF C3         856            clr     c
00F0 EA         857            mov     a,r2
00F1 95F8       858            subb    a,_servo_counter
00F3 EB         859            mov     a,r3
00F4 95F9       860            subb    a,(_servo_counter + 1)
00F6 4000       861            jc      L003007?
00F8            862   ;        EFM8_JDY40_test.c:179: SERVO2=1;
00F8 D294       863            setb    _P1_4
00FA 8000       864            sjmp    L003009?
00FC            865   L003007?:
00FC            866   ;        EFM8_JDY40_test.c:183: SERVO2=0;
00FC C294       867            clr     _P1_4
00FE            868   L003009?:
00FE D0D0       869            pop     psw
0100 D003       870            pop     ar3
0102 D002       871            pop     ar2
0104 D0E0       872            pop     acc
0106 32         873            reti
0107            874   ;        eliminated unneeded push/pop dpl
0107            875   ;        eliminated unneeded push/pop dph
0107            876   ;        eliminated unneeded push/pop b
0107            877   ;------------------------------------------------------------
0107            878   ;Allocation info for local variables in function 'Timer3us'
0107            879   ;------------------------------------------------------------
0107            880   ;us                        Allocated to registers r2 
0107            881   ;i                         Allocated to registers r3 
0107            882   ;------------------------------------------------------------
0107            883   ;        EFM8_JDY40_test.c:188: void Timer3us(unsigned char us)
0107            884   ;        -----------------------------------------
0107            885   ;         function Timer3us
0107            886   ;        -----------------------------------------
0107            887   _Timer3us:
0107 AA82       888            mov     r2,dpl
0109            889   ;        EFM8_JDY40_test.c:193: CKCON0|=0b_0100_0000;
0109 438E40     890            orl     _CKCON0,#0x40
010C            891   ;        EFM8_JDY40_test.c:195: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
010C 7592B8     892            mov     _TMR3RL,#0xB8
010F 7593FF     893            mov     (_TMR3RL >> 8),#0xFF
0112            894   ;        EFM8_JDY40_test.c:196: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0112 859294     895            mov     _TMR3,_TMR3RL
0115 859395     896            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0118            897   ;        EFM8_JDY40_test.c:198: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0118 759104     898            mov     _TMR3CN0,#0x04
011B            899   ;        EFM8_JDY40_test.c:199: for (i = 0; i < us; i++)       // Count <us> overflows
011B 7B00       900            mov     r3,#0x00
011D            901   L004004?:
011D C3         902            clr     c
011E EB         903            mov     a,r3
011F 9A         904            subb    a,r2
0120 5000       905            jnc     L004007?
0122            906   ;        EFM8_JDY40_test.c:201: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0122            907   L004001?:
0122 E591       908            mov     a,_TMR3CN0
0124 30E700     909            jnb     acc.7,L004001?
0127            910   ;        EFM8_JDY40_test.c:202: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0127 53917F     911            anl     _TMR3CN0,#0x7F
012A            912   ;        EFM8_JDY40_test.c:199: for (i = 0; i < us; i++)       // Count <us> overflows
012A 0B         913            inc     r3
012B 8000       914            sjmp    L004004?
012D            915   L004007?:
012D            916   ;        EFM8_JDY40_test.c:204: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
012D 759100     917            mov     _TMR3CN0,#0x00
0130 22         918            ret
0131            919   ;------------------------------------------------------------
0131            920   ;Allocation info for local variables in function 'waitms'
0131            921   ;------------------------------------------------------------
0131            922   ;ms                        Allocated to registers r2 r3 
0131            923   ;j                         Allocated to registers r4 r5 
0131            924   ;k                         Allocated to registers r6 
0131            925   ;------------------------------------------------------------
0131            926   ;        EFM8_JDY40_test.c:208: void waitms (unsigned int ms)
0131            927   ;        -----------------------------------------
0131            928   ;         function waitms
0131            929   ;        -----------------------------------------
0131            930   _waitms:
0131 AA82       931            mov     r2,dpl
0133 AB83       932            mov     r3,dph
0135            933   ;        EFM8_JDY40_test.c:212: for(j=0; j<ms; j++)
0135 7C00       934            mov     r4,#0x00
0137 7D00       935            mov     r5,#0x00
0139            936   L005005?:
0139 C3         937            clr     c
013A EC         938            mov     a,r4
013B 9A         939            subb    a,r2
013C ED         940            mov     a,r5
013D 9B         941            subb    a,r3
013E 5000       942            jnc     L005009?
0140            943   ;        EFM8_JDY40_test.c:213: for (k=0; k<4; k++) Timer3us(250);
0140 7E00       944            mov     r6,#0x00
0142            945   L005001?:
0142 BE0440     946            cjne    r6,#0x04,L005018?
0145            947   L005018?:
0145 5000       948            jnc     L005007?
0147 7582FA     949            mov     dpl,#0xFA
014A C002       950            push    ar2
014C C003       951            push    ar3
014E C004       952            push    ar4
0150 C005       953            push    ar5
0152 C006       954            push    ar6
0154 120000     955            lcall   _Timer3us
0157 D006       956            pop     ar6
0159 D005       957            pop     ar5
015B D004       958            pop     ar4
015D D003       959            pop     ar3
015F D002       960            pop     ar2
0161 0E         961            inc     r6
0162 8000       962            sjmp    L005001?
0164            963   L005007?:
0164            964   ;        EFM8_JDY40_test.c:212: for(j=0; j<ms; j++)
0164 0C         965            inc     r4
0165 BC0080     966            cjne    r4,#0x00,L005005?
0168 0D         967            inc     r5
0169 8000       968            sjmp    L005005?
016B            969   L005009?:
016B 22         970            ret
016C            971   ;------------------------------------------------------------
016C            972   ;Allocation info for local variables in function 'UART1_Init'
016C            973   ;------------------------------------------------------------
016C            974   ;baudrate                  Allocated to registers r2 r3 r4 r5 
016C            975   ;------------------------------------------------------------
016C            976   ;        EFM8_JDY40_test.c:216: void UART1_Init (unsigned long baudrate)
016C            977   ;        -----------------------------------------
016C            978   ;         function UART1_Init
016C            979   ;        -----------------------------------------
016C            980   _UART1_Init:
016C AA82       981            mov     r2,dpl
016E AB83       982            mov     r3,dph
0170 ACF0       983            mov     r4,b
0172 FD         984            mov     r5,a
0173            985   ;        EFM8_JDY40_test.c:218: SFRPAGE = 0x20;
0173 75A720     986            mov     _SFRPAGE,#0x20
0176            987   ;        EFM8_JDY40_test.c:219: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0176 75930C     988            mov     _SMOD1,#0x0C
0179            989   ;        EFM8_JDY40_test.c:220: SCON1 = 0x10;
0179 75C810     990            mov     _SCON1,#0x10
017C            991   ;        EFM8_JDY40_test.c:221: SBCON1 =0x00;   // disable baud rate generator
017C 759400     992            mov     _SBCON1,#0x00
017F            993   ;        EFM8_JDY40_test.c:222: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
017F 8A00       994            mov     __divulong_PARM_2,r2
0181 8B01       995            mov     (__divulong_PARM_2 + 1),r3
0183 8C02       996            mov     (__divulong_PARM_2 + 2),r4
0185 8D03       997            mov     (__divulong_PARM_2 + 3),r5
0187 90A200     998            mov     dptr,#0xA200
018A 75F04A     999            mov     b,#0x4A
018D 7404      1000            mov     a,#0x04
018F 120000    1001            lcall   __divulong
0192 AA82      1002            mov     r2,dpl
0194 AB83      1003            mov     r3,dph
0196 ACF0      1004            mov     r4,b
0198 FD        1005            mov     r5,a
0199 750018    1006            mov     __divulong_PARM_2,#0x18
019C E4        1007            clr     a
019D F501      1008            mov     (__divulong_PARM_2 + 1),a
019F F502      1009            mov     (__divulong_PARM_2 + 2),a
01A1 F503      1010            mov     (__divulong_PARM_2 + 3),a
01A3 8A82      1011            mov     dpl,r2
01A5 8B83      1012            mov     dph,r3
01A7 8CF0      1013            mov     b,r4
01A9 ED        1014            mov     a,r5
01AA 120000    1015            lcall   __divulong
01AD AA82      1016            mov     r2,dpl
01AF AB83      1017            mov     r3,dph
01B1 ACF0      1018            mov     r4,b
01B3 FD        1019            mov     r5,a
01B4 E4        1020            clr     a
01B5 C3        1021            clr     c
01B6 9A        1022            subb    a,r2
01B7 FA        1023            mov     r2,a
01B8 E4        1024            clr     a
01B9 9B        1025            subb    a,r3
01BA FB        1026            mov     r3,a
01BB 7401      1027            mov     a,#0x01
01BD 9C        1028            subb    a,r4
01BE E4        1029            clr     a
01BF 9D        1030            subb    a,r5
01C0 8A95      1031            mov     _SBRL1,r2
01C2 8B96      1032            mov     (_SBRL1 >> 8),r3
01C4           1033   ;        EFM8_JDY40_test.c:223: TI1 = 1; // indicate ready for TX
01C4 D2C9      1034            setb    _TI1
01C6           1035   ;        EFM8_JDY40_test.c:224: SBCON1 |= 0x40;   // enable baud rate generator
01C6 439440    1036            orl     _SBCON1,#0x40
01C9           1037   ;        EFM8_JDY40_test.c:225: SFRPAGE = 0x00;
01C9 75A700    1038            mov     _SFRPAGE,#0x00
01CC 22        1039            ret
01CD           1040   ;------------------------------------------------------------
01CD           1041   ;Allocation info for local variables in function 'putchar1'
01CD           1042   ;------------------------------------------------------------
01CD           1043   ;c                         Allocated to registers r2 
01CD           1044   ;------------------------------------------------------------
01CD           1045   ;        EFM8_JDY40_test.c:228: void putchar1 (char c) 
01CD           1046   ;        -----------------------------------------
01CD           1047   ;         function putchar1
01CD           1048   ;        -----------------------------------------
01CD           1049   _putchar1:
01CD AA82      1050            mov     r2,dpl
01CF           1051   ;        EFM8_JDY40_test.c:230: SFRPAGE = 0x20;
01CF 75A720    1052            mov     _SFRPAGE,#0x20
01D2           1053   ;        EFM8_JDY40_test.c:231: while (!TI1);
01D2           1054   L007001?:
01D2           1055   ;        EFM8_JDY40_test.c:232: TI1=0;
01D2 10C9D0    1056            jbc     _TI1,L007008?
01D5 8000      1057            sjmp    L007001?
01D7           1058   L007008?:
01D7           1059   ;        EFM8_JDY40_test.c:233: SBUF1 = c;
01D7 8A92      1060            mov     _SBUF1,r2
01D9           1061   ;        EFM8_JDY40_test.c:234: SFRPAGE = 0x00;
01D9 75A700    1062            mov     _SFRPAGE,#0x00
01DC 22        1063            ret
01DD           1064   ;------------------------------------------------------------
01DD           1065   ;Allocation info for local variables in function 'sendstr1'
01DD           1066   ;------------------------------------------------------------
01DD           1067   ;s                         Allocated to registers r2 r3 r4 
01DD           1068   ;------------------------------------------------------------
01DD           1069   ;        EFM8_JDY40_test.c:237: void sendstr1 (char * s)
01DD           1070   ;        -----------------------------------------
01DD           1071   ;         function sendstr1
01DD           1072   ;        -----------------------------------------
01DD           1073   _sendstr1:
01DD AA82      1074            mov     r2,dpl
01DF AB83      1075            mov     r3,dph
01E1 ACF0      1076            mov     r4,b
01E3           1077   ;        EFM8_JDY40_test.c:239: while(*s)
01E3           1078   L008001?:
01E3 8A82      1079            mov     dpl,r2
01E5 8B83      1080            mov     dph,r3
01E7 8CF0      1081            mov     b,r4
01E9 120000    1082            lcall   __gptrget
01EC FD        1083            mov     r5,a
01ED 6000      1084            jz      L008004?
01EF           1085   ;        EFM8_JDY40_test.c:241: putchar1(*s);
01EF 8D82      1086            mov     dpl,r5
01F1 C002      1087            push    ar2
01F3 C003      1088            push    ar3
01F5 C004      1089            push    ar4
01F7 120000    1090            lcall   _putchar1
01FA D004      1091            pop     ar4
01FC D003      1092            pop     ar3
01FE D002      1093            pop     ar2
0200           1094   ;        EFM8_JDY40_test.c:242: s++;     
0200 0A        1095            inc     r2
0201 BA0010    1096            cjne    r2,#0x00,L008001?
0204 0B        1097            inc     r3
0205 8000      1098            sjmp    L008001?
0207           1099   L008004?:
0207 22        1100            ret
0208           1101   ;------------------------------------------------------------
0208           1102   ;Allocation info for local variables in function 'getchar1'
0208           1103   ;------------------------------------------------------------
0208           1104   ;c                         Allocated to registers 
0208           1105   ;------------------------------------------------------------
0208           1106   ;        EFM8_JDY40_test.c:246: char getchar1 (void)
0208           1107   ;        -----------------------------------------
0208           1108   ;         function getchar1
0208           1109   ;        -----------------------------------------
0208           1110   _getchar1:
0208           1111   ;        EFM8_JDY40_test.c:249: SFRPAGE = 0x20;
0208 75A720    1112            mov     _SFRPAGE,#0x20
020B           1113   ;        EFM8_JDY40_test.c:250: while (!RI1);
020B           1114   L009001?:
020B           1115   ;        EFM8_JDY40_test.c:251: RI1=0;
020B 10C810    1116            jbc     _RI1,L009008?
020E 8000      1117            sjmp    L009001?
0210           1118   L009008?:
0210           1119   ;        EFM8_JDY40_test.c:253: SCON1&=0b_0011_1111;
0210 53C83F    1120            anl     _SCON1,#0x3F
0213           1121   ;        EFM8_JDY40_test.c:254: c = SBUF1;
0213 859282    1122            mov     dpl,_SBUF1
0216           1123   ;        EFM8_JDY40_test.c:255: SFRPAGE = 0x00;
0216 75A700    1124            mov     _SFRPAGE,#0x00
0219           1125   ;        EFM8_JDY40_test.c:256: return (c);
0219 22        1126            ret
021A           1127   ;------------------------------------------------------------
021A           1128   ;Allocation info for local variables in function 'getchar1_with_timeout'
021A           1129   ;------------------------------------------------------------
021A           1130   ;c                         Allocated to registers 
021A           1131   ;timeout                   Allocated to registers r2 r3 
021A           1132   ;------------------------------------------------------------
021A           1133   ;        EFM8_JDY40_test.c:259: char getchar1_with_timeout (void)
021A           1134   ;        -----------------------------------------
021A           1135   ;         function getchar1_with_timeout
021A           1136   ;        -----------------------------------------
021A           1137   _getchar1_with_timeout:
021A           1138   ;        EFM8_JDY40_test.c:263: SFRPAGE = 0x20;
021A 75A720    1139            mov     _SFRPAGE,#0x20
021D           1140   ;        EFM8_JDY40_test.c:265: while (!RI1)
021D 7A00      1141            mov     r2,#0x00
021F 7B00      1142            mov     r3,#0x00
0221           1143   L010003?:
0221 20C890    1144            jb      _RI1,L010005?
0224           1145   ;        EFM8_JDY40_test.c:267: SFRPAGE = 0x00;
0224 75A700    1146            mov     _SFRPAGE,#0x00
0227           1147   ;        EFM8_JDY40_test.c:268: Timer3us(20);
0227 758214    1148            mov     dpl,#0x14
022A C002      1149            push    ar2
022C C003      1150            push    ar3
022E 120000    1151            lcall   _Timer3us
0231 D003      1152            pop     ar3
0233 D002      1153            pop     ar2
0235           1154   ;        EFM8_JDY40_test.c:269: SFRPAGE = 0x20;
0235 75A720    1155            mov     _SFRPAGE,#0x20
0238           1156   ;        EFM8_JDY40_test.c:270: timeout++;
0238 0A        1157            inc     r2
0239 BA00D0    1158            cjne    r2,#0x00,L010012?
023C 0B        1159            inc     r3
023D           1160   L010012?:
023D           1161   ;        EFM8_JDY40_test.c:271: if(timeout==25000)
023D BAA850    1162            cjne    r2,#0xA8,L010003?
0240 BB6150    1163            cjne    r3,#0x61,L010003?
0243           1164   ;        EFM8_JDY40_test.c:273: SFRPAGE = 0x00;
0243 75A700    1165            mov     _SFRPAGE,#0x00
0246           1166   ;        EFM8_JDY40_test.c:274: return ('\n'); // Timeout after half second
0246 75820A    1167            mov     dpl,#0x0A
0249 22        1168            ret
024A           1169   L010005?:
024A           1170   ;        EFM8_JDY40_test.c:277: RI1=0;
024A C2C8      1171            clr     _RI1
024C           1172   ;        EFM8_JDY40_test.c:279: SCON1&=0b_0011_1111;
024C 53C83F    1173            anl     _SCON1,#0x3F
024F           1174   ;        EFM8_JDY40_test.c:280: c = SBUF1;
024F 859282    1175            mov     dpl,_SBUF1
0252           1176   ;        EFM8_JDY40_test.c:281: SFRPAGE = 0x00;
0252 75A700    1177            mov     _SFRPAGE,#0x00
0255           1178   ;        EFM8_JDY40_test.c:282: return (c);
0255 22        1179            ret
0256           1180   ;------------------------------------------------------------
0256           1181   ;Allocation info for local variables in function 'getstr1'
0256           1182   ;------------------------------------------------------------
0256           1183   ;n                         Allocated with name '_getstr1_PARM_2'
0256           1184   ;s                         Allocated to registers r2 r3 r4 
0256           1185   ;c                         Allocated to registers r1 
0256           1186   ;cnt                       Allocated to registers r5 
0256           1187   ;------------------------------------------------------------
0256           1188   ;        EFM8_JDY40_test.c:285: void getstr1 (char * s, unsigned char n)
0256           1189   ;        -----------------------------------------
0256           1190   ;         function getstr1
0256           1191   ;        -----------------------------------------
0256           1192   _getstr1:
0256 AA82      1193            mov     r2,dpl
0258 AB83      1194            mov     r3,dph
025A ACF0      1195            mov     r4,b
025C           1196   ;        EFM8_JDY40_test.c:291: while(1)
025C 7D00      1197            mov     r5,#0x00
025E 8A06      1198            mov     ar6,r2
0260 8B07      1199            mov     ar7,r3
0262 8C00      1200            mov     ar0,r4
0264           1201   L011007?:
0264           1202   ;        EFM8_JDY40_test.c:293: c=getchar1_with_timeout();
0264 C002      1203            push    ar2
0266 C003      1204            push    ar3
0268 C004      1205            push    ar4
026A C005      1206            push    ar5
026C C006      1207            push    ar6
026E C007      1208            push    ar7
0270 C000      1209            push    ar0
0272 120000    1210            lcall   _getchar1_with_timeout
0275 A982      1211            mov     r1,dpl
0277 D000      1212            pop     ar0
0279 D007      1213            pop     ar7
027B D006      1214            pop     ar6
027D D005      1215            pop     ar5
027F D004      1216            pop     ar4
0281 D003      1217            pop     ar3
0283 D002      1218            pop     ar2
0285           1219   ;        EFM8_JDY40_test.c:294: if(c=='\n')
0285 B90A50    1220            cjne    r1,#0x0A,L011002?
0288           1221   ;        EFM8_JDY40_test.c:296: *s=0;
0288 8A82      1222            mov     dpl,r2
028A 8B83      1223            mov     dph,r3
028C 8CF0      1224            mov     b,r4
028E E4        1225            clr     a
028F           1226   ;        EFM8_JDY40_test.c:297: return;
028F 020000    1227            ljmp    __gptrput
0292           1228   L011002?:
0292           1229   ;        EFM8_JDY40_test.c:300: if (cnt<n)
0292 C3        1230            clr     c
0293 ED        1231            mov     a,r5
0294 95F8      1232            subb    a,_getstr1_PARM_2
0296 5000      1233            jnc     L011004?
0298           1234   ;        EFM8_JDY40_test.c:302: cnt++;
0298 0D        1235            inc     r5
0299           1236   ;        EFM8_JDY40_test.c:303: *s=c;
0299 8E82      1237            mov     dpl,r6
029B 8F83      1238            mov     dph,r7
029D 88F0      1239            mov     b,r0
029F E9        1240            mov     a,r1
02A0 120000    1241            lcall   __gptrput
02A3 A3        1242            inc     dptr
02A4 AE82      1243            mov     r6,dpl
02A6 AF83      1244            mov     r7,dph
02A8           1245   ;        EFM8_JDY40_test.c:304: s++;
02A8 8E02      1246            mov     ar2,r6
02AA 8F03      1247            mov     ar3,r7
02AC 8804      1248            mov     ar4,r0
02AE 8000      1249            sjmp    L011007?
02B0           1250   L011004?:
02B0           1251   ;        EFM8_JDY40_test.c:308: *s=0;
02B0 8A82      1252            mov     dpl,r2
02B2 8B83      1253            mov     dph,r3
02B4 8CF0      1254            mov     b,r4
02B6 E4        1255            clr     a
02B7           1256   ;        EFM8_JDY40_test.c:309: return;
02B7 020000    1257            ljmp    __gptrput
02BA           1258   ;------------------------------------------------------------
02BA           1259   ;Allocation info for local variables in function 'RXU1'
02BA           1260   ;------------------------------------------------------------
02BA           1261   ;------------------------------------------------------------
02BA           1262   ;        EFM8_JDY40_test.c:315: bit RXU1 (void)
02BA           1263   ;        -----------------------------------------
02BA           1264   ;         function RXU1
02BA           1265   ;        -----------------------------------------
02BA           1266   _RXU1:
02BA           1267   ;        EFM8_JDY40_test.c:318: SFRPAGE = 0x20;
02BA 75A720    1268            mov     _SFRPAGE,#0x20
02BD           1269   ;        EFM8_JDY40_test.c:319: mybit=RI1;
02BD A2C8      1270            mov     c,_RI1
02BF           1271   ;        EFM8_JDY40_test.c:320: SFRPAGE = 0x00;
02BF 75A700    1272            mov     _SFRPAGE,#0x00
02C2           1273   ;        EFM8_JDY40_test.c:321: return mybit;
02C2 22        1274            ret
02C3           1275   ;------------------------------------------------------------
02C3           1276   ;Allocation info for local variables in function 'waitms_or_RI1'
02C3           1277   ;------------------------------------------------------------
02C3           1278   ;ms                        Allocated to registers r2 r3 
02C3           1279   ;j                         Allocated to registers r4 r5 
02C3           1280   ;k                         Allocated to registers r6 
02C3           1281   ;------------------------------------------------------------
02C3           1282   ;        EFM8_JDY40_test.c:324: void waitms_or_RI1 (unsigned int ms)
02C3           1283   ;        -----------------------------------------
02C3           1284   ;         function waitms_or_RI1
02C3           1285   ;        -----------------------------------------
02C3           1286   _waitms_or_RI1:
02C3 AA82      1287            mov     r2,dpl
02C5 AB83      1288            mov     r3,dph
02C7           1289   ;        EFM8_JDY40_test.c:328: for(j=0; j<ms; j++)
02C7 7C00      1290            mov     r4,#0x00
02C9 7D00      1291            mov     r5,#0x00
02CB           1292   L013007?:
02CB C3        1293            clr     c
02CC EC        1294            mov     a,r4
02CD 9A        1295            subb    a,r2
02CE ED        1296            mov     a,r5
02CF 9B        1297            subb    a,r3
02D0 5000      1298            jnc     L013011?
02D2           1299   ;        EFM8_JDY40_test.c:330: for (k=0; k<4; k++)
02D2 7E00      1300            mov     r6,#0x00
02D4           1301   L013003?:
02D4 BE04D0    1302            cjne    r6,#0x04,L013019?
02D7           1303   L013019?:
02D7 5000      1304            jnc     L013009?
02D9           1305   ;        EFM8_JDY40_test.c:332: if(RXU1()) return;
02D9 C002      1306            push    ar2
02DB C003      1307            push    ar3
02DD C004      1308            push    ar4
02DF C005      1309            push    ar5
02E1 C006      1310            push    ar6
02E3 120000    1311            lcall   _RXU1
02E6 E4        1312            clr     a
02E7 33        1313            rlc     a
02E8 D006      1314            pop     ar6
02EA D005      1315            pop     ar5
02EC D004      1316            pop     ar4
02EE D003      1317            pop     ar3
02F0 D002      1318            pop     ar2
02F2 6000      1319            jz      L013002?
02F4 22        1320            ret
02F5           1321   L013002?:
02F5           1322   ;        EFM8_JDY40_test.c:333: Timer3us(250);
02F5 7582FA    1323            mov     dpl,#0xFA
02F8 C002      1324            push    ar2
02FA C003      1325            push    ar3
02FC C004      1326            push    ar4
02FE C005      1327            push    ar5
0300 C006      1328            push    ar6
0302 120000    1329            lcall   _Timer3us
0305 D006      1330            pop     ar6
0307 D005      1331            pop     ar5
0309 D004      1332            pop     ar4
030B D003      1333            pop     ar3
030D D002      1334            pop     ar2
030F           1335   ;        EFM8_JDY40_test.c:330: for (k=0; k<4; k++)
030F 0E        1336            inc     r6
0310 8000      1337            sjmp    L013003?
0312           1338   L013009?:
0312           1339   ;        EFM8_JDY40_test.c:328: for(j=0; j<ms; j++)
0312 0C        1340            inc     r4
0313 BC0010    1341            cjne    r4,#0x00,L013007?
0316 0D        1342            inc     r5
0317 8000      1343            sjmp    L013007?
0319           1344   L013011?:
0319 22        1345            ret
031A           1346   ;------------------------------------------------------------
031A           1347   ;Allocation info for local variables in function 'SendATCommand'
031A           1348   ;------------------------------------------------------------
031A           1349   ;s                         Allocated to registers r2 r3 r4 
031A           1350   ;------------------------------------------------------------
031A           1351   ;        EFM8_JDY40_test.c:338: void SendATCommand (char * s)
031A           1352   ;        -----------------------------------------
031A           1353   ;         function SendATCommand
031A           1354   ;        -----------------------------------------
031A           1355   _SendATCommand:
031A AA82      1356            mov     r2,dpl
031C AB83      1357            mov     r3,dph
031E ACF0      1358            mov     r4,b
0320           1359   ;        EFM8_JDY40_test.c:340: printf("Command: %s", s);
0320 C002      1360            push    ar2
0322 C003      1361            push    ar3
0324 C004      1362            push    ar4
0326 C002      1363            push    ar2
0328 C003      1364            push    ar3
032A C004      1365            push    ar4
032C 7490      1366            mov     a,#__str_0
032E C0E0      1367            push    acc
0330 74C9      1368            mov     a,#(__str_0 >> 8)
0332 C0E0      1369            push    acc
0334 7480      1370            mov     a,#0x80
0336 C0E0      1371            push    acc
0338 120000    1372            lcall   _printf
033B E581      1373            mov     a,sp
033D 24FA      1374            add     a,#0xfa
033F F581      1375            mov     sp,a
0341           1376   ;        EFM8_JDY40_test.c:341: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0341 C2A0      1377            clr     _P2_0
0343           1378   ;        EFM8_JDY40_test.c:342: waitms(5);
0343 900005    1379            mov     dptr,#0x0005
0346 120000    1380            lcall   _waitms
0349 D004      1381            pop     ar4
034B D003      1382            pop     ar3
034D D002      1383            pop     ar2
034F           1384   ;        EFM8_JDY40_test.c:343: sendstr1(s);
034F 8A82      1385            mov     dpl,r2
0351 8B83      1386            mov     dph,r3
0353 8CF0      1387            mov     b,r4
0355 120000    1388            lcall   _sendstr1
0358           1389   ;        EFM8_JDY40_test.c:344: getstr1(buff, sizeof(buff)-1);
0358 75F813    1390            mov     _getstr1_PARM_2,#0x13
035B 901950    1391            mov     dptr,#_buff
035E 75F040    1392            mov     b,#0x40
0361 120000    1393            lcall   _getstr1
0364           1394   ;        EFM8_JDY40_test.c:345: waitms(10);
0364 90000A    1395            mov     dptr,#0x000A
0367 120000    1396            lcall   _waitms
036A           1397   ;        EFM8_JDY40_test.c:346: P2_0=1; // 'set' pin to 1 is normal operation mode.
036A D2A0      1398            setb    _P2_0
036C           1399   ;        EFM8_JDY40_test.c:347: printf("Response: %s\r\n", buff);
036C 7450      1400            mov     a,#_buff
036E C0E0      1401            push    acc
0370 7419      1402            mov     a,#(_buff >> 8)
0372 C0E0      1403            push    acc
0374 7440      1404            mov     a,#0x40
0376 C0E0      1405            push    acc
0378 7450      1406            mov     a,#__str_1
037A C0E0      1407            push    acc
037C 74CA      1408            mov     a,#(__str_1 >> 8)
037E C0E0      1409            push    acc
0380 7480      1410            mov     a,#0x80
0382 C0E0      1411            push    acc
0384 120000    1412            lcall   _printf
0387 E581      1413            mov     a,sp
0389 24FA      1414            add     a,#0xfa
038B F581      1415            mov     sp,a
038D 22        1416            ret
038E           1417   ;------------------------------------------------------------
038E           1418   ;Allocation info for local variables in function 'ReceptionOff'
038E           1419   ;------------------------------------------------------------
038E           1420   ;------------------------------------------------------------
038E           1421   ;        EFM8_JDY40_test.c:350: void ReceptionOff (void)
038E           1422   ;        -----------------------------------------
038E           1423   ;         function ReceptionOff
038E           1424   ;        -----------------------------------------
038E           1425   _ReceptionOff:
038E           1426   ;        EFM8_JDY40_test.c:352: P2_0=0; // 'set' pin to 0 is 'AT' mode.
038E C2A0      1427            clr     _P2_0
0390           1428   ;        EFM8_JDY40_test.c:353: waitms(10);
0390 90000A    1429            mov     dptr,#0x000A
0393 120000    1430            lcall   _waitms
0396           1431   ;        EFM8_JDY40_test.c:354: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0396 90CA90    1432            mov     dptr,#__str_2
0399 75F080    1433            mov     b,#0x80
039C 120000    1434            lcall   _sendstr1
039F           1435   ;        EFM8_JDY40_test.c:355: waitms(10);
039F 90000A    1436            mov     dptr,#0x000A
03A2 120000    1437            lcall   _waitms
03A5           1438   ;        EFM8_JDY40_test.c:357: SCON1&=0b_0011_1111;
03A5 53C83F    1439            anl     _SCON1,#0x3F
03A8           1440   ;        EFM8_JDY40_test.c:358: P2_0=1; // 'set' pin to 1 is normal operation mode.
03A8 D2A0      1441            setb    _P2_0
03AA 22        1442            ret
03AB           1443   ;------------------------------------------------------------
03AB           1444   ;Allocation info for local variables in function 'TIMER0_Init'
03AB           1445   ;------------------------------------------------------------
03AB           1446   ;------------------------------------------------------------
03AB           1447   ;        EFM8_JDY40_test.c:362: void TIMER0_Init(void)
03AB           1448   ;        -----------------------------------------
03AB           1449   ;         function TIMER0_Init
03AB           1450   ;        -----------------------------------------
03AB           1451   _TIMER0_Init:
03AB           1452   ;        EFM8_JDY40_test.c:364: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
03AB 5389F0    1453            anl     _TMOD,#0xF0
03AE           1454   ;        EFM8_JDY40_test.c:365: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
03AE 438901    1455            orl     _TMOD,#0x01
03B1           1456   ;        EFM8_JDY40_test.c:366: TR0=0; // Stop Timer/Counter 0
03B1 C28C      1457            clr     _TR0
03B3 22        1458            ret
03B4           1459   ;------------------------------------------------------------
03B4           1460   ;Allocation info for local variables in function 'InitADC'
03B4           1461   ;------------------------------------------------------------
03B4           1462   ;------------------------------------------------------------
03B4           1463   ;        EFM8_JDY40_test.c:370: void InitADC (void)
03B4           1464   ;        -----------------------------------------
03B4           1465   ;         function InitADC
03B4           1466   ;        -----------------------------------------
03B4           1467   _InitADC:
03B4           1468   ;        EFM8_JDY40_test.c:372: SFRPAGE = 0x00;
03B4 75A700    1469            mov     _SFRPAGE,#0x00
03B7           1470   ;        EFM8_JDY40_test.c:373: ADEN=0; // Disable ADC
03B7 C2EF      1471            clr     _ADEN
03B9           1472   ;        EFM8_JDY40_test.c:378: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03B9 75B280    1473            mov     _ADC0CN1,#0x80
03BC           1474   ;        EFM8_JDY40_test.c:382: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03BC 75BC20    1475            mov     _ADC0CF0,#0x20
03BF           1476   ;        EFM8_JDY40_test.c:386: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03BF 75B91E    1477            mov     _ADC0CF1,#0x1E
03C2           1478   ;        EFM8_JDY40_test.c:395: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03C2 75E800    1479            mov     _ADC0CN0,#0x00
03C5           1480   ;        EFM8_JDY40_test.c:400: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03C5 75DF3F    1481            mov     _ADC0CF2,#0x3F
03C8           1482   ;        EFM8_JDY40_test.c:404: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03C8 75B300    1483            mov     _ADC0CN2,#0x00
03CB           1484   ;        EFM8_JDY40_test.c:406: ADEN=1; // Enable ADC
03CB D2EF      1485            setb    _ADEN
03CD 22        1486            ret
03CE           1487   ;------------------------------------------------------------
03CE           1488   ;Allocation info for local variables in function 'InitPinADC'
03CE           1489   ;------------------------------------------------------------
03CE           1490   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
03CE           1491   ;portno                    Allocated to registers r2 
03CE           1492   ;mask                      Allocated to registers r3 
03CE           1493   ;------------------------------------------------------------
03CE           1494   ;        EFM8_JDY40_test.c:409: void InitPinADC (unsigned char portno, unsigned char pinno)
03CE           1495   ;        -----------------------------------------
03CE           1496   ;         function InitPinADC
03CE           1497   ;        -----------------------------------------
03CE           1498   _InitPinADC:
03CE AA82      1499            mov     r2,dpl
03D0           1500   ;        EFM8_JDY40_test.c:413: mask=1<<pinno;
03D0 8560F0    1501            mov     b,_InitPinADC_PARM_2
03D3 05F0      1502            inc     b
03D5 7401      1503            mov     a,#0x01
03D7 8000      1504            sjmp    L018013?
03D9           1505   L018011?:
03D9 25E0      1506            add     a,acc
03DB           1507   L018013?:
03DB D5F010    1508            djnz    b,L018011?
03DE FB        1509            mov     r3,a
03DF           1510   ;        EFM8_JDY40_test.c:415: SFRPAGE = 0x20;
03DF 75A720    1511            mov     _SFRPAGE,#0x20
03E2           1512   ;        EFM8_JDY40_test.c:416: switch (portno)
03E2 BA0050    1513            cjne    r2,#0x00,L018014?
03E5 8000      1514            sjmp    L018001?
03E7           1515   L018014?:
03E7 BA01D0    1516            cjne    r2,#0x01,L018015?
03EA 8000      1517            sjmp    L018002?
03EC           1518   L018015?:
03EC           1519   ;        EFM8_JDY40_test.c:418: case 0:
03EC BA0250    1520            cjne    r2,#0x02,L018005?
03EF 8000      1521            sjmp    L018003?
03F1           1522   L018001?:
03F1           1523   ;        EFM8_JDY40_test.c:419: P0MDIN &= (~mask); // Set pin as analog input
03F1 EB        1524            mov     a,r3
03F2 F4        1525            cpl     a
03F3 FA        1526            mov     r2,a
03F4 52F1      1527            anl     _P0MDIN,a
03F6           1528   ;        EFM8_JDY40_test.c:420: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03F6 EB        1529            mov     a,r3
03F7 42D4      1530            orl     _P0SKIP,a
03F9           1531   ;        EFM8_JDY40_test.c:421: break;
03F9           1532   ;        EFM8_JDY40_test.c:422: case 1:
03F9 8000      1533            sjmp    L018005?
03FB           1534   L018002?:
03FB           1535   ;        EFM8_JDY40_test.c:423: P1MDIN &= (~mask); // Set pin as analog input
03FB EB        1536            mov     a,r3
03FC F4        1537            cpl     a
03FD FA        1538            mov     r2,a
03FE 52F2      1539            anl     _P1MDIN,a
0400           1540   ;        EFM8_JDY40_test.c:424: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0400 EB        1541            mov     a,r3
0401 42D5      1542            orl     _P1SKIP,a
0403           1543   ;        EFM8_JDY40_test.c:425: break;
0403           1544   ;        EFM8_JDY40_test.c:426: case 2:
0403 8000      1545            sjmp    L018005?
0405           1546   L018003?:
0405           1547   ;        EFM8_JDY40_test.c:427: P2MDIN &= (~mask); // Set pin as analog input
0405 EB        1548            mov     a,r3
0406 F4        1549            cpl     a
0407 FA        1550            mov     r2,a
0408 52F3      1551            anl     _P2MDIN,a
040A           1552   ;        EFM8_JDY40_test.c:428: P2SKIP |= mask; // Skip Crossbar decoding for this pin
040A EB        1553            mov     a,r3
040B 42CC      1554            orl     _P2SKIP,a
040D           1555   ;        EFM8_JDY40_test.c:432: }
040D           1556   L018005?:
040D           1557   ;        EFM8_JDY40_test.c:433: SFRPAGE = 0x00;
040D 75A700    1558            mov     _SFRPAGE,#0x00
0410 22        1559            ret
0411           1560   ;------------------------------------------------------------
0411           1561   ;Allocation info for local variables in function 'ADC_at_Pin'
0411           1562   ;------------------------------------------------------------
0411           1563   ;pin                       Allocated to registers 
0411           1564   ;------------------------------------------------------------
0411           1565   ;        EFM8_JDY40_test.c:436: unsigned int ADC_at_Pin(unsigned char pin)
0411           1566   ;        -----------------------------------------
0411           1567   ;         function ADC_at_Pin
0411           1568   ;        -----------------------------------------
0411           1569   _ADC_at_Pin:
0411 8582BB    1570            mov     _ADC0MX,dpl
0414           1571   ;        EFM8_JDY40_test.c:439: ADINT = 0;
0414 C2ED      1572            clr     _ADINT
0416           1573   ;        EFM8_JDY40_test.c:440: ADBUSY = 1;     // Convert voltage at the pin
0416 D2EC      1574            setb    _ADBUSY
0418           1575   ;        EFM8_JDY40_test.c:441: while (!ADINT); // Wait for conversion to complete
0418           1576   L019001?:
0418 30EDD0    1577            jnb     _ADINT,L019001?
041B           1578   ;        EFM8_JDY40_test.c:442: return (ADC0);
041B 85BD82    1579            mov     dpl,_ADC0
041E 85BE83    1580            mov     dph,(_ADC0 >> 8)
0421 22        1581            ret
0422           1582   ;------------------------------------------------------------
0422           1583   ;Allocation info for local variables in function 'Volts_at_Pin'
0422           1584   ;------------------------------------------------------------
0422           1585   ;pin                       Allocated to registers r2 
0422           1586   ;------------------------------------------------------------
0422           1587   ;        EFM8_JDY40_test.c:445: float Volts_at_Pin(unsigned char pin)
0422           1588   ;        -----------------------------------------
0422           1589   ;         function Volts_at_Pin
0422           1590   ;        -----------------------------------------
0422           1591   _Volts_at_Pin:
0422           1592   ;        EFM8_JDY40_test.c:447: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0422 120000    1593            lcall   _ADC_at_Pin
0425 120000    1594            lcall   ___uint2fs
0428 AA82      1595            mov     r2,dpl
042A AB83      1596            mov     r3,dph
042C ACF0      1597            mov     r4,b
042E FD        1598            mov     r5,a
042F C002      1599            push    ar2
0431 C003      1600            push    ar3
0433 C004      1601            push    ar4
0435 C005      1602            push    ar5
0437 906C8B    1603            mov     dptr,#0x6C8B
043A 75F053    1604            mov     b,#0x53
043D 7440      1605            mov     a,#0x40
043F 120000    1606            lcall   ___fsmul
0442 AA82      1607            mov     r2,dpl
0444 AB83      1608            mov     r3,dph
0446 ACF0      1609            mov     r4,b
0448 FD        1610            mov     r5,a
0449 E581      1611            mov     a,sp
044B 24FC      1612            add     a,#0xfc
044D F581      1613            mov     sp,a
044F E4        1614            clr     a
0450 C0E0      1615            push    acc
0452 74FC      1616            mov     a,#0xFC
0454 C0E0      1617            push    acc
0456 747F      1618            mov     a,#0x7F
0458 C0E0      1619            push    acc
045A 7446      1620            mov     a,#0x46
045C C0E0      1621            push    acc
045E 8A82      1622            mov     dpl,r2
0460 8B83      1623            mov     dph,r3
0462 8CF0      1624            mov     b,r4
0464 ED        1625            mov     a,r5
0465 120000    1626            lcall   ___fsdiv
0468 AA82      1627            mov     r2,dpl
046A AB83      1628            mov     r3,dph
046C ACF0      1629            mov     r4,b
046E FD        1630            mov     r5,a
046F E581      1631            mov     a,sp
0471 24FC      1632            add     a,#0xfc
0473 F581      1633            mov     sp,a
0475 8A82      1634            mov     dpl,r2
0477 8B83      1635            mov     dph,r3
0479 8CF0      1636            mov     b,r4
047B ED        1637            mov     a,r5
047C 22        1638            ret
047D           1639   ;------------------------------------------------------------
047D           1640   ;Allocation info for local variables in function 'Timer4_ISR'
047D           1641   ;------------------------------------------------------------
047D           1642   ;------------------------------------------------------------
047D           1643   ;        EFM8_JDY40_test.c:451: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
047D           1644   ;        -----------------------------------------
047D           1645   ;         function Timer4_ISR
047D           1646   ;        -----------------------------------------
047D           1647   _Timer4_ISR:
047D C0E0      1648            push    acc
047F C0D0      1649            push    psw
0481 75D000    1650            mov     psw,#0x00
0484           1651   ;        EFM8_JDY40_test.c:453: SFRPAGE=0x10;
0484 75A710    1652            mov     _SFRPAGE,#0x10
0487           1653   ;        EFM8_JDY40_test.c:454: TF4H = 0; 
0487 C29F      1654            clr     _TF4H
0489           1655   ;        EFM8_JDY40_test.c:456: pwm_counter4 += 256; // counting steps
0489 857878    1656            mov     _pwm_counter4,_pwm_counter4
048C 7401      1657            mov     a,#0x01
048E 2579      1658            add     a,(_pwm_counter4 + 1)
0490 F579      1659            mov     (_pwm_counter4 + 1),a
0492           1660   ;        EFM8_JDY40_test.c:457: if ( direction == 1) {
0492 7401      1661            mov     a,#0x01
0494 B578D0    1662            cjne    a,_direction,L021009?
0497 E4        1663            clr     a
0498 B579D0    1664            cjne    a,(_direction + 1),L021009?
049B 8000      1665            sjmp    L021010?
049D           1666   L021009?:
049D 8000      1667            sjmp    L021002?
049F           1668   L021010?:
049F           1669   ;        EFM8_JDY40_test.c:458: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
049F C3        1670            clr     c
04A0 E578      1671            mov     a,_pwm_counter4
04A2 9538      1672            subb    a,_pwm_duty4
04A4 E579      1673            mov     a,(_pwm_counter4 + 1)
04A6 9539      1674            subb    a,(_pwm_duty4 + 1)
04A8 92B0      1675            mov     _P3_0,c
04AA           1676   L021002?:
04AA           1677   ;        EFM8_JDY40_test.c:460: if ( direction  == 0 ) {
04AA E578      1678            mov     a,_direction
04AC 4579      1679            orl     a,(_direction + 1)
04AE 7000      1680            jnz     L021004?
04B0           1681   ;        EFM8_JDY40_test.c:461: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
04B0 C3        1682            clr     c
04B1 E578      1683            mov     a,_pwm_counter4
04B3 9538      1684            subb    a,_pwm_duty4
04B5 E579      1685            mov     a,(_pwm_counter4 + 1)
04B7 9539      1686            subb    a,(_pwm_duty4 + 1)
04B9 92A5      1687            mov     _P2_5,c
04BB           1688   L021004?:
04BB           1689   ;        EFM8_JDY40_test.c:463: if ( direction == 3 ) 
04BB E578      1690            mov     a,_direction
04BD E579      1691            mov     a,(_direction + 1)
04BF D0D0      1692            pop     psw
04C1 D0E0      1693            pop     acc
04C3 32        1694            reti
04C4           1695   ;        eliminated unneeded push/pop dpl
04C4           1696   ;        eliminated unneeded push/pop dph
04C4           1697   ;        eliminated unneeded push/pop b
04C4           1698   ;------------------------------------------------------------
04C4           1699   ;Allocation info for local variables in function 'Timer2_ISR'
04C4           1700   ;------------------------------------------------------------
04C4           1701   ;------------------------------------------------------------
04C4           1702   ;        EFM8_JDY40_test.c:468: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
04C4           1703   ;        -----------------------------------------
04C4           1704   ;         function Timer2_ISR
04C4           1705   ;        -----------------------------------------
04C4           1706   _Timer2_ISR:
04C4 C0E0      1707            push    acc
04C6 C0D0      1708            push    psw
04C8 75D000    1709            mov     psw,#0x00
04CB           1710   ;        EFM8_JDY40_test.c:470: SFRPAGE=0x0;
04CB 75A700    1711            mov     _SFRPAGE,#0x00
04CE           1712   ;        EFM8_JDY40_test.c:471: TF2H = 0; // Clear Timer2 interrupt flag
04CE C2CF      1713            clr     _TF2H
04D0           1714   ;        EFM8_JDY40_test.c:472: pwm_counter2 += 256; // counting steps
04D0 85F8F8    1715            mov     _pwm_counter2,_pwm_counter2
04D3 7401      1716            mov     a,#0x01
04D5 25F9      1717            add     a,(_pwm_counter2 + 1)
04D7 F5F9      1718            mov     (_pwm_counter2 + 1),a
04D9           1719   ;        EFM8_JDY40_test.c:473: if ( direction == 1) {
04D9 7401      1720            mov     a,#0x01
04DB B578D0    1721            cjne    a,_direction,L022009?
04DE E4        1722            clr     a
04DF B579D0    1723            cjne    a,(_direction + 1),L022009?
04E2 8000      1724            sjmp    L022010?
04E4           1725   L022009?:
04E4 8000      1726            sjmp    L022002?
04E6           1727   L022010?:
04E6           1728   ;        EFM8_JDY40_test.c:474: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
04E6 C3        1729            clr     c
04E7 E5F8      1730            mov     a,_pwm_counter2
04E9 95B8      1731            subb    a,_pwm_duty2
04EB E5F9      1732            mov     a,(_pwm_counter2 + 1)
04ED 95B9      1733            subb    a,(_pwm_duty2 + 1)
04EF 92B2      1734            mov     _P3_2,c
04F1           1735   L022002?:
04F1           1736   ;        EFM8_JDY40_test.c:476: if (direction == 0 ){
04F1 E578      1737            mov     a,_direction
04F3 4579      1738            orl     a,(_direction + 1)
04F5 7000      1739            jnz     L022004?
04F7           1740   ;        EFM8_JDY40_test.c:477: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
04F7 C3        1741            clr     c
04F8 E5F8      1742            mov     a,_pwm_counter2
04FA 95B8      1743            subb    a,_pwm_duty2
04FC E5F9      1744            mov     a,(_pwm_counter2 + 1)
04FE 95B9      1745            subb    a,(_pwm_duty2 + 1)
0500 92B7      1746            mov     _P3_7,c
0502           1747   L022004?:
0502           1748   ;        EFM8_JDY40_test.c:479: if ( direction == 3 ) 
0502 E578      1749            mov     a,_direction
0504 E579      1750            mov     a,(_direction + 1)
0506 D0D0      1751            pop     psw
0508 D0E0      1752            pop     acc
050A 32        1753            reti
050B           1754   ;        eliminated unneeded push/pop dpl
050B           1755   ;        eliminated unneeded push/pop dph
050B           1756   ;        eliminated unneeded push/pop b
050B           1757   ;------------------------------------------------------------
050B           1758   ;Allocation info for local variables in function 'GetPeriod'
050B           1759   ;------------------------------------------------------------
050B           1760   ;n                         Allocated to registers r2 r3 
050B           1761   ;overflow_count            Allocated to registers r4 r5 
050B           1762   ;i                         Allocated to registers r6 
050B           1763   ;------------------------------------------------------------
050B           1764   ;        EFM8_JDY40_test.c:486: unsigned long GetPeriod (int n)
050B           1765   ;        -----------------------------------------
050B           1766   ;         function GetPeriod
050B           1767   ;        -----------------------------------------
050B           1768   _GetPeriod:
050B AA82      1769            mov     r2,dpl
050D AB83      1770            mov     r3,dph
050F           1771   ;        EFM8_JDY40_test.c:491: TR0=0; // Stop Timer/Counter 0
050F C28C      1772            clr     _TR0
0511           1773   ;        EFM8_JDY40_test.c:492: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0511 5389F0    1774            anl     _TMOD,#0xF0
0514           1775   ;        EFM8_JDY40_test.c:493: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0514 438901    1776            orl     _TMOD,#0x01
0517           1777   ;        EFM8_JDY40_test.c:496: TR0=0;
0517 C28C      1778            clr     _TR0
0519           1779   ;        EFM8_JDY40_test.c:497: TL0=0; TH0=0; TF0=0; overflow_count=0;
0519 758A00    1780            mov     _TL0,#0x00
051C 758C00    1781            mov     _TH0,#0x00
051F C28D      1782            clr     _TF0
0521           1783   ;        EFM8_JDY40_test.c:498: TR0=1;
0521 D28C      1784            setb    _TR0
0523           1785   ;        EFM8_JDY40_test.c:501: TR0=0;
0523 C28C      1786            clr     _TR0
0525           1787   ;        EFM8_JDY40_test.c:502: TL0=0; TH0=0; TF0=0; overflow_count=0;
0525 758A00    1788            mov     _TL0,#0x00
0528 758C00    1789            mov     _TH0,#0x00
052B C28D      1790            clr     _TF0
052D           1791   ;        EFM8_JDY40_test.c:503: TR0=1;
052D D28C      1792            setb    _TR0
052F           1793   ;        EFM8_JDY40_test.c:504: while(PERIOD_PIN!=0) // Wait for the signal to be zero
052F 7C00      1794            mov     r4,#0x00
0531 7D00      1795            mov     r5,#0x00
0533           1796   L023005?:
0533 308610    1797            jnb     _P0_6,L023007?
0536           1798   ;        EFM8_JDY40_test.c:506: if(TF0==1) // Did the 16-bit timer overflow?
0536           1799   ;        EFM8_JDY40_test.c:508: TF0=0;
0536 108D50    1800            jbc     _TF0,L023050?
0539 8000      1801            sjmp    L023005?
053B           1802   L023050?:
053B           1803   ;        EFM8_JDY40_test.c:509: overflow_count++;
053B 0C        1804            inc     r4
053C BC0090    1805            cjne    r4,#0x00,L023051?
053F 0D        1806            inc     r5
0540           1807   L023051?:
0540           1808   ;        EFM8_JDY40_test.c:510: if(overflow_count==10) // If it overflows too many times assume no signal is present
0540 BC0AD0    1809            cjne    r4,#0x0A,L023005?
0543 BD00D0    1810            cjne    r5,#0x00,L023005?
0546           1811   ;        EFM8_JDY40_test.c:512: TR0=0;
0546 C28C      1812            clr     _TR0
0548           1813   ;        EFM8_JDY40_test.c:513: return 0; // No signal
0548 900000    1814            mov     dptr,#(0x00&0x00ff)
054B E4        1815            clr     a
054C F5F0      1816            mov     b,a
054E 22        1817            ret
054F           1818   L023007?:
054F           1819   ;        EFM8_JDY40_test.c:519: TR0=0;
054F C28C      1820            clr     _TR0
0551           1821   ;        EFM8_JDY40_test.c:520: TL0=0; TH0=0; TF0=0; overflow_count=0;
0551 758A00    1822            mov     _TL0,#0x00
0554 758C00    1823            mov     _TH0,#0x00
0557 C28D      1824            clr     _TF0
0559           1825   ;        EFM8_JDY40_test.c:521: TR0=1;
0559 D28C      1826            setb    _TR0
055B           1827   ;        EFM8_JDY40_test.c:522: while(PERIOD_PIN!=1) // Wait for the signal to be one
055B 7C00      1828            mov     r4,#0x00
055D 7D00      1829            mov     r5,#0x00
055F           1830   L023012?:
055F 208610    1831            jb      _P0_6,L023014?
0562           1832   ;        EFM8_JDY40_test.c:524: if(TF0==1) // Did the 16-bit timer overflow?
0562           1833   ;        EFM8_JDY40_test.c:526: TF0=0;
0562 108D50    1834            jbc     _TF0,L023055?
0565 8000      1835            sjmp    L023012?
0567           1836   L023055?:
0567           1837   ;        EFM8_JDY40_test.c:527: overflow_count++;
0567 0C        1838            inc     r4
0568 BC0090    1839            cjne    r4,#0x00,L023056?
056B 0D        1840            inc     r5
056C           1841   L023056?:
056C           1842   ;        EFM8_JDY40_test.c:528: if(overflow_count==10) // If it overflows too many times assume no signal is present
056C BC0AD0    1843            cjne    r4,#0x0A,L023012?
056F BD00D0    1844            cjne    r5,#0x00,L023012?
0572           1845   ;        EFM8_JDY40_test.c:530: TR0=0;
0572 C28C      1846            clr     _TR0
0574           1847   ;        EFM8_JDY40_test.c:531: return 0; // No signal
0574 900000    1848            mov     dptr,#(0x00&0x00ff)
0577 E4        1849            clr     a
0578 F5F0      1850            mov     b,a
057A 22        1851            ret
057B           1852   L023014?:
057B           1853   ;        EFM8_JDY40_test.c:537: TR0=0;
057B C28C      1854            clr     _TR0
057D           1855   ;        EFM8_JDY40_test.c:538: TL0=0; TH0=0; TF0=0; overflow_count=0;
057D 758A00    1856            mov     _TL0,#0x00
0580 758C00    1857            mov     _TH0,#0x00
0583 C28D      1858            clr     _TF0
0585 7C00      1859            mov     r4,#0x00
0587 7D00      1860            mov     r5,#0x00
0589           1861   ;        EFM8_JDY40_test.c:539: TR0=1; // Start the timer
0589 D28C      1862            setb    _TR0
058B           1863   ;        EFM8_JDY40_test.c:540: for(i=0; i<n; i++) // Measure the time of 'n' periods
058B 7E00      1864            mov     r6,#0x00
058D           1865   L023025?:
058D 8E07      1866            mov     ar7,r6
058F 7800      1867            mov     r0,#0x00
0591 C3        1868            clr     c
0592 EF        1869            mov     a,r7
0593 9A        1870            subb    a,r2
0594 E8        1871            mov     a,r0
0595 6480      1872            xrl     a,#0x80
0597 8BF0      1873            mov     b,r3
0599 63F080    1874            xrl     b,#0x80
059C 95F0      1875            subb    a,b
059E 5000      1876            jnc     L023028?
05A0           1877   ;        EFM8_JDY40_test.c:542: while(PERIOD_PIN!=0) // Wait for the signal to be zero
05A0 8C07      1878            mov     ar7,r4
05A2 8D00      1879            mov     ar0,r5
05A4           1880   L023017?:
05A4 308690    1881            jnb     _P0_6,L023043?
05A7           1882   ;        EFM8_JDY40_test.c:544: if(TF0==1) // Did the 16-bit timer overflow?
05A7           1883   ;        EFM8_JDY40_test.c:546: TF0=0;
05A7 108DD0    1884            jbc     _TF0,L023061?
05AA 8000      1885            sjmp    L023017?
05AC           1886   L023061?:
05AC           1887   ;        EFM8_JDY40_test.c:547: overflow_count++;
05AC 0F        1888            inc     r7
05AD BF0050    1889            cjne    r7,#0x00,L023017?
05B0 08        1890            inc     r0
05B1           1891   ;        EFM8_JDY40_test.c:550: while(PERIOD_PIN!=1) // Wait for the signal to be one
05B1 8000      1892            sjmp    L023017?
05B3           1893   L023043?:
05B3           1894   L023022?:
05B3 208650    1895            jb      _P0_6,L023047?
05B6           1896   ;        EFM8_JDY40_test.c:552: if(TF0==1) // Did the 16-bit timer overflow?
05B6           1897   ;        EFM8_JDY40_test.c:554: TF0=0;
05B6 108D90    1898            jbc     _TF0,L023063?
05B9 8000      1899            sjmp    L023022?
05BB           1900   L023063?:
05BB           1901   ;        EFM8_JDY40_test.c:555: overflow_count++;
05BB 0F        1902            inc     r7
05BC BF0010    1903            cjne    r7,#0x00,L023022?
05BF 08        1904            inc     r0
05C0 8000      1905            sjmp    L023022?
05C2           1906   L023047?:
05C2 8F04      1907            mov     ar4,r7
05C4 8805      1908            mov     ar5,r0
05C6           1909   ;        EFM8_JDY40_test.c:540: for(i=0; i<n; i++) // Measure the time of 'n' periods
05C6 0E        1910            inc     r6
05C7 8000      1911            sjmp    L023025?
05C9           1912   L023028?:
05C9           1913   ;        EFM8_JDY40_test.c:559: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
05C9 C28C      1914            clr     _TR0
05CB           1915   ;        EFM8_JDY40_test.c:561: return (overflow_count*65536+TH0*256+TL0);
05CB 8D03      1916            mov     ar3,r5
05CD 8C02      1917            mov     ar2,r4
05CF 7D00      1918            mov     r5,#0x00
05D1 7C00      1919            mov     r4,#0x00
05D3 AF8C      1920            mov     r7,_TH0
05D5 7E00      1921            mov     r6,#0x00
05D7 EF        1922            mov     a,r7
05D8 33        1923            rlc     a
05D9 95E0      1924            subb    a,acc
05DB F8        1925            mov     r0,a
05DC F9        1926            mov     r1,a
05DD EE        1927            mov     a,r6
05DE 2C        1928            add     a,r4
05DF FC        1929            mov     r4,a
05E0 EF        1930            mov     a,r7
05E1 3D        1931            addc    a,r5
05E2 FD        1932            mov     r5,a
05E3 E8        1933            mov     a,r0
05E4 3A        1934            addc    a,r2
05E5 FA        1935            mov     r2,a
05E6 E9        1936            mov     a,r1
05E7 3B        1937            addc    a,r3
05E8 FB        1938            mov     r3,a
05E9 AE8A      1939            mov     r6,_TL0
05EB E4        1940            clr     a
05EC FF        1941            mov     r7,a
05ED 33        1942            rlc     a
05EE 95E0      1943            subb    a,acc
05F0 F8        1944            mov     r0,a
05F1 F9        1945            mov     r1,a
05F2 EE        1946            mov     a,r6
05F3 2C        1947            add     a,r4
05F4 FC        1948            mov     r4,a
05F5 EF        1949            mov     a,r7
05F6 3D        1950            addc    a,r5
05F7 FD        1951            mov     r5,a
05F8 E8        1952            mov     a,r0
05F9 3A        1953            addc    a,r2
05FA FA        1954            mov     r2,a
05FB E9        1955            mov     a,r1
05FC 3B        1956            addc    a,r3
05FD 8C82      1957            mov     dpl,r4
05FF 8D83      1958            mov     dph,r5
0601 8AF0      1959            mov     b,r2
0603 22        1960            ret
0604           1961   ;------------------------------------------------------------
0604           1962   ;Allocation info for local variables in function 'eputs'
0604           1963   ;------------------------------------------------------------
0604           1964   ;String                    Allocated to registers r2 r3 r4 
0604           1965   ;------------------------------------------------------------
0604           1966   ;        EFM8_JDY40_test.c:564: void eputs(char *String)
0604           1967   ;        -----------------------------------------
0604           1968   ;         function eputs
0604           1969   ;        -----------------------------------------
0604           1970   _eputs:
0604 AA82      1971            mov     r2,dpl
0606 AB83      1972            mov     r3,dph
0608 ACF0      1973            mov     r4,b
060A           1974   ;        EFM8_JDY40_test.c:566: while(*String)
060A           1975   L024001?:
060A 8A82      1976            mov     dpl,r2
060C 8B83      1977            mov     dph,r3
060E 8CF0      1978            mov     b,r4
0610 120000    1979            lcall   __gptrget
0613 FD        1980            mov     r5,a
0614 6000      1981            jz      L024004?
0616           1982   ;        EFM8_JDY40_test.c:568: putchar(*String);
0616 8D82      1983            mov     dpl,r5
0618 C002      1984            push    ar2
061A C003      1985            push    ar3
061C C004      1986            push    ar4
061E 120000    1987            lcall   _putchar
0621 D004      1988            pop     ar4
0623 D003      1989            pop     ar3
0625 D002      1990            pop     ar2
0627           1991   ;        EFM8_JDY40_test.c:569: String++;
0627 0A        1992            inc     r2
0628 BA00D0    1993            cjne    r2,#0x00,L024001?
062B 0B        1994            inc     r3
062C 8000      1995            sjmp    L024001?
062E           1996   L024004?:
062E 22        1997            ret
062F           1998   ;------------------------------------------------------------
062F           1999   ;Allocation info for local variables in function 'PrintNumber'
062F           2000   ;------------------------------------------------------------
062F           2001   ;Base                      Allocated with name '_PrintNumber_PARM_2'
062F           2002   ;digits                    Allocated with name '_PrintNumber_PARM_3'
062F           2003   ;val                       Allocated with name '_PrintNumber_val_1_163'
062F           2004   ;j                         Allocated with name '_PrintNumber_j_1_164'
062F           2005   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
062F           2006   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
062F           2007   ;buff                      Allocated with name '_PrintNumber_buff_1_164'
062F           2008   ;------------------------------------------------------------
062F           2009   ;        EFM8_JDY40_test.c:573: void PrintNumber(long int val, int Base, int digits)
062F           2010   ;        -----------------------------------------
062F           2011   ;         function PrintNumber
062F           2012   ;        -----------------------------------------
062F           2013   _PrintNumber:
062F 858290    2014            mov     _PrintNumber_val_1_163,dpl
0632 858391    2015            mov     (_PrintNumber_val_1_163 + 1),dph
0635 85F092    2016            mov     (_PrintNumber_val_1_163 + 2),b
0638 F593      2017            mov     (_PrintNumber_val_1_163 + 3),a
063A           2018   ;        EFM8_JDY40_test.c:579: buff[NBITS]=0;
063A 90BEA0    2019            mov     dptr,#(_PrintNumber_buff_1_164 + 0x0020)
063D E4        2020            clr     a
063E F0        2021            movx    @dptr,a
063F           2022   ;        EFM8_JDY40_test.c:581: if(val<0)
063F E593      2023            mov     a,(_PrintNumber_val_1_163 + 3)
0641 30E790    2024            jnb     acc.7,L025012?
0644           2025   ;        EFM8_JDY40_test.c:583: putchar('-');
0644 75822D    2026            mov     dpl,#0x2D
0647 120000    2027            lcall   _putchar
064A           2028   ;        EFM8_JDY40_test.c:584: val*=-1;
064A C3        2029            clr     c
064B E4        2030            clr     a
064C 9590      2031            subb    a,_PrintNumber_val_1_163
064E F590      2032            mov     _PrintNumber_val_1_163,a
0650 E4        2033            clr     a
0651 9591      2034            subb    a,(_PrintNumber_val_1_163 + 1)
0653 F591      2035            mov     (_PrintNumber_val_1_163 + 1),a
0655 E4        2036            clr     a
0656 9592      2037            subb    a,(_PrintNumber_val_1_163 + 2)
0658 F592      2038            mov     (_PrintNumber_val_1_163 + 2),a
065A E4        2039            clr     a
065B 9593      2040            subb    a,(_PrintNumber_val_1_163 + 3)
065D F593      2041            mov     (_PrintNumber_val_1_163 + 3),a
065F           2042   ;        EFM8_JDY40_test.c:588: while ( (val>0) | (digits>0) )
065F           2043   L025012?:
065F 75E01F    2044            mov     _PrintNumber_j_1_164,#0x1F
0662 E4        2045            clr     a
0663 F5E1      2046            mov     (_PrintNumber_j_1_164 + 1),a
0665 A880      2047            mov     r0,_PrintNumber_PARM_3
0667 A981      2048            mov     r1,(_PrintNumber_PARM_3 + 1)
0669           2049   L025005?:
0669 C3        2050            clr     c
066A E4        2051            clr     a
066B 9590      2052            subb    a,_PrintNumber_val_1_163
066D E4        2053            clr     a
066E 9591      2054            subb    a,(_PrintNumber_val_1_163 + 1)
0670 E4        2055            clr     a
0671 9592      2056            subb    a,(_PrintNumber_val_1_163 + 2)
0673 E4        2057            clr     a
0674 6480      2058            xrl     a,#0x80
0676 8593F0    2059            mov     b,(_PrintNumber_val_1_163 + 3)
0679 63F080    2060            xrl     b,#0x80
067C 95F0      2061            subb    a,b
067E E4        2062            clr     a
067F 33        2063            rlc     a
0680 FE        2064            mov     r6,a
0681 C3        2065            clr     c
0682 E4        2066            clr     a
0683 98        2067            subb    a,r0
0684 E4        2068            clr     a
0685 6480      2069            xrl     a,#0x80
0687 89F0      2070            mov     b,r1
0689 63F080    2071            xrl     b,#0x80
068C 95F0      2072            subb    a,b
068E E4        2073            clr     a
068F 33        2074            rlc     a
0690 FF        2075            mov     r7,a
0691 4E        2076            orl     a,r6
0692 7000      2077            jnz     L025016?
0694 020000    2078            ljmp    L025007?
0697           2079   L025016?:
0697           2080   ;        EFM8_JDY40_test.c:590: buff[j--]=HexDigit[val%Base];
0697 AEE0      2081            mov     r6,_PrintNumber_j_1_164
0699 AFE1      2082            mov     r7,(_PrintNumber_j_1_164 + 1)
069B 15E0      2083            dec     _PrintNumber_j_1_164
069D 74FF      2084            mov     a,#0xff
069F B5E090    2085            cjne    a,_PrintNumber_j_1_164,L025017?
06A2 15E1      2086            dec     (_PrintNumber_j_1_164 + 1)
06A4           2087   L025017?:
06A4 EE        2088            mov     a,r6
06A5 2480      2089            add     a,#_PrintNumber_buff_1_164
06A7 F530      2090            mov     _PrintNumber_sloc0_1_0,a
06A9 EF        2091            mov     a,r7
06AA 34BE      2092            addc    a,#(_PrintNumber_buff_1_164 >> 8)
06AC F531      2093            mov     (_PrintNumber_sloc0_1_0 + 1),a
06AE 85D080    2094            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
06B1 E5D1      2095            mov     a,(_PrintNumber_PARM_2 + 1)
06B3 F581      2096            mov     (_PrintNumber_sloc1_1_0 + 1),a
06B5 33        2097            rlc     a
06B6 95E0      2098            subb    a,acc
06B8 F582      2099            mov     (_PrintNumber_sloc1_1_0 + 2),a
06BA F583      2100            mov     (_PrintNumber_sloc1_1_0 + 3),a
06BC 858000    2101            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
06BF 858101    2102            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06C2 858202    2103            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06C5 858303    2104            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06C8 859082    2105            mov     dpl,_PrintNumber_val_1_163
06CB 859183    2106            mov     dph,(_PrintNumber_val_1_163 + 1)
06CE 8592F0    2107            mov     b,(_PrintNumber_val_1_163 + 2)
06D1 E593      2108            mov     a,(_PrintNumber_val_1_163 + 3)
06D3 C000      2109            push    ar0
06D5 C001      2110            push    ar1
06D7 120000    2111            lcall   __modslong
06DA AE82      2112            mov     r6,dpl
06DC AF83      2113            mov     r7,dph
06DE EE        2114            mov     a,r6
06DF 24B0      2115            add     a,#_PrintNumber_HexDigit_1_164
06E1 F582      2116            mov     dpl,a
06E3 EF        2117            mov     a,r7
06E4 3411      2118            addc    a,#(_PrintNumber_HexDigit_1_164 >> 8)
06E6 F583      2119            mov     dph,a
06E8 E4        2120            clr     a
06E9 93        2121            movc    a,@a+dptr
06EA 853082    2122            mov     dpl,_PrintNumber_sloc0_1_0
06ED 853183    2123            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
06F0 F0        2124            movx    @dptr,a
06F1           2125   ;        EFM8_JDY40_test.c:591: val/=Base;
06F1 858000    2126            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
06F4 858101    2127            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06F7 858202    2128            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06FA 858303    2129            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06FD 859082    2130            mov     dpl,_PrintNumber_val_1_163
0700 859183    2131            mov     dph,(_PrintNumber_val_1_163 + 1)
0703 8592F0    2132            mov     b,(_PrintNumber_val_1_163 + 2)
0706 E593      2133            mov     a,(_PrintNumber_val_1_163 + 3)
0708 120000    2134            lcall   __divslong
070B 858290    2135            mov     _PrintNumber_val_1_163,dpl
070E 858391    2136            mov     (_PrintNumber_val_1_163 + 1),dph
0711 85F092    2137            mov     (_PrintNumber_val_1_163 + 2),b
0714 F593      2138            mov     (_PrintNumber_val_1_163 + 3),a
0716 D001      2139            pop     ar1
0718 D000      2140            pop     ar0
071A           2141   ;        EFM8_JDY40_test.c:592: if(digits!=0) digits--;
071A E8        2142            mov     a,r0
071B 49        2143            orl     a,r1
071C 7000      2144            jnz     L025018?
071E 020000    2145            ljmp    L025005?
0721           2146   L025018?:
0721 18        2147            dec     r0
0722 B8FF30    2148            cjne    r0,#0xff,L025019?
0725 19        2149            dec     r1
0726           2150   L025019?:
0726 020000    2151            ljmp    L025005?
0729           2152   L025007?:
0729           2153   ;        EFM8_JDY40_test.c:594: eputs(&buff[j+1]);
0729 E5E0      2154            mov     a,_PrintNumber_j_1_164
072B 04        2155            inc     a
072C 2480      2156            add     a,#_PrintNumber_buff_1_164
072E FA        2157            mov     r2,a
072F E4        2158            clr     a
0730 34BE      2159            addc    a,#(_PrintNumber_buff_1_164 >> 8)
0732 FB        2160            mov     r3,a
0733 7C00      2161            mov     r4,#0x00
0735 8A82      2162            mov     dpl,r2
0737 8B83      2163            mov     dph,r3
0739 8CF0      2164            mov     b,r4
073B 020000    2165            ljmp    _eputs
073E           2166   ;------------------------------------------------------------
073E           2167   ;Allocation info for local variables in function 'GetFrequency'
073E           2168   ;------------------------------------------------------------
073E           2169   ;c                         Allocated to registers r2 r3 r4 r5 
073E           2170   ;f                         Allocated to registers r6 r7 r0 r1 
073E           2171   ;------------------------------------------------------------
073E           2172   ;        EFM8_JDY40_test.c:597: unsigned long GetFrequency (long int c)
073E           2173   ;        -----------------------------------------
073E           2174   ;         function GetFrequency
073E           2175   ;        -----------------------------------------
073E           2176   _GetFrequency:
073E AA82      2177            mov     r2,dpl
0740 AB83      2178            mov     r3,dph
0742 ACF0      2179            mov     r4,b
0744 FD        2180            mov     r5,a
0745           2181   ;        EFM8_JDY40_test.c:599: long int f = 0;
0745 7E00      2182            mov     r6,#0x00
0747 7F00      2183            mov     r7,#0x00
0749 7800      2184            mov     r0,#0x00
074B 7900      2185            mov     r1,#0x00
074D           2186   ;        EFM8_JDY40_test.c:601: if(c>0)
074D C3        2187            clr     c
074E E4        2188            clr     a
074F 9A        2189            subb    a,r2
0750 E4        2190            clr     a
0751 9B        2191            subb    a,r3
0752 E4        2192            clr     a
0753 9C        2193            subb    a,r4
0754 E4        2194            clr     a
0755 6480      2195            xrl     a,#0x80
0757 8DF0      2196            mov     b,r5
0759 63F080    2197            xrl     b,#0x80
075C 95F0      2198            subb    a,b
075E 5000      2199            jnc     L026002?
0760           2200   ;        EFM8_JDY40_test.c:603: f=(SYSCLK*200.0)/(c*12);
0760 8A00      2201            mov     __mullong_PARM_2,r2
0762 8B01      2202            mov     (__mullong_PARM_2 + 1),r3
0764 8C02      2203            mov     (__mullong_PARM_2 + 2),r4
0766 8D03      2204            mov     (__mullong_PARM_2 + 3),r5
0768 90000C    2205            mov     dptr,#(0x0C&0x00ff)
076B E4        2206            clr     a
076C F5F0      2207            mov     b,a
076E 120000    2208            lcall   __mullong
0771 120000    2209            lcall   ___slong2fs
0774 AA82      2210            mov     r2,dpl
0776 AB83      2211            mov     r3,dph
0778 ACF0      2212            mov     r4,b
077A FD        2213            mov     r5,a
077B C002      2214            push    ar2
077D C003      2215            push    ar3
077F C004      2216            push    ar4
0781 C005      2217            push    ar5
0783 9093A4    2218            mov     dptr,#0x93A4
0786 75F056    2219            mov     b,#0x56
0789 7450      2220            mov     a,#0x50
078B 120000    2221            lcall   ___fsdiv
078E AA82      2222            mov     r2,dpl
0790 AB83      2223            mov     r3,dph
0792 ACF0      2224            mov     r4,b
0794 FD        2225            mov     r5,a
0795 E581      2226            mov     a,sp
0797 24FC      2227            add     a,#0xfc
0799 F581      2228            mov     sp,a
079B 8A82      2229            mov     dpl,r2
079D 8B83      2230            mov     dph,r3
079F 8CF0      2231            mov     b,r4
07A1 ED        2232            mov     a,r5
07A2 120000    2233            lcall   ___fs2slong
07A5 AE82      2234            mov     r6,dpl
07A7 AF83      2235            mov     r7,dph
07A9 A8F0      2236            mov     r0,b
07AB F9        2237            mov     r1,a
07AC 8000      2238            sjmp    L026003?
07AE           2239   L026002?:
07AE           2240   ;        EFM8_JDY40_test.c:613: eputs(" NO SIGNAL                     \r");
07AE 90D900    2241            mov     dptr,#__str_4
07B1 75F080    2242            mov     b,#0x80
07B4 C006      2243            push    ar6
07B6 C007      2244            push    ar7
07B8 C000      2245            push    ar0
07BA C001      2246            push    ar1
07BC 120000    2247            lcall   _eputs
07BF D001      2248            pop     ar1
07C1 D000      2249            pop     ar0
07C3 D007      2250            pop     ar7
07C5 D006      2251            pop     ar6
07C7           2252   L026003?:
07C7           2253   ;        EFM8_JDY40_test.c:616: return f;
07C7 8E82      2254            mov     dpl,r6
07C9 8F83      2255            mov     dph,r7
07CB 88F0      2256            mov     b,r0
07CD E9        2257            mov     a,r1
07CE 22        2258            ret
07CF           2259   ;------------------------------------------------------------
07CF           2260   ;Allocation info for local variables in function 'servomotion'
07CF           2261   ;------------------------------------------------------------
07CF           2262   ;j                         Allocated to registers r2 
07CF           2263   ;------------------------------------------------------------
07CF           2264   ;        EFM8_JDY40_test.c:620: void servomotion(void)
07CF           2265   ;        -----------------------------------------
07CF           2266   ;         function servomotion
07CF           2267   ;        -----------------------------------------
07CF           2268   _servomotion:
07CF           2269   ;        EFM8_JDY40_test.c:623: waitms(500);
07CF 9001F4    2270            mov     dptr,#0x01F4
07D2 120000    2271            lcall   _waitms
07D5           2272   ;        EFM8_JDY40_test.c:624: servo1 = 150;
07D5 75B896    2273            mov     _servo1,#0x96
07D8           2274   ;        EFM8_JDY40_test.c:625: waitms(100);
07D8 900064    2275            mov     dptr,#0x0064
07DB 120000    2276            lcall   _waitms
07DE           2277   ;        EFM8_JDY40_test.c:627: P1_5 = 1;        
07DE D295      2278            setb    _P1_5
07E0           2279   ;        EFM8_JDY40_test.c:630: for(j=250; j>180; j-=5) 
07E0 7AFA      2280            mov     r2,#0xFA
07E2           2281   L027001?:
07E2 EA        2282            mov     a,r2
07E3 244B      2283            add     a,#0xff - 0xB4
07E5 5000      2284            jnc     L027004?
07E7           2285   ;        EFM8_JDY40_test.c:632: servo2 = j;
07E7 8A78      2286            mov     _servo2,r2
07E9           2287   ;        EFM8_JDY40_test.c:633: waitms(20);
07E9 900014    2288            mov     dptr,#0x0014
07EC C002      2289            push    ar2
07EE 120000    2290            lcall   _waitms
07F1 D002      2291            pop     ar2
07F3           2292   ;        EFM8_JDY40_test.c:630: for(j=250; j>180; j-=5) 
07F3 EA        2293            mov     a,r2
07F4 24FB      2294            add     a,#0xfb
07F6 FA        2295            mov     r2,a
07F7 8000      2296            sjmp    L027001?
07F9           2297   L027004?:
07F9           2298   ;        EFM8_JDY40_test.c:636: waitms(1000);
07F9 9003E8    2299            mov     dptr,#0x03E8
07FC 120000    2300            lcall   _waitms
07FF           2301   ;        EFM8_JDY40_test.c:639: for(j=150; j<250; j+=5) 
07FF 7A96      2302            mov     r2,#0x96
0801           2303   L027005?:
0801 BAFA00    2304            cjne    r2,#0xFA,L027025?
0804           2305   L027025?:
0804 5000      2306            jnc     L027008?
0806           2307   ;        EFM8_JDY40_test.c:641: servo1 = j;
0806 8AB8      2308            mov     _servo1,r2
0808           2309   ;        EFM8_JDY40_test.c:642: waitms(20);
0808 900014    2310            mov     dptr,#0x0014
080B C002      2311            push    ar2
080D 120000    2312            lcall   _waitms
0810 D002      2313            pop     ar2
0812           2314   ;        EFM8_JDY40_test.c:639: for(j=150; j<250; j+=5) 
0812 7405      2315            mov     a,#0x05
0814 2A        2316            add     a,r2
0815 FA        2317            mov     r2,a
0816 8000      2318            sjmp    L027005?
0818           2319   L027008?:
0818           2320   ;        EFM8_JDY40_test.c:645: waitms(1000);
0818 9003E8    2321            mov     dptr,#0x03E8
081B 120000    2322            lcall   _waitms
081E           2323   ;        EFM8_JDY40_test.c:648: for(j=180; j > 90; j-=5){
081E 7AB4      2324            mov     r2,#0xB4
0820           2325   L027009?:
0820 EA        2326            mov     a,r2
0821 24A5      2327            add     a,#0xff - 0x5A
0823 5000      2328            jnc     L027012?
0825           2329   ;        EFM8_JDY40_test.c:649: servo2 = j;
0825 8A78      2330            mov     _servo2,r2
0827           2331   ;        EFM8_JDY40_test.c:650: waitms(20);
0827 900014    2332            mov     dptr,#0x0014
082A C002      2333            push    ar2
082C 120000    2334            lcall   _waitms
082F D002      2335            pop     ar2
0831           2336   ;        EFM8_JDY40_test.c:648: for(j=180; j > 90; j-=5){
0831 EA        2337            mov     a,r2
0832 24FB      2338            add     a,#0xfb
0834 FA        2339            mov     r2,a
0835 8000      2340            sjmp    L027009?
0837           2341   L027012?:
0837           2342   ;        EFM8_JDY40_test.c:655: P1_5 = 0;
0837 C295      2343            clr     _P1_5
0839           2344   ;        EFM8_JDY40_test.c:657: waitms(150);
0839 900096    2345            mov     dptr,#0x0096
083C 120000    2346            lcall   _waitms
083F           2347   ;        EFM8_JDY40_test.c:658: servo1 = 250;
083F 75B8FA    2348            mov     _servo1,#0xFA
0842           2349   ;        EFM8_JDY40_test.c:659: servo2 = 250; 
0842 7578FA    2350            mov     _servo2,#0xFA
0845           2351   ;        EFM8_JDY40_test.c:660: EMAGNET=0;
0845 C295      2352            clr     _P1_5
0847 22        2353            ret
0848           2354   ;------------------------------------------------------------
0848           2355   ;Allocation info for local variables in function 'automaticmode'
0848           2356   ;------------------------------------------------------------
0848           2357   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0848           2358   ;freq                      Allocated with name '_automaticmode_PARM_3'
0848           2359   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0848           2360   ;control                   Allocated to registers 
0848           2361   ;------------------------------------------------------------
0848           2362   ;        EFM8_JDY40_test.c:668: void automaticmode(float fowardper, float sideper, float freq)
0848           2363   ;        -----------------------------------------
0848           2364   ;         function automaticmode
0848           2365   ;        -----------------------------------------
0848           2366   _automaticmode:
0848 AA82      2367            mov     r2,dpl
084A AB83      2368            mov     r3,dph
084C ACF0      2369            mov     r4,b
084E FD        2370            mov     r5,a
084F           2371   ;        EFM8_JDY40_test.c:671: direction = 3;
084F 757803    2372            mov     _direction,#0x03
0852 E4        2373            clr     a
0853 F579      2374            mov     (_direction + 1),a
0855           2375   ;        EFM8_JDY40_test.c:673: P3_7=1;  //wheel 1
0855 D2B7      2376            setb    _P3_7
0857           2377   ;        EFM8_JDY40_test.c:674: P3_2=0;  // wheel 1 
0857 C2B2      2378            clr     _P3_2
0859           2379   ;        EFM8_JDY40_test.c:675: P3_0=0; // wheel 2
0859 C2B0      2380            clr     _P3_0
085B           2381   ;        EFM8_JDY40_test.c:676: P2_5=1; // wheel 2
085B D2A5      2382            setb    _P2_5
085D           2383   ;        EFM8_JDY40_test.c:677: printf("%ld\n\r", freq);
085D C002      2384            push    ar2
085F C003      2385            push    ar3
0861 C004      2386            push    ar4
0863 C005      2387            push    ar5
0865 C0E0      2388            push    _automaticmode_PARM_3
0867 C0E1      2389            push    (_automaticmode_PARM_3 + 1)
0869 C0E2      2390            push    (_automaticmode_PARM_3 + 2)
086B C0E3      2391            push    (_automaticmode_PARM_3 + 3)
086D 7400      2392            mov     a,#__str_5
086F C0E0      2393            push    acc
0871 74DB      2394            mov     a,#(__str_5 >> 8)
0873 C0E0      2395            push    acc
0875 7480      2396            mov     a,#0x80
0877 C0E0      2397            push    acc
0879 120000    2398            lcall   _printf
087C E581      2399            mov     a,sp
087E 24F9      2400            add     a,#0xf9
0880 F581      2401            mov     sp,a
0882           2402   ;        EFM8_JDY40_test.c:678: if ( freq >= 64000)  //100000    63750   65000
0882 E4        2403            clr     a
0883 C0E0      2404            push    acc
0885 C0E0      2405            push    acc
0887 747A      2406            mov     a,#0x7A
0889 C0E0      2407            push    acc
088B 7447      2408            mov     a,#0x47
088D C0E0      2409            push    acc
088F 85E082    2410            mov     dpl,_automaticmode_PARM_3
0892 85E183    2411            mov     dph,(_automaticmode_PARM_3 + 1)
0895 85E2F0    2412            mov     b,(_automaticmode_PARM_3 + 2)
0898 E5E3      2413            mov     a,(_automaticmode_PARM_3 + 3)
089A 120000    2414            lcall   ___fslt
089D AE82      2415            mov     r6,dpl
089F E581      2416            mov     a,sp
08A1 24FC      2417            add     a,#0xfc
08A3 F581      2418            mov     sp,a
08A5 D005      2419            pop     ar5
08A7 D004      2420            pop     ar4
08A9 D003      2421            pop     ar3
08AB D002      2422            pop     ar2
08AD EE        2423            mov     a,r6
08AE 7000      2424            jnz     L028002?
08B0           2425   ;        EFM8_JDY40_test.c:680: P3_7=0;  //wheel 1
08B0 C2B7      2426            clr     _P3_7
08B2           2427   ;        EFM8_JDY40_test.c:681: P3_2=1;  // wheel 1 
08B2 D2B2      2428            setb    _P3_2
08B4           2429   ;        EFM8_JDY40_test.c:682: P3_0=1; // wheel 2
08B4 D2B0      2430            setb    _P3_0
08B6           2431   ;        EFM8_JDY40_test.c:683: P2_5=0; // wheel 2
08B6 C2A5      2432            clr     _P2_5
08B8           2433   ;        EFM8_JDY40_test.c:684: waitms(150);
08B8 900096    2434            mov     dptr,#0x0096
08BB C002      2435            push    ar2
08BD C003      2436            push    ar3
08BF C004      2437            push    ar4
08C1 C005      2438            push    ar5
08C3 120000    2439            lcall   _waitms
08C6           2440   ;        EFM8_JDY40_test.c:685: P3_7=0;  //wheel 1
08C6 C2B7      2441            clr     _P3_7
08C8           2442   ;        EFM8_JDY40_test.c:686: P3_2=0;  // wheel 1 
08C8 C2B2      2443            clr     _P3_2
08CA           2444   ;        EFM8_JDY40_test.c:687: P3_0=0; // wheel 2
08CA C2B0      2445            clr     _P3_0
08CC           2446   ;        EFM8_JDY40_test.c:688: P2_5=0; // wheel 2
08CC C2A5      2447            clr     _P2_5
08CE           2448   ;        EFM8_JDY40_test.c:689: servomotion();
08CE 120000    2449            lcall   _servomotion
08D1 D005      2450            pop     ar5
08D3 D004      2451            pop     ar4
08D5 D003      2452            pop     ar3
08D7 D002      2453            pop     ar2
08D9           2454   L028002?:
08D9           2455   ;        EFM8_JDY40_test.c:693: if ( fowardper >= p_thresh)
08D9 74CD      2456            mov     a,#0xCD
08DB C0E0      2457            push    acc
08DD 74CC      2458            mov     a,#0xCC
08DF C0E0      2459            push    acc
08E1 C0E0      2460            push    acc
08E3 743D      2461            mov     a,#0x3D
08E5 C0E0      2462            push    acc
08E7 8A82      2463            mov     dpl,r2
08E9 8B83      2464            mov     dph,r3
08EB 8CF0      2465            mov     b,r4
08ED ED        2466            mov     a,r5
08EE 120000    2467            lcall   ___fslt
08F1 AA82      2468            mov     r2,dpl
08F3 E581      2469            mov     a,sp
08F5 24FC      2470            add     a,#0xfc
08F7 F581      2471            mov     sp,a
08F9 EA        2472            mov     a,r2
08FA 7000      2473            jnz     L028008?
08FC           2474   ;        EFM8_JDY40_test.c:695: P3_7=0;  //wheel 1
08FC C2B7      2475            clr     _P3_7
08FE           2476   ;        EFM8_JDY40_test.c:696: P3_2=1;  // wheel 1 
08FE D2B2      2477            setb    _P3_2
0900           2478   ;        EFM8_JDY40_test.c:697: P3_0=1; // wheel 2
0900 D2B0      2479            setb    _P3_0
0902           2480   ;        EFM8_JDY40_test.c:698: P2_5=0; // wheel 2
0902 C2A5      2481            clr     _P2_5
0904           2482   ;        EFM8_JDY40_test.c:699: waitms(300);
0904 90012C    2483            mov     dptr,#0x012C
0907 120000    2484            lcall   _waitms
090A           2485   ;        EFM8_JDY40_test.c:700: if ( peggingsidnatu == 0 )
090A E538      2486            mov     a,_peggingsidnatu
090C 4539      2487            orl     a,(_peggingsidnatu + 1)
090E 7000      2488            jnz     L028004?
0910           2489   ;        EFM8_JDY40_test.c:702: P3_7=0;  //wheel 1
0910 C2B7      2490            clr     _P3_7
0912           2491   ;        EFM8_JDY40_test.c:703: P3_2=1;  // wheel 1 
0912 D2B2      2492            setb    _P3_2
0914           2493   ;        EFM8_JDY40_test.c:704: P3_0=0; // wheel 2
0914 C2B0      2494            clr     _P3_0
0916           2495   ;        EFM8_JDY40_test.c:705: P2_5=0; // wheel 2
0916 C2A5      2496            clr     _P2_5
0918           2497   ;        EFM8_JDY40_test.c:706: waitms(750);
0918 9002EE    2498            mov     dptr,#0x02EE
091B 120000    2499            lcall   _waitms
091E           2500   ;        EFM8_JDY40_test.c:707: peggingsidnatu = 1;
091E 753801    2501            mov     _peggingsidnatu,#0x01
0921 E4        2502            clr     a
0922 F539      2503            mov     (_peggingsidnatu + 1),a
0924           2504   ;        EFM8_JDY40_test.c:708: return;
0924 22        2505            ret
0925           2506   L028004?:
0925           2507   ;        EFM8_JDY40_test.c:711: if ( peggingsidnatu == 1 )
0925 7401      2508            mov     a,#0x01
0927 B53840    2509            cjne    a,_peggingsidnatu,L028027?
092A E4        2510            clr     a
092B B53940    2511            cjne    a,(_peggingsidnatu + 1),L028027?
092E 8000      2512            sjmp    L028028?
0930           2513   L028027?:
0930 8000      2514            sjmp    L028008?
0932           2515   L028028?:
0932           2516   ;        EFM8_JDY40_test.c:713: P3_7=0;  //wheel 1
0932 C2B7      2517            clr     _P3_7
0934           2518   ;        EFM8_JDY40_test.c:714: P3_2=0;  // wheel 1 
0934 C2B2      2519            clr     _P3_2
0936           2520   ;        EFM8_JDY40_test.c:715: P3_0=1; // wheel 2
0936 D2B0      2521            setb    _P3_0
0938           2522   ;        EFM8_JDY40_test.c:716: P2_5=0; // wheel 2
0938 C2A5      2523            clr     _P2_5
093A           2524   ;        EFM8_JDY40_test.c:717: waitms(750);
093A 9002EE    2525            mov     dptr,#0x02EE
093D 120000    2526            lcall   _waitms
0940           2527   ;        EFM8_JDY40_test.c:718: peggingsidnatu = 0;
0940 E4        2528            clr     a
0941 F538      2529            mov     _peggingsidnatu,a
0943 F539      2530            mov     (_peggingsidnatu + 1),a
0945           2531   ;        EFM8_JDY40_test.c:719: return;
0945 22        2532            ret
0946           2533   L028008?:
0946           2534   ;        EFM8_JDY40_test.c:724: if ( sideper >= p_thresh)
0946 74CD      2535            mov     a,#0xCD
0948 C0E0      2536            push    acc
094A 74CC      2537            mov     a,#0xCC
094C C0E0      2538            push    acc
094E C0E0      2539            push    acc
0950 743D      2540            mov     a,#0x3D
0952 C0E0      2541            push    acc
0954 853082    2542            mov     dpl,_automaticmode_PARM_2
0957 853183    2543            mov     dph,(_automaticmode_PARM_2 + 1)
095A 8532F0    2544            mov     b,(_automaticmode_PARM_2 + 2)
095D E533      2545            mov     a,(_automaticmode_PARM_2 + 3)
095F 120000    2546            lcall   ___fslt
0962 AA82      2547            mov     r2,dpl
0964 E581      2548            mov     a,sp
0966 24FC      2549            add     a,#0xfc
0968 F581      2550            mov     sp,a
096A EA        2551            mov     a,r2
096B 7000      2552            jnz     L028015?
096D           2553   ;        EFM8_JDY40_test.c:726: if ( peggingsidnatu == 0 )
096D E538      2554            mov     a,_peggingsidnatu
096F 4539      2555            orl     a,(_peggingsidnatu + 1)
0971 7000      2556            jnz     L028010?
0973           2557   ;        EFM8_JDY40_test.c:728: P3_7=0;  //wheel 1
0973 C2B7      2558            clr     _P3_7
0975           2559   ;        EFM8_JDY40_test.c:729: P3_2=1;  // wheel 1 
0975 D2B2      2560            setb    _P3_2
0977           2561   ;        EFM8_JDY40_test.c:730: P3_0=0; // wheel 2
0977 C2B0      2562            clr     _P3_0
0979           2563   ;        EFM8_JDY40_test.c:731: P2_5=0; // wheel 2
0979 C2A5      2564            clr     _P2_5
097B           2565   ;        EFM8_JDY40_test.c:732: waitms(750);
097B 9002EE    2566            mov     dptr,#0x02EE
097E           2567   ;        EFM8_JDY40_test.c:734: return;
097E 020000    2568            ljmp    _waitms
0981           2569   L028010?:
0981           2570   ;        EFM8_JDY40_test.c:737: if ( peggingsidnatu == 1 )
0981 7401      2571            mov     a,#0x01
0983 B53840    2572            cjne    a,_peggingsidnatu,L028031?
0986 E4        2573            clr     a
0987 B53940    2574            cjne    a,(_peggingsidnatu + 1),L028031?
098A 8000      2575            sjmp    L028032?
098C           2576   L028031?:
098C 22        2577            ret
098D           2578   L028032?:
098D           2579   ;        EFM8_JDY40_test.c:739: P3_7=0;  //wheel 1
098D C2B7      2580            clr     _P3_7
098F           2581   ;        EFM8_JDY40_test.c:740: P3_2=0;  // wheel 1 
098F C2B2      2582            clr     _P3_2
0991           2583   ;        EFM8_JDY40_test.c:741: P3_0=1; // wheel 2
0991 D2B0      2584            setb    _P3_0
0993           2585   ;        EFM8_JDY40_test.c:742: P2_5=0; // wheel 2
0993 C2A5      2586            clr     _P2_5
0995           2587   ;        EFM8_JDY40_test.c:743: waitms(750);
0995 9002EE    2588            mov     dptr,#0x02EE
0998           2589   ;        EFM8_JDY40_test.c:745: return;
0998 020000    2590            ljmp    _waitms
099B           2591   L028015?:
099B 22        2592            ret
099C           2593   ;------------------------------------------------------------
099C           2594   ;Allocation info for local variables in function 'main'
099C           2595   ;------------------------------------------------------------
099C           2596   ;timeout                   Allocated to registers 
099C           2597   ;pulse_width               Allocated to registers 
099C           2598   ;pulse_width1              Allocated to registers 
099C           2599   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_186'
099C           2600   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_186'
099C           2601   ;which                     Allocated with name '_main_which_1_186'
099C           2602   ;count                     Allocated to registers r2 r3 r4 r5 
099C           2603   ;f                         Allocated with name '_main_f_1_186'
099C           2604   ;v                         Allocated with name '_main_v_1_186'
099C           2605   ;sloc0                     Allocated with name '_main_sloc0_1_0'
099C           2606   ;------------------------------------------------------------
099C           2607   ;        EFM8_JDY40_test.c:757: void main (void)
099C           2608   ;        -----------------------------------------
099C           2609   ;         function main
099C           2610   ;        -----------------------------------------
099C           2611   _main:
099C           2612   ;        EFM8_JDY40_test.c:775: waitms(500);
099C 9001F4    2613            mov     dptr,#0x01F4
099F 120000    2614            lcall   _waitms
09A2           2615   ;        EFM8_JDY40_test.c:776: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
09A2 74C0      2616            mov     a,#__str_6
09A4 C0E0      2617            push    acc
09A6 74DD      2618            mov     a,#(__str_6 >> 8)
09A8 C0E0      2619            push    acc
09AA 7480      2620            mov     a,#0x80
09AC C0E0      2621            push    acc
09AE 120000    2622            lcall   _printf
09B1 1581      2623            dec     sp
09B3 1581      2624            dec     sp
09B5 1581      2625            dec     sp
09B7           2626   ;        EFM8_JDY40_test.c:777: UART1_Init(9600);
09B7 902580    2627            mov     dptr,#0x2580
09BA E4        2628            clr     a
09BB F5F0      2629            mov     b,a
09BD 120000    2630            lcall   _UART1_Init
09C0           2631   ;        EFM8_JDY40_test.c:779: ReceptionOff();
09C0 120000    2632            lcall   _ReceptionOff
09C3           2633   ;        EFM8_JDY40_test.c:781: TIMER0_Init(); 
09C3 120000    2634            lcall   _TIMER0_Init
09C6           2635   ;        EFM8_JDY40_test.c:783: InitPinADC(2, 1); // Configure P2.1 as analog input
09C6 756001    2636            mov     _InitPinADC_PARM_2,#0x01
09C9 758202    2637            mov     dpl,#0x02
09CC 120000    2638            lcall   _InitPinADC
09CF           2639   ;        EFM8_JDY40_test.c:784: InitPinADC(2, 3); // Configure P2.1 as analog input
09CF 756003    2640            mov     _InitPinADC_PARM_2,#0x03
09D2 758202    2641            mov     dpl,#0x02
09D5 120000    2642            lcall   _InitPinADC
09D8           2643   ;        EFM8_JDY40_test.c:785: InitADC();
09D8 120000    2644            lcall   _InitADC
09DB           2645   ;        EFM8_JDY40_test.c:789: SendATCommand("AT+VER\r\n");
09DB 90DE00    2646            mov     dptr,#__str_7
09DE 75F080    2647            mov     b,#0x80
09E1 120000    2648            lcall   _SendATCommand
09E4           2649   ;        EFM8_JDY40_test.c:790: SendATCommand("AT+BAUD\r\n");
09E4 90DE40    2650            mov     dptr,#__str_8
09E7 75F080    2651            mov     b,#0x80
09EA 120000    2652            lcall   _SendATCommand
09ED           2653   ;        EFM8_JDY40_test.c:791: SendATCommand("AT+RFID\r\n");
09ED 90DE80    2654            mov     dptr,#__str_9
09F0 75F080    2655            mov     b,#0x80
09F3 120000    2656            lcall   _SendATCommand
09F6           2657   ;        EFM8_JDY40_test.c:792: SendATCommand("AT+DVID\r\n");
09F6 90DEC0    2658            mov     dptr,#__str_10
09F9 75F080    2659            mov     b,#0x80
09FC 120000    2660            lcall   _SendATCommand
09FF           2661   ;        EFM8_JDY40_test.c:793: SendATCommand("AT+RFC120\r\n");
09FF 90DF00    2662            mov     dptr,#__str_11
0A02 75F080    2663            mov     b,#0x80
0A05 120000    2664            lcall   _SendATCommand
0A08           2665   ;        EFM8_JDY40_test.c:794: SendATCommand("AT+POWE\r\n");
0A08 90DF40    2666            mov     dptr,#__str_12
0A0B 75F080    2667            mov     b,#0x80
0A0E 120000    2668            lcall   _SendATCommand
0A11           2669   ;        EFM8_JDY40_test.c:795: SendATCommand("AT+CLSS\r\n");
0A11 90DF80    2670            mov     dptr,#__str_13
0A14 75F080    2671            mov     b,#0x80
0A17 120000    2672            lcall   _SendATCommand
0A1A           2673   ;        EFM8_JDY40_test.c:799: SendATCommand("AT+DVIDFFFF\r\n");  
0A1A 90DFC0    2674            mov     dptr,#__str_14
0A1D 75F080    2675            mov     b,#0x80
0A20 120000    2676            lcall   _SendATCommand
0A23           2677   ;        EFM8_JDY40_test.c:801: P1_5 = 0;
0A23 C295      2678            clr     _P1_5
0A25           2679   ;        EFM8_JDY40_test.c:802: while(1)
0A25           2680   L029026?:
0A25           2681   ;        EFM8_JDY40_test.c:804: EMAGNET = 0;
0A25 C295      2682            clr     _P1_5
0A27           2683   ;        EFM8_JDY40_test.c:806: count = GetPeriod(200);
0A27 9000C8    2684            mov     dptr,#0x00C8
0A2A 120000    2685            lcall   _GetPeriod
0A2D           2686   ;        EFM8_JDY40_test.c:807: f = GetFrequency(count);
0A2D 120000    2687            lcall   _GetFrequency
0A30           2688   ;        EFM8_JDY40_test.c:816: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0A30 75820E    2689            mov     dpl,#0x0E
0A33 120000    2690            lcall   _Volts_at_Pin
0A36 858230    2691            mov     _main_sloc0_1_0,dpl
0A39 858331    2692            mov     (_main_sloc0_1_0 + 1),dph
0A3C 85F032    2693            mov     (_main_sloc0_1_0 + 2),b
0A3F F533      2694            mov     (_main_sloc0_1_0 + 3),a
0A41 8530F0    2695            mov     _main_v_1_186,_main_sloc0_1_0
0A44 8531F1    2696            mov     (_main_v_1_186 + 1),(_main_sloc0_1_0 + 1)
0A47 8532F2    2697            mov     (_main_v_1_186 + 2),(_main_sloc0_1_0 + 2)
0A4A 8533F3    2698            mov     (_main_v_1_186 + 3),(_main_sloc0_1_0 + 3)
0A4D           2699   ;        EFM8_JDY40_test.c:817: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0A4D 758210    2700            mov     dpl,#0x10
0A50 120000    2701            lcall   _Volts_at_Pin
0A53 858230    2702            mov     _main_sloc0_1_0,dpl
0A56 858331    2703            mov     (_main_sloc0_1_0 + 1),dph
0A59 85F032    2704            mov     (_main_sloc0_1_0 + 2),b
0A5C F533      2705            mov     (_main_sloc0_1_0 + 3),a
0A5E 8530F4    2706            mov     (_main_v_1_186 + 0x0004),_main_sloc0_1_0
0A61 8531F5    2707            mov     ((_main_v_1_186 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0A64 8532F6    2708            mov     ((_main_v_1_186 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0A67 8533F7    2709            mov     ((_main_v_1_186 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0A6A           2710   ;        EFM8_JDY40_test.c:822: if(RXU1()) // Something has arrived
0A6A 120000    2711            lcall   _RXU1
0A6D 5000      2712            jnc     L029026?
0A6F           2713   ;        EFM8_JDY40_test.c:825: getstr1(buff, sizeof(buff));
0A6F 75F814    2714            mov     _getstr1_PARM_2,#0x14
0A72 901950    2715            mov     dptr,#_buff
0A75 75F040    2716            mov     b,#0x40
0A78 120000    2717            lcall   _getstr1
0A7B           2718   ;        EFM8_JDY40_test.c:827: if ( strcmp(buff, "A") == 0 )
0A7B 750080    2719            mov     _strcmp_PARM_2,#__str_15
0A7E 7501E0    2720            mov     (_strcmp_PARM_2 + 1),#(__str_15 >> 8)
0A81 750280    2721            mov     (_strcmp_PARM_2 + 2),#0x80
0A84 901950    2722            mov     dptr,#_buff
0A87 75F040    2723            mov     b,#0x40
0A8A 120000    2724            lcall   _strcmp
0A8D E582      2725            mov     a,dpl
0A8F 8583F0    2726            mov     b,dph
0A92 45F0      2727            orl     a,b
0A94 6000      2728            jz      L029042?
0A96 020000    2729            ljmp    L029009?
0A99           2730   L029042?:
0A99           2731   ;        EFM8_JDY40_test.c:829: waitms(500);
0A99 9001F4    2732            mov     dptr,#0x01F4
0A9C 120000    2733            lcall   _waitms
0A9F           2734   ;        EFM8_JDY40_test.c:830: while(1)
0A9F           2735   L029006?:
0A9F           2736   ;        EFM8_JDY40_test.c:832: waitms(5);
0A9F 900005    2737            mov     dptr,#0x0005
0AA2 120000    2738            lcall   _waitms
0AA5           2739   ;        EFM8_JDY40_test.c:833: direction=3; 
0AA5 757803    2740            mov     _direction,#0x03
0AA8 E4        2741            clr     a
0AA9 F579      2742            mov     (_direction + 1),a
0AAB           2743   ;        EFM8_JDY40_test.c:836: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0AAB 75820E    2744            mov     dpl,#0x0E
0AAE 120000    2745            lcall   _Volts_at_Pin
0AB1 858230    2746            mov     _main_sloc0_1_0,dpl
0AB4 858331    2747            mov     (_main_sloc0_1_0 + 1),dph
0AB7 85F032    2748            mov     (_main_sloc0_1_0 + 2),b
0ABA F533      2749            mov     (_main_sloc0_1_0 + 3),a
0ABC 8530F0    2750            mov     _main_v_1_186,_main_sloc0_1_0
0ABF 8531F1    2751            mov     (_main_v_1_186 + 1),(_main_sloc0_1_0 + 1)
0AC2 8532F2    2752            mov     (_main_v_1_186 + 2),(_main_sloc0_1_0 + 2)
0AC5 8533F3    2753            mov     (_main_v_1_186 + 3),(_main_sloc0_1_0 + 3)
0AC8           2754   ;        EFM8_JDY40_test.c:837: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0AC8 758210    2755            mov     dpl,#0x10
0ACB 120000    2756            lcall   _Volts_at_Pin
0ACE 858230    2757            mov     _main_sloc0_1_0,dpl
0AD1 858331    2758            mov     (_main_sloc0_1_0 + 1),dph
0AD4 85F032    2759            mov     (_main_sloc0_1_0 + 2),b
0AD7 F533      2760            mov     (_main_sloc0_1_0 + 3),a
0AD9 8530F4    2761            mov     (_main_v_1_186 + 0x0004),_main_sloc0_1_0
0ADC 8531F5    2762            mov     ((_main_v_1_186 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0ADF 8532F6    2763            mov     ((_main_v_1_186 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0AE2 8533F7    2764            mov     ((_main_v_1_186 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0AE5           2765   ;        EFM8_JDY40_test.c:838: count = GetPeriod(200);
0AE5 9000C8    2766            mov     dptr,#0x00C8
0AE8 120000    2767            lcall   _GetPeriod
0AEB           2768   ;        EFM8_JDY40_test.c:839: f = GetFrequency(count);
0AEB 120000    2769            lcall   _GetFrequency
0AEE 8582B0    2770            mov     _main_f_1_186,dpl
0AF1 8583B1    2771            mov     (_main_f_1_186 + 1),dph
0AF4 85F0B2    2772            mov     (_main_f_1_186 + 2),b
0AF7 F5B3      2773            mov     (_main_f_1_186 + 3),a
0AF9           2774   ;        EFM8_JDY40_test.c:840: automaticmode(v[0], v[1], f);
0AF9 85F030    2775            mov     _main_sloc0_1_0,_main_v_1_186
0AFC 85F131    2776            mov     (_main_sloc0_1_0 + 1),(_main_v_1_186 + 1)
0AFF 85F232    2777            mov     (_main_sloc0_1_0 + 2),(_main_v_1_186 + 2)
0B02 85F333    2778            mov     (_main_sloc0_1_0 + 3),(_main_v_1_186 + 3)
0B05 ACF4      2779            mov     r4,(_main_v_1_186 + 0x0004)
0B07 ADF5      2780            mov     r5,((_main_v_1_186 + 0x0004) + 1)
0B09 AAF6      2781            mov     r2,((_main_v_1_186 + 0x0004) + 2)
0B0B ABF7      2782            mov     r3,((_main_v_1_186 + 0x0004) + 3)
0B0D 85B082    2783            mov     dpl,_main_f_1_186
0B10 85B183    2784            mov     dph,(_main_f_1_186 + 1)
0B13 85B2F0    2785            mov     b,(_main_f_1_186 + 2)
0B16 E5B3      2786            mov     a,(_main_f_1_186 + 3)
0B18 C002      2787            push    ar2
0B1A C003      2788            push    ar3
0B1C C004      2789            push    ar4
0B1E C005      2790            push    ar5
0B20 120000    2791            lcall   ___slong2fs
0B23 8582E0    2792            mov     _automaticmode_PARM_3,dpl
0B26 8583E1    2793            mov     (_automaticmode_PARM_3 + 1),dph
0B29 85F0E2    2794            mov     (_automaticmode_PARM_3 + 2),b
0B2C F5E3      2795            mov     (_automaticmode_PARM_3 + 3),a
0B2E D005      2796            pop     ar5
0B30 D004      2797            pop     ar4
0B32 D003      2798            pop     ar3
0B34 D002      2799            pop     ar2
0B36 8C30      2800            mov     _automaticmode_PARM_2,r4
0B38 8D31      2801            mov     (_automaticmode_PARM_2 + 1),r5
0B3A 8A32      2802            mov     (_automaticmode_PARM_2 + 2),r2
0B3C 8B33      2803            mov     (_automaticmode_PARM_2 + 3),r3
0B3E 853082    2804            mov     dpl,_main_sloc0_1_0
0B41 853183    2805            mov     dph,(_main_sloc0_1_0 + 1)
0B44 8532F0    2806            mov     b,(_main_sloc0_1_0 + 2)
0B47 E533      2807            mov     a,(_main_sloc0_1_0 + 3)
0B49 120000    2808            lcall   _automaticmode
0B4C           2809   ;        EFM8_JDY40_test.c:842: if(RXU1())
0B4C 120000    2810            lcall   _RXU1
0B4F 4000      2811            jc      L029043?
0B51 020000    2812            ljmp    L029006?
0B54           2813   L029043?:
0B54           2814   ;        EFM8_JDY40_test.c:844: getstr1(buff, sizeof(buff));
0B54 75F814    2815            mov     _getstr1_PARM_2,#0x14
0B57 901950    2816            mov     dptr,#_buff
0B5A 75F040    2817            mov     b,#0x40
0B5D 120000    2818            lcall   _getstr1
0B60           2819   ;        EFM8_JDY40_test.c:845: if (strcmp(buff, "A") == 0 ) break;
0B60 750080    2820            mov     _strcmp_PARM_2,#__str_15
0B63 7501E0    2821            mov     (_strcmp_PARM_2 + 1),#(__str_15 >> 8)
0B66 750280    2822            mov     (_strcmp_PARM_2 + 2),#0x80
0B69 901950    2823            mov     dptr,#_buff
0B6C 75F040    2824            mov     b,#0x40
0B6F 120000    2825            lcall   _strcmp
0B72 E582      2826            mov     a,dpl
0B74 8583F0    2827            mov     b,dph
0B77 45F0      2828            orl     a,b
0B79 6000      2829            jz      L029044?
0B7B 020000    2830            ljmp    L029006?
0B7E           2831   L029044?:
0B7E           2832   L029009?:
0B7E           2833   ;        EFM8_JDY40_test.c:853: if ( strcmp(buff, "S") == 0 )    
0B7E 750040    2834            mov     _strcmp_PARM_2,#__str_16
0B81 7501E2    2835            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
0B84 750280    2836            mov     (_strcmp_PARM_2 + 2),#0x80
0B87 901950    2837            mov     dptr,#_buff
0B8A 75F040    2838            mov     b,#0x40
0B8D 120000    2839            lcall   _strcmp
0B90 E582      2840            mov     a,dpl
0B92 8583F0    2841            mov     b,dph
0B95 45F0      2842            orl     a,b
0B97 7000      2843            jnz     L029011?
0B99           2844   ;        EFM8_JDY40_test.c:855: servomotion();
0B99 120000    2845            lcall   _servomotion
0B9C           2846   ;        EFM8_JDY40_test.c:856: printf("this should be the motor function");
0B9C 74C0      2847            mov     a,#__str_17
0B9E C0E0      2848            push    acc
0BA0 74E2      2849            mov     a,#(__str_17 >> 8)
0BA2 C0E0      2850            push    acc
0BA4 7480      2851            mov     a,#0x80
0BA6 C0E0      2852            push    acc
0BA8 120000    2853            lcall   _printf
0BAB 1581      2854            dec     sp
0BAD 1581      2855            dec     sp
0BAF 1581      2856            dec     sp
0BB1           2857   ;        EFM8_JDY40_test.c:857: waitms(500);
0BB1 9001F4    2858            mov     dptr,#0x01F4
0BB4 120000    2859            lcall   _waitms
0BB7           2860   L029011?:
0BB7           2861   ;        EFM8_JDY40_test.c:861: sscanf(buff, "K%uW%uG%d\n", &adcwheel1, &adcwheel2, &which);
0BB7 7470      2862            mov     a,#_main_which_1_186
0BB9 C0E0      2863            push    acc
0BBB 74BD      2864            mov     a,#(_main_which_1_186 >> 8)
0BBD C0E0      2865            push    acc
0BBF 7440      2866            mov     a,#0x40
0BC1 C0E0      2867            push    acc
0BC3 7420      2868            mov     a,#_main_adcwheel2_1_186
0BC5 C0E0      2869            push    acc
0BC7 74BD      2870            mov     a,#(_main_adcwheel2_1_186 >> 8)
0BC9 C0E0      2871            push    acc
0BCB 7440      2872            mov     a,#0x40
0BCD C0E0      2873            push    acc
0BCF 74D0      2874            mov     a,#_main_adcwheel1_1_186
0BD1 C0E0      2875            push    acc
0BD3 74BC      2876            mov     a,#(_main_adcwheel1_1_186 >> 8)
0BD5 C0E0      2877            push    acc
0BD7 7440      2878            mov     a,#0x40
0BD9 C0E0      2879            push    acc
0BDB 7400      2880            mov     a,#__str_18
0BDD C0E0      2881            push    acc
0BDF 74E3      2882            mov     a,#(__str_18 >> 8)
0BE1 C0E0      2883            push    acc
0BE3 7480      2884            mov     a,#0x80
0BE5 C0E0      2885            push    acc
0BE7 7450      2886            mov     a,#_buff
0BE9 C0E0      2887            push    acc
0BEB 7419      2888            mov     a,#(_buff >> 8)
0BED C0E0      2889            push    acc
0BEF 7440      2890            mov     a,#0x40
0BF1 C0E0      2891            push    acc
0BF3 120000    2892            lcall   _sscanf
0BF6 E581      2893            mov     a,sp
0BF8 24F1      2894            add     a,#0xf1
0BFA F581      2895            mov     sp,a
0BFC           2896   ;        EFM8_JDY40_test.c:863: if (which == 0 )
0BFC E570      2897            mov     a,_main_which_1_186
0BFE 4571      2898            orl     a,(_main_which_1_186 + 1)
0C00 7000      2899            jnz     L029013?
0C02           2900   ;        EFM8_JDY40_test.c:865: P2_5 = 0;
0C02 C2A5      2901            clr     _P2_5
0C04           2902   ;        EFM8_JDY40_test.c:866: P3_7=0;
0C04 C2B7      2903            clr     _P3_7
0C06           2904   ;        EFM8_JDY40_test.c:867: direction = 1;
0C06 757801    2905            mov     _direction,#0x01
0C09 E4        2906            clr     a
0C0A F579      2907            mov     (_direction + 1),a
0C0C 8000      2908            sjmp    L029014?
0C0E           2909   L029013?:
0C0E           2910   ;        EFM8_JDY40_test.c:871: P3_2=0;
0C0E C2B2      2911            clr     _P3_2
0C10           2912   ;        EFM8_JDY40_test.c:872: P3_0=0;
0C10 C2B0      2913            clr     _P3_0
0C12           2914   ;        EFM8_JDY40_test.c:873: direction = 0;
0C12 E4        2915            clr     a
0C13 F578      2916            mov     _direction,a
0C15 F579      2917            mov     (_direction + 1),a
0C17           2918   L029014?:
0C17           2919   ;        EFM8_JDY40_test.c:877: pwm_duty4 = adcwheel2;
0C17 852038    2920            mov     _pwm_duty4,_main_adcwheel2_1_186
0C1A 852139    2921            mov     (_pwm_duty4 + 1),(_main_adcwheel2_1_186 + 1)
0C1D           2922   ;        EFM8_JDY40_test.c:878: if ( adcwheel1 == 5535 ) adcwheel1 = 65535;
0C1D 749F      2923            mov     a,#0x9F
0C1F B5D000    2924            cjne    a,_main_adcwheel1_1_186,L029016?
0C22 7415      2925            mov     a,#0x15
0C24 B5D100    2926            cjne    a,(_main_adcwheel1_1_186 + 1),L029016?
0C27 75D0FF    2927            mov     _main_adcwheel1_1_186,#0xFF
0C2A 75D1FF    2928            mov     (_main_adcwheel1_1_186 + 1),#0xFF
0C2D           2929   L029016?:
0C2D           2930   ;        EFM8_JDY40_test.c:879: if ( adcwheel1 == 5086 ) adcwheel1 = 65535;
0C2D 74DE      2931            mov     a,#0xDE
0C2F B5D040    2932            cjne    a,_main_adcwheel1_1_186,L029018?
0C32 7413      2933            mov     a,#0x13
0C34 B5D140    2934            cjne    a,(_main_adcwheel1_1_186 + 1),L029018?
0C37 75D0FF    2935            mov     _main_adcwheel1_1_186,#0xFF
0C3A 75D1FF    2936            mov     (_main_adcwheel1_1_186 + 1),#0xFF
0C3D           2937   L029018?:
0C3D           2938   ;        EFM8_JDY40_test.c:880: if ( adcwheel1 == 535 ) adcwheel1 = 65535;
0C3D 7417      2939            mov     a,#0x17
0C3F B5D080    2940            cjne    a,_main_adcwheel1_1_186,L029020?
0C42 7402      2941            mov     a,#0x02
0C44 B5D180    2942            cjne    a,(_main_adcwheel1_1_186 + 1),L029020?
0C47 75D0FF    2943            mov     _main_adcwheel1_1_186,#0xFF
0C4A 75D1FF    2944            mov     (_main_adcwheel1_1_186 + 1),#0xFF
0C4D           2945   L029020?:
0C4D           2946   ;        EFM8_JDY40_test.c:881: if ( adcwheel1 == 86 ) adcwheel1 = 65535;
0C4D 7456      2947            mov     a,#0x56
0C4F B5D0C0    2948            cjne    a,_main_adcwheel1_1_186,L029053?
0C52 E4        2949            clr     a
0C53 B5D1C0    2950            cjne    a,(_main_adcwheel1_1_186 + 1),L029053?
0C56 8000      2951            sjmp    L029054?
0C58           2952   L029053?:
0C58 8000      2953            sjmp    L029022?
0C5A           2954   L029054?:
0C5A 75D0FF    2955            mov     _main_adcwheel1_1_186,#0xFF
0C5D 75D1FF    2956            mov     (_main_adcwheel1_1_186 + 1),#0xFF
0C60           2957   L029022?:
0C60           2958   ;        EFM8_JDY40_test.c:882: pwm_duty2 = adcwheel1;
0C60 85D0B8    2959            mov     _pwm_duty2,_main_adcwheel1_1_186
0C63 85D1B9    2960            mov     (_pwm_duty2 + 1),(_main_adcwheel1_1_186 + 1)
0C66           2961   ;        EFM8_JDY40_test.c:889: waitms(5); // The radio seems to need this delay...
0C66 900005    2962            mov     dptr,#0x0005
0C69 120000    2963            lcall   _waitms
0C6C 020000    2964            ljmp    L029026?
0C6F           2965            rseg R_CSEG
0C6F           2966   
0000           2967            rseg R_XINIT
0000           2968   
0000           2969            rseg R_CONST
0000           2970   __str_0:
0000 436F6D6D  2971            db 'Command: %s'
     616E643A
     202573
000B 00        2972            db 0x00
000C           2973   __str_1:
000C 52657370  2974            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2975            db 0x0D
0019 0A        2976            db 0x0A
001A 00        2977            db 0x00
001B           2978   __str_2:
001B 41542B44  2979            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2980            db 0x0D
0027 0A        2981            db 0x0A
0028 00        2982            db 0x00
0029           2983   _PrintNumber_HexDigit_1_164:
0029 30313233  2984            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0039 00        2985            db 0x00
003A           2986   __str_4:
003A 204E4F20  2987            db ' NO SIGNAL                     '
     5349474E
     414C2020
     20202020
     20202020
     20202020
     20202020
     202020
0059 0D        2988            db 0x0D
005A 00        2989            db 0x00
005B           2990   __str_5:
005B 256C64    2991            db '%ld'
005E 0A        2992            db 0x0A
005F 0D        2993            db 0x0D
0060 00        2994            db 0x00
0061           2995   __str_6:
0061 0D        2996            db 0x0D
0062 0A        2997            db 0x0A
0063 45464D38  2998            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
007E 0D        2999            db 0x0D
007F 0A        3000            db 0x0A
0080 00        3001            db 0x00
0081           3002   __str_7:
0081 41542B56  3003            db 'AT+VER'
     4552
0087 0D        3004            db 0x0D
0088 0A        3005            db 0x0A
0089 00        3006            db 0x00
008A           3007   __str_8:
008A 41542B42  3008            db 'AT+BAUD'
     415544
0091 0D        3009            db 0x0D
0092 0A        3010            db 0x0A
0093 00        3011            db 0x00
0094           3012   __str_9:
0094 41542B52  3013            db 'AT+RFID'
     464944
009B 0D        3014            db 0x0D
009C 0A        3015            db 0x0A
009D 00        3016            db 0x00
009E           3017   __str_10:
009E 41542B44  3018            db 'AT+DVID'
     564944
00A5 0D        3019            db 0x0D
00A6 0A        3020            db 0x0A
00A7 00        3021            db 0x00
00A8           3022   __str_11:
00A8 41542B52  3023            db 'AT+RFC120'
     46433132
     30
00B1 0D        3024            db 0x0D
00B2 0A        3025            db 0x0A
00B3 00        3026            db 0x00
00B4           3027   __str_12:
00B4 41542B50  3028            db 'AT+POWE'
     4F5745
00BB 0D        3029            db 0x0D
00BC 0A        3030            db 0x0A
00BD 00        3031            db 0x00
00BE           3032   __str_13:
00BE 41542B43  3033            db 'AT+CLSS'
     4C5353
00C5 0D        3034            db 0x0D
00C6 0A        3035            db 0x0A
00C7 00        3036            db 0x00
00C8           3037   __str_14:
00C8 41542B44  3038            db 'AT+DVIDFFFF'
     56494446
     464646
00D3 0D        3039            db 0x0D
00D4 0A        3040            db 0x0A
00D5 00        3041            db 0x00
00D6           3042   __str_15:
00D6 41        3043            db 'A'
00D7 00        3044            db 0x00
00D8           3045   __str_16:
00D8 53        3046            db 'S'
00D9 00        3047            db 0x00
00DA           3048   __str_17:
00DA 74686973  3049            db 'this should be the motor function'
     2073686F
     756C6420
     62652074
     6865206D
     6F746F72
     2066756E
     6374696F
     6E
00FB 00        3050            db 0x00
00FC           3051   __str_18:
00FC 4B257557  3052            db 'K%uW%uG%d'
     25754725
     64
0105 0A        3053            db 0x0A
0106 00        3054            db 0x00
0107           3055   
0096           3056            CSEG
0096           3057   
0096           3058   end
