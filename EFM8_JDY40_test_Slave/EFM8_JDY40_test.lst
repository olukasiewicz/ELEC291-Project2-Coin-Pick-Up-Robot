0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 19 23:12:12 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _ReceptionOff
0000             28            public _SendATCommand
0000             29            public _waitms_or_RI1
0000             30            public _RXU1
0000             31            public _getstr1
0000             32            public _getchar1_with_timeout
0000             33            public _getchar1
0000             34            public _sendstr1
0000             35            public _putchar1
0000             36            public _UART1_Init
0000             37            public _waitms
0000             38            public _Timer3us
0000             39            public __c51_external_startup
0000             40            public _msg
0000             41            public _buff
0000             42            public _getstr1_PARM_2
0000             43   ;--------------------------------------------------------
0000             44   ; Special Function Registers
0000             45   ;--------------------------------------------------------
0000             46   _ACC            DATA 0xe0
0000             47   _ADC0ASAH       DATA 0xb6
0000             48   _ADC0ASAL       DATA 0xb5
0000             49   _ADC0ASCF       DATA 0xa1
0000             50   _ADC0ASCT       DATA 0xc7
0000             51   _ADC0CF0        DATA 0xbc
0000             52   _ADC0CF1        DATA 0xb9
0000             53   _ADC0CF2        DATA 0xdf
0000             54   _ADC0CN0        DATA 0xe8
0000             55   _ADC0CN1        DATA 0xb2
0000             56   _ADC0CN2        DATA 0xb3
0000             57   _ADC0GTH        DATA 0xc4
0000             58   _ADC0GTL        DATA 0xc3
0000             59   _ADC0H          DATA 0xbe
0000             60   _ADC0L          DATA 0xbd
0000             61   _ADC0LTH        DATA 0xc6
0000             62   _ADC0LTL        DATA 0xc5
0000             63   _ADC0MX         DATA 0xbb
0000             64   _B              DATA 0xf0
0000             65   _CKCON0         DATA 0x8e
0000             66   _CKCON1         DATA 0xa6
0000             67   _CLEN0          DATA 0xc6
0000             68   _CLIE0          DATA 0xc7
0000             69   _CLIF0          DATA 0xe8
0000             70   _CLKSEL         DATA 0xa9
0000             71   _CLOUT0         DATA 0xd1
0000             72   _CLU0CF         DATA 0xb1
0000             73   _CLU0FN         DATA 0xaf
0000             74   _CLU0MX         DATA 0x84
0000             75   _CLU1CF         DATA 0xb3
0000             76   _CLU1FN         DATA 0xb2
0000             77   _CLU1MX         DATA 0x85
0000             78   _CLU2CF         DATA 0xb6
0000             79   _CLU2FN         DATA 0xb5
0000             80   _CLU2MX         DATA 0x91
0000             81   _CLU3CF         DATA 0xbf
0000             82   _CLU3FN         DATA 0xbe
0000             83   _CLU3MX         DATA 0xae
0000             84   _CMP0CN0        DATA 0x9b
0000             85   _CMP0CN1        DATA 0x99
0000             86   _CMP0MD         DATA 0x9d
0000             87   _CMP0MX         DATA 0x9f
0000             88   _CMP1CN0        DATA 0xbf
0000             89   _CMP1CN1        DATA 0xac
0000             90   _CMP1MD         DATA 0xab
0000             91   _CMP1MX         DATA 0xaa
0000             92   _CRC0CN0        DATA 0xce
0000             93   _CRC0CN1        DATA 0x86
0000             94   _CRC0CNT        DATA 0xd3
0000             95   _CRC0DAT        DATA 0xcb
0000             96   _CRC0FLIP       DATA 0xcf
0000             97   _CRC0IN         DATA 0xca
0000             98   _CRC0ST         DATA 0xd2
0000             99   _DAC0CF0        DATA 0x91
0000            100   _DAC0CF1        DATA 0x92
0000            101   _DAC0H          DATA 0x85
0000            102   _DAC0L          DATA 0x84
0000            103   _DAC1CF0        DATA 0x93
0000            104   _DAC1CF1        DATA 0x94
0000            105   _DAC1H          DATA 0x8a
0000            106   _DAC1L          DATA 0x89
0000            107   _DAC2CF0        DATA 0x95
0000            108   _DAC2CF1        DATA 0x96
0000            109   _DAC2H          DATA 0x8c
0000            110   _DAC2L          DATA 0x8b
0000            111   _DAC3CF0        DATA 0x9a
0000            112   _DAC3CF1        DATA 0x9c
0000            113   _DAC3H          DATA 0x8e
0000            114   _DAC3L          DATA 0x8d
0000            115   _DACGCF0        DATA 0x88
0000            116   _DACGCF1        DATA 0x98
0000            117   _DACGCF2        DATA 0xa2
0000            118   _DERIVID        DATA 0xad
0000            119   _DEVICEID       DATA 0xb5
0000            120   _DPH            DATA 0x83
0000            121   _DPL            DATA 0x82
0000            122   _EIE1           DATA 0xe6
0000            123   _EIE2           DATA 0xf3
0000            124   _EIP1           DATA 0xbb
0000            125   _EIP1H          DATA 0xee
0000            126   _EIP2           DATA 0xed
0000            127   _EIP2H          DATA 0xf6
0000            128   _EMI0CN         DATA 0xe7
0000            129   _FLKEY          DATA 0xb7
0000            130   _HFO0CAL        DATA 0xc7
0000            131   _HFO1CAL        DATA 0xd6
0000            132   _HFOCN          DATA 0xef
0000            133   _I2C0ADM        DATA 0xff
0000            134   _I2C0CN0        DATA 0xba
0000            135   _I2C0DIN        DATA 0xbc
0000            136   _I2C0DOUT       DATA 0xbb
0000            137   _I2C0FCN0       DATA 0xad
0000            138   _I2C0FCN1       DATA 0xab
0000            139   _I2C0FCT        DATA 0xf5
0000            140   _I2C0SLAD       DATA 0xbd
0000            141   _I2C0STAT       DATA 0xb9
0000            142   _IE             DATA 0xa8
0000            143   _IP             DATA 0xb8
0000            144   _IPH            DATA 0xf2
0000            145   _IT01CF         DATA 0xe4
0000            146   _LFO0CN         DATA 0xb1
0000            147   _P0             DATA 0x80
0000            148   _P0MASK         DATA 0xfe
0000            149   _P0MAT          DATA 0xfd
0000            150   _P0MDIN         DATA 0xf1
0000            151   _P0MDOUT        DATA 0xa4
0000            152   _P0SKIP         DATA 0xd4
0000            153   _P1             DATA 0x90
0000            154   _P1MASK         DATA 0xee
0000            155   _P1MAT          DATA 0xed
0000            156   _P1MDIN         DATA 0xf2
0000            157   _P1MDOUT        DATA 0xa5
0000            158   _P1SKIP         DATA 0xd5
0000            159   _P2             DATA 0xa0
0000            160   _P2MASK         DATA 0xfc
0000            161   _P2MAT          DATA 0xfb
0000            162   _P2MDIN         DATA 0xf3
0000            163   _P2MDOUT        DATA 0xa6
0000            164   _P2SKIP         DATA 0xcc
0000            165   _P3             DATA 0xb0
0000            166   _P3MDIN         DATA 0xf4
0000            167   _P3MDOUT        DATA 0x9c
0000            168   _PCA0CENT       DATA 0x9e
0000            169   _PCA0CLR        DATA 0x9c
0000            170   _PCA0CN0        DATA 0xd8
0000            171   _PCA0CPH0       DATA 0xfc
0000            172   _PCA0CPH1       DATA 0xea
0000            173   _PCA0CPH2       DATA 0xec
0000            174   _PCA0CPH3       DATA 0xf5
0000            175   _PCA0CPH4       DATA 0x85
0000            176   _PCA0CPH5       DATA 0xde
0000            177   _PCA0CPL0       DATA 0xfb
0000            178   _PCA0CPL1       DATA 0xe9
0000            179   _PCA0CPL2       DATA 0xeb
0000            180   _PCA0CPL3       DATA 0xf4
0000            181   _PCA0CPL4       DATA 0x84
0000            182   _PCA0CPL5       DATA 0xdd
0000            183   _PCA0CPM0       DATA 0xda
0000            184   _PCA0CPM1       DATA 0xdb
0000            185   _PCA0CPM2       DATA 0xdc
0000            186   _PCA0CPM3       DATA 0xae
0000            187   _PCA0CPM4       DATA 0xaf
0000            188   _PCA0CPM5       DATA 0xcc
0000            189   _PCA0H          DATA 0xfa
0000            190   _PCA0L          DATA 0xf9
0000            191   _PCA0MD         DATA 0xd9
0000            192   _PCA0POL        DATA 0x96
0000            193   _PCA0PWM        DATA 0xf7
0000            194   _PCON0          DATA 0x87
0000            195   _PCON1          DATA 0xcd
0000            196   _PFE0CN         DATA 0xc1
0000            197   _PRTDRV         DATA 0xf6
0000            198   _PSCTL          DATA 0x8f
0000            199   _PSTAT0         DATA 0xaa
0000            200   _PSW            DATA 0xd0
0000            201   _REF0CN         DATA 0xd1
0000            202   _REG0CN         DATA 0xc9
0000            203   _REVID          DATA 0xb6
0000            204   _RSTSRC         DATA 0xef
0000            205   _SBCON1         DATA 0x94
0000            206   _SBRLH1         DATA 0x96
0000            207   _SBRLL1         DATA 0x95
0000            208   _SBUF           DATA 0x99
0000            209   _SBUF0          DATA 0x99
0000            210   _SBUF1          DATA 0x92
0000            211   _SCON           DATA 0x98
0000            212   _SCON0          DATA 0x98
0000            213   _SCON1          DATA 0xc8
0000            214   _SFRPAGE        DATA 0xa7
0000            215   _SFRPGCN        DATA 0xbc
0000            216   _SFRSTACK       DATA 0xd7
0000            217   _SMB0ADM        DATA 0xd6
0000            218   _SMB0ADR        DATA 0xd7
0000            219   _SMB0CF         DATA 0xc1
0000            220   _SMB0CN0        DATA 0xc0
0000            221   _SMB0DAT        DATA 0xc2
0000            222   _SMB0FCN0       DATA 0xc3
0000            223   _SMB0FCN1       DATA 0xc4
0000            224   _SMB0FCT        DATA 0xef
0000            225   _SMB0RXLN       DATA 0xc5
0000            226   _SMB0TC         DATA 0xac
0000            227   _SMOD1          DATA 0x93
0000            228   _SP             DATA 0x81
0000            229   _SPI0CFG        DATA 0xa1
0000            230   _SPI0CKR        DATA 0xa2
0000            231   _SPI0CN0        DATA 0xf8
0000            232   _SPI0DAT        DATA 0xa3
0000            233   _SPI0FCN0       DATA 0x9a
0000            234   _SPI0FCN1       DATA 0x9b
0000            235   _SPI0FCT        DATA 0xf7
0000            236   _SPI0PCF        DATA 0xdf
0000            237   _TCON           DATA 0x88
0000            238   _TH0            DATA 0x8c
0000            239   _TH1            DATA 0x8d
0000            240   _TL0            DATA 0x8a
0000            241   _TL1            DATA 0x8b
0000            242   _TMOD           DATA 0x89
0000            243   _TMR2CN0        DATA 0xc8
0000            244   _TMR2CN1        DATA 0xfd
0000            245   _TMR2H          DATA 0xcf
0000            246   _TMR2L          DATA 0xce
0000            247   _TMR2RLH        DATA 0xcb
0000            248   _TMR2RLL        DATA 0xca
0000            249   _TMR3CN0        DATA 0x91
0000            250   _TMR3CN1        DATA 0xfe
0000            251   _TMR3H          DATA 0x95
0000            252   _TMR3L          DATA 0x94
0000            253   _TMR3RLH        DATA 0x93
0000            254   _TMR3RLL        DATA 0x92
0000            255   _TMR4CN0        DATA 0x98
0000            256   _TMR4CN1        DATA 0xff
0000            257   _TMR4H          DATA 0xa5
0000            258   _TMR4L          DATA 0xa4
0000            259   _TMR4RLH        DATA 0xa3
0000            260   _TMR4RLL        DATA 0xa2
0000            261   _TMR5CN0        DATA 0xc0
0000            262   _TMR5CN1        DATA 0xf1
0000            263   _TMR5H          DATA 0xd5
0000            264   _TMR5L          DATA 0xd4
0000            265   _TMR5RLH        DATA 0xd3
0000            266   _TMR5RLL        DATA 0xd2
0000            267   _UART0PCF       DATA 0xd9
0000            268   _UART1FCN0      DATA 0x9d
0000            269   _UART1FCN1      DATA 0xd8
0000            270   _UART1FCT       DATA 0xfa
0000            271   _UART1LIN       DATA 0x9e
0000            272   _UART1PCF       DATA 0xda
0000            273   _VDM0CN         DATA 0xff
0000            274   _WDTCN          DATA 0x97
0000            275   _XBR0           DATA 0xe1
0000            276   _XBR1           DATA 0xe2
0000            277   _XBR2           DATA 0xe3
0000            278   _XOSC0CN        DATA 0x86
0000            279   _DPTR           DATA 0x8382
0000            280   _TMR2RL         DATA 0xcbca
0000            281   _TMR3RL         DATA 0x9392
0000            282   _TMR4RL         DATA 0xa3a2
0000            283   _TMR5RL         DATA 0xd3d2
0000            284   _TMR0           DATA 0x8c8a
0000            285   _TMR1           DATA 0x8d8b
0000            286   _TMR2           DATA 0xcfce
0000            287   _TMR3           DATA 0x9594
0000            288   _TMR4           DATA 0xa5a4
0000            289   _TMR5           DATA 0xd5d4
0000            290   _SBRL1          DATA 0x9695
0000            291   _PCA0           DATA 0xfaf9
0000            292   _PCA0CP0        DATA 0xfcfb
0000            293   _PCA0CP1        DATA 0xeae9
0000            294   _PCA0CP2        DATA 0xeceb
0000            295   _PCA0CP3        DATA 0xf5f4
0000            296   _PCA0CP4        DATA 0x8584
0000            297   _PCA0CP5        DATA 0xdedd
0000            298   _ADC0ASA        DATA 0xb6b5
0000            299   _ADC0GT         DATA 0xc4c3
0000            300   _ADC0           DATA 0xbebd
0000            301   _ADC0LT         DATA 0xc6c5
0000            302   _DAC0           DATA 0x8584
0000            303   _DAC1           DATA 0x8a89
0000            304   _DAC2           DATA 0x8c8b
0000            305   _DAC3           DATA 0x8e8d
0000            306   ;--------------------------------------------------------
0000            307   ; special function bits
0000            308   ;--------------------------------------------------------
0000            309   _ACC_0          BIT 0xe0
0000            310   _ACC_1          BIT 0xe1
0000            311   _ACC_2          BIT 0xe2
0000            312   _ACC_3          BIT 0xe3
0000            313   _ACC_4          BIT 0xe4
0000            314   _ACC_5          BIT 0xe5
0000            315   _ACC_6          BIT 0xe6
0000            316   _ACC_7          BIT 0xe7
0000            317   _TEMPE          BIT 0xe8
0000            318   _ADGN0          BIT 0xe9
0000            319   _ADGN1          BIT 0xea
0000            320   _ADWINT         BIT 0xeb
0000            321   _ADBUSY         BIT 0xec
0000            322   _ADINT          BIT 0xed
0000            323   _IPOEN          BIT 0xee
0000            324   _ADEN           BIT 0xef
0000            325   _B_0            BIT 0xf0
0000            326   _B_1            BIT 0xf1
0000            327   _B_2            BIT 0xf2
0000            328   _B_3            BIT 0xf3
0000            329   _B_4            BIT 0xf4
0000            330   _B_5            BIT 0xf5
0000            331   _B_6            BIT 0xf6
0000            332   _B_7            BIT 0xf7
0000            333   _C0FIF          BIT 0xe8
0000            334   _C0RIF          BIT 0xe9
0000            335   _C1FIF          BIT 0xea
0000            336   _C1RIF          BIT 0xeb
0000            337   _C2FIF          BIT 0xec
0000            338   _C2RIF          BIT 0xed
0000            339   _C3FIF          BIT 0xee
0000            340   _C3RIF          BIT 0xef
0000            341   _D1SRC0         BIT 0x88
0000            342   _D1SRC1         BIT 0x89
0000            343   _D1AMEN         BIT 0x8a
0000            344   _D01REFSL       BIT 0x8b
0000            345   _D3SRC0         BIT 0x8c
0000            346   _D3SRC1         BIT 0x8d
0000            347   _D3AMEN         BIT 0x8e
0000            348   _D23REFSL       BIT 0x8f
0000            349   _D0UDIS         BIT 0x98
0000            350   _D1UDIS         BIT 0x99
0000            351   _D2UDIS         BIT 0x9a
0000            352   _D3UDIS         BIT 0x9b
0000            353   _EX0            BIT 0xa8
0000            354   _ET0            BIT 0xa9
0000            355   _EX1            BIT 0xaa
0000            356   _ET1            BIT 0xab
0000            357   _ES0            BIT 0xac
0000            358   _ET2            BIT 0xad
0000            359   _ESPI0          BIT 0xae
0000            360   _EA             BIT 0xaf
0000            361   _PX0            BIT 0xb8
0000            362   _PT0            BIT 0xb9
0000            363   _PX1            BIT 0xba
0000            364   _PT1            BIT 0xbb
0000            365   _PS0            BIT 0xbc
0000            366   _PT2            BIT 0xbd
0000            367   _PSPI0          BIT 0xbe
0000            368   _P0_0           BIT 0x80
0000            369   _P0_1           BIT 0x81
0000            370   _P0_2           BIT 0x82
0000            371   _P0_3           BIT 0x83
0000            372   _P0_4           BIT 0x84
0000            373   _P0_5           BIT 0x85
0000            374   _P0_6           BIT 0x86
0000            375   _P0_7           BIT 0x87
0000            376   _P1_0           BIT 0x90
0000            377   _P1_1           BIT 0x91
0000            378   _P1_2           BIT 0x92
0000            379   _P1_3           BIT 0x93
0000            380   _P1_4           BIT 0x94
0000            381   _P1_5           BIT 0x95
0000            382   _P1_6           BIT 0x96
0000            383   _P1_7           BIT 0x97
0000            384   _P2_0           BIT 0xa0
0000            385   _P2_1           BIT 0xa1
0000            386   _P2_2           BIT 0xa2
0000            387   _P2_3           BIT 0xa3
0000            388   _P2_4           BIT 0xa4
0000            389   _P2_5           BIT 0xa5
0000            390   _P2_6           BIT 0xa6
0000            391   _P3_0           BIT 0xb0
0000            392   _P3_1           BIT 0xb1
0000            393   _P3_2           BIT 0xb2
0000            394   _P3_3           BIT 0xb3
0000            395   _P3_4           BIT 0xb4
0000            396   _P3_7           BIT 0xb7
0000            397   _CCF0           BIT 0xd8
0000            398   _CCF1           BIT 0xd9
0000            399   _CCF2           BIT 0xda
0000            400   _CCF3           BIT 0xdb
0000            401   _CCF4           BIT 0xdc
0000            402   _CCF5           BIT 0xdd
0000            403   _CR             BIT 0xde
0000            404   _CF             BIT 0xdf
0000            405   _PARITY         BIT 0xd0
0000            406   _F1             BIT 0xd1
0000            407   _OV             BIT 0xd2
0000            408   _RS0            BIT 0xd3
0000            409   _RS1            BIT 0xd4
0000            410   _F0             BIT 0xd5
0000            411   _AC             BIT 0xd6
0000            412   _CY             BIT 0xd7
0000            413   _RI             BIT 0x98
0000            414   _TI             BIT 0x99
0000            415   _RB8            BIT 0x9a
0000            416   _TB8            BIT 0x9b
0000            417   _REN            BIT 0x9c
0000            418   _CE             BIT 0x9d
0000            419   _SMODE          BIT 0x9e
0000            420   _RI1            BIT 0xc8
0000            421   _TI1            BIT 0xc9
0000            422   _RBX1           BIT 0xca
0000            423   _TBX1           BIT 0xcb
0000            424   _REN1           BIT 0xcc
0000            425   _PERR1          BIT 0xcd
0000            426   _OVR1           BIT 0xce
0000            427   _SI             BIT 0xc0
0000            428   _ACK            BIT 0xc1
0000            429   _ARBLOST        BIT 0xc2
0000            430   _ACKRQ          BIT 0xc3
0000            431   _STO            BIT 0xc4
0000            432   _STA            BIT 0xc5
0000            433   _TXMODE         BIT 0xc6
0000            434   _MASTER         BIT 0xc7
0000            435   _SPIEN          BIT 0xf8
0000            436   _TXNF           BIT 0xf9
0000            437   _NSSMD0         BIT 0xfa
0000            438   _NSSMD1         BIT 0xfb
0000            439   _RXOVRN         BIT 0xfc
0000            440   _MODF           BIT 0xfd
0000            441   _WCOL           BIT 0xfe
0000            442   _SPIF           BIT 0xff
0000            443   _IT0            BIT 0x88
0000            444   _IE0            BIT 0x89
0000            445   _IT1            BIT 0x8a
0000            446   _IE1            BIT 0x8b
0000            447   _TR0            BIT 0x8c
0000            448   _TF0            BIT 0x8d
0000            449   _TR1            BIT 0x8e
0000            450   _TF1            BIT 0x8f
0000            451   _T2XCLK0        BIT 0xc8
0000            452   _T2XCLK1        BIT 0xc9
0000            453   _TR2            BIT 0xca
0000            454   _T2SPLIT        BIT 0xcb
0000            455   _TF2CEN         BIT 0xcc
0000            456   _TF2LEN         BIT 0xcd
0000            457   _TF2L           BIT 0xce
0000            458   _TF2H           BIT 0xcf
0000            459   _T4XCLK0        BIT 0x98
0000            460   _T4XCLK1        BIT 0x99
0000            461   _TR4            BIT 0x9a
0000            462   _T4SPLIT        BIT 0x9b
0000            463   _TF4CEN         BIT 0x9c
0000            464   _TF4LEN         BIT 0x9d
0000            465   _TF4L           BIT 0x9e
0000            466   _TF4H           BIT 0x9f
0000            467   _T5XCLK0        BIT 0xc0
0000            468   _T5XCLK1        BIT 0xc1
0000            469   _TR5            BIT 0xc2
0000            470   _T5SPLIT        BIT 0xc3
0000            471   _TF5CEN         BIT 0xc4
0000            472   _TF5LEN         BIT 0xc5
0000            473   _TF5L           BIT 0xc6
0000            474   _TF5H           BIT 0xc7
0000            475   _RIE            BIT 0xd8
0000            476   _RXTO0          BIT 0xd9
0000            477   _RXTO1          BIT 0xda
0000            478   _RFRQ           BIT 0xdb
0000            479   _TIE            BIT 0xdc
0000            480   _TXHOLD         BIT 0xdd
0000            481   _TXNF1          BIT 0xde
0000            482   _TFRQ           BIT 0xdf
0000            483   ;--------------------------------------------------------
0000            484   ; overlayable register banks
0000            485   ;--------------------------------------------------------
0000            486            rbank0 segment data overlay
0000            487   ;--------------------------------------------------------
0000            488   ; internal ram data
0000            489   ;--------------------------------------------------------
0000            490            rseg R_DSEG
0000            491   _getstr1_PARM_2:
0000            492            ds 1
0001            493   ;--------------------------------------------------------
0001            494   ; overlayable items in internal ram 
0001            495   ;--------------------------------------------------------
0000            496            rseg    R_OSEG
0000            497            rseg    R_OSEG
0000            498            rseg    R_OSEG
0000            499   ;--------------------------------------------------------
0000            500   ; indirectly addressable internal ram data
0000            501   ;--------------------------------------------------------
0000            502            rseg R_ISEG
0000            503   _buff:
0000            504            ds 20
0014            505   _msg:
0014            506            ds 20
0028            507   ;--------------------------------------------------------
0028            508   ; absolute internal ram data
0028            509   ;--------------------------------------------------------
0000            510            DSEG
0000            511   ;--------------------------------------------------------
0000            512   ; bit data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_BSEG
0000            515   ;--------------------------------------------------------
0000            516   ; paged external ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_PSEG
0000            519   ;--------------------------------------------------------
0000            520   ; external ram data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_XSEG
0000            523   ;--------------------------------------------------------
0000            524   ; absolute external ram data
0000            525   ;--------------------------------------------------------
0000            526            XSEG
0000            527   ;--------------------------------------------------------
0000            528   ; external initialized ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_IXSEG
0000            531            rseg R_HOME
0000            532            rseg R_GSINIT
0000            533            rseg R_CSEG
0000            534   ;--------------------------------------------------------
0000            535   ; Reset entry point and interrupt vectors
0000            536   ;--------------------------------------------------------
0000            537            CSEG at 0x0000
0000 020000     538            ljmp    _crt0
0003            539   ;--------------------------------------------------------
0003            540   ; global & static initialisations
0003            541   ;--------------------------------------------------------
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_GSINIT
0000            545   ;--------------------------------------------------------
0000            546   ; data variables initialization
0000            547   ;--------------------------------------------------------
0000            548            rseg R_DINIT
0000            549            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            550   ;--------------------------------------------------------
0000            551   ; code
0000            552   ;--------------------------------------------------------
0000            553            rseg R_CSEG
0000            554   ;------------------------------------------------------------
0000            555   ;Allocation info for local variables in function '_c51_external_startup'
0000            556   ;------------------------------------------------------------
0000            557   ;------------------------------------------------------------
0000            558   ;        EFM8_JDY40_test.c:13: char _c51_external_startup (void)
0000            559   ;        -----------------------------------------
0000            560   ;         function _c51_external_startup
0000            561   ;        -----------------------------------------
0000            562   __c51_external_startup:
0000            563            using   0
0000            564   ;        EFM8_JDY40_test.c:16: SFRPAGE = 0x00;
0000 75A700     565            mov     _SFRPAGE,#0x00
0003            566   ;        EFM8_JDY40_test.c:17: WDTCN = 0xDE; //First key
0003 7597DE     567            mov     _WDTCN,#0xDE
0006            568   ;        EFM8_JDY40_test.c:18: WDTCN = 0xAD; //Second key
0006 7597AD     569            mov     _WDTCN,#0xAD
0009            570   ;        EFM8_JDY40_test.c:20: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     571            mov     _VDM0CN,#0x80
000C            572   ;        EFM8_JDY40_test.c:21: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     573            mov     _RSTSRC,#0x06
000F            574   ;        EFM8_JDY40_test.c:28: SFRPAGE = 0x10;
000F 75A710     575            mov     _SFRPAGE,#0x10
0012            576   ;        EFM8_JDY40_test.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     577            mov     _PFE0CN,#0x20
0015            578   ;        EFM8_JDY40_test.c:30: SFRPAGE = 0x00;
0015 75A700     579            mov     _SFRPAGE,#0x00
0018            580   ;        EFM8_JDY40_test.c:51: CLKSEL = 0x00;
0018 75A900     581            mov     _CLKSEL,#0x00
001B            582   ;        EFM8_JDY40_test.c:52: CLKSEL = 0x00;
001B 75A900     583            mov     _CLKSEL,#0x00
001E            584   ;        EFM8_JDY40_test.c:53: while ((CLKSEL & 0x80) == 0);
001E            585   L002001?:
001E E5A9       586            mov     a,_CLKSEL
0020 30E7D8     587            jnb     acc.7,L002001?
0023            588   ;        EFM8_JDY40_test.c:54: CLKSEL = 0x03;
0023 75A903     589            mov     _CLKSEL,#0x03
0026            590   ;        EFM8_JDY40_test.c:55: CLKSEL = 0x03;
0026 75A903     591            mov     _CLKSEL,#0x03
0029            592   ;        EFM8_JDY40_test.c:56: while ((CLKSEL & 0x80) == 0);
0029            593   L002004?:
0029 E5A9       594            mov     a,_CLKSEL
002B 30E758     595            jnb     acc.7,L002004?
002E            596   ;        EFM8_JDY40_test.c:61: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     597            orl     _P0MDOUT,#0x11
0031            598   ;        EFM8_JDY40_test.c:62: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     599            orl     _P2MDOUT,#0x01
0034            600   ;        EFM8_JDY40_test.c:63: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     601            mov     _XBR0,#0x01
0037            602   ;        EFM8_JDY40_test.c:64: XBR1     = 0X00;
0037 75E200     603            mov     _XBR1,#0x00
003A            604   ;        EFM8_JDY40_test.c:65: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     605            mov     _XBR2,#0x41
003D            606   ;        EFM8_JDY40_test.c:71: SCON0 = 0x10;
003D 759810     607            mov     _SCON0,#0x10
0040            608   ;        EFM8_JDY40_test.c:72: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     609            mov     _TH1,#0xE6
0043            610   ;        EFM8_JDY40_test.c:73: TL1 = TH1;      // Init Timer1
0043 858D8B     611            mov     _TL1,_TH1
0046            612   ;        EFM8_JDY40_test.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     613            anl     _TMOD,#0x0F
0049            614   ;        EFM8_JDY40_test.c:75: TMOD |=  0x20;                       
0049 438920     615            orl     _TMOD,#0x20
004C            616   ;        EFM8_JDY40_test.c:76: TR1 = 1; // START Timer1
004C D28E       617            setb    _TR1
004E            618   ;        EFM8_JDY40_test.c:77: TI = 1;  // Indicate TX0 ready
004E D299       619            setb    _TI
0050            620   ;        EFM8_JDY40_test.c:79: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       621            setb    _P2_0
0052            622   ;        EFM8_JDY40_test.c:81: return 0;
0052 758200     623            mov     dpl,#0x00
0055 22         624            ret
0056            625   ;------------------------------------------------------------
0056            626   ;Allocation info for local variables in function 'Timer3us'
0056            627   ;------------------------------------------------------------
0056            628   ;us                        Allocated to registers r2 
0056            629   ;i                         Allocated to registers r3 
0056            630   ;------------------------------------------------------------
0056            631   ;        EFM8_JDY40_test.c:85: void Timer3us(unsigned char us)
0056            632   ;        -----------------------------------------
0056            633   ;         function Timer3us
0056            634   ;        -----------------------------------------
0056            635   _Timer3us:
0056 AA82       636            mov     r2,dpl
0058            637   ;        EFM8_JDY40_test.c:90: CKCON0|=0b_0100_0000;
0058 438E40     638            orl     _CKCON0,#0x40
005B            639   ;        EFM8_JDY40_test.c:92: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
005B 7592B8     640            mov     _TMR3RL,#0xB8
005E 7593FF     641            mov     (_TMR3RL >> 8),#0xFF
0061            642   ;        EFM8_JDY40_test.c:93: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0061 859294     643            mov     _TMR3,_TMR3RL
0064 859395     644            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0067            645   ;        EFM8_JDY40_test.c:95: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0067 759104     646            mov     _TMR3CN0,#0x04
006A            647   ;        EFM8_JDY40_test.c:96: for (i = 0; i < us; i++)       // Count <us> overflows
006A 7B00       648            mov     r3,#0x00
006C            649   L003004?:
006C C3         650            clr     c
006D EB         651            mov     a,r3
006E 9A         652            subb    a,r2
006F 5000       653            jnc     L003007?
0071            654   ;        EFM8_JDY40_test.c:98: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0071            655   L003001?:
0071 E591       656            mov     a,_TMR3CN0
0073 30E758     657            jnb     acc.7,L003001?
0076            658   ;        EFM8_JDY40_test.c:99: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0076 53917F     659            anl     _TMR3CN0,#0x7F
0079            660   ;        EFM8_JDY40_test.c:96: for (i = 0; i < us; i++)       // Count <us> overflows
0079 0B         661            inc     r3
007A 8000       662            sjmp    L003004?
007C            663   L003007?:
007C            664   ;        EFM8_JDY40_test.c:101: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007C 759100     665            mov     _TMR3CN0,#0x00
007F 22         666            ret
0080            667   ;------------------------------------------------------------
0080            668   ;Allocation info for local variables in function 'waitms'
0080            669   ;------------------------------------------------------------
0080            670   ;ms                        Allocated to registers r2 r3 
0080            671   ;j                         Allocated to registers r4 r5 
0080            672   ;k                         Allocated to registers r6 
0080            673   ;------------------------------------------------------------
0080            674   ;        EFM8_JDY40_test.c:104: void waitms (unsigned int ms)
0080            675   ;        -----------------------------------------
0080            676   ;         function waitms
0080            677   ;        -----------------------------------------
0080            678   _waitms:
0080 AA82       679            mov     r2,dpl
0082 AB83       680            mov     r3,dph
0084            681   ;        EFM8_JDY40_test.c:108: for(j=0; j<ms; j++)
0084 7C00       682            mov     r4,#0x00
0086 7D00       683            mov     r5,#0x00
0088            684   L004005?:
0088 C3         685            clr     c
0089 EC         686            mov     a,r4
008A 9A         687            subb    a,r2
008B ED         688            mov     a,r5
008C 9B         689            subb    a,r3
008D 5000       690            jnc     L004009?
008F            691   ;        EFM8_JDY40_test.c:109: for (k=0; k<4; k++) Timer3us(250);
008F 7E00       692            mov     r6,#0x00
0091            693   L004001?:
0091 BE0498     694            cjne    r6,#0x04,L004018?
0094            695   L004018?:
0094 5000       696            jnc     L004007?
0096 7582FA     697            mov     dpl,#0xFA
0099 C002       698            push    ar2
009B C003       699            push    ar3
009D C004       700            push    ar4
009F C005       701            push    ar5
00A1 C006       702            push    ar6
00A3 120000     703            lcall   _Timer3us
00A6 D006       704            pop     ar6
00A8 D005       705            pop     ar5
00AA D004       706            pop     ar4
00AC D003       707            pop     ar3
00AE D002       708            pop     ar2
00B0 0E         709            inc     r6
00B1 8000       710            sjmp    L004001?
00B3            711   L004007?:
00B3            712   ;        EFM8_JDY40_test.c:108: for(j=0; j<ms; j++)
00B3 0C         713            inc     r4
00B4 BC00D8     714            cjne    r4,#0x00,L004005?
00B7 0D         715            inc     r5
00B8 8000       716            sjmp    L004005?
00BA            717   L004009?:
00BA 22         718            ret
00BB            719   ;------------------------------------------------------------
00BB            720   ;Allocation info for local variables in function 'UART1_Init'
00BB            721   ;------------------------------------------------------------
00BB            722   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00BB            723   ;------------------------------------------------------------
00BB            724   ;        EFM8_JDY40_test.c:112: void UART1_Init (unsigned long baudrate)
00BB            725   ;        -----------------------------------------
00BB            726   ;         function UART1_Init
00BB            727   ;        -----------------------------------------
00BB            728   _UART1_Init:
00BB AA82       729            mov     r2,dpl
00BD AB83       730            mov     r3,dph
00BF ACF0       731            mov     r4,b
00C1 FD         732            mov     r5,a
00C2            733   ;        EFM8_JDY40_test.c:114: SFRPAGE = 0x20;
00C2 75A720     734            mov     _SFRPAGE,#0x20
00C5            735   ;        EFM8_JDY40_test.c:115: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C5 75930C     736            mov     _SMOD1,#0x0C
00C8            737   ;        EFM8_JDY40_test.c:116: SCON1 = 0x10;
00C8 75C810     738            mov     _SCON1,#0x10
00CB            739   ;        EFM8_JDY40_test.c:117: SBCON1 =0x00;   // disable baud rate generator
00CB 759400     740            mov     _SBCON1,#0x00
00CE            741   ;        EFM8_JDY40_test.c:118: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CE 8A00       742            mov     __divulong_PARM_2,r2
00D0 8B01       743            mov     (__divulong_PARM_2 + 1),r3
00D2 8C02       744            mov     (__divulong_PARM_2 + 2),r4
00D4 8D03       745            mov     (__divulong_PARM_2 + 3),r5
00D6 90A200     746            mov     dptr,#0xA200
00D9 75F04A     747            mov     b,#0x4A
00DC 7404       748            mov     a,#0x04
00DE 120000     749            lcall   __divulong
00E1 AA82       750            mov     r2,dpl
00E3 AB83       751            mov     r3,dph
00E5 ACF0       752            mov     r4,b
00E7 FD         753            mov     r5,a
00E8 750018     754            mov     __divulong_PARM_2,#0x18
00EB E4         755            clr     a
00EC F501       756            mov     (__divulong_PARM_2 + 1),a
00EE F502       757            mov     (__divulong_PARM_2 + 2),a
00F0 F503       758            mov     (__divulong_PARM_2 + 3),a
00F2 8A82       759            mov     dpl,r2
00F4 8B83       760            mov     dph,r3
00F6 8CF0       761            mov     b,r4
00F8 ED         762            mov     a,r5
00F9 120000     763            lcall   __divulong
00FC AA82       764            mov     r2,dpl
00FE AB83       765            mov     r3,dph
0100 ACF0       766            mov     r4,b
0102 FD         767            mov     r5,a
0103 E4         768            clr     a
0104 C3         769            clr     c
0105 9A         770            subb    a,r2
0106 FA         771            mov     r2,a
0107 E4         772            clr     a
0108 9B         773            subb    a,r3
0109 FB         774            mov     r3,a
010A 7401       775            mov     a,#0x01
010C 9C         776            subb    a,r4
010D E4         777            clr     a
010E 9D         778            subb    a,r5
010F 8A95       779            mov     _SBRL1,r2
0111 8B96       780            mov     (_SBRL1 >> 8),r3
0113            781   ;        EFM8_JDY40_test.c:119: TI1 = 1; // indicate ready for TX
0113 D2C9       782            setb    _TI1
0115            783   ;        EFM8_JDY40_test.c:120: SBCON1 |= 0x40;   // enable baud rate generator
0115 439440     784            orl     _SBCON1,#0x40
0118            785   ;        EFM8_JDY40_test.c:121: SFRPAGE = 0x00;
0118 75A700     786            mov     _SFRPAGE,#0x00
011B 22         787            ret
011C            788   ;------------------------------------------------------------
011C            789   ;Allocation info for local variables in function 'putchar1'
011C            790   ;------------------------------------------------------------
011C            791   ;c                         Allocated to registers r2 
011C            792   ;------------------------------------------------------------
011C            793   ;        EFM8_JDY40_test.c:124: void putchar1 (char c) 
011C            794   ;        -----------------------------------------
011C            795   ;         function putchar1
011C            796   ;        -----------------------------------------
011C            797   _putchar1:
011C AA82       798            mov     r2,dpl
011E            799   ;        EFM8_JDY40_test.c:126: SFRPAGE = 0x20;
011E 75A720     800            mov     _SFRPAGE,#0x20
0121            801   ;        EFM8_JDY40_test.c:127: while (!TI1);
0121            802   L006001?:
0121            803   ;        EFM8_JDY40_test.c:128: TI1=0;
0121 10C928     804            jbc     _TI1,L006008?
0124 8000       805            sjmp    L006001?
0126            806   L006008?:
0126            807   ;        EFM8_JDY40_test.c:129: SBUF1 = c;
0126 8A92       808            mov     _SBUF1,r2
0128            809   ;        EFM8_JDY40_test.c:130: SFRPAGE = 0x00;
0128 75A700     810            mov     _SFRPAGE,#0x00
012B 22         811            ret
012C            812   ;------------------------------------------------------------
012C            813   ;Allocation info for local variables in function 'sendstr1'
012C            814   ;------------------------------------------------------------
012C            815   ;s                         Allocated to registers r2 r3 r4 
012C            816   ;------------------------------------------------------------
012C            817   ;        EFM8_JDY40_test.c:133: void sendstr1 (char * s)
012C            818   ;        -----------------------------------------
012C            819   ;         function sendstr1
012C            820   ;        -----------------------------------------
012C            821   _sendstr1:
012C AA82       822            mov     r2,dpl
012E AB83       823            mov     r3,dph
0130 ACF0       824            mov     r4,b
0132            825   ;        EFM8_JDY40_test.c:135: while(*s)
0132            826   L007001?:
0132 8A82       827            mov     dpl,r2
0134 8B83       828            mov     dph,r3
0136 8CF0       829            mov     b,r4
0138 120000     830            lcall   __gptrget
013B FD         831            mov     r5,a
013C 6000       832            jz      L007004?
013E            833   ;        EFM8_JDY40_test.c:137: putchar1(*s);
013E 8D82       834            mov     dpl,r5
0140 C002       835            push    ar2
0142 C003       836            push    ar3
0144 C004       837            push    ar4
0146 120000     838            lcall   _putchar1
0149 D004       839            pop     ar4
014B D003       840            pop     ar3
014D D002       841            pop     ar2
014F            842   ;        EFM8_JDY40_test.c:138: s++;     
014F 0A         843            inc     r2
0150 BA0068     844            cjne    r2,#0x00,L007001?
0153 0B         845            inc     r3
0154 8000       846            sjmp    L007001?
0156            847   L007004?:
0156 22         848            ret
0157            849   ;------------------------------------------------------------
0157            850   ;Allocation info for local variables in function 'getchar1'
0157            851   ;------------------------------------------------------------
0157            852   ;c                         Allocated to registers 
0157            853   ;------------------------------------------------------------
0157            854   ;        EFM8_JDY40_test.c:142: char getchar1 (void)
0157            855   ;        -----------------------------------------
0157            856   ;         function getchar1
0157            857   ;        -----------------------------------------
0157            858   _getchar1:
0157            859   ;        EFM8_JDY40_test.c:145: SFRPAGE = 0x20;
0157 75A720     860            mov     _SFRPAGE,#0x20
015A            861   ;        EFM8_JDY40_test.c:146: while (!RI1);
015A            862   L008001?:
015A            863   ;        EFM8_JDY40_test.c:147: RI1=0;
015A 10C868     864            jbc     _RI1,L008008?
015D 8000       865            sjmp    L008001?
015F            866   L008008?:
015F            867   ;        EFM8_JDY40_test.c:149: SCON1&=0b_0011_1111;
015F 53C83F     868            anl     _SCON1,#0x3F
0162            869   ;        EFM8_JDY40_test.c:150: c = SBUF1;
0162 859282     870            mov     dpl,_SBUF1
0165            871   ;        EFM8_JDY40_test.c:151: SFRPAGE = 0x00;
0165 75A700     872            mov     _SFRPAGE,#0x00
0168            873   ;        EFM8_JDY40_test.c:152: return (c);
0168 22         874            ret
0169            875   ;------------------------------------------------------------
0169            876   ;Allocation info for local variables in function 'getchar1_with_timeout'
0169            877   ;------------------------------------------------------------
0169            878   ;c                         Allocated to registers 
0169            879   ;timeout                   Allocated to registers r2 r3 
0169            880   ;------------------------------------------------------------
0169            881   ;        EFM8_JDY40_test.c:155: char getchar1_with_timeout (void)
0169            882   ;        -----------------------------------------
0169            883   ;         function getchar1_with_timeout
0169            884   ;        -----------------------------------------
0169            885   _getchar1_with_timeout:
0169            886   ;        EFM8_JDY40_test.c:159: SFRPAGE = 0x20;
0169 75A720     887            mov     _SFRPAGE,#0x20
016C            888   ;        EFM8_JDY40_test.c:161: while (!RI1)
016C 7A00       889            mov     r2,#0x00
016E 7B00       890            mov     r3,#0x00
0170            891   L009003?:
0170 20C8E8     892            jb      _RI1,L009005?
0173            893   ;        EFM8_JDY40_test.c:163: SFRPAGE = 0x00;
0173 75A700     894            mov     _SFRPAGE,#0x00
0176            895   ;        EFM8_JDY40_test.c:164: Timer3us(20);
0176 758214     896            mov     dpl,#0x14
0179 C002       897            push    ar2
017B C003       898            push    ar3
017D 120000     899            lcall   _Timer3us
0180 D003       900            pop     ar3
0182 D002       901            pop     ar2
0184            902   ;        EFM8_JDY40_test.c:165: SFRPAGE = 0x20;
0184 75A720     903            mov     _SFRPAGE,#0x20
0187            904   ;        EFM8_JDY40_test.c:166: timeout++;
0187 0A         905            inc     r2
0188 BA0028     906            cjne    r2,#0x00,L009012?
018B 0B         907            inc     r3
018C            908   L009012?:
018C            909   ;        EFM8_JDY40_test.c:167: if(timeout==25000)
018C BAA8A8     910            cjne    r2,#0xA8,L009003?
018F BB61A8     911            cjne    r3,#0x61,L009003?
0192            912   ;        EFM8_JDY40_test.c:169: SFRPAGE = 0x00;
0192 75A700     913            mov     _SFRPAGE,#0x00
0195            914   ;        EFM8_JDY40_test.c:170: return ('\n'); // Timeout after half second
0195 75820A     915            mov     dpl,#0x0A
0198 22         916            ret
0199            917   L009005?:
0199            918   ;        EFM8_JDY40_test.c:173: RI1=0;
0199 C2C8       919            clr     _RI1
019B            920   ;        EFM8_JDY40_test.c:175: SCON1&=0b_0011_1111;
019B 53C83F     921            anl     _SCON1,#0x3F
019E            922   ;        EFM8_JDY40_test.c:176: c = SBUF1;
019E 859282     923            mov     dpl,_SBUF1
01A1            924   ;        EFM8_JDY40_test.c:177: SFRPAGE = 0x00;
01A1 75A700     925            mov     _SFRPAGE,#0x00
01A4            926   ;        EFM8_JDY40_test.c:178: return (c);
01A4 22         927            ret
01A5            928   ;------------------------------------------------------------
01A5            929   ;Allocation info for local variables in function 'getstr1'
01A5            930   ;------------------------------------------------------------
01A5            931   ;n                         Allocated with name '_getstr1_PARM_2'
01A5            932   ;s                         Allocated to registers r2 r3 r4 
01A5            933   ;c                         Allocated to registers r1 
01A5            934   ;cnt                       Allocated to registers r5 
01A5            935   ;------------------------------------------------------------
01A5            936   ;        EFM8_JDY40_test.c:181: void getstr1 (char * s, unsigned char n)
01A5            937   ;        -----------------------------------------
01A5            938   ;         function getstr1
01A5            939   ;        -----------------------------------------
01A5            940   _getstr1:
01A5 AA82       941            mov     r2,dpl
01A7 AB83       942            mov     r3,dph
01A9 ACF0       943            mov     r4,b
01AB            944   ;        EFM8_JDY40_test.c:187: while(1)
01AB 7D00       945            mov     r5,#0x00
01AD 8A06       946            mov     ar6,r2
01AF 8B07       947            mov     ar7,r3
01B1 8C00       948            mov     ar0,r4
01B3            949   L010007?:
01B3            950   ;        EFM8_JDY40_test.c:189: c=getchar1_with_timeout();
01B3 C002       951            push    ar2
01B5 C003       952            push    ar3
01B7 C004       953            push    ar4
01B9 C005       954            push    ar5
01BB C006       955            push    ar6
01BD C007       956            push    ar7
01BF C000       957            push    ar0
01C1 120000     958            lcall   _getchar1_with_timeout
01C4 A982       959            mov     r1,dpl
01C6 D000       960            pop     ar0
01C8 D007       961            pop     ar7
01CA D006       962            pop     ar6
01CC D005       963            pop     ar5
01CE D004       964            pop     ar4
01D0 D003       965            pop     ar3
01D2 D002       966            pop     ar2
01D4            967   ;        EFM8_JDY40_test.c:190: if(c=='\n')
01D4 B90AA8     968            cjne    r1,#0x0A,L010002?
01D7            969   ;        EFM8_JDY40_test.c:192: *s=0;
01D7 8A82       970            mov     dpl,r2
01D9 8B83       971            mov     dph,r3
01DB 8CF0       972            mov     b,r4
01DD E4         973            clr     a
01DE            974   ;        EFM8_JDY40_test.c:193: return;
01DE 020000     975            ljmp    __gptrput
01E1            976   L010002?:
01E1            977   ;        EFM8_JDY40_test.c:196: if (cnt<n)
01E1 C3         978            clr     c
01E2 ED         979            mov     a,r5
01E3 9570       980            subb    a,_getstr1_PARM_2
01E5 5000       981            jnc     L010004?
01E7            982   ;        EFM8_JDY40_test.c:198: cnt++;
01E7 0D         983            inc     r5
01E8            984   ;        EFM8_JDY40_test.c:199: *s=c;
01E8 8E82       985            mov     dpl,r6
01EA 8F83       986            mov     dph,r7
01EC 88F0       987            mov     b,r0
01EE E9         988            mov     a,r1
01EF 120000     989            lcall   __gptrput
01F2 A3         990            inc     dptr
01F3 AE82       991            mov     r6,dpl
01F5 AF83       992            mov     r7,dph
01F7            993   ;        EFM8_JDY40_test.c:200: s++;
01F7 8E02       994            mov     ar2,r6
01F9 8F03       995            mov     ar3,r7
01FB 8804       996            mov     ar4,r0
01FD 8000       997            sjmp    L010007?
01FF            998   L010004?:
01FF            999   ;        EFM8_JDY40_test.c:204: *s=0;
01FF 8A82      1000            mov     dpl,r2
0201 8B83      1001            mov     dph,r3
0203 8CF0      1002            mov     b,r4
0205 E4        1003            clr     a
0206           1004   ;        EFM8_JDY40_test.c:205: return;
0206 020000    1005            ljmp    __gptrput
0209           1006   ;------------------------------------------------------------
0209           1007   ;Allocation info for local variables in function 'RXU1'
0209           1008   ;------------------------------------------------------------
0209           1009   ;------------------------------------------------------------
0209           1010   ;        EFM8_JDY40_test.c:211: bit RXU1 (void)
0209           1011   ;        -----------------------------------------
0209           1012   ;         function RXU1
0209           1013   ;        -----------------------------------------
0209           1014   _RXU1:
0209           1015   ;        EFM8_JDY40_test.c:214: SFRPAGE = 0x20;
0209 75A720    1016            mov     _SFRPAGE,#0x20
020C           1017   ;        EFM8_JDY40_test.c:215: mybit=RI1;
020C A2C8      1018            mov     c,_RI1
020E           1019   ;        EFM8_JDY40_test.c:216: SFRPAGE = 0x00;
020E 75A700    1020            mov     _SFRPAGE,#0x00
0211           1021   ;        EFM8_JDY40_test.c:217: return mybit;
0211 22        1022            ret
0212           1023   ;------------------------------------------------------------
0212           1024   ;Allocation info for local variables in function 'waitms_or_RI1'
0212           1025   ;------------------------------------------------------------
0212           1026   ;ms                        Allocated to registers r2 r3 
0212           1027   ;j                         Allocated to registers r4 r5 
0212           1028   ;k                         Allocated to registers r6 
0212           1029   ;------------------------------------------------------------
0212           1030   ;        EFM8_JDY40_test.c:220: void waitms_or_RI1 (unsigned int ms)
0212           1031   ;        -----------------------------------------
0212           1032   ;         function waitms_or_RI1
0212           1033   ;        -----------------------------------------
0212           1034   _waitms_or_RI1:
0212 AA82      1035            mov     r2,dpl
0214 AB83      1036            mov     r3,dph
0216           1037   ;        EFM8_JDY40_test.c:224: for(j=0; j<ms; j++)
0216 7C00      1038            mov     r4,#0x00
0218 7D00      1039            mov     r5,#0x00
021A           1040   L012007?:
021A C3        1041            clr     c
021B EC        1042            mov     a,r4
021C 9A        1043            subb    a,r2
021D ED        1044            mov     a,r5
021E 9B        1045            subb    a,r3
021F 5000      1046            jnc     L012011?
0221           1047   ;        EFM8_JDY40_test.c:226: for (k=0; k<4; k++)
0221 7E00      1048            mov     r6,#0x00
0223           1049   L012003?:
0223 BE0428    1050            cjne    r6,#0x04,L012019?
0226           1051   L012019?:
0226 5000      1052            jnc     L012009?
0228           1053   ;        EFM8_JDY40_test.c:228: if(RXU1()) return;
0228 C002      1054            push    ar2
022A C003      1055            push    ar3
022C C004      1056            push    ar4
022E C005      1057            push    ar5
0230 C006      1058            push    ar6
0232 120000    1059            lcall   _RXU1
0235 E4        1060            clr     a
0236 33        1061            rlc     a
0237 D006      1062            pop     ar6
0239 D005      1063            pop     ar5
023B D004      1064            pop     ar4
023D D003      1065            pop     ar3
023F D002      1066            pop     ar2
0241 6000      1067            jz      L012002?
0243 22        1068            ret
0244           1069   L012002?:
0244           1070   ;        EFM8_JDY40_test.c:229: Timer3us(250);
0244 7582FA    1071            mov     dpl,#0xFA
0247 C002      1072            push    ar2
0249 C003      1073            push    ar3
024B C004      1074            push    ar4
024D C005      1075            push    ar5
024F C006      1076            push    ar6
0251 120000    1077            lcall   _Timer3us
0254 D006      1078            pop     ar6
0256 D005      1079            pop     ar5
0258 D004      1080            pop     ar4
025A D003      1081            pop     ar3
025C D002      1082            pop     ar2
025E           1083   ;        EFM8_JDY40_test.c:226: for (k=0; k<4; k++)
025E 0E        1084            inc     r6
025F 8000      1085            sjmp    L012003?
0261           1086   L012009?:
0261           1087   ;        EFM8_JDY40_test.c:224: for(j=0; j<ms; j++)
0261 0C        1088            inc     r4
0262 BC0068    1089            cjne    r4,#0x00,L012007?
0265 0D        1090            inc     r5
0266 8000      1091            sjmp    L012007?
0268           1092   L012011?:
0268 22        1093            ret
0269           1094   ;------------------------------------------------------------
0269           1095   ;Allocation info for local variables in function 'SendATCommand'
0269           1096   ;------------------------------------------------------------
0269           1097   ;s                         Allocated to registers r2 r3 r4 
0269           1098   ;------------------------------------------------------------
0269           1099   ;        EFM8_JDY40_test.c:234: void SendATCommand (char * s)
0269           1100   ;        -----------------------------------------
0269           1101   ;         function SendATCommand
0269           1102   ;        -----------------------------------------
0269           1103   _SendATCommand:
0269 AA82      1104            mov     r2,dpl
026B AB83      1105            mov     r3,dph
026D ACF0      1106            mov     r4,b
026F           1107   ;        EFM8_JDY40_test.c:236: printf("Command: %s", s);
026F C002      1108            push    ar2
0271 C003      1109            push    ar3
0273 C004      1110            push    ar4
0275 C002      1111            push    ar2
0277 C003      1112            push    ar3
0279 C004      1113            push    ar4
027B 74E8      1114            mov     a,#__str_0
027D C0E0      1115            push    acc
027F 74BC      1116            mov     a,#(__str_0 >> 8)
0281 C0E0      1117            push    acc
0283 7480      1118            mov     a,#0x80
0285 C0E0      1119            push    acc
0287 120000    1120            lcall   _printf
028A E581      1121            mov     a,sp
028C 24FA      1122            add     a,#0xfa
028E F581      1123            mov     sp,a
0290           1124   ;        EFM8_JDY40_test.c:237: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0290 C2A0      1125            clr     _P2_0
0292           1126   ;        EFM8_JDY40_test.c:238: waitms(5);
0292 900005    1127            mov     dptr,#0x0005
0295 120000    1128            lcall   _waitms
0298 D004      1129            pop     ar4
029A D003      1130            pop     ar3
029C D002      1131            pop     ar2
029E           1132   ;        EFM8_JDY40_test.c:239: sendstr1(s);
029E 8A82      1133            mov     dpl,r2
02A0 8B83      1134            mov     dph,r3
02A2 8CF0      1135            mov     b,r4
02A4 120000    1136            lcall   _sendstr1
02A7           1137   ;        EFM8_JDY40_test.c:240: getstr1(buff, sizeof(buff)-1);
02A7 757013    1138            mov     _getstr1_PARM_2,#0x13
02AA 901530    1139            mov     dptr,#_buff
02AD 75F040    1140            mov     b,#0x40
02B0 120000    1141            lcall   _getstr1
02B3           1142   ;        EFM8_JDY40_test.c:241: waitms(10);
02B3 90000A    1143            mov     dptr,#0x000A
02B6 120000    1144            lcall   _waitms
02B9           1145   ;        EFM8_JDY40_test.c:242: P2_0=1; // 'set' pin to 1 is normal operation mode.
02B9 D2A0      1146            setb    _P2_0
02BB           1147   ;        EFM8_JDY40_test.c:243: printf("Response: %s\r\n", buff);
02BB 7430      1148            mov     a,#_buff
02BD C0E0      1149            push    acc
02BF 7415      1150            mov     a,#(_buff >> 8)
02C1 C0E0      1151            push    acc
02C3 7440      1152            mov     a,#0x40
02C5 C0E0      1153            push    acc
02C7 74A8      1154            mov     a,#__str_1
02C9 C0E0      1155            push    acc
02CB 74BD      1156            mov     a,#(__str_1 >> 8)
02CD C0E0      1157            push    acc
02CF 7480      1158            mov     a,#0x80
02D1 C0E0      1159            push    acc
02D3 120000    1160            lcall   _printf
02D6 E581      1161            mov     a,sp
02D8 24FA      1162            add     a,#0xfa
02DA F581      1163            mov     sp,a
02DC 22        1164            ret
02DD           1165   ;------------------------------------------------------------
02DD           1166   ;Allocation info for local variables in function 'ReceptionOff'
02DD           1167   ;------------------------------------------------------------
02DD           1168   ;------------------------------------------------------------
02DD           1169   ;        EFM8_JDY40_test.c:246: void ReceptionOff (void)
02DD           1170   ;        -----------------------------------------
02DD           1171   ;         function ReceptionOff
02DD           1172   ;        -----------------------------------------
02DD           1173   _ReceptionOff:
02DD           1174   ;        EFM8_JDY40_test.c:248: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02DD C2A0      1175            clr     _P2_0
02DF           1176   ;        EFM8_JDY40_test.c:249: waitms(10);
02DF 90000A    1177            mov     dptr,#0x000A
02E2 120000    1178            lcall   _waitms
02E5           1179   ;        EFM8_JDY40_test.c:250: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02E5 90BDE8    1180            mov     dptr,#__str_2
02E8 75F080    1181            mov     b,#0x80
02EB 120000    1182            lcall   _sendstr1
02EE           1183   ;        EFM8_JDY40_test.c:251: waitms(10);
02EE 90000A    1184            mov     dptr,#0x000A
02F1 120000    1185            lcall   _waitms
02F4           1186   ;        EFM8_JDY40_test.c:253: SCON1&=0b_0011_1111;
02F4 53C83F    1187            anl     _SCON1,#0x3F
02F7           1188   ;        EFM8_JDY40_test.c:254: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F7 D2A0      1189            setb    _P2_0
02F9 22        1190            ret
02FA           1191   ;------------------------------------------------------------
02FA           1192   ;Allocation info for local variables in function 'main'
02FA           1193   ;------------------------------------------------------------
02FA           1194   ;evilcode                  Allocated to registers 
02FA           1195   ;c                         Allocated with name '_main_c_1_98'
02FA           1196   ;------------------------------------------------------------
02FA           1197   ;        EFM8_JDY40_test.c:257: void main (void)
02FA           1198   ;        -----------------------------------------
02FA           1199   ;         function main
02FA           1200   ;        -----------------------------------------
02FA           1201   _main:
02FA           1202   ;        EFM8_JDY40_test.c:262: waitms(500);
02FA 9001F4    1203            mov     dptr,#0x01F4
02FD 120000    1204            lcall   _waitms
0300           1205   ;        EFM8_JDY40_test.c:263: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0300 7428      1206            mov     a,#__str_3
0302 C0E0      1207            push    acc
0304 74BE      1208            mov     a,#(__str_3 >> 8)
0306 C0E0      1209            push    acc
0308 7480      1210            mov     a,#0x80
030A C0E0      1211            push    acc
030C 120000    1212            lcall   _printf
030F 1581      1213            dec     sp
0311 1581      1214            dec     sp
0313 1581      1215            dec     sp
0315           1216   ;        EFM8_JDY40_test.c:264: UART1_Init(9600);
0315 902580    1217            mov     dptr,#0x2580
0318 E4        1218            clr     a
0319 F5F0      1219            mov     b,a
031B 120000    1220            lcall   _UART1_Init
031E           1221   ;        EFM8_JDY40_test.c:266: ReceptionOff();
031E 120000    1222            lcall   _ReceptionOff
0321           1223   ;        EFM8_JDY40_test.c:269: SendATCommand("AT+VER\r\n");
0321 90BE68    1224            mov     dptr,#__str_4
0324 75F080    1225            mov     b,#0x80
0327 120000    1226            lcall   _SendATCommand
032A           1227   ;        EFM8_JDY40_test.c:270: SendATCommand("AT+BAUD\r\n");
032A 90BEA8    1228            mov     dptr,#__str_5
032D 75F080    1229            mov     b,#0x80
0330 120000    1230            lcall   _SendATCommand
0333           1231   ;        EFM8_JDY40_test.c:271: SendATCommand("AT+RFID\r\n");
0333 90BEE8    1232            mov     dptr,#__str_6
0336 75F080    1233            mov     b,#0x80
0339 120000    1234            lcall   _SendATCommand
033C           1235   ;        EFM8_JDY40_test.c:272: SendATCommand("AT+DVID\r\n");
033C 90BF28    1236            mov     dptr,#__str_7
033F 75F080    1237            mov     b,#0x80
0342 120000    1238            lcall   _SendATCommand
0345           1239   ;        EFM8_JDY40_test.c:273: SendATCommand("AT+RFC\r\n");
0345 90BF68    1240            mov     dptr,#__str_8
0348 75F080    1241            mov     b,#0x80
034B 120000    1242            lcall   _SendATCommand
034E           1243   ;        EFM8_JDY40_test.c:274: SendATCommand("AT+POWE\r\n");
034E 90BFA8    1244            mov     dptr,#__str_9
0351 75F080    1245            mov     b,#0x80
0354 120000    1246            lcall   _SendATCommand
0357           1247   ;        EFM8_JDY40_test.c:275: SendATCommand("AT+CLSS\r\n");
0357 90BFE8    1248            mov     dptr,#__str_10
035A 75F080    1249            mov     b,#0x80
035D 120000    1250            lcall   _SendATCommand
0360           1251   ;        EFM8_JDY40_test.c:279: SendATCommand("AT+DVIDABBA\r\n");  
0360 90C028    1252            mov     dptr,#__str_11
0363 75F080    1253            mov     b,#0x80
0366 120000    1254            lcall   _SendATCommand
0369           1255   ;        EFM8_JDY40_test.c:281: while(1)
0369           1256   L015043?:
0369           1257   ;        EFM8_JDY40_test.c:283: if(RXU1()) // Something has arrived
0369 120000    1258            lcall   _RXU1
036C 5000      1259            jnc     L015043?
036E           1260   ;        EFM8_JDY40_test.c:286: getstr1(buff, sizeof(buff));
036E 757014    1261            mov     _getstr1_PARM_2,#0x14
0371 901530    1262            mov     dptr,#_buff
0374 75F040    1263            mov     b,#0x40
0377 120000    1264            lcall   _getstr1
037A           1265   ;        EFM8_JDY40_test.c:287: if (strcmp(buff, "1") == 0) sprintf(msg, "rec1\0");
037A 7500E8    1266            mov     _strcmp_PARM_2,#__str_12
037D 7501C0    1267            mov     (_strcmp_PARM_2 + 1),#(__str_12 >> 8)
0380 750280    1268            mov     (_strcmp_PARM_2 + 2),#0x80
0383 901530    1269            mov     dptr,#_buff
0386 75F040    1270            mov     b,#0x40
0389 120000    1271            lcall   _strcmp
038C E582      1272            mov     a,dpl
038E 8583F0    1273            mov     b,dph
0391 45F0      1274            orl     a,b
0393 7000      1275            jnz     L015038?
0395 74A8      1276            mov     a,#__str_13
0397 C0E0      1277            push    acc
0399 74C1      1278            mov     a,#(__str_13 >> 8)
039B C0E0      1279            push    acc
039D 7480      1280            mov     a,#0x80
039F C0E0      1281            push    acc
03A1 74F0      1282            mov     a,#_msg
03A3 C0E0      1283            push    acc
03A5 7414      1284            mov     a,#(_msg >> 8)
03A7 C0E0      1285            push    acc
03A9 7440      1286            mov     a,#0x40
03AB C0E0      1287            push    acc
03AD 120000    1288            lcall   _sprintf
03B0 E581      1289            mov     a,sp
03B2 24FA      1290            add     a,#0xfa
03B4 F581      1291            mov     sp,a
03B6 020000    1292            ljmp    L015039?
03B9           1293   L015038?:
03B9           1294   ;        EFM8_JDY40_test.c:288: else if (strcmp(buff, "2") == 0) sprintf(msg, "rec2\n");
03B9 750068    1295            mov     _strcmp_PARM_2,#__str_14
03BC 7501C2    1296            mov     (_strcmp_PARM_2 + 1),#(__str_14 >> 8)
03BF 750280    1297            mov     (_strcmp_PARM_2 + 2),#0x80
03C2 901530    1298            mov     dptr,#_buff
03C5 75F040    1299            mov     b,#0x40
03C8 120000    1300            lcall   _strcmp
03CB E582      1301            mov     a,dpl
03CD 8583F0    1302            mov     b,dph
03D0 45F0      1303            orl     a,b
03D2 7000      1304            jnz     L015035?
03D4 74E8      1305            mov     a,#__str_15
03D6 C0E0      1306            push    acc
03D8 74C2      1307            mov     a,#(__str_15 >> 8)
03DA C0E0      1308            push    acc
03DC 7480      1309            mov     a,#0x80
03DE C0E0      1310            push    acc
03E0 74F0      1311            mov     a,#_msg
03E2 C0E0      1312            push    acc
03E4 7414      1313            mov     a,#(_msg >> 8)
03E6 C0E0      1314            push    acc
03E8 7440      1315            mov     a,#0x40
03EA C0E0      1316            push    acc
03EC 120000    1317            lcall   _sprintf
03EF E581      1318            mov     a,sp
03F1 24FA      1319            add     a,#0xfa
03F3 F581      1320            mov     sp,a
03F5 020000    1321            ljmp    L015039?
03F8           1322   L015035?:
03F8           1323   ;        EFM8_JDY40_test.c:289: else if (strcmp(buff, "3") == 0) sprintf(msg, "rec3\n");
03F8 750028    1324            mov     _strcmp_PARM_2,#__str_16
03FB 7501C3    1325            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
03FE 750280    1326            mov     (_strcmp_PARM_2 + 2),#0x80
0401 901530    1327            mov     dptr,#_buff
0404 75F040    1328            mov     b,#0x40
0407 120000    1329            lcall   _strcmp
040A E582      1330            mov     a,dpl
040C 8583F0    1331            mov     b,dph
040F 45F0      1332            orl     a,b
0411 7000      1333            jnz     L015032?
0413 74A8      1334            mov     a,#__str_17
0415 C0E0      1335            push    acc
0417 74C3      1336            mov     a,#(__str_17 >> 8)
0419 C0E0      1337            push    acc
041B 7480      1338            mov     a,#0x80
041D C0E0      1339            push    acc
041F 74F0      1340            mov     a,#_msg
0421 C0E0      1341            push    acc
0423 7414      1342            mov     a,#(_msg >> 8)
0425 C0E0      1343            push    acc
0427 7440      1344            mov     a,#0x40
0429 C0E0      1345            push    acc
042B 120000    1346            lcall   _sprintf
042E E581      1347            mov     a,sp
0430 24FA      1348            add     a,#0xfa
0432 F581      1349            mov     sp,a
0434 020000    1350            ljmp    L015039?
0437           1351   L015032?:
0437           1352   ;        EFM8_JDY40_test.c:290: else if (strcmp(buff, "4") == 0) sprintf(msg, "rec4\n");
0437 7500E8    1353            mov     _strcmp_PARM_2,#__str_18
043A 7501C3    1354            mov     (_strcmp_PARM_2 + 1),#(__str_18 >> 8)
043D 750280    1355            mov     (_strcmp_PARM_2 + 2),#0x80
0440 901530    1356            mov     dptr,#_buff
0443 75F040    1357            mov     b,#0x40
0446 120000    1358            lcall   _strcmp
0449 E582      1359            mov     a,dpl
044B 8583F0    1360            mov     b,dph
044E 45F0      1361            orl     a,b
0450 7000      1362            jnz     L015029?
0452 7468      1363            mov     a,#__str_19
0454 C0E0      1364            push    acc
0456 74C4      1365            mov     a,#(__str_19 >> 8)
0458 C0E0      1366            push    acc
045A 7480      1367            mov     a,#0x80
045C C0E0      1368            push    acc
045E 74F0      1369            mov     a,#_msg
0460 C0E0      1370            push    acc
0462 7414      1371            mov     a,#(_msg >> 8)
0464 C0E0      1372            push    acc
0466 7440      1373            mov     a,#0x40
0468 C0E0      1374            push    acc
046A 120000    1375            lcall   _sprintf
046D E581      1376            mov     a,sp
046F 24FA      1377            add     a,#0xfa
0471 F581      1378            mov     sp,a
0473 020000    1379            ljmp    L015039?
0476           1380   L015029?:
0476           1381   ;        EFM8_JDY40_test.c:291: else if (strcmp(buff, "5") == 0) sprintf(msg, "rec5\n");
0476 7500A8    1382            mov     _strcmp_PARM_2,#__str_20
0479 7501C4    1383            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
047C 750280    1384            mov     (_strcmp_PARM_2 + 2),#0x80
047F 901530    1385            mov     dptr,#_buff
0482 75F040    1386            mov     b,#0x40
0485 120000    1387            lcall   _strcmp
0488 E582      1388            mov     a,dpl
048A 8583F0    1389            mov     b,dph
048D 45F0      1390            orl     a,b
048F 7000      1391            jnz     L015026?
0491 7428      1392            mov     a,#__str_21
0493 C0E0      1393            push    acc
0495 74C5      1394            mov     a,#(__str_21 >> 8)
0497 C0E0      1395            push    acc
0499 7480      1396            mov     a,#0x80
049B C0E0      1397            push    acc
049D 74F0      1398            mov     a,#_msg
049F C0E0      1399            push    acc
04A1 7414      1400            mov     a,#(_msg >> 8)
04A3 C0E0      1401            push    acc
04A5 7440      1402            mov     a,#0x40
04A7 C0E0      1403            push    acc
04A9 120000    1404            lcall   _sprintf
04AC E581      1405            mov     a,sp
04AE 24FA      1406            add     a,#0xfa
04B0 F581      1407            mov     sp,a
04B2 020000    1408            ljmp    L015039?
04B5           1409   L015026?:
04B5           1410   ;        EFM8_JDY40_test.c:292: else if (strcmp(buff, "S") == 0)
04B5 750068    1411            mov     _strcmp_PARM_2,#__str_22
04B8 7501C5    1412            mov     (_strcmp_PARM_2 + 1),#(__str_22 >> 8)
04BB 750280    1413            mov     (_strcmp_PARM_2 + 2),#0x80
04BE 901530    1414            mov     dptr,#_buff
04C1 75F040    1415            mov     b,#0x40
04C4 120000    1416            lcall   _strcmp
04C7 E582      1417            mov     a,dpl
04C9 8583F0    1418            mov     b,dph
04CC 45F0      1419            orl     a,b
04CE 7000      1420            jnz     L015023?
04D0           1421   ;        EFM8_JDY40_test.c:294: P3_7=0;  //wheel 1
04D0 C2B7      1422            clr     _P3_7
04D2           1423   ;        EFM8_JDY40_test.c:295: P3_2=0;  // wheel 1 
04D2 C2B2      1424            clr     _P3_2
04D4           1425   ;        EFM8_JDY40_test.c:296: P3_0=0; // wheel 2
04D4 C2B0      1426            clr     _P3_0
04D6           1427   ;        EFM8_JDY40_test.c:297: P2_5=0; // wheel 2
04D6 C2A5      1428            clr     _P2_5
04D8           1429   ;        EFM8_JDY40_test.c:298: sprintf(msg, "recS\n");
04D8 74E8      1430            mov     a,#__str_23
04DA C0E0      1431            push    acc
04DC 74C5      1432            mov     a,#(__str_23 >> 8)
04DE C0E0      1433            push    acc
04E0 7480      1434            mov     a,#0x80
04E2 C0E0      1435            push    acc
04E4 74F0      1436            mov     a,#_msg
04E6 C0E0      1437            push    acc
04E8 7414      1438            mov     a,#(_msg >> 8)
04EA C0E0      1439            push    acc
04EC 7440      1440            mov     a,#0x40
04EE C0E0      1441            push    acc
04F0 120000    1442            lcall   _sprintf
04F3 E581      1443            mov     a,sp
04F5 24FA      1444            add     a,#0xfa
04F7 F581      1445            mov     sp,a
04F9 020000    1446            ljmp    L015039?
04FC           1447   L015023?:
04FC           1448   ;        EFM8_JDY40_test.c:300: else if (strcmp(buff, "F") == 0)
04FC 750028    1449            mov     _strcmp_PARM_2,#__str_24
04FF 7501C6    1450            mov     (_strcmp_PARM_2 + 1),#(__str_24 >> 8)
0502 750280    1451            mov     (_strcmp_PARM_2 + 2),#0x80
0505 901530    1452            mov     dptr,#_buff
0508 75F040    1453            mov     b,#0x40
050B 120000    1454            lcall   _strcmp
050E E582      1455            mov     a,dpl
0510 8583F0    1456            mov     b,dph
0513 45F0      1457            orl     a,b
0515 7000      1458            jnz     L015020?
0517           1459   ;        EFM8_JDY40_test.c:302: P3_7=1;  //wheel 1
0517 D2B7      1460            setb    _P3_7
0519           1461   ;        EFM8_JDY40_test.c:303: P3_2=0;  // wheel 1 
0519 C2B2      1462            clr     _P3_2
051B           1463   ;        EFM8_JDY40_test.c:304: P3_0=1; // wheel 2
051B D2B0      1464            setb    _P3_0
051D           1465   ;        EFM8_JDY40_test.c:305: P2_5=0; // wheel 2
051D C2A5      1466            clr     _P2_5
051F           1467   ;        EFM8_JDY40_test.c:306: sprintf(msg, "recF\n");
051F 74A8      1468            mov     a,#__str_25
0521 C0E0      1469            push    acc
0523 74C6      1470            mov     a,#(__str_25 >> 8)
0525 C0E0      1471            push    acc
0527 7480      1472            mov     a,#0x80
0529 C0E0      1473            push    acc
052B 74F0      1474            mov     a,#_msg
052D C0E0      1475            push    acc
052F 7414      1476            mov     a,#(_msg >> 8)
0531 C0E0      1477            push    acc
0533 7440      1478            mov     a,#0x40
0535 C0E0      1479            push    acc
0537 120000    1480            lcall   _sprintf
053A E581      1481            mov     a,sp
053C 24FA      1482            add     a,#0xfa
053E F581      1483            mov     sp,a
0540 020000    1484            ljmp    L015039?
0543           1485   L015020?:
0543           1486   ;        EFM8_JDY40_test.c:309: else if (strcmp(buff, "B") == 0)
0543 7500E8    1487            mov     _strcmp_PARM_2,#__str_26
0546 7501C6    1488            mov     (_strcmp_PARM_2 + 1),#(__str_26 >> 8)
0549 750280    1489            mov     (_strcmp_PARM_2 + 2),#0x80
054C 901530    1490            mov     dptr,#_buff
054F 75F040    1491            mov     b,#0x40
0552 120000    1492            lcall   _strcmp
0555 E582      1493            mov     a,dpl
0557 8583F0    1494            mov     b,dph
055A 45F0      1495            orl     a,b
055C 7000      1496            jnz     L015017?
055E           1497   ;        EFM8_JDY40_test.c:311: P3_7=0;  //wheel 1
055E C2B7      1498            clr     _P3_7
0560           1499   ;        EFM8_JDY40_test.c:312: P3_2=1;  // wheel 1 
0560 D2B2      1500            setb    _P3_2
0562           1501   ;        EFM8_JDY40_test.c:313: P3_0=0; // wheel 2
0562 C2B0      1502            clr     _P3_0
0564           1503   ;        EFM8_JDY40_test.c:314: P2_5=1; // wheel 2
0564 D2A5      1504            setb    _P2_5
0566           1505   ;        EFM8_JDY40_test.c:315: sprintf(msg, "recB\n");
0566 7468      1506            mov     a,#__str_27
0568 C0E0      1507            push    acc
056A 74C7      1508            mov     a,#(__str_27 >> 8)
056C C0E0      1509            push    acc
056E 7480      1510            mov     a,#0x80
0570 C0E0      1511            push    acc
0572 74F0      1512            mov     a,#_msg
0574 C0E0      1513            push    acc
0576 7414      1514            mov     a,#(_msg >> 8)
0578 C0E0      1515            push    acc
057A 7440      1516            mov     a,#0x40
057C C0E0      1517            push    acc
057E 120000    1518            lcall   _sprintf
0581 E581      1519            mov     a,sp
0583 24FA      1520            add     a,#0xfa
0585 F581      1521            mov     sp,a
0587 020000    1522            ljmp    L015039?
058A           1523   L015017?:
058A           1524   ;        EFM8_JDY40_test.c:317: else if (strcmp(buff, "L") == 0)
058A 7500A8    1525            mov     _strcmp_PARM_2,#__str_28
058D 7501C7    1526            mov     (_strcmp_PARM_2 + 1),#(__str_28 >> 8)
0590 750280    1527            mov     (_strcmp_PARM_2 + 2),#0x80
0593 901530    1528            mov     dptr,#_buff
0596 75F040    1529            mov     b,#0x40
0599 120000    1530            lcall   _strcmp
059C E582      1531            mov     a,dpl
059E 8583F0    1532            mov     b,dph
05A1 45F0      1533            orl     a,b
05A3 7000      1534            jnz     L015014?
05A5           1535   ;        EFM8_JDY40_test.c:319: P3_7=0;  //wheel 1
05A5 C2B7      1536            clr     _P3_7
05A7           1537   ;        EFM8_JDY40_test.c:320: P3_2=0;  // wheel 1 
05A7 C2B2      1538            clr     _P3_2
05A9           1539   ;        EFM8_JDY40_test.c:321: P3_0=1; // wheel 2
05A9 D2B0      1540            setb    _P3_0
05AB           1541   ;        EFM8_JDY40_test.c:322: P2_5=0; // wheel 2
05AB C2A5      1542            clr     _P2_5
05AD           1543   ;        EFM8_JDY40_test.c:323: sprintf(msg, "recL\n");
05AD 7428      1544            mov     a,#__str_29
05AF C0E0      1545            push    acc
05B1 74C8      1546            mov     a,#(__str_29 >> 8)
05B3 C0E0      1547            push    acc
05B5 7480      1548            mov     a,#0x80
05B7 C0E0      1549            push    acc
05B9 74F0      1550            mov     a,#_msg
05BB C0E0      1551            push    acc
05BD 7414      1552            mov     a,#(_msg >> 8)
05BF C0E0      1553            push    acc
05C1 7440      1554            mov     a,#0x40
05C3 C0E0      1555            push    acc
05C5 120000    1556            lcall   _sprintf
05C8 E581      1557            mov     a,sp
05CA 24FA      1558            add     a,#0xfa
05CC F581      1559            mov     sp,a
05CE 020000    1560            ljmp    L015039?
05D1           1561   L015014?:
05D1           1562   ;        EFM8_JDY40_test.c:325: else if (strcmp(buff, "R") == 0)
05D1 750068    1563            mov     _strcmp_PARM_2,#__str_30
05D4 7501C8    1564            mov     (_strcmp_PARM_2 + 1),#(__str_30 >> 8)
05D7 750280    1565            mov     (_strcmp_PARM_2 + 2),#0x80
05DA 901530    1566            mov     dptr,#_buff
05DD 75F040    1567            mov     b,#0x40
05E0 120000    1568            lcall   _strcmp
05E3 E582      1569            mov     a,dpl
05E5 8583F0    1570            mov     b,dph
05E8 45F0      1571            orl     a,b
05EA 7000      1572            jnz     L015011?
05EC           1573   ;        EFM8_JDY40_test.c:327: P3_7=1;  //wheel 1
05EC D2B7      1574            setb    _P3_7
05EE           1575   ;        EFM8_JDY40_test.c:328: P3_2=0;  // wheel 1 
05EE C2B2      1576            clr     _P3_2
05F0           1577   ;        EFM8_JDY40_test.c:329: P3_0=0; // wheel 2
05F0 C2B0      1578            clr     _P3_0
05F2           1579   ;        EFM8_JDY40_test.c:330: P2_5=0; // wheel 2
05F2 C2A5      1580            clr     _P2_5
05F4           1581   ;        EFM8_JDY40_test.c:331: sprintf(msg, "recR\n");
05F4 74E8      1582            mov     a,#__str_31
05F6 C0E0      1583            push    acc
05F8 74C8      1584            mov     a,#(__str_31 >> 8)
05FA C0E0      1585            push    acc
05FC 7480      1586            mov     a,#0x80
05FE C0E0      1587            push    acc
0600 74F0      1588            mov     a,#_msg
0602 C0E0      1589            push    acc
0604 7414      1590            mov     a,#(_msg >> 8)
0606 C0E0      1591            push    acc
0608 7440      1592            mov     a,#0x40
060A C0E0      1593            push    acc
060C 120000    1594            lcall   _sprintf
060F E581      1595            mov     a,sp
0611 24FA      1596            add     a,#0xfa
0613 F581      1597            mov     sp,a
0615 020000    1598            ljmp    L015039?
0618           1599   L015011?:
0618           1600   ;        EFM8_JDY40_test.c:333: else if (strcmp(buff, "P") == 0) sprintf(msg, "recP\n");
0618 750028    1601            mov     _strcmp_PARM_2,#__str_32
061B 7501C9    1602            mov     (_strcmp_PARM_2 + 1),#(__str_32 >> 8)
061E 750280    1603            mov     (_strcmp_PARM_2 + 2),#0x80
0621 901530    1604            mov     dptr,#_buff
0624 75F040    1605            mov     b,#0x40
0627 120000    1606            lcall   _strcmp
062A E582      1607            mov     a,dpl
062C 8583F0    1608            mov     b,dph
062F 45F0      1609            orl     a,b
0631 7000      1610            jnz     L015008?
0633 74A8      1611            mov     a,#__str_33
0635 C0E0      1612            push    acc
0637 74C9      1613            mov     a,#(__str_33 >> 8)
0639 C0E0      1614            push    acc
063B 7480      1615            mov     a,#0x80
063D C0E0      1616            push    acc
063F 74F0      1617            mov     a,#_msg
0641 C0E0      1618            push    acc
0643 7414      1619            mov     a,#(_msg >> 8)
0645 C0E0      1620            push    acc
0647 7440      1621            mov     a,#0x40
0649 C0E0      1622            push    acc
064B 120000    1623            lcall   _sprintf
064E E581      1624            mov     a,sp
0650 24FA      1625            add     a,#0xfa
0652 F581      1626            mov     sp,a
0654 020000    1627            ljmp    L015039?
0657           1628   L015008?:
0657           1629   ;        EFM8_JDY40_test.c:334: else if (strcmp(buff, "D") == 0) sprintf(msg, "recD\n");
0657 7500E8    1630            mov     _strcmp_PARM_2,#__str_34
065A 7501C9    1631            mov     (_strcmp_PARM_2 + 1),#(__str_34 >> 8)
065D 750280    1632            mov     (_strcmp_PARM_2 + 2),#0x80
0660 901530    1633            mov     dptr,#_buff
0663 75F040    1634            mov     b,#0x40
0666 120000    1635            lcall   _strcmp
0669 E582      1636            mov     a,dpl
066B 8583F0    1637            mov     b,dph
066E 45F0      1638            orl     a,b
0670 7000      1639            jnz     L015005?
0672 7468      1640            mov     a,#__str_35
0674 C0E0      1641            push    acc
0676 74CA      1642            mov     a,#(__str_35 >> 8)
0678 C0E0      1643            push    acc
067A 7480      1644            mov     a,#0x80
067C C0E0      1645            push    acc
067E 74F0      1646            mov     a,#_msg
0680 C0E0      1647            push    acc
0682 7414      1648            mov     a,#(_msg >> 8)
0684 C0E0      1649            push    acc
0686 7440      1650            mov     a,#0x40
0688 C0E0      1651            push    acc
068A 120000    1652            lcall   _sprintf
068D E581      1653            mov     a,sp
068F 24FA      1654            add     a,#0xfa
0691 F581      1655            mov     sp,a
0693 8000      1656            sjmp    L015039?
0695           1657   L015005?:
0695           1658   ;        EFM8_JDY40_test.c:335: else if (strcmp(buff, "X") == 0) sprintf(msg, "recX\n");
0695 7500A8    1659            mov     _strcmp_PARM_2,#__str_36
0698 7501CA    1660            mov     (_strcmp_PARM_2 + 1),#(__str_36 >> 8)
069B 750280    1661            mov     (_strcmp_PARM_2 + 2),#0x80
069E 901530    1662            mov     dptr,#_buff
06A1 75F040    1663            mov     b,#0x40
06A4 120000    1664            lcall   _strcmp
06A7 E582      1665            mov     a,dpl
06A9 8583F0    1666            mov     b,dph
06AC 45F0      1667            orl     a,b
06AE 7000      1668            jnz     L015002?
06B0 7428      1669            mov     a,#__str_37
06B2 C0E0      1670            push    acc
06B4 74CB      1671            mov     a,#(__str_37 >> 8)
06B6 C0E0      1672            push    acc
06B8 7480      1673            mov     a,#0x80
06BA C0E0      1674            push    acc
06BC 74F0      1675            mov     a,#_msg
06BE C0E0      1676            push    acc
06C0 7414      1677            mov     a,#(_msg >> 8)
06C2 C0E0      1678            push    acc
06C4 7440      1679            mov     a,#0x40
06C6 C0E0      1680            push    acc
06C8 120000    1681            lcall   _sprintf
06CB E581      1682            mov     a,sp
06CD 24FA      1683            add     a,#0xfa
06CF F581      1684            mov     sp,a
06D1 8000      1685            sjmp    L015039?
06D3           1686   L015002?:
06D3           1687   ;        EFM8_JDY40_test.c:336: else sprintf(msg, "k\n");
06D3 7468      1688            mov     a,#__str_38
06D5 C0E0      1689            push    acc
06D7 74CB      1690            mov     a,#(__str_38 >> 8)
06D9 C0E0      1691            push    acc
06DB 7480      1692            mov     a,#0x80
06DD C0E0      1693            push    acc
06DF 74F0      1694            mov     a,#_msg
06E1 C0E0      1695            push    acc
06E3 7414      1696            mov     a,#(_msg >> 8)
06E5 C0E0      1697            push    acc
06E7 7440      1698            mov     a,#0x40
06E9 C0E0      1699            push    acc
06EB 120000    1700            lcall   _sprintf
06EE E581      1701            mov     a,sp
06F0 24FA      1702            add     a,#0xfa
06F2 F581      1703            mov     sp,a
06F4           1704   L015039?:
06F4           1705   ;        EFM8_JDY40_test.c:337: sendstr1(msg);
06F4 9014F0    1706            mov     dptr,#_msg
06F7 75F040    1707            mov     b,#0x40
06FA 120000    1708            lcall   _sendstr1
06FD           1709   ;        EFM8_JDY40_test.c:338: waitms(5); // The radio seems to need this delay...
06FD 900005    1710            mov     dptr,#0x0005
0700 120000    1711            lcall   _waitms
0703 020000    1712            ljmp    L015043?
0706           1713            rseg R_CSEG
0706           1714   
0000           1715            rseg R_XINIT
0000           1716   
0000           1717            rseg R_CONST
0000           1718   __str_0:
0000 436F6D6D  1719            db 'Command: %s'
     616E643A
     202573
000B 00        1720            db 0x00
000C           1721   __str_1:
000C 52657370  1722            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1723            db 0x0D
0019 0A        1724            db 0x0A
001A 00        1725            db 0x00
001B           1726   __str_2:
001B 41542B44  1727            db 'AT+DVID0000'
     56494430
     303030
0026 0D        1728            db 0x0D
0027 0A        1729            db 0x0A
0028 00        1730            db 0x00
0029           1731   __str_3:
0029 0D        1732            db 0x0D
002A 0A        1733            db 0x0A
002B 45464D38  1734            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        1735            db 0x0D
0047 0A        1736            db 0x0A
0048 00        1737            db 0x00
0049           1738   __str_4:
0049 41542B56  1739            db 'AT+VER'
     4552
004F 0D        1740            db 0x0D
0050 0A        1741            db 0x0A
0051 00        1742            db 0x00
0052           1743   __str_5:
0052 41542B42  1744            db 'AT+BAUD'
     415544
0059 0D        1745            db 0x0D
005A 0A        1746            db 0x0A
005B 00        1747            db 0x00
005C           1748   __str_6:
005C 41542B52  1749            db 'AT+RFID'
     464944
0063 0D        1750            db 0x0D
0064 0A        1751            db 0x0A
0065 00        1752            db 0x00
0066           1753   __str_7:
0066 41542B44  1754            db 'AT+DVID'
     564944
006D 0D        1755            db 0x0D
006E 0A        1756            db 0x0A
006F 00        1757            db 0x00
0070           1758   __str_8:
0070 41542B52  1759            db 'AT+RFC'
     4643
0076 0D        1760            db 0x0D
0077 0A        1761            db 0x0A
0078 00        1762            db 0x00
0079           1763   __str_9:
0079 41542B50  1764            db 'AT+POWE'
     4F5745
0080 0D        1765            db 0x0D
0081 0A        1766            db 0x0A
0082 00        1767            db 0x00
0083           1768   __str_10:
0083 41542B43  1769            db 'AT+CLSS'
     4C5353
008A 0D        1770            db 0x0D
008B 0A        1771            db 0x0A
008C 00        1772            db 0x00
008D           1773   __str_11:
008D 41542B44  1774            db 'AT+DVIDABBA'
     56494441
     424241
0098 0D        1775            db 0x0D
0099 0A        1776            db 0x0A
009A 00        1777            db 0x00
009B           1778   __str_12:
009B 31        1779            db '1'
009C 00        1780            db 0x00
009D           1781   __str_13:
009D 72656331  1782            db 'rec1'
00A1 00        1783            db 0x00
00A2 00        1784            db 0x00
00A3           1785   __str_14:
00A3 32        1786            db '2'
00A4 00        1787            db 0x00
00A5           1788   __str_15:
00A5 72656332  1789            db 'rec2'
00A9 0A        1790            db 0x0A
00AA 00        1791            db 0x00
00AB           1792   __str_16:
00AB 33        1793            db '3'
00AC 00        1794            db 0x00
00AD           1795   __str_17:
00AD 72656333  1796            db 'rec3'
00B1 0A        1797            db 0x0A
00B2 00        1798            db 0x00
00B3           1799   __str_18:
00B3 34        1800            db '4'
00B4 00        1801            db 0x00
00B5           1802   __str_19:
00B5 72656334  1803            db 'rec4'
00B9 0A        1804            db 0x0A
00BA 00        1805            db 0x00
00BB           1806   __str_20:
00BB 35        1807            db '5'
00BC 00        1808            db 0x00
00BD           1809   __str_21:
00BD 72656335  1810            db 'rec5'
00C1 0A        1811            db 0x0A
00C2 00        1812            db 0x00
00C3           1813   __str_22:
00C3 53        1814            db 'S'
00C4 00        1815            db 0x00
00C5           1816   __str_23:
00C5 72656353  1817            db 'recS'
00C9 0A        1818            db 0x0A
00CA 00        1819            db 0x00
00CB           1820   __str_24:
00CB 46        1821            db 'F'
00CC 00        1822            db 0x00
00CD           1823   __str_25:
00CD 72656346  1824            db 'recF'
00D1 0A        1825            db 0x0A
00D2 00        1826            db 0x00
00D3           1827   __str_26:
00D3 42        1828            db 'B'
00D4 00        1829            db 0x00
00D5           1830   __str_27:
00D5 72656342  1831            db 'recB'
00D9 0A        1832            db 0x0A
00DA 00        1833            db 0x00
00DB           1834   __str_28:
00DB 4C        1835            db 'L'
00DC 00        1836            db 0x00
00DD           1837   __str_29:
00DD 7265634C  1838            db 'recL'
00E1 0A        1839            db 0x0A
00E2 00        1840            db 0x00
00E3           1841   __str_30:
00E3 52        1842            db 'R'
00E4 00        1843            db 0x00
00E5           1844   __str_31:
00E5 72656352  1845            db 'recR'
00E9 0A        1846            db 0x0A
00EA 00        1847            db 0x00
00EB           1848   __str_32:
00EB 50        1849            db 'P'
00EC 00        1850            db 0x00
00ED           1851   __str_33:
00ED 72656350  1852            db 'recP'
00F1 0A        1853            db 0x0A
00F2 00        1854            db 0x00
00F3           1855   __str_34:
00F3 44        1856            db 'D'
00F4 00        1857            db 0x00
00F5           1858   __str_35:
00F5 72656344  1859            db 'recD'
00F9 0A        1860            db 0x0A
00FA 00        1861            db 0x00
00FB           1862   __str_36:
00FB 58        1863            db 'X'
00FC 00        1864            db 0x00
00FD           1865   __str_37:
00FD 72656358  1866            db 'recX'
0101 0A        1867            db 0x0A
0102 00        1868            db 0x00
0103           1869   __str_38:
0103 6B        1870            db 'k'
0104 0A        1871            db 0x0A
0105 00        1872            db 0x00
0106           1873   
0003           1874            CSEG
0003           1875   
0003           1876   end
