0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 28 16:13:10 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_163
0000             28            public _customSparkle
0000             29            public _main
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _automaticmode
0000             36            public _CoinDecider
0000             37            public _GetFrequency
0000             38            public _PrintNumber
0000             39            public _eputs
0000             40            public _GetPeriod
0000             41            public _ADCsteeringRatio
0000             42            public _ADCtoPWM
0000             43            public _Timer2_ISR
0000             44            public _Timer4_ISR
0000             45            public _Volts_at_Pin
0000             46            public _ADC_at_Pin
0000             47            public _InitPinADC
0000             48            public _InitADC
0000             49            public _TIMER0_Init
0000             50            public _ReceptionOff
0000             51            public _SendATCommand
0000             52            public _waitms_or_RI1
0000             53            public _RXU1
0000             54            public _getstr1
0000             55            public _getchar1_with_timeout
0000             56            public _getchar1
0000             57            public _sendstr1
0000             58            public _putchar1
0000             59            public _UART1_Init
0000             60            public _waitms
0000             61            public _Timer3us
0000             62            public __c51_external_startup
0000             63            public _msg
0000             64            public _buff
0000             65            public _automaticmode_PARM_2
0000             66            public _GetFrequency_PARM_2
0000             67            public _PrintNumber_PARM_3
0000             68            public _PrintNumber_PARM_2
0000             69            public _ADCsteeringRatio_PARM_4
0000             70            public _ADCsteeringRatio_PARM_3
0000             71            public _ADCsteeringRatio_PARM_2
0000             72            public _getstr1_PARM_2
0000             73            public _overflow_count
0000             74            public _peggingsidnatu
0000             75            public _direction
0000             76            public _pwm_duty2
0000             77            public _pwm_counter2
0000             78            public _pwm_duty4
0000             79            public _pwm_counter4
0000             80   ;--------------------------------------------------------
0000             81   ; Special Function Registers
0000             82   ;--------------------------------------------------------
0000             83   _ACC            DATA 0xe0
0000             84   _ADC0ASAH       DATA 0xb6
0000             85   _ADC0ASAL       DATA 0xb5
0000             86   _ADC0ASCF       DATA 0xa1
0000             87   _ADC0ASCT       DATA 0xc7
0000             88   _ADC0CF0        DATA 0xbc
0000             89   _ADC0CF1        DATA 0xb9
0000             90   _ADC0CF2        DATA 0xdf
0000             91   _ADC0CN0        DATA 0xe8
0000             92   _ADC0CN1        DATA 0xb2
0000             93   _ADC0CN2        DATA 0xb3
0000             94   _ADC0GTH        DATA 0xc4
0000             95   _ADC0GTL        DATA 0xc3
0000             96   _ADC0H          DATA 0xbe
0000             97   _ADC0L          DATA 0xbd
0000             98   _ADC0LTH        DATA 0xc6
0000             99   _ADC0LTL        DATA 0xc5
0000            100   _ADC0MX         DATA 0xbb
0000            101   _B              DATA 0xf0
0000            102   _CKCON0         DATA 0x8e
0000            103   _CKCON1         DATA 0xa6
0000            104   _CLEN0          DATA 0xc6
0000            105   _CLIE0          DATA 0xc7
0000            106   _CLIF0          DATA 0xe8
0000            107   _CLKSEL         DATA 0xa9
0000            108   _CLOUT0         DATA 0xd1
0000            109   _CLU0CF         DATA 0xb1
0000            110   _CLU0FN         DATA 0xaf
0000            111   _CLU0MX         DATA 0x84
0000            112   _CLU1CF         DATA 0xb3
0000            113   _CLU1FN         DATA 0xb2
0000            114   _CLU1MX         DATA 0x85
0000            115   _CLU2CF         DATA 0xb6
0000            116   _CLU2FN         DATA 0xb5
0000            117   _CLU2MX         DATA 0x91
0000            118   _CLU3CF         DATA 0xbf
0000            119   _CLU3FN         DATA 0xbe
0000            120   _CLU3MX         DATA 0xae
0000            121   _CMP0CN0        DATA 0x9b
0000            122   _CMP0CN1        DATA 0x99
0000            123   _CMP0MD         DATA 0x9d
0000            124   _CMP0MX         DATA 0x9f
0000            125   _CMP1CN0        DATA 0xbf
0000            126   _CMP1CN1        DATA 0xac
0000            127   _CMP1MD         DATA 0xab
0000            128   _CMP1MX         DATA 0xaa
0000            129   _CRC0CN0        DATA 0xce
0000            130   _CRC0CN1        DATA 0x86
0000            131   _CRC0CNT        DATA 0xd3
0000            132   _CRC0DAT        DATA 0xcb
0000            133   _CRC0FLIP       DATA 0xcf
0000            134   _CRC0IN         DATA 0xca
0000            135   _CRC0ST         DATA 0xd2
0000            136   _DAC0CF0        DATA 0x91
0000            137   _DAC0CF1        DATA 0x92
0000            138   _DAC0H          DATA 0x85
0000            139   _DAC0L          DATA 0x84
0000            140   _DAC1CF0        DATA 0x93
0000            141   _DAC1CF1        DATA 0x94
0000            142   _DAC1H          DATA 0x8a
0000            143   _DAC1L          DATA 0x89
0000            144   _DAC2CF0        DATA 0x95
0000            145   _DAC2CF1        DATA 0x96
0000            146   _DAC2H          DATA 0x8c
0000            147   _DAC2L          DATA 0x8b
0000            148   _DAC3CF0        DATA 0x9a
0000            149   _DAC3CF1        DATA 0x9c
0000            150   _DAC3H          DATA 0x8e
0000            151   _DAC3L          DATA 0x8d
0000            152   _DACGCF0        DATA 0x88
0000            153   _DACGCF1        DATA 0x98
0000            154   _DACGCF2        DATA 0xa2
0000            155   _DERIVID        DATA 0xad
0000            156   _DEVICEID       DATA 0xb5
0000            157   _DPH            DATA 0x83
0000            158   _DPL            DATA 0x82
0000            159   _EIE1           DATA 0xe6
0000            160   _EIE2           DATA 0xf3
0000            161   _EIP1           DATA 0xbb
0000            162   _EIP1H          DATA 0xee
0000            163   _EIP2           DATA 0xed
0000            164   _EIP2H          DATA 0xf6
0000            165   _EMI0CN         DATA 0xe7
0000            166   _FLKEY          DATA 0xb7
0000            167   _HFO0CAL        DATA 0xc7
0000            168   _HFO1CAL        DATA 0xd6
0000            169   _HFOCN          DATA 0xef
0000            170   _I2C0ADM        DATA 0xff
0000            171   _I2C0CN0        DATA 0xba
0000            172   _I2C0DIN        DATA 0xbc
0000            173   _I2C0DOUT       DATA 0xbb
0000            174   _I2C0FCN0       DATA 0xad
0000            175   _I2C0FCN1       DATA 0xab
0000            176   _I2C0FCT        DATA 0xf5
0000            177   _I2C0SLAD       DATA 0xbd
0000            178   _I2C0STAT       DATA 0xb9
0000            179   _IE             DATA 0xa8
0000            180   _IP             DATA 0xb8
0000            181   _IPH            DATA 0xf2
0000            182   _IT01CF         DATA 0xe4
0000            183   _LFO0CN         DATA 0xb1
0000            184   _P0             DATA 0x80
0000            185   _P0MASK         DATA 0xfe
0000            186   _P0MAT          DATA 0xfd
0000            187   _P0MDIN         DATA 0xf1
0000            188   _P0MDOUT        DATA 0xa4
0000            189   _P0SKIP         DATA 0xd4
0000            190   _P1             DATA 0x90
0000            191   _P1MASK         DATA 0xee
0000            192   _P1MAT          DATA 0xed
0000            193   _P1MDIN         DATA 0xf2
0000            194   _P1MDOUT        DATA 0xa5
0000            195   _P1SKIP         DATA 0xd5
0000            196   _P2             DATA 0xa0
0000            197   _P2MASK         DATA 0xfc
0000            198   _P2MAT          DATA 0xfb
0000            199   _P2MDIN         DATA 0xf3
0000            200   _P2MDOUT        DATA 0xa6
0000            201   _P2SKIP         DATA 0xcc
0000            202   _P3             DATA 0xb0
0000            203   _P3MDIN         DATA 0xf4
0000            204   _P3MDOUT        DATA 0x9c
0000            205   _PCA0CENT       DATA 0x9e
0000            206   _PCA0CLR        DATA 0x9c
0000            207   _PCA0CN0        DATA 0xd8
0000            208   _PCA0CPH0       DATA 0xfc
0000            209   _PCA0CPH1       DATA 0xea
0000            210   _PCA0CPH2       DATA 0xec
0000            211   _PCA0CPH3       DATA 0xf5
0000            212   _PCA0CPH4       DATA 0x85
0000            213   _PCA0CPH5       DATA 0xde
0000            214   _PCA0CPL0       DATA 0xfb
0000            215   _PCA0CPL1       DATA 0xe9
0000            216   _PCA0CPL2       DATA 0xeb
0000            217   _PCA0CPL3       DATA 0xf4
0000            218   _PCA0CPL4       DATA 0x84
0000            219   _PCA0CPL5       DATA 0xdd
0000            220   _PCA0CPM0       DATA 0xda
0000            221   _PCA0CPM1       DATA 0xdb
0000            222   _PCA0CPM2       DATA 0xdc
0000            223   _PCA0CPM3       DATA 0xae
0000            224   _PCA0CPM4       DATA 0xaf
0000            225   _PCA0CPM5       DATA 0xcc
0000            226   _PCA0H          DATA 0xfa
0000            227   _PCA0L          DATA 0xf9
0000            228   _PCA0MD         DATA 0xd9
0000            229   _PCA0POL        DATA 0x96
0000            230   _PCA0PWM        DATA 0xf7
0000            231   _PCON0          DATA 0x87
0000            232   _PCON1          DATA 0xcd
0000            233   _PFE0CN         DATA 0xc1
0000            234   _PRTDRV         DATA 0xf6
0000            235   _PSCTL          DATA 0x8f
0000            236   _PSTAT0         DATA 0xaa
0000            237   _PSW            DATA 0xd0
0000            238   _REF0CN         DATA 0xd1
0000            239   _REG0CN         DATA 0xc9
0000            240   _REVID          DATA 0xb6
0000            241   _RSTSRC         DATA 0xef
0000            242   _SBCON1         DATA 0x94
0000            243   _SBRLH1         DATA 0x96
0000            244   _SBRLL1         DATA 0x95
0000            245   _SBUF           DATA 0x99
0000            246   _SBUF0          DATA 0x99
0000            247   _SBUF1          DATA 0x92
0000            248   _SCON           DATA 0x98
0000            249   _SCON0          DATA 0x98
0000            250   _SCON1          DATA 0xc8
0000            251   _SFRPAGE        DATA 0xa7
0000            252   _SFRPGCN        DATA 0xbc
0000            253   _SFRSTACK       DATA 0xd7
0000            254   _SMB0ADM        DATA 0xd6
0000            255   _SMB0ADR        DATA 0xd7
0000            256   _SMB0CF         DATA 0xc1
0000            257   _SMB0CN0        DATA 0xc0
0000            258   _SMB0DAT        DATA 0xc2
0000            259   _SMB0FCN0       DATA 0xc3
0000            260   _SMB0FCN1       DATA 0xc4
0000            261   _SMB0FCT        DATA 0xef
0000            262   _SMB0RXLN       DATA 0xc5
0000            263   _SMB0TC         DATA 0xac
0000            264   _SMOD1          DATA 0x93
0000            265   _SP             DATA 0x81
0000            266   _SPI0CFG        DATA 0xa1
0000            267   _SPI0CKR        DATA 0xa2
0000            268   _SPI0CN0        DATA 0xf8
0000            269   _SPI0DAT        DATA 0xa3
0000            270   _SPI0FCN0       DATA 0x9a
0000            271   _SPI0FCN1       DATA 0x9b
0000            272   _SPI0FCT        DATA 0xf7
0000            273   _SPI0PCF        DATA 0xdf
0000            274   _TCON           DATA 0x88
0000            275   _TH0            DATA 0x8c
0000            276   _TH1            DATA 0x8d
0000            277   _TL0            DATA 0x8a
0000            278   _TL1            DATA 0x8b
0000            279   _TMOD           DATA 0x89
0000            280   _TMR2CN0        DATA 0xc8
0000            281   _TMR2CN1        DATA 0xfd
0000            282   _TMR2H          DATA 0xcf
0000            283   _TMR2L          DATA 0xce
0000            284   _TMR2RLH        DATA 0xcb
0000            285   _TMR2RLL        DATA 0xca
0000            286   _TMR3CN0        DATA 0x91
0000            287   _TMR3CN1        DATA 0xfe
0000            288   _TMR3H          DATA 0x95
0000            289   _TMR3L          DATA 0x94
0000            290   _TMR3RLH        DATA 0x93
0000            291   _TMR3RLL        DATA 0x92
0000            292   _TMR4CN0        DATA 0x98
0000            293   _TMR4CN1        DATA 0xff
0000            294   _TMR4H          DATA 0xa5
0000            295   _TMR4L          DATA 0xa4
0000            296   _TMR4RLH        DATA 0xa3
0000            297   _TMR4RLL        DATA 0xa2
0000            298   _TMR5CN0        DATA 0xc0
0000            299   _TMR5CN1        DATA 0xf1
0000            300   _TMR5H          DATA 0xd5
0000            301   _TMR5L          DATA 0xd4
0000            302   _TMR5RLH        DATA 0xd3
0000            303   _TMR5RLL        DATA 0xd2
0000            304   _UART0PCF       DATA 0xd9
0000            305   _UART1FCN0      DATA 0x9d
0000            306   _UART1FCN1      DATA 0xd8
0000            307   _UART1FCT       DATA 0xfa
0000            308   _UART1LIN       DATA 0x9e
0000            309   _UART1PCF       DATA 0xda
0000            310   _VDM0CN         DATA 0xff
0000            311   _WDTCN          DATA 0x97
0000            312   _XBR0           DATA 0xe1
0000            313   _XBR1           DATA 0xe2
0000            314   _XBR2           DATA 0xe3
0000            315   _XOSC0CN        DATA 0x86
0000            316   _DPTR           DATA 0x8382
0000            317   _TMR2RL         DATA 0xcbca
0000            318   _TMR3RL         DATA 0x9392
0000            319   _TMR4RL         DATA 0xa3a2
0000            320   _TMR5RL         DATA 0xd3d2
0000            321   _TMR0           DATA 0x8c8a
0000            322   _TMR1           DATA 0x8d8b
0000            323   _TMR2           DATA 0xcfce
0000            324   _TMR3           DATA 0x9594
0000            325   _TMR4           DATA 0xa5a4
0000            326   _TMR5           DATA 0xd5d4
0000            327   _SBRL1          DATA 0x9695
0000            328   _PCA0           DATA 0xfaf9
0000            329   _PCA0CP0        DATA 0xfcfb
0000            330   _PCA0CP1        DATA 0xeae9
0000            331   _PCA0CP2        DATA 0xeceb
0000            332   _PCA0CP3        DATA 0xf5f4
0000            333   _PCA0CP4        DATA 0x8584
0000            334   _PCA0CP5        DATA 0xdedd
0000            335   _ADC0ASA        DATA 0xb6b5
0000            336   _ADC0GT         DATA 0xc4c3
0000            337   _ADC0           DATA 0xbebd
0000            338   _ADC0LT         DATA 0xc6c5
0000            339   _DAC0           DATA 0x8584
0000            340   _DAC1           DATA 0x8a89
0000            341   _DAC2           DATA 0x8c8b
0000            342   _DAC3           DATA 0x8e8d
0000            343   ;--------------------------------------------------------
0000            344   ; special function bits
0000            345   ;--------------------------------------------------------
0000            346   _ACC_0          BIT 0xe0
0000            347   _ACC_1          BIT 0xe1
0000            348   _ACC_2          BIT 0xe2
0000            349   _ACC_3          BIT 0xe3
0000            350   _ACC_4          BIT 0xe4
0000            351   _ACC_5          BIT 0xe5
0000            352   _ACC_6          BIT 0xe6
0000            353   _ACC_7          BIT 0xe7
0000            354   _TEMPE          BIT 0xe8
0000            355   _ADGN0          BIT 0xe9
0000            356   _ADGN1          BIT 0xea
0000            357   _ADWINT         BIT 0xeb
0000            358   _ADBUSY         BIT 0xec
0000            359   _ADINT          BIT 0xed
0000            360   _IPOEN          BIT 0xee
0000            361   _ADEN           BIT 0xef
0000            362   _B_0            BIT 0xf0
0000            363   _B_1            BIT 0xf1
0000            364   _B_2            BIT 0xf2
0000            365   _B_3            BIT 0xf3
0000            366   _B_4            BIT 0xf4
0000            367   _B_5            BIT 0xf5
0000            368   _B_6            BIT 0xf6
0000            369   _B_7            BIT 0xf7
0000            370   _C0FIF          BIT 0xe8
0000            371   _C0RIF          BIT 0xe9
0000            372   _C1FIF          BIT 0xea
0000            373   _C1RIF          BIT 0xeb
0000            374   _C2FIF          BIT 0xec
0000            375   _C2RIF          BIT 0xed
0000            376   _C3FIF          BIT 0xee
0000            377   _C3RIF          BIT 0xef
0000            378   _D1SRC0         BIT 0x88
0000            379   _D1SRC1         BIT 0x89
0000            380   _D1AMEN         BIT 0x8a
0000            381   _D01REFSL       BIT 0x8b
0000            382   _D3SRC0         BIT 0x8c
0000            383   _D3SRC1         BIT 0x8d
0000            384   _D3AMEN         BIT 0x8e
0000            385   _D23REFSL       BIT 0x8f
0000            386   _D0UDIS         BIT 0x98
0000            387   _D1UDIS         BIT 0x99
0000            388   _D2UDIS         BIT 0x9a
0000            389   _D3UDIS         BIT 0x9b
0000            390   _EX0            BIT 0xa8
0000            391   _ET0            BIT 0xa9
0000            392   _EX1            BIT 0xaa
0000            393   _ET1            BIT 0xab
0000            394   _ES0            BIT 0xac
0000            395   _ET2            BIT 0xad
0000            396   _ESPI0          BIT 0xae
0000            397   _EA             BIT 0xaf
0000            398   _PX0            BIT 0xb8
0000            399   _PT0            BIT 0xb9
0000            400   _PX1            BIT 0xba
0000            401   _PT1            BIT 0xbb
0000            402   _PS0            BIT 0xbc
0000            403   _PT2            BIT 0xbd
0000            404   _PSPI0          BIT 0xbe
0000            405   _P0_0           BIT 0x80
0000            406   _P0_1           BIT 0x81
0000            407   _P0_2           BIT 0x82
0000            408   _P0_3           BIT 0x83
0000            409   _P0_4           BIT 0x84
0000            410   _P0_5           BIT 0x85
0000            411   _P0_6           BIT 0x86
0000            412   _P0_7           BIT 0x87
0000            413   _P1_0           BIT 0x90
0000            414   _P1_1           BIT 0x91
0000            415   _P1_2           BIT 0x92
0000            416   _P1_3           BIT 0x93
0000            417   _P1_4           BIT 0x94
0000            418   _P1_5           BIT 0x95
0000            419   _P1_6           BIT 0x96
0000            420   _P1_7           BIT 0x97
0000            421   _P2_0           BIT 0xa0
0000            422   _P2_1           BIT 0xa1
0000            423   _P2_2           BIT 0xa2
0000            424   _P2_3           BIT 0xa3
0000            425   _P2_4           BIT 0xa4
0000            426   _P2_5           BIT 0xa5
0000            427   _P2_6           BIT 0xa6
0000            428   _P3_0           BIT 0xb0
0000            429   _P3_1           BIT 0xb1
0000            430   _P3_2           BIT 0xb2
0000            431   _P3_3           BIT 0xb3
0000            432   _P3_4           BIT 0xb4
0000            433   _P3_7           BIT 0xb7
0000            434   _CCF0           BIT 0xd8
0000            435   _CCF1           BIT 0xd9
0000            436   _CCF2           BIT 0xda
0000            437   _CCF3           BIT 0xdb
0000            438   _CCF4           BIT 0xdc
0000            439   _CCF5           BIT 0xdd
0000            440   _CR             BIT 0xde
0000            441   _CF             BIT 0xdf
0000            442   _PARITY         BIT 0xd0
0000            443   _F1             BIT 0xd1
0000            444   _OV             BIT 0xd2
0000            445   _RS0            BIT 0xd3
0000            446   _RS1            BIT 0xd4
0000            447   _F0             BIT 0xd5
0000            448   _AC             BIT 0xd6
0000            449   _CY             BIT 0xd7
0000            450   _RI             BIT 0x98
0000            451   _TI             BIT 0x99
0000            452   _RB8            BIT 0x9a
0000            453   _TB8            BIT 0x9b
0000            454   _REN            BIT 0x9c
0000            455   _CE             BIT 0x9d
0000            456   _SMODE          BIT 0x9e
0000            457   _RI1            BIT 0xc8
0000            458   _TI1            BIT 0xc9
0000            459   _RBX1           BIT 0xca
0000            460   _TBX1           BIT 0xcb
0000            461   _REN1           BIT 0xcc
0000            462   _PERR1          BIT 0xcd
0000            463   _OVR1           BIT 0xce
0000            464   _SI             BIT 0xc0
0000            465   _ACK            BIT 0xc1
0000            466   _ARBLOST        BIT 0xc2
0000            467   _ACKRQ          BIT 0xc3
0000            468   _STO            BIT 0xc4
0000            469   _STA            BIT 0xc5
0000            470   _TXMODE         BIT 0xc6
0000            471   _MASTER         BIT 0xc7
0000            472   _SPIEN          BIT 0xf8
0000            473   _TXNF           BIT 0xf9
0000            474   _NSSMD0         BIT 0xfa
0000            475   _NSSMD1         BIT 0xfb
0000            476   _RXOVRN         BIT 0xfc
0000            477   _MODF           BIT 0xfd
0000            478   _WCOL           BIT 0xfe
0000            479   _SPIF           BIT 0xff
0000            480   _IT0            BIT 0x88
0000            481   _IE0            BIT 0x89
0000            482   _IT1            BIT 0x8a
0000            483   _IE1            BIT 0x8b
0000            484   _TR0            BIT 0x8c
0000            485   _TF0            BIT 0x8d
0000            486   _TR1            BIT 0x8e
0000            487   _TF1            BIT 0x8f
0000            488   _T2XCLK0        BIT 0xc8
0000            489   _T2XCLK1        BIT 0xc9
0000            490   _TR2            BIT 0xca
0000            491   _T2SPLIT        BIT 0xcb
0000            492   _TF2CEN         BIT 0xcc
0000            493   _TF2LEN         BIT 0xcd
0000            494   _TF2L           BIT 0xce
0000            495   _TF2H           BIT 0xcf
0000            496   _T4XCLK0        BIT 0x98
0000            497   _T4XCLK1        BIT 0x99
0000            498   _TR4            BIT 0x9a
0000            499   _T4SPLIT        BIT 0x9b
0000            500   _TF4CEN         BIT 0x9c
0000            501   _TF4LEN         BIT 0x9d
0000            502   _TF4L           BIT 0x9e
0000            503   _TF4H           BIT 0x9f
0000            504   _T5XCLK0        BIT 0xc0
0000            505   _T5XCLK1        BIT 0xc1
0000            506   _TR5            BIT 0xc2
0000            507   _T5SPLIT        BIT 0xc3
0000            508   _TF5CEN         BIT 0xc4
0000            509   _TF5LEN         BIT 0xc5
0000            510   _TF5L           BIT 0xc6
0000            511   _TF5H           BIT 0xc7
0000            512   _RIE            BIT 0xd8
0000            513   _RXTO0          BIT 0xd9
0000            514   _RXTO1          BIT 0xda
0000            515   _RFRQ           BIT 0xdb
0000            516   _TIE            BIT 0xdc
0000            517   _TXHOLD         BIT 0xdd
0000            518   _TXNF1          BIT 0xde
0000            519   _TFRQ           BIT 0xdf
0000            520   ;--------------------------------------------------------
0000            521   ; overlayable register banks
0000            522   ;--------------------------------------------------------
0000            523            rbank0 segment data overlay
0000            524   ;--------------------------------------------------------
0000            525   ; internal ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_DSEG
0000            528   _pwm_counter4:
0000            529            ds 2
0002            530   _pwm_duty4:
0002            531            ds 2
0004            532   _pwm_counter2:
0004            533            ds 2
0006            534   _pwm_duty2:
0006            535            ds 2
0008            536   _direction:
0008            537            ds 2
000A            538   _peggingsidnatu:
000A            539            ds 2
000C            540   _overflow_count:
000C            541            ds 1
000D            542   _getstr1_PARM_2:
000D            543            ds 1
000E            544   _ADCsteeringRatio_PARM_2:
000E            545            ds 2
0010            546   _ADCsteeringRatio_PARM_3:
0010            547            ds 3
0013            548   _ADCsteeringRatio_PARM_4:
0013            549            ds 3
0016            550   _ADCsteeringRatio_sloc0_1_0:
0016            551            ds 1
0017            552   _ADCsteeringRatio_sloc1_1_0:
0017            553            ds 3
001A            554   _PrintNumber_PARM_2:
001A            555            ds 2
001C            556   _PrintNumber_PARM_3:
001C            557            ds 2
001E            558   _PrintNumber_val_1_162:
001E            559            ds 4
0022            560   _PrintNumber_j_1_163:
0022            561            ds 2
0024            562   _PrintNumber_sloc0_1_0:
0024            563            ds 2
0026            564   _PrintNumber_sloc1_1_0:
0026            565            ds 4
002A            566   _GetFrequency_PARM_2:
002A            567            ds 2
002C            568   _automaticmode_PARM_2:
002C            569            ds 4
0030            570   _main_speed_1_196:
0030            571            ds 2
0032            572   _main_steering_1_196:
0032            573            ds 2
0034            574   _main_adcwheel1_1_196:
0034            575            ds 2
0036            576   _main_adcwheel2_1_196:
0036            577            ds 2
0038            578   _main_v_1_196:
0038            579            ds 8
0040            580   ;--------------------------------------------------------
0040            581   ; overlayable items in internal ram 
0040            582   ;--------------------------------------------------------
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587   _InitPinADC_PARM_2:
0000            588            ds 1
0001            589            rseg    R_OSEG
0001            590            rseg    R_OSEG
0001            591   ;--------------------------------------------------------
0001            592   ; indirectly addressable internal ram data
0001            593   ;--------------------------------------------------------
0000            594            rseg R_ISEG
0000            595   _buff:
0000            596            ds 20
0014            597   _msg:
0014            598            ds 20
0028            599   _ADCsteeringRatio_centersteering_1_143:
0028            600            ds 2
002A            601   _ADCsteeringRatio_steeringFactor_1_143:
002A            602            ds 4
002E            603   _ADCsteeringRatio_wheel2Speed_1_143:
002E            604            ds 2
0030            605   ;--------------------------------------------------------
0030            606   ; absolute internal ram data
0030            607   ;--------------------------------------------------------
0000            608            DSEG
0000            609   ;--------------------------------------------------------
0000            610   ; bit data
0000            611   ;--------------------------------------------------------
0000            612            rseg R_BSEG
0000            613   ;--------------------------------------------------------
0000            614   ; paged external ram data
0000            615   ;--------------------------------------------------------
0000            616            rseg R_PSEG
0000            617   ;--------------------------------------------------------
0000            618   ; external ram data
0000            619   ;--------------------------------------------------------
0000            620            rseg R_XSEG
0000            621   _ADCsteeringRatio_wheel1Speed_1_143:
0000            622            ds 2
0002            623   _PrintNumber_buff_1_163:
0002            624            ds 33
0023            625   ;--------------------------------------------------------
0023            626   ; absolute external ram data
0023            627   ;--------------------------------------------------------
0000            628            XSEG
0000            629   ;--------------------------------------------------------
0000            630   ; external initialized ram data
0000            631   ;--------------------------------------------------------
0000            632            rseg R_IXSEG
0000            633            rseg R_HOME
0000            634            rseg R_GSINIT
0000            635            rseg R_CSEG
0000            636   ;--------------------------------------------------------
0000            637   ; Reset entry point and interrupt vectors
0000            638   ;--------------------------------------------------------
0000            639            CSEG at 0x0000
0000 020000     640            ljmp    _crt0
002B            641            CSEG at 0x002b
002B 020000     642            ljmp    _Timer2_ISR
008B            643            CSEG at 0x008b
008B 020000     644            ljmp    _Timer4_ISR
008E            645   ;--------------------------------------------------------
008E            646   ; global & static initialisations
008E            647   ;--------------------------------------------------------
0000            648            rseg R_HOME
0000            649            rseg R_GSINIT
0000            650            rseg R_GSINIT
0000            651   ;--------------------------------------------------------
0000            652   ; data variables initialization
0000            653   ;--------------------------------------------------------
0000            654            rseg R_DINIT
0000            655   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         656            clr     a
0001 F500       657            mov     _pwm_counter4,a
0003 F501       658            mov     (_pwm_counter4 + 1),a
0005            659   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0?65535)
0005 75C0FF     660            mov     _pwm_duty4,#0xFF
0008 75C1FF     661            mov     (_pwm_duty4 + 1),#0xFF
000B            662   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         663            clr     a
000C F580       664            mov     _pwm_counter2,a
000E F581       665            mov     (_pwm_counter2 + 1),a
0010            666   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0?65535)
0010 7540FF     667            mov     _pwm_duty2,#0xFF
0013 7541FF     668            mov     (_pwm_duty2 + 1),#0xFF
0016            669   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         670            clr     a
0017 F500       671            mov     _direction,a
0019 F501       672            mov     (_direction + 1),a
001B            673   ;        EFM8_JDY40_test.c:32: volatile int peggingsidnatu=0;
001B E4         674            clr     a
001C F5C0       675            mov     _peggingsidnatu,a
001E F5C1       676            mov     (_peggingsidnatu + 1),a
0020            677            ; The linker places a 'ret' at the end of segment R_DINIT.
0020            678   ;--------------------------------------------------------
0020            679   ; code
0020            680   ;--------------------------------------------------------
0000            681            rseg R_CSEG
0000            682   ;------------------------------------------------------------
0000            683   ;Allocation info for local variables in function '_c51_external_startup'
0000            684   ;------------------------------------------------------------
0000            685   ;------------------------------------------------------------
0000            686   ;        EFM8_JDY40_test.c:54: char _c51_external_startup (void)
0000            687   ;        -----------------------------------------
0000            688   ;         function _c51_external_startup
0000            689   ;        -----------------------------------------
0000            690   __c51_external_startup:
0000            691            using   0
0000            692   ;        EFM8_JDY40_test.c:57: SFRPAGE = 0x00;
0000 75A700     693            mov     _SFRPAGE,#0x00
0003            694   ;        EFM8_JDY40_test.c:58: WDTCN = 0xDE; //First key
0003 7597DE     695            mov     _WDTCN,#0xDE
0006            696   ;        EFM8_JDY40_test.c:59: WDTCN = 0xAD; //Second key
0006 7597AD     697            mov     _WDTCN,#0xAD
0009            698   ;        EFM8_JDY40_test.c:61: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     699            mov     _VDM0CN,#0x80
000C            700   ;        EFM8_JDY40_test.c:62: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     701            mov     _RSTSRC,#0x06
000F            702   ;        EFM8_JDY40_test.c:69: SFRPAGE = 0x10;
000F 75A710     703            mov     _SFRPAGE,#0x10
0012            704   ;        EFM8_JDY40_test.c:70: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     705            mov     _PFE0CN,#0x20
0015            706   ;        EFM8_JDY40_test.c:71: SFRPAGE = 0x00;
0015 75A700     707            mov     _SFRPAGE,#0x00
0018            708   ;        EFM8_JDY40_test.c:92: CLKSEL = 0x00;
0018 75A900     709            mov     _CLKSEL,#0x00
001B            710   ;        EFM8_JDY40_test.c:93: CLKSEL = 0x00;
001B 75A900     711            mov     _CLKSEL,#0x00
001E            712   ;        EFM8_JDY40_test.c:94: while ((CLKSEL & 0x80) == 0);
001E            713   L002001?:
001E E5A9       714            mov     a,_CLKSEL
0020 30E770     715            jnb     acc.7,L002001?
0023            716   ;        EFM8_JDY40_test.c:95: CLKSEL = 0x03;
0023 75A903     717            mov     _CLKSEL,#0x03
0026            718   ;        EFM8_JDY40_test.c:96: CLKSEL = 0x03;
0026 75A903     719            mov     _CLKSEL,#0x03
0029            720   ;        EFM8_JDY40_test.c:97: while ((CLKSEL & 0x80) == 0);
0029            721   L002004?:
0029 E5A9       722            mov     a,_CLKSEL
002B 30E7F0     723            jnb     acc.7,L002004?
002E            724   ;        EFM8_JDY40_test.c:102: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     725            orl     _P0MDOUT,#0x11
0031            726   ;        EFM8_JDY40_test.c:103: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     727            orl     _P2MDOUT,#0x01
0034            728   ;        EFM8_JDY40_test.c:104: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     729            mov     _XBR0,#0x01
0037            730   ;        EFM8_JDY40_test.c:105: XBR1     = 0X00;
0037 75E200     731            mov     _XBR1,#0x00
003A            732   ;        EFM8_JDY40_test.c:106: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     733            mov     _XBR2,#0x41
003D            734   ;        EFM8_JDY40_test.c:108: P3MDOUT |= 0b10000101;
003D 439C85     735            orl     _P3MDOUT,#0x85
0040            736   ;        EFM8_JDY40_test.c:109: XBR2     = 0x41; // existing line
0040 75E341     737            mov     _XBR2,#0x41
0043            738   ;        EFM8_JDY40_test.c:110: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     739            orl     _P3MDOUT,#0x85
0046            740   ;        EFM8_JDY40_test.c:116: SCON0 = 0x10;
0046 759810     741            mov     _SCON0,#0x10
0049            742   ;        EFM8_JDY40_test.c:117: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     743            mov     _TH1,#0xE6
004C            744   ;        EFM8_JDY40_test.c:118: TL1 = TH1;      // Init Timer1
004C 858D8B     745            mov     _TL1,_TH1
004F            746   ;        EFM8_JDY40_test.c:119: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     747            anl     _TMOD,#0x0F
0052            748   ;        EFM8_JDY40_test.c:120: TMOD |=  0x20;                       
0052 438920     749            orl     _TMOD,#0x20
0055            750   ;        EFM8_JDY40_test.c:121: TR1 = 1; // START Timer1
0055 D28E       751            setb    _TR1
0057            752   ;        EFM8_JDY40_test.c:122: TI = 1;  // Indicate TX0 ready
0057 D299       753            setb    _TI
0059            754   ;        EFM8_JDY40_test.c:126: SFRPAGE=0x10;
0059 75A710     755            mov     _SFRPAGE,#0x10
005C            756   ;        EFM8_JDY40_test.c:127: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     757            mov     _TMR4CN0,#0x00
005F            758   ;        EFM8_JDY40_test.c:128: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     759            orl     _CKCON1,#0x01
0062            760   ;        EFM8_JDY40_test.c:129: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     761            mov     _TMR4RL,#0xA8
0065 75A3FD     762            mov     (_TMR4RL >> 8),#0xFD
0068            763   ;        EFM8_JDY40_test.c:130: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     764            mov     _TMR4,#0xFF
006B 75A5FF     765            mov     (_TMR4 >> 8),#0xFF
006E            766   ;        EFM8_JDY40_test.c:131: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     767            orl     _EIE2,#0x04
0071            768   ;        EFM8_JDY40_test.c:132: TR4=1;
0071 D29A       769            setb    _TR4
0073            770   ;        EFM8_JDY40_test.c:133: EA=1;
0073 D2AF       771            setb    _EA
0075            772   ;        EFM8_JDY40_test.c:136: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     773            mov     _TMR2CN0,#0x00
0078            774   ;        EFM8_JDY40_test.c:137: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     775            orl     _CKCON0,#0x10
007B            776   ;        EFM8_JDY40_test.c:138: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     777            mov     _TMR2RL,#0xA8
007E 75CBFD     778            mov     (_TMR2RL >> 8),#0xFD
0081            779   ;        EFM8_JDY40_test.c:139: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     780            mov     _TMR2,#0xFF
0084 75CFFF     781            mov     (_TMR2 >> 8),#0xFF
0087            782   ;        EFM8_JDY40_test.c:140: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       783            setb    _ET2
0089            784   ;        EFM8_JDY40_test.c:141: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       785            setb    _TR2
008B            786   ;        EFM8_JDY40_test.c:142: SFRPAGE=0x00;
008B 75A700     787            mov     _SFRPAGE,#0x00
008E            788   ;        EFM8_JDY40_test.c:143: return 0;
008E 758200     789            mov     dpl,#0x00
0091 22         790            ret
0092            791   ;------------------------------------------------------------
0092            792   ;Allocation info for local variables in function 'Timer3us'
0092            793   ;------------------------------------------------------------
0092            794   ;us                        Allocated to registers r2 
0092            795   ;i                         Allocated to registers r3 
0092            796   ;------------------------------------------------------------
0092            797   ;        EFM8_JDY40_test.c:147: void Timer3us(unsigned char us)
0092            798   ;        -----------------------------------------
0092            799   ;         function Timer3us
0092            800   ;        -----------------------------------------
0092            801   _Timer3us:
0092 AA82       802            mov     r2,dpl
0094            803   ;        EFM8_JDY40_test.c:152: CKCON0|=0b_0100_0000;
0094 438E40     804            orl     _CKCON0,#0x40
0097            805   ;        EFM8_JDY40_test.c:154: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0097 7592B8     806            mov     _TMR3RL,#0xB8
009A 7593FF     807            mov     (_TMR3RL >> 8),#0xFF
009D            808   ;        EFM8_JDY40_test.c:155: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
009D 859294     809            mov     _TMR3,_TMR3RL
00A0 859395     810            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00A3            811   ;        EFM8_JDY40_test.c:157: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00A3 759104     812            mov     _TMR3CN0,#0x04
00A6            813   ;        EFM8_JDY40_test.c:158: for (i = 0; i < us; i++)       // Count <us> overflows
00A6 7B00       814            mov     r3,#0x00
00A8            815   L003004?:
00A8 C3         816            clr     c
00A9 EB         817            mov     a,r3
00AA 9A         818            subb    a,r2
00AB 5000       819            jnc     L003007?
00AD            820   ;        EFM8_JDY40_test.c:160: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00AD            821   L003001?:
00AD E591       822            mov     a,_TMR3CN0
00AF 30E7F0     823            jnb     acc.7,L003001?
00B2            824   ;        EFM8_JDY40_test.c:161: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00B2 53917F     825            anl     _TMR3CN0,#0x7F
00B5            826   ;        EFM8_JDY40_test.c:158: for (i = 0; i < us; i++)       // Count <us> overflows
00B5 0B         827            inc     r3
00B6 8000       828            sjmp    L003004?
00B8            829   L003007?:
00B8            830   ;        EFM8_JDY40_test.c:163: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00B8 759100     831            mov     _TMR3CN0,#0x00
00BB 22         832            ret
00BC            833   ;------------------------------------------------------------
00BC            834   ;Allocation info for local variables in function 'waitms'
00BC            835   ;------------------------------------------------------------
00BC            836   ;ms                        Allocated to registers r2 r3 
00BC            837   ;j                         Allocated to registers r4 r5 
00BC            838   ;k                         Allocated to registers r6 
00BC            839   ;------------------------------------------------------------
00BC            840   ;        EFM8_JDY40_test.c:166: void waitms (unsigned int ms)
00BC            841   ;        -----------------------------------------
00BC            842   ;         function waitms
00BC            843   ;        -----------------------------------------
00BC            844   _waitms:
00BC AA82       845            mov     r2,dpl
00BE AB83       846            mov     r3,dph
00C0            847   ;        EFM8_JDY40_test.c:170: for(j=0; j<ms; j++)
00C0 7C00       848            mov     r4,#0x00
00C2 7D00       849            mov     r5,#0x00
00C4            850   L004005?:
00C4 C3         851            clr     c
00C5 EC         852            mov     a,r4
00C6 9A         853            subb    a,r2
00C7 ED         854            mov     a,r5
00C8 9B         855            subb    a,r3
00C9 5000       856            jnc     L004009?
00CB            857   ;        EFM8_JDY40_test.c:171: for (k=0; k<4; k++) Timer3us(250);
00CB 7E00       858            mov     r6,#0x00
00CD            859   L004001?:
00CD BE0430     860            cjne    r6,#0x04,L004018?
00D0            861   L004018?:
00D0 5000       862            jnc     L004007?
00D2 7582FA     863            mov     dpl,#0xFA
00D5 C002       864            push    ar2
00D7 C003       865            push    ar3
00D9 C004       866            push    ar4
00DB C005       867            push    ar5
00DD C006       868            push    ar6
00DF 120000     869            lcall   _Timer3us
00E2 D006       870            pop     ar6
00E4 D005       871            pop     ar5
00E6 D004       872            pop     ar4
00E8 D003       873            pop     ar3
00EA D002       874            pop     ar2
00EC 0E         875            inc     r6
00ED 8000       876            sjmp    L004001?
00EF            877   L004007?:
00EF            878   ;        EFM8_JDY40_test.c:170: for(j=0; j<ms; j++)
00EF 0C         879            inc     r4
00F0 BC0070     880            cjne    r4,#0x00,L004005?
00F3 0D         881            inc     r5
00F4 8000       882            sjmp    L004005?
00F6            883   L004009?:
00F6 22         884            ret
00F7            885   ;------------------------------------------------------------
00F7            886   ;Allocation info for local variables in function 'UART1_Init'
00F7            887   ;------------------------------------------------------------
00F7            888   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00F7            889   ;------------------------------------------------------------
00F7            890   ;        EFM8_JDY40_test.c:174: void UART1_Init (unsigned long baudrate)
00F7            891   ;        -----------------------------------------
00F7            892   ;         function UART1_Init
00F7            893   ;        -----------------------------------------
00F7            894   _UART1_Init:
00F7 AA82       895            mov     r2,dpl
00F9 AB83       896            mov     r3,dph
00FB ACF0       897            mov     r4,b
00FD FD         898            mov     r5,a
00FE            899   ;        EFM8_JDY40_test.c:176: SFRPAGE = 0x20;
00FE 75A720     900            mov     _SFRPAGE,#0x20
0101            901   ;        EFM8_JDY40_test.c:177: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0101 75930C     902            mov     _SMOD1,#0x0C
0104            903   ;        EFM8_JDY40_test.c:178: SCON1 = 0x10;
0104 75C810     904            mov     _SCON1,#0x10
0107            905   ;        EFM8_JDY40_test.c:179: SBCON1 =0x00;   // disable baud rate generator
0107 759400     906            mov     _SBCON1,#0x00
010A            907   ;        EFM8_JDY40_test.c:180: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
010A 8A00       908            mov     __divulong_PARM_2,r2
010C 8B01       909            mov     (__divulong_PARM_2 + 1),r3
010E 8C02       910            mov     (__divulong_PARM_2 + 2),r4
0110 8D03       911            mov     (__divulong_PARM_2 + 3),r5
0112 90A200     912            mov     dptr,#0xA200
0115 75F04A     913            mov     b,#0x4A
0118 7404       914            mov     a,#0x04
011A 120000     915            lcall   __divulong
011D AA82       916            mov     r2,dpl
011F AB83       917            mov     r3,dph
0121 ACF0       918            mov     r4,b
0123 FD         919            mov     r5,a
0124 750018     920            mov     __divulong_PARM_2,#0x18
0127 E4         921            clr     a
0128 F501       922            mov     (__divulong_PARM_2 + 1),a
012A F502       923            mov     (__divulong_PARM_2 + 2),a
012C F503       924            mov     (__divulong_PARM_2 + 3),a
012E 8A82       925            mov     dpl,r2
0130 8B83       926            mov     dph,r3
0132 8CF0       927            mov     b,r4
0134 ED         928            mov     a,r5
0135 120000     929            lcall   __divulong
0138 AA82       930            mov     r2,dpl
013A AB83       931            mov     r3,dph
013C ACF0       932            mov     r4,b
013E FD         933            mov     r5,a
013F E4         934            clr     a
0140 C3         935            clr     c
0141 9A         936            subb    a,r2
0142 FA         937            mov     r2,a
0143 E4         938            clr     a
0144 9B         939            subb    a,r3
0145 FB         940            mov     r3,a
0146 7401       941            mov     a,#0x01
0148 9C         942            subb    a,r4
0149 E4         943            clr     a
014A 9D         944            subb    a,r5
014B 8A95       945            mov     _SBRL1,r2
014D 8B96       946            mov     (_SBRL1 >> 8),r3
014F            947   ;        EFM8_JDY40_test.c:181: TI1 = 1; // indicate ready for TX
014F D2C9       948            setb    _TI1
0151            949   ;        EFM8_JDY40_test.c:182: SBCON1 |= 0x40;   // enable baud rate generator
0151 439440     950            orl     _SBCON1,#0x40
0154            951   ;        EFM8_JDY40_test.c:183: SFRPAGE = 0x00;
0154 75A700     952            mov     _SFRPAGE,#0x00
0157 22         953            ret
0158            954   ;------------------------------------------------------------
0158            955   ;Allocation info for local variables in function 'putchar1'
0158            956   ;------------------------------------------------------------
0158            957   ;c                         Allocated to registers r2 
0158            958   ;------------------------------------------------------------
0158            959   ;        EFM8_JDY40_test.c:186: void putchar1 (char c) 
0158            960   ;        -----------------------------------------
0158            961   ;         function putchar1
0158            962   ;        -----------------------------------------
0158            963   _putchar1:
0158 AA82       964            mov     r2,dpl
015A            965   ;        EFM8_JDY40_test.c:188: SFRPAGE = 0x20;
015A 75A720     966            mov     _SFRPAGE,#0x20
015D            967   ;        EFM8_JDY40_test.c:189: while (!TI1);
015D            968   L006001?:
015D            969   ;        EFM8_JDY40_test.c:190: TI1=0;
015D 10C9C0     970            jbc     _TI1,L006008?
0160 8000       971            sjmp    L006001?
0162            972   L006008?:
0162            973   ;        EFM8_JDY40_test.c:191: SBUF1 = c;
0162 8A92       974            mov     _SBUF1,r2
0164            975   ;        EFM8_JDY40_test.c:192: SFRPAGE = 0x00;
0164 75A700     976            mov     _SFRPAGE,#0x00
0167 22         977            ret
0168            978   ;------------------------------------------------------------
0168            979   ;Allocation info for local variables in function 'sendstr1'
0168            980   ;------------------------------------------------------------
0168            981   ;s                         Allocated to registers r2 r3 r4 
0168            982   ;------------------------------------------------------------
0168            983   ;        EFM8_JDY40_test.c:195: void sendstr1 (char * s)
0168            984   ;        -----------------------------------------
0168            985   ;         function sendstr1
0168            986   ;        -----------------------------------------
0168            987   _sendstr1:
0168 AA82       988            mov     r2,dpl
016A AB83       989            mov     r3,dph
016C ACF0       990            mov     r4,b
016E            991   ;        EFM8_JDY40_test.c:197: while(*s)
016E            992   L007001?:
016E 8A82       993            mov     dpl,r2
0170 8B83       994            mov     dph,r3
0172 8CF0       995            mov     b,r4
0174 120000     996            lcall   __gptrget
0177 FD         997            mov     r5,a
0178 6000       998            jz      L007004?
017A            999   ;        EFM8_JDY40_test.c:199: putchar1(*s);
017A 8D82      1000            mov     dpl,r5
017C C002      1001            push    ar2
017E C003      1002            push    ar3
0180 C004      1003            push    ar4
0182 120000    1004            lcall   _putchar1
0185 D004      1005            pop     ar4
0187 D003      1006            pop     ar3
0189 D002      1007            pop     ar2
018B           1008   ;        EFM8_JDY40_test.c:200: s++;     
018B 0A        1009            inc     r2
018C BA0000    1010            cjne    r2,#0x00,L007001?
018F 0B        1011            inc     r3
0190 8000      1012            sjmp    L007001?
0192           1013   L007004?:
0192 22        1014            ret
0193           1015   ;------------------------------------------------------------
0193           1016   ;Allocation info for local variables in function 'getchar1'
0193           1017   ;------------------------------------------------------------
0193           1018   ;c                         Allocated to registers 
0193           1019   ;------------------------------------------------------------
0193           1020   ;        EFM8_JDY40_test.c:204: char getchar1 (void)
0193           1021   ;        -----------------------------------------
0193           1022   ;         function getchar1
0193           1023   ;        -----------------------------------------
0193           1024   _getchar1:
0193           1025   ;        EFM8_JDY40_test.c:207: SFRPAGE = 0x20;
0193 75A720    1026            mov     _SFRPAGE,#0x20
0196           1027   ;        EFM8_JDY40_test.c:208: while (!RI1);
0196           1028   L008001?:
0196           1029   ;        EFM8_JDY40_test.c:209: RI1=0;
0196 10C800    1030            jbc     _RI1,L008008?
0199 8000      1031            sjmp    L008001?
019B           1032   L008008?:
019B           1033   ;        EFM8_JDY40_test.c:211: SCON1&=0b_0011_1111;
019B 53C83F    1034            anl     _SCON1,#0x3F
019E           1035   ;        EFM8_JDY40_test.c:212: c = SBUF1;
019E 859282    1036            mov     dpl,_SBUF1
01A1           1037   ;        EFM8_JDY40_test.c:213: SFRPAGE = 0x00;
01A1 75A700    1038            mov     _SFRPAGE,#0x00
01A4           1039   ;        EFM8_JDY40_test.c:214: return (c);
01A4 22        1040            ret
01A5           1041   ;------------------------------------------------------------
01A5           1042   ;Allocation info for local variables in function 'getchar1_with_timeout'
01A5           1043   ;------------------------------------------------------------
01A5           1044   ;c                         Allocated to registers 
01A5           1045   ;timeout                   Allocated to registers r2 r3 
01A5           1046   ;------------------------------------------------------------
01A5           1047   ;        EFM8_JDY40_test.c:217: char getchar1_with_timeout (void)
01A5           1048   ;        -----------------------------------------
01A5           1049   ;         function getchar1_with_timeout
01A5           1050   ;        -----------------------------------------
01A5           1051   _getchar1_with_timeout:
01A5           1052   ;        EFM8_JDY40_test.c:221: SFRPAGE = 0x20;
01A5 75A720    1053            mov     _SFRPAGE,#0x20
01A8           1054   ;        EFM8_JDY40_test.c:223: while (!RI1)
01A8 7A00      1055            mov     r2,#0x00
01AA 7B00      1056            mov     r3,#0x00
01AC           1057   L009003?:
01AC 20C880    1058            jb      _RI1,L009005?
01AF           1059   ;        EFM8_JDY40_test.c:225: SFRPAGE = 0x00;
01AF 75A700    1060            mov     _SFRPAGE,#0x00
01B2           1061   ;        EFM8_JDY40_test.c:226: Timer3us(20);
01B2 758214    1062            mov     dpl,#0x14
01B5 C002      1063            push    ar2
01B7 C003      1064            push    ar3
01B9 120000    1065            lcall   _Timer3us
01BC D003      1066            pop     ar3
01BE D002      1067            pop     ar2
01C0           1068   ;        EFM8_JDY40_test.c:227: SFRPAGE = 0x20;
01C0 75A720    1069            mov     _SFRPAGE,#0x20
01C3           1070   ;        EFM8_JDY40_test.c:228: timeout++;
01C3 0A        1071            inc     r2
01C4 BA00C0    1072            cjne    r2,#0x00,L009012?
01C7 0B        1073            inc     r3
01C8           1074   L009012?:
01C8           1075   ;        EFM8_JDY40_test.c:229: if(timeout==25000)
01C8 BAA840    1076            cjne    r2,#0xA8,L009003?
01CB BB6140    1077            cjne    r3,#0x61,L009003?
01CE           1078   ;        EFM8_JDY40_test.c:231: SFRPAGE = 0x00;
01CE 75A700    1079            mov     _SFRPAGE,#0x00
01D1           1080   ;        EFM8_JDY40_test.c:232: return ('\n'); // Timeout after half second
01D1 75820A    1081            mov     dpl,#0x0A
01D4 22        1082            ret
01D5           1083   L009005?:
01D5           1084   ;        EFM8_JDY40_test.c:235: RI1=0;
01D5 C2C8      1085            clr     _RI1
01D7           1086   ;        EFM8_JDY40_test.c:237: SCON1&=0b_0011_1111;
01D7 53C83F    1087            anl     _SCON1,#0x3F
01DA           1088   ;        EFM8_JDY40_test.c:238: c = SBUF1;
01DA 859282    1089            mov     dpl,_SBUF1
01DD           1090   ;        EFM8_JDY40_test.c:239: SFRPAGE = 0x00;
01DD 75A700    1091            mov     _SFRPAGE,#0x00
01E0           1092   ;        EFM8_JDY40_test.c:240: return (c);
01E0 22        1093            ret
01E1           1094   ;------------------------------------------------------------
01E1           1095   ;Allocation info for local variables in function 'getstr1'
01E1           1096   ;------------------------------------------------------------
01E1           1097   ;n                         Allocated with name '_getstr1_PARM_2'
01E1           1098   ;s                         Allocated to registers r2 r3 r4 
01E1           1099   ;c                         Allocated to registers r1 
01E1           1100   ;cnt                       Allocated to registers r5 
01E1           1101   ;------------------------------------------------------------
01E1           1102   ;        EFM8_JDY40_test.c:243: void getstr1 (char * s, unsigned char n)
01E1           1103   ;        -----------------------------------------
01E1           1104   ;         function getstr1
01E1           1105   ;        -----------------------------------------
01E1           1106   _getstr1:
01E1 AA82      1107            mov     r2,dpl
01E3 AB83      1108            mov     r3,dph
01E5 ACF0      1109            mov     r4,b
01E7           1110   ;        EFM8_JDY40_test.c:249: while(1)
01E7 7D00      1111            mov     r5,#0x00
01E9 8A06      1112            mov     ar6,r2
01EB 8B07      1113            mov     ar7,r3
01ED 8C00      1114            mov     ar0,r4
01EF           1115   L010007?:
01EF           1116   ;        EFM8_JDY40_test.c:251: c=getchar1_with_timeout();
01EF C002      1117            push    ar2
01F1 C003      1118            push    ar3
01F3 C004      1119            push    ar4
01F5 C005      1120            push    ar5
01F7 C006      1121            push    ar6
01F9 C007      1122            push    ar7
01FB C000      1123            push    ar0
01FD 120000    1124            lcall   _getchar1_with_timeout
0200 A982      1125            mov     r1,dpl
0202 D000      1126            pop     ar0
0204 D007      1127            pop     ar7
0206 D006      1128            pop     ar6
0208 D005      1129            pop     ar5
020A D004      1130            pop     ar4
020C D003      1131            pop     ar3
020E D002      1132            pop     ar2
0210           1133   ;        EFM8_JDY40_test.c:252: if(c=='\n')
0210 B90A40    1134            cjne    r1,#0x0A,L010002?
0213           1135   ;        EFM8_JDY40_test.c:254: *s=0;
0213 8A82      1136            mov     dpl,r2
0215 8B83      1137            mov     dph,r3
0217 8CF0      1138            mov     b,r4
0219 E4        1139            clr     a
021A           1140   ;        EFM8_JDY40_test.c:255: return;
021A 020000    1141            ljmp    __gptrput
021D           1142   L010002?:
021D           1143   ;        EFM8_JDY40_test.c:258: if (cnt<n)
021D C3        1144            clr     c
021E ED        1145            mov     a,r5
021F 9540      1146            subb    a,_getstr1_PARM_2
0221 5000      1147            jnc     L010004?
0223           1148   ;        EFM8_JDY40_test.c:260: cnt++;
0223 0D        1149            inc     r5
0224           1150   ;        EFM8_JDY40_test.c:261: *s=c;
0224 8E82      1151            mov     dpl,r6
0226 8F83      1152            mov     dph,r7
0228 88F0      1153            mov     b,r0
022A E9        1154            mov     a,r1
022B 120000    1155            lcall   __gptrput
022E A3        1156            inc     dptr
022F AE82      1157            mov     r6,dpl
0231 AF83      1158            mov     r7,dph
0233           1159   ;        EFM8_JDY40_test.c:262: s++;
0233 8E02      1160            mov     ar2,r6
0235 8F03      1161            mov     ar3,r7
0237 8804      1162            mov     ar4,r0
0239 8000      1163            sjmp    L010007?
023B           1164   L010004?:
023B           1165   ;        EFM8_JDY40_test.c:266: *s=0;
023B 8A82      1166            mov     dpl,r2
023D 8B83      1167            mov     dph,r3
023F 8CF0      1168            mov     b,r4
0241 E4        1169            clr     a
0242           1170   ;        EFM8_JDY40_test.c:267: return;
0242 020000    1171            ljmp    __gptrput
0245           1172   ;------------------------------------------------------------
0245           1173   ;Allocation info for local variables in function 'RXU1'
0245           1174   ;------------------------------------------------------------
0245           1175   ;------------------------------------------------------------
0245           1176   ;        EFM8_JDY40_test.c:273: bit RXU1 (void)
0245           1177   ;        -----------------------------------------
0245           1178   ;         function RXU1
0245           1179   ;        -----------------------------------------
0245           1180   _RXU1:
0245           1181   ;        EFM8_JDY40_test.c:276: SFRPAGE = 0x20;
0245 75A720    1182            mov     _SFRPAGE,#0x20
0248           1183   ;        EFM8_JDY40_test.c:277: mybit=RI1;
0248 A2C8      1184            mov     c,_RI1
024A           1185   ;        EFM8_JDY40_test.c:278: SFRPAGE = 0x00;
024A 75A700    1186            mov     _SFRPAGE,#0x00
024D           1187   ;        EFM8_JDY40_test.c:279: return mybit;
024D 22        1188            ret
024E           1189   ;------------------------------------------------------------
024E           1190   ;Allocation info for local variables in function 'waitms_or_RI1'
024E           1191   ;------------------------------------------------------------
024E           1192   ;ms                        Allocated to registers r2 r3 
024E           1193   ;j                         Allocated to registers r4 r5 
024E           1194   ;k                         Allocated to registers r6 
024E           1195   ;------------------------------------------------------------
024E           1196   ;        EFM8_JDY40_test.c:282: void waitms_or_RI1 (unsigned int ms)
024E           1197   ;        -----------------------------------------
024E           1198   ;         function waitms_or_RI1
024E           1199   ;        -----------------------------------------
024E           1200   _waitms_or_RI1:
024E AA82      1201            mov     r2,dpl
0250 AB83      1202            mov     r3,dph
0252           1203   ;        EFM8_JDY40_test.c:286: for(j=0; j<ms; j++)
0252 7C00      1204            mov     r4,#0x00
0254 7D00      1205            mov     r5,#0x00
0256           1206   L012007?:
0256 C3        1207            clr     c
0257 EC        1208            mov     a,r4
0258 9A        1209            subb    a,r2
0259 ED        1210            mov     a,r5
025A 9B        1211            subb    a,r3
025B 5000      1212            jnc     L012011?
025D           1213   ;        EFM8_JDY40_test.c:288: for (k=0; k<4; k++)
025D 7E00      1214            mov     r6,#0x00
025F           1215   L012003?:
025F BE04C0    1216            cjne    r6,#0x04,L012019?
0262           1217   L012019?:
0262 5000      1218            jnc     L012009?
0264           1219   ;        EFM8_JDY40_test.c:290: if(RXU1()) return;
0264 C002      1220            push    ar2
0266 C003      1221            push    ar3
0268 C004      1222            push    ar4
026A C005      1223            push    ar5
026C C006      1224            push    ar6
026E 120000    1225            lcall   _RXU1
0271 E4        1226            clr     a
0272 33        1227            rlc     a
0273 D006      1228            pop     ar6
0275 D005      1229            pop     ar5
0277 D004      1230            pop     ar4
0279 D003      1231            pop     ar3
027B D002      1232            pop     ar2
027D 6000      1233            jz      L012002?
027F 22        1234            ret
0280           1235   L012002?:
0280           1236   ;        EFM8_JDY40_test.c:291: Timer3us(250);
0280 7582FA    1237            mov     dpl,#0xFA
0283 C002      1238            push    ar2
0285 C003      1239            push    ar3
0287 C004      1240            push    ar4
0289 C005      1241            push    ar5
028B C006      1242            push    ar6
028D 120000    1243            lcall   _Timer3us
0290 D006      1244            pop     ar6
0292 D005      1245            pop     ar5
0294 D004      1246            pop     ar4
0296 D003      1247            pop     ar3
0298 D002      1248            pop     ar2
029A           1249   ;        EFM8_JDY40_test.c:288: for (k=0; k<4; k++)
029A 0E        1250            inc     r6
029B 8000      1251            sjmp    L012003?
029D           1252   L012009?:
029D           1253   ;        EFM8_JDY40_test.c:286: for(j=0; j<ms; j++)
029D 0C        1254            inc     r4
029E BC0000    1255            cjne    r4,#0x00,L012007?
02A1 0D        1256            inc     r5
02A2 8000      1257            sjmp    L012007?
02A4           1258   L012011?:
02A4 22        1259            ret
02A5           1260   ;------------------------------------------------------------
02A5           1261   ;Allocation info for local variables in function 'SendATCommand'
02A5           1262   ;------------------------------------------------------------
02A5           1263   ;s                         Allocated to registers r2 r3 r4 
02A5           1264   ;------------------------------------------------------------
02A5           1265   ;        EFM8_JDY40_test.c:296: void SendATCommand (char * s)
02A5           1266   ;        -----------------------------------------
02A5           1267   ;         function SendATCommand
02A5           1268   ;        -----------------------------------------
02A5           1269   _SendATCommand:
02A5 AA82      1270            mov     r2,dpl
02A7 AB83      1271            mov     r3,dph
02A9 ACF0      1272            mov     r4,b
02AB           1273   ;        EFM8_JDY40_test.c:298: printf("Command: %s", s);
02AB C002      1274            push    ar2
02AD C003      1275            push    ar3
02AF C004      1276            push    ar4
02B1 C002      1277            push    ar2
02B3 C003      1278            push    ar3
02B5 C004      1279            push    ar4
02B7 7480      1280            mov     a,#__str_0
02B9 C0E0      1281            push    acc
02BB 74CC      1282            mov     a,#(__str_0 >> 8)
02BD C0E0      1283            push    acc
02BF 7480      1284            mov     a,#0x80
02C1 C0E0      1285            push    acc
02C3 120000    1286            lcall   _printf
02C6 E581      1287            mov     a,sp
02C8 24FA      1288            add     a,#0xfa
02CA F581      1289            mov     sp,a
02CC           1290   ;        EFM8_JDY40_test.c:299: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02CC C2A0      1291            clr     _P2_0
02CE           1292   ;        EFM8_JDY40_test.c:300: waitms(5);
02CE 900005    1293            mov     dptr,#0x0005
02D1 120000    1294            lcall   _waitms
02D4 D004      1295            pop     ar4
02D6 D003      1296            pop     ar3
02D8 D002      1297            pop     ar2
02DA           1298   ;        EFM8_JDY40_test.c:301: sendstr1(s);
02DA 8A82      1299            mov     dpl,r2
02DC 8B83      1300            mov     dph,r3
02DE 8CF0      1301            mov     b,r4
02E0 120000    1302            lcall   _sendstr1
02E3           1303   ;        EFM8_JDY40_test.c:302: getstr1(buff, sizeof(buff)-1);
02E3 754013    1304            mov     _getstr1_PARM_2,#0x13
02E6 904CD0    1305            mov     dptr,#_buff
02E9 75F040    1306            mov     b,#0x40
02EC 120000    1307            lcall   _getstr1
02EF           1308   ;        EFM8_JDY40_test.c:303: waitms(10);
02EF 90000A    1309            mov     dptr,#0x000A
02F2 120000    1310            lcall   _waitms
02F5           1311   ;        EFM8_JDY40_test.c:304: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F5 D2A0      1312            setb    _P2_0
02F7           1313   ;        EFM8_JDY40_test.c:305: printf("Response: %s\r\n", buff);
02F7 74D0      1314            mov     a,#_buff
02F9 C0E0      1315            push    acc
02FB 744C      1316            mov     a,#(_buff >> 8)
02FD C0E0      1317            push    acc
02FF 7440      1318            mov     a,#0x40
0301 C0E0      1319            push    acc
0303 7440      1320            mov     a,#__str_1
0305 C0E0      1321            push    acc
0307 74CD      1322            mov     a,#(__str_1 >> 8)
0309 C0E0      1323            push    acc
030B 7480      1324            mov     a,#0x80
030D C0E0      1325            push    acc
030F 120000    1326            lcall   _printf
0312 E581      1327            mov     a,sp
0314 24FA      1328            add     a,#0xfa
0316 F581      1329            mov     sp,a
0318 22        1330            ret
0319           1331   ;------------------------------------------------------------
0319           1332   ;Allocation info for local variables in function 'ReceptionOff'
0319           1333   ;------------------------------------------------------------
0319           1334   ;------------------------------------------------------------
0319           1335   ;        EFM8_JDY40_test.c:308: void ReceptionOff (void)
0319           1336   ;        -----------------------------------------
0319           1337   ;         function ReceptionOff
0319           1338   ;        -----------------------------------------
0319           1339   _ReceptionOff:
0319           1340   ;        EFM8_JDY40_test.c:310: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0319 C2A0      1341            clr     _P2_0
031B           1342   ;        EFM8_JDY40_test.c:311: waitms(10);
031B 90000A    1343            mov     dptr,#0x000A
031E 120000    1344            lcall   _waitms
0321           1345   ;        EFM8_JDY40_test.c:312: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0321 90CD80    1346            mov     dptr,#__str_2
0324 75F080    1347            mov     b,#0x80
0327 120000    1348            lcall   _sendstr1
032A           1349   ;        EFM8_JDY40_test.c:313: waitms(10);
032A 90000A    1350            mov     dptr,#0x000A
032D 120000    1351            lcall   _waitms
0330           1352   ;        EFM8_JDY40_test.c:315: SCON1&=0b_0011_1111;
0330 53C83F    1353            anl     _SCON1,#0x3F
0333           1354   ;        EFM8_JDY40_test.c:316: P2_0=1; // 'set' pin to 1 is normal operation mode.
0333 D2A0      1355            setb    _P2_0
0335 22        1356            ret
0336           1357   ;------------------------------------------------------------
0336           1358   ;Allocation info for local variables in function 'TIMER0_Init'
0336           1359   ;------------------------------------------------------------
0336           1360   ;------------------------------------------------------------
0336           1361   ;        EFM8_JDY40_test.c:320: void TIMER0_Init(void)
0336           1362   ;        -----------------------------------------
0336           1363   ;         function TIMER0_Init
0336           1364   ;        -----------------------------------------
0336           1365   _TIMER0_Init:
0336           1366   ;        EFM8_JDY40_test.c:322: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0336 5389F0    1367            anl     _TMOD,#0xF0
0339           1368   ;        EFM8_JDY40_test.c:323: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0339 438901    1369            orl     _TMOD,#0x01
033C           1370   ;        EFM8_JDY40_test.c:324: TR0=0; // Stop Timer/Counter 0
033C C28C      1371            clr     _TR0
033E 22        1372            ret
033F           1373   ;------------------------------------------------------------
033F           1374   ;Allocation info for local variables in function 'InitADC'
033F           1375   ;------------------------------------------------------------
033F           1376   ;------------------------------------------------------------
033F           1377   ;        EFM8_JDY40_test.c:328: void InitADC (void)
033F           1378   ;        -----------------------------------------
033F           1379   ;         function InitADC
033F           1380   ;        -----------------------------------------
033F           1381   _InitADC:
033F           1382   ;        EFM8_JDY40_test.c:330: SFRPAGE = 0x00;
033F 75A700    1383            mov     _SFRPAGE,#0x00
0342           1384   ;        EFM8_JDY40_test.c:331: ADEN=0; // Disable ADC
0342 C2EF      1385            clr     _ADEN
0344           1386   ;        EFM8_JDY40_test.c:336: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0344 75B280    1387            mov     _ADC0CN1,#0x80
0347           1388   ;        EFM8_JDY40_test.c:340: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0347 75BC20    1389            mov     _ADC0CF0,#0x20
034A           1390   ;        EFM8_JDY40_test.c:344: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
034A 75B91E    1391            mov     _ADC0CF1,#0x1E
034D           1392   ;        EFM8_JDY40_test.c:353: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
034D 75E800    1393            mov     _ADC0CN0,#0x00
0350           1394   ;        EFM8_JDY40_test.c:358: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0350 75DF3F    1395            mov     _ADC0CF2,#0x3F
0353           1396   ;        EFM8_JDY40_test.c:362: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0353 75B300    1397            mov     _ADC0CN2,#0x00
0356           1398   ;        EFM8_JDY40_test.c:364: ADEN=1; // Enable ADC
0356 D2EF      1399            setb    _ADEN
0358 22        1400            ret
0359           1401   ;------------------------------------------------------------
0359           1402   ;Allocation info for local variables in function 'InitPinADC'
0359           1403   ;------------------------------------------------------------
0359           1404   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0359           1405   ;portno                    Allocated to registers r2 
0359           1406   ;mask                      Allocated to registers r3 
0359           1407   ;------------------------------------------------------------
0359           1408   ;        EFM8_JDY40_test.c:367: void InitPinADC (unsigned char portno, unsigned char pinno)
0359           1409   ;        -----------------------------------------
0359           1410   ;         function InitPinADC
0359           1411   ;        -----------------------------------------
0359           1412   _InitPinADC:
0359 AA82      1413            mov     r2,dpl
035B           1414   ;        EFM8_JDY40_test.c:371: mask=1<<pinno;
035B 8560F0    1415            mov     b,_InitPinADC_PARM_2
035E 05F0      1416            inc     b
0360 7401      1417            mov     a,#0x01
0362 8000      1418            sjmp    L017013?
0364           1419   L017011?:
0364 25E0      1420            add     a,acc
0366           1421   L017013?:
0366 D5F000    1422            djnz    b,L017011?
0369 FB        1423            mov     r3,a
036A           1424   ;        EFM8_JDY40_test.c:373: SFRPAGE = 0x20;
036A 75A720    1425            mov     _SFRPAGE,#0x20
036D           1426   ;        EFM8_JDY40_test.c:374: switch (portno)
036D BA0040    1427            cjne    r2,#0x00,L017014?
0370 8000      1428            sjmp    L017001?
0372           1429   L017014?:
0372 BA01C0    1430            cjne    r2,#0x01,L017015?
0375 8000      1431            sjmp    L017002?
0377           1432   L017015?:
0377           1433   ;        EFM8_JDY40_test.c:376: case 0:
0377 BA0240    1434            cjne    r2,#0x02,L017005?
037A 8000      1435            sjmp    L017003?
037C           1436   L017001?:
037C           1437   ;        EFM8_JDY40_test.c:377: P0MDIN &= (~mask); // Set pin as analog input
037C EB        1438            mov     a,r3
037D F4        1439            cpl     a
037E FA        1440            mov     r2,a
037F 52F1      1441            anl     _P0MDIN,a
0381           1442   ;        EFM8_JDY40_test.c:378: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0381 EB        1443            mov     a,r3
0382 42D4      1444            orl     _P0SKIP,a
0384           1445   ;        EFM8_JDY40_test.c:379: break;
0384           1446   ;        EFM8_JDY40_test.c:380: case 1:
0384 8000      1447            sjmp    L017005?
0386           1448   L017002?:
0386           1449   ;        EFM8_JDY40_test.c:381: P1MDIN &= (~mask); // Set pin as analog input
0386 EB        1450            mov     a,r3
0387 F4        1451            cpl     a
0388 FA        1452            mov     r2,a
0389 52F2      1453            anl     _P1MDIN,a
038B           1454   ;        EFM8_JDY40_test.c:382: P1SKIP |= mask; // Skip Crossbar decoding for this pin
038B EB        1455            mov     a,r3
038C 42D5      1456            orl     _P1SKIP,a
038E           1457   ;        EFM8_JDY40_test.c:383: break;
038E           1458   ;        EFM8_JDY40_test.c:384: case 2:
038E 8000      1459            sjmp    L017005?
0390           1460   L017003?:
0390           1461   ;        EFM8_JDY40_test.c:385: P2MDIN &= (~mask); // Set pin as analog input
0390 EB        1462            mov     a,r3
0391 F4        1463            cpl     a
0392 FA        1464            mov     r2,a
0393 52F3      1465            anl     _P2MDIN,a
0395           1466   ;        EFM8_JDY40_test.c:386: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0395 EB        1467            mov     a,r3
0396 42CC      1468            orl     _P2SKIP,a
0398           1469   ;        EFM8_JDY40_test.c:390: }
0398           1470   L017005?:
0398           1471   ;        EFM8_JDY40_test.c:391: SFRPAGE = 0x00;
0398 75A700    1472            mov     _SFRPAGE,#0x00
039B 22        1473            ret
039C           1474   ;------------------------------------------------------------
039C           1475   ;Allocation info for local variables in function 'ADC_at_Pin'
039C           1476   ;------------------------------------------------------------
039C           1477   ;pin                       Allocated to registers 
039C           1478   ;------------------------------------------------------------
039C           1479   ;        EFM8_JDY40_test.c:394: unsigned int ADC_at_Pin(unsigned char pin)
039C           1480   ;        -----------------------------------------
039C           1481   ;         function ADC_at_Pin
039C           1482   ;        -----------------------------------------
039C           1483   _ADC_at_Pin:
039C 8582BB    1484            mov     _ADC0MX,dpl
039F           1485   ;        EFM8_JDY40_test.c:397: ADINT = 0;
039F C2ED      1486            clr     _ADINT
03A1           1487   ;        EFM8_JDY40_test.c:398: ADBUSY = 1;     // Convert voltage at the pin
03A1 D2EC      1488            setb    _ADBUSY
03A3           1489   ;        EFM8_JDY40_test.c:399: while (!ADINT); // Wait for conversion to complete
03A3           1490   L018001?:
03A3 30EDC0    1491            jnb     _ADINT,L018001?
03A6           1492   ;        EFM8_JDY40_test.c:400: return (ADC0);
03A6 85BD82    1493            mov     dpl,_ADC0
03A9 85BE83    1494            mov     dph,(_ADC0 >> 8)
03AC 22        1495            ret
03AD           1496   ;------------------------------------------------------------
03AD           1497   ;Allocation info for local variables in function 'Volts_at_Pin'
03AD           1498   ;------------------------------------------------------------
03AD           1499   ;pin                       Allocated to registers r2 
03AD           1500   ;------------------------------------------------------------
03AD           1501   ;        EFM8_JDY40_test.c:403: float Volts_at_Pin(unsigned char pin)
03AD           1502   ;        -----------------------------------------
03AD           1503   ;         function Volts_at_Pin
03AD           1504   ;        -----------------------------------------
03AD           1505   _Volts_at_Pin:
03AD           1506   ;        EFM8_JDY40_test.c:405: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
03AD 120000    1507            lcall   _ADC_at_Pin
03B0 120000    1508            lcall   ___uint2fs
03B3 AA82      1509            mov     r2,dpl
03B5 AB83      1510            mov     r3,dph
03B7 ACF0      1511            mov     r4,b
03B9 FD        1512            mov     r5,a
03BA C002      1513            push    ar2
03BC C003      1514            push    ar3
03BE C004      1515            push    ar4
03C0 C005      1516            push    ar5
03C2 906C8B    1517            mov     dptr,#0x6C8B
03C5 75F053    1518            mov     b,#0x53
03C8 7440      1519            mov     a,#0x40
03CA 120000    1520            lcall   ___fsmul
03CD AA82      1521            mov     r2,dpl
03CF AB83      1522            mov     r3,dph
03D1 ACF0      1523            mov     r4,b
03D3 FD        1524            mov     r5,a
03D4 E581      1525            mov     a,sp
03D6 24FC      1526            add     a,#0xfc
03D8 F581      1527            mov     sp,a
03DA E4        1528            clr     a
03DB C0E0      1529            push    acc
03DD 74FC      1530            mov     a,#0xFC
03DF C0E0      1531            push    acc
03E1 747F      1532            mov     a,#0x7F
03E3 C0E0      1533            push    acc
03E5 7446      1534            mov     a,#0x46
03E7 C0E0      1535            push    acc
03E9 8A82      1536            mov     dpl,r2
03EB 8B83      1537            mov     dph,r3
03ED 8CF0      1538            mov     b,r4
03EF ED        1539            mov     a,r5
03F0 120000    1540            lcall   ___fsdiv
03F3 AA82      1541            mov     r2,dpl
03F5 AB83      1542            mov     r3,dph
03F7 ACF0      1543            mov     r4,b
03F9 FD        1544            mov     r5,a
03FA E581      1545            mov     a,sp
03FC 24FC      1546            add     a,#0xfc
03FE F581      1547            mov     sp,a
0400 8A82      1548            mov     dpl,r2
0402 8B83      1549            mov     dph,r3
0404 8CF0      1550            mov     b,r4
0406 ED        1551            mov     a,r5
0407 22        1552            ret
0408           1553   ;------------------------------------------------------------
0408           1554   ;Allocation info for local variables in function 'Timer4_ISR'
0408           1555   ;------------------------------------------------------------
0408           1556   ;------------------------------------------------------------
0408           1557   ;        EFM8_JDY40_test.c:409: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
0408           1558   ;        -----------------------------------------
0408           1559   ;         function Timer4_ISR
0408           1560   ;        -----------------------------------------
0408           1561   _Timer4_ISR:
0408 C0E0      1562            push    acc
040A C0D0      1563            push    psw
040C 75D000    1564            mov     psw,#0x00
040F           1565   ;        EFM8_JDY40_test.c:411: SFRPAGE=0x10;
040F 75A710    1566            mov     _SFRPAGE,#0x10
0412           1567   ;        EFM8_JDY40_test.c:412: TF4H = 0; 
0412 C29F      1568            clr     _TF4H
0414           1569   ;        EFM8_JDY40_test.c:414: pwm_counter4 += 256; // counting steps
0414 850000    1570            mov     _pwm_counter4,_pwm_counter4
0417 7401      1571            mov     a,#0x01
0419 2501      1572            add     a,(_pwm_counter4 + 1)
041B F501      1573            mov     (_pwm_counter4 + 1),a
041D           1574   ;        EFM8_JDY40_test.c:415: if ( direction == 1) {
041D 7401      1575            mov     a,#0x01
041F B50000    1576            cjne    a,_direction,L020009?
0422 E4        1577            clr     a
0423 B50100    1578            cjne    a,(_direction + 1),L020009?
0426 8000      1579            sjmp    L020010?
0428           1580   L020009?:
0428 8000      1581            sjmp    L020002?
042A           1582   L020010?:
042A           1583   ;        EFM8_JDY40_test.c:416: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
042A C3        1584            clr     c
042B E500      1585            mov     a,_pwm_counter4
042D 95C0      1586            subb    a,_pwm_duty4
042F E501      1587            mov     a,(_pwm_counter4 + 1)
0431 95C1      1588            subb    a,(_pwm_duty4 + 1)
0433 92B0      1589            mov     _P3_0,c
0435           1590   L020002?:
0435           1591   ;        EFM8_JDY40_test.c:418: if ( direction  == 0 ) {
0435 E500      1592            mov     a,_direction
0437 4501      1593            orl     a,(_direction + 1)
0439 7000      1594            jnz     L020004?
043B           1595   ;        EFM8_JDY40_test.c:419: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
043B C3        1596            clr     c
043C E500      1597            mov     a,_pwm_counter4
043E 95C0      1598            subb    a,_pwm_duty4
0440 E501      1599            mov     a,(_pwm_counter4 + 1)
0442 95C1      1600            subb    a,(_pwm_duty4 + 1)
0444 92A5      1601            mov     _P2_5,c
0446           1602   L020004?:
0446           1603   ;        EFM8_JDY40_test.c:421: if ( direction == 3 ) 
0446 E500      1604            mov     a,_direction
0448 E501      1605            mov     a,(_direction + 1)
044A D0D0      1606            pop     psw
044C D0E0      1607            pop     acc
044E 32        1608            reti
044F           1609   ;        eliminated unneeded push/pop dpl
044F           1610   ;        eliminated unneeded push/pop dph
044F           1611   ;        eliminated unneeded push/pop b
044F           1612   ;------------------------------------------------------------
044F           1613   ;Allocation info for local variables in function 'Timer2_ISR'
044F           1614   ;------------------------------------------------------------
044F           1615   ;------------------------------------------------------------
044F           1616   ;        EFM8_JDY40_test.c:426: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
044F           1617   ;        -----------------------------------------
044F           1618   ;         function Timer2_ISR
044F           1619   ;        -----------------------------------------
044F           1620   _Timer2_ISR:
044F C0E0      1621            push    acc
0451 C0D0      1622            push    psw
0453 75D000    1623            mov     psw,#0x00
0456           1624   ;        EFM8_JDY40_test.c:428: SFRPAGE=0x0;
0456 75A700    1625            mov     _SFRPAGE,#0x00
0459           1626   ;        EFM8_JDY40_test.c:429: TF2H = 0; // Clear Timer2 interrupt flag
0459 C2CF      1627            clr     _TF2H
045B           1628   ;        EFM8_JDY40_test.c:430: pwm_counter2 += 256; // counting steps
045B 858080    1629            mov     _pwm_counter2,_pwm_counter2
045E 7401      1630            mov     a,#0x01
0460 2581      1631            add     a,(_pwm_counter2 + 1)
0462 F581      1632            mov     (_pwm_counter2 + 1),a
0464           1633   ;        EFM8_JDY40_test.c:431: if ( direction == 1) {
0464 7401      1634            mov     a,#0x01
0466 B50000    1635            cjne    a,_direction,L021009?
0469 E4        1636            clr     a
046A B50100    1637            cjne    a,(_direction + 1),L021009?
046D 8000      1638            sjmp    L021010?
046F           1639   L021009?:
046F 8000      1640            sjmp    L021002?
0471           1641   L021010?:
0471           1642   ;        EFM8_JDY40_test.c:432: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
0471 C3        1643            clr     c
0472 E580      1644            mov     a,_pwm_counter2
0474 9540      1645            subb    a,_pwm_duty2
0476 E581      1646            mov     a,(_pwm_counter2 + 1)
0478 9541      1647            subb    a,(_pwm_duty2 + 1)
047A 92B2      1648            mov     _P3_2,c
047C           1649   L021002?:
047C           1650   ;        EFM8_JDY40_test.c:434: if (direction == 0 ){
047C E500      1651            mov     a,_direction
047E 4501      1652            orl     a,(_direction + 1)
0480 7000      1653            jnz     L021004?
0482           1654   ;        EFM8_JDY40_test.c:435: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
0482 C3        1655            clr     c
0483 E580      1656            mov     a,_pwm_counter2
0485 9540      1657            subb    a,_pwm_duty2
0487 E581      1658            mov     a,(_pwm_counter2 + 1)
0489 9541      1659            subb    a,(_pwm_duty2 + 1)
048B 92B7      1660            mov     _P3_7,c
048D           1661   L021004?:
048D           1662   ;        EFM8_JDY40_test.c:437: if ( direction == 3 ) 
048D E500      1663            mov     a,_direction
048F E501      1664            mov     a,(_direction + 1)
0491 D0D0      1665            pop     psw
0493 D0E0      1666            pop     acc
0495 32        1667            reti
0496           1668   ;        eliminated unneeded push/pop dpl
0496           1669   ;        eliminated unneeded push/pop dph
0496           1670   ;        eliminated unneeded push/pop b
0496           1671   ;------------------------------------------------------------
0496           1672   ;Allocation info for local variables in function 'ADCtoPWM'
0496           1673   ;------------------------------------------------------------
0496           1674   ;adc_value                 Allocated to registers r2 r3 
0496           1675   ;------------------------------------------------------------
0496           1676   ;        EFM8_JDY40_test.c:442: unsigned int ADCtoPWM(int adc_value)
0496           1677   ;        -----------------------------------------
0496           1678   ;         function ADCtoPWM
0496           1679   ;        -----------------------------------------
0496           1680   _ADCtoPWM:
0496 AA82      1681            mov     r2,dpl
0498 AB83      1682            mov     r3,dph
049A           1683   ;        EFM8_JDY40_test.c:447: return (unsigned int)((adc_value * 65535UL) / 1023UL);
049A 8A00      1684            mov     __mullong_PARM_2,r2
049C EB        1685            mov     a,r3
049D F501      1686            mov     (__mullong_PARM_2 + 1),a
049F 33        1687            rlc     a
04A0 95E0      1688            subb    a,acc
04A2 F502      1689            mov     (__mullong_PARM_2 + 2),a
04A4 F503      1690            mov     (__mullong_PARM_2 + 3),a
04A6 90FFFF    1691            mov     dptr,#0xFFFF
04A9 E4        1692            clr     a
04AA F5F0      1693            mov     b,a
04AC 120000    1694            lcall   __mullong
04AF 7500FF    1695            mov     __divulong_PARM_2,#0xFF
04B2 750103    1696            mov     (__divulong_PARM_2 + 1),#0x03
04B5 750200    1697            mov     (__divulong_PARM_2 + 2),#0x00
04B8 750300    1698            mov     (__divulong_PARM_2 + 3),#0x00
04BB 020000    1699            ljmp    __divulong
04BE           1700   ;------------------------------------------------------------
04BE           1701   ;Allocation info for local variables in function 'ADCsteeringRatio'
04BE           1702   ;------------------------------------------------------------
04BE           1703   ;steering                  Allocated with name '_ADCsteeringRatio_PARM_2'
04BE           1704   ;ADCwheel1                 Allocated with name '_ADCsteeringRatio_PARM_3'
04BE           1705   ;ADCwheel2                 Allocated with name '_ADCsteeringRatio_PARM_4'
04BE           1706   ;speed                     Allocated to registers r2 r3 
04BE           1707   ;sloc0                     Allocated with name '_ADCsteeringRatio_sloc0_1_0'
04BE           1708   ;sloc1                     Allocated with name '_ADCsteeringRatio_sloc1_1_0'
04BE           1709   ;centerspeed               Allocated with name '_ADCsteeringRatio_centerspeed_1_143'
04BE           1710   ;baseSpeed                 Allocated with name '_ADCsteeringRatio_baseSpeed_1_143'
04BE           1711   ;wheel1Speed               Allocated with name '_ADCsteeringRatio_wheel1Speed_1_143'
04BE           1712   ;delta                     Allocated with name '_ADCsteeringRatio_delta_1_143'
04BE           1713   ;centersteering            Allocated with name '_ADCsteeringRatio_centersteering_1_143'
04BE           1714   ;steeringFactor            Allocated with name '_ADCsteeringRatio_steeringFactor_1_143'
04BE           1715   ;baseSteer                 Allocated to registers r6 r7 
04BE           1716   ;wheel2Speed               Allocated with name '_ADCsteeringRatio_wheel2Speed_1_143'
04BE           1717   ;------------------------------------------------------------
04BE           1718   ;        EFM8_JDY40_test.c:455: void ADCsteeringRatio(int speed, int steering, int *ADCwheel1, int *ADCwheel2) 
04BE           1719   ;        -----------------------------------------
04BE           1720   ;         function ADCsteeringRatio
04BE           1721   ;        -----------------------------------------
04BE           1722   _ADCsteeringRatio:
04BE AA82      1723            mov     r2,dpl
04C0 AB83      1724            mov     r3,dph
04C2           1725   ;        EFM8_JDY40_test.c:459: idata int centersteering = steering - 508;
04C2 7880      1726            mov     r0,#_ADCsteeringRatio_centersteering_1_143
04C4 E500      1727            mov     a,_ADCsteeringRatio_PARM_2
04C6 2404      1728            add     a,#0x04
04C8 F6        1729            mov     @r0,a
04C9 E501      1730            mov     a,(_ADCsteeringRatio_PARM_2 + 1)
04CB 34FE      1731            addc    a,#0xfe
04CD 08        1732            inc     r0
04CE F6        1733            mov     @r0,a
04CF           1734   ;        EFM8_JDY40_test.c:468: centerspeed = speed - 504;
04CF EA        1735            mov     a,r2
04D0 2408      1736            add     a,#0x08
04D2 F582      1737            mov     dpl,a
04D4 EB        1738            mov     a,r3
04D5 34FE      1739            addc    a,#0xfe
04D7 F583      1740            mov     dph,a
04D9           1741   ;        EFM8_JDY40_test.c:471: baseSpeed = abs(centerspeed);
04D9 120000    1742            lcall   _abs
04DC AA82      1743            mov     r2,dpl
04DE AB83      1744            mov     r3,dph
04E0           1745   ;        EFM8_JDY40_test.c:472: baseSteer = abs(centersteering);
04E0 7880      1746            mov     r0,#_ADCsteeringRatio_centersteering_1_143
04E2 8682      1747            mov     dpl,@r0
04E4 08        1748            inc     r0
04E5 8683      1749            mov     dph,@r0
04E7 C002      1750            push    ar2
04E9 C003      1751            push    ar3
04EB 120000    1752            lcall   _abs
04EE AE82      1753            mov     r6,dpl
04F0 AF83      1754            mov     r7,dph
04F2 D003      1755            pop     ar3
04F4 D002      1756            pop     ar2
04F6           1757   ;        EFM8_JDY40_test.c:473: if ( baseSpeed < 3 && baseSteer < 3 ) 
04F6 C3        1758            clr     c
04F7 EA        1759            mov     a,r2
04F8 9403      1760            subb    a,#0x03
04FA EB        1761            mov     a,r3
04FB 6480      1762            xrl     a,#0x80
04FD 9480      1763            subb    a,#0x80
04FF E4        1764            clr     a
0500 33        1765            rlc     a
0501 F510      1766            mov     _ADCsteeringRatio_sloc0_1_0,a
0503 6000      1767            jz      L023002?
0505 C3        1768            clr     c
0506 EE        1769            mov     a,r6
0507 9403      1770            subb    a,#0x03
0509 EF        1771            mov     a,r7
050A 6480      1772            xrl     a,#0x80
050C 9480      1773            subb    a,#0x80
050E 5000      1774            jnc     L023002?
0510           1775   ;        EFM8_JDY40_test.c:475: *ADCwheel1 = 0;
0510 85B060    1776            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_3
0513 85B161    1777            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_3 + 1)
0516 85B262    1778            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_3 + 2)
0519 856082    1779            mov     dpl,_ADCsteeringRatio_sloc1_1_0
051C 856183    1780            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
051F 8562F0    1781            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
0522 E4        1782            clr     a
0523 120000    1783            lcall   __gptrput
0526 A3        1784            inc     dptr
0527 E4        1785            clr     a
0528 120000    1786            lcall   __gptrput
052B           1787   ;        EFM8_JDY40_test.c:476: *ADCwheel2 = 0;
052B 856060    1788            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_4
052E 856161    1789            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_4 + 1)
0531 856262    1790            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_4 + 2)
0534 856082    1791            mov     dpl,_ADCsteeringRatio_sloc1_1_0
0537 856183    1792            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
053A 8562F0    1793            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
053D E4        1794            clr     a
053E 120000    1795            lcall   __gptrput
0541 A3        1796            inc     dptr
0542 E4        1797            clr     a
0543           1798   ;        EFM8_JDY40_test.c:477: return;
0543 020000    1799            ljmp    __gptrput
0546           1800   L023002?:
0546           1801   ;        EFM8_JDY40_test.c:481: steeringFactor = (float)centersteering / 508; // ranges from -1.0 (full left) to +1.0 (full right)
0546 C006      1802            push    ar6
0548 C007      1803            push    ar7
054A 7880      1804            mov     r0,#_ADCsteeringRatio_centersteering_1_143
054C 8682      1805            mov     dpl,@r0
054E 08        1806            inc     r0
054F 8683      1807            mov     dph,@r0
0551 C002      1808            push    ar2
0553 C003      1809            push    ar3
0555 120000    1810            lcall   ___sint2fs
0558 AE82      1811            mov     r6,dpl
055A AF83      1812            mov     r7,dph
055C ACF0      1813            mov     r4,b
055E FD        1814            mov     r5,a
055F C006      1815            push    ar6
0561 C007      1816            push    ar7
0563 E4        1817            clr     a
0564 C0E0      1818            push    acc
0566 C0E0      1819            push    acc
0568 74FE      1820            mov     a,#0xFE
056A C0E0      1821            push    acc
056C 7443      1822            mov     a,#0x43
056E C0E0      1823            push    acc
0570 8E82      1824            mov     dpl,r6
0572 8F83      1825            mov     dph,r7
0574 8CF0      1826            mov     b,r4
0576 ED        1827            mov     a,r5
0577 120000    1828            lcall   ___fsdiv
057A 78E0      1829            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
057C A682      1830            mov     @r0,dpl
057E 08        1831            inc     r0
057F A683      1832            mov     @r0,dph
0581 08        1833            inc     r0
0582 A6F0      1834            mov     @r0,b
0584 08        1835            inc     r0
0585 F6        1836            mov     @r0,a
0586 E581      1837            mov     a,sp
0588 24FC      1838            add     a,#0xfc
058A F581      1839            mov     sp,a
058C           1840   ;        EFM8_JDY40_test.c:483: if ( steeringFactor > 1 ) steeringFactor = 1;
058C E4        1841            clr     a
058D C0E0      1842            push    acc
058F C0E0      1843            push    acc
0591 7480      1844            mov     a,#0x80
0593 C0E0      1845            push    acc
0595 743F      1846            mov     a,#0x3F
0597 C0E0      1847            push    acc
0599 78E0      1848            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
059B 8682      1849            mov     dpl,@r0
059D 08        1850            inc     r0
059E 8683      1851            mov     dph,@r0
05A0 08        1852            inc     r0
05A1 86F0      1853            mov     b,@r0
05A3 08        1854            inc     r0
05A4 E6        1855            mov     a,@r0
05A5 120000    1856            lcall   ___fsgt
05A8 AC82      1857            mov     r4,dpl
05AA E581      1858            mov     a,sp
05AC 24FC      1859            add     a,#0xfc
05AE F581      1860            mov     sp,a
05B0 D007      1861            pop     ar7
05B2 D006      1862            pop     ar6
05B4 D003      1863            pop     ar3
05B6 D002      1864            pop     ar2
05B8 D007      1865            pop     ar7
05BA D006      1866            pop     ar6
05BC EC        1867            mov     a,r4
05BD 6000      1868            jz      L023005?
05BF 78E0      1869            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
05C1 7600      1870            mov     @r0,#0x00
05C3 08        1871            inc     r0
05C4 7600      1872            mov     @r0,#0x00
05C6 08        1873            inc     r0
05C7 7680      1874            mov     @r0,#0x80
05C9 08        1875            inc     r0
05CA 763F      1876            mov     @r0,#0x3F
05CC           1877   L023005?:
05CC           1878   ;        EFM8_JDY40_test.c:486: delta = baseSpeed * steeringFactor;
05CC C006      1879            push    ar6
05CE C007      1880            push    ar7
05D0 8A82      1881            mov     dpl,r2
05D2 8B83      1882            mov     dph,r3
05D4 C002      1883            push    ar2
05D6 C003      1884            push    ar3
05D8 120000    1885            lcall   ___sint2fs
05DB AC82      1886            mov     r4,dpl
05DD AD83      1887            mov     r5,dph
05DF AEF0      1888            mov     r6,b
05E1 FF        1889            mov     r7,a
05E2 78E0      1890            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
05E4 E6        1891            mov     a,@r0
05E5 C0E0      1892            push    acc
05E7 08        1893            inc     r0
05E8 E6        1894            mov     a,@r0
05E9 C0E0      1895            push    acc
05EB 08        1896            inc     r0
05EC E6        1897            mov     a,@r0
05ED C0E0      1898            push    acc
05EF 08        1899            inc     r0
05F0 E6        1900            mov     a,@r0
05F1 C0E0      1901            push    acc
05F3 8C82      1902            mov     dpl,r4
05F5 8D83      1903            mov     dph,r5
05F7 8EF0      1904            mov     b,r6
05F9 EF        1905            mov     a,r7
05FA 120000    1906            lcall   ___fsmul
05FD AC82      1907            mov     r4,dpl
05FF AD83      1908            mov     r5,dph
0601 AEF0      1909            mov     r6,b
0603 FF        1910            mov     r7,a
0604 E581      1911            mov     a,sp
0606 24FC      1912            add     a,#0xfc
0608 F581      1913            mov     sp,a
060A 8C82      1914            mov     dpl,r4
060C 8D83      1915            mov     dph,r5
060E 8EF0      1916            mov     b,r6
0610 EF        1917            mov     a,r7
0611 C006      1918            push    ar6
0613 C007      1919            push    ar7
0615 120000    1920            lcall   ___fs2sint
0618 AC82      1921            mov     r4,dpl
061A AD83      1922            mov     r5,dph
061C D007      1923            pop     ar7
061E D006      1924            pop     ar6
0620 D003      1925            pop     ar3
0622 D002      1926            pop     ar2
0624           1927   ;        EFM8_JDY40_test.c:488: wheel1Speed = baseSpeed + delta;
0624 EC        1928            mov     a,r4
0625 2A        1929            add     a,r2
0626 FE        1930            mov     r6,a
0627 ED        1931            mov     a,r5
0628 3B        1932            addc    a,r3
0629 FF        1933            mov     r7,a
062A 90C2A0    1934            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
062D EE        1935            mov     a,r6
062E F0        1936            movx    @dptr,a
062F A3        1937            inc     dptr
0630 EF        1938            mov     a,r7
0631 F0        1939            movx    @dptr,a
0632           1940   ;        EFM8_JDY40_test.c:489: wheel2Speed = baseSpeed - delta;
0632 7840      1941            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
0634 EA        1942            mov     a,r2
0635 C3        1943            clr     c
0636 9C        1944            subb    a,r4
0637 F6        1945            mov     @r0,a
0638 EB        1946            mov     a,r3
0639 9D        1947            subb    a,r5
063A 08        1948            inc     r0
063B F6        1949            mov     @r0,a
063C           1950   ;        EFM8_JDY40_test.c:490: if (wheel1Speed > 507) wheel1Speed = 507;
063C C3        1951            clr     c
063D 74FB      1952            mov     a,#0xFB
063F 9E        1953            subb    a,r6
0640 7481      1954            mov     a,#(0x01 ^ 0x80)
0642 8FF0      1955            mov     b,r7
0644 63F080    1956            xrl     b,#0x80
0647 95F0      1957            subb    a,b
0649 D007      1958            pop     ar7
064B D006      1959            pop     ar6
064D 5000      1960            jnc     L023007?
064F 90C2A0    1961            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0652 74FB      1962            mov     a,#0xFB
0654 F0        1963            movx    @dptr,a
0655 A3        1964            inc     dptr
0656 7401      1965            mov     a,#0x01
0658 F0        1966            movx    @dptr,a
0659           1967   L023007?:
0659           1968   ;        EFM8_JDY40_test.c:491: if (wheel1Speed < 0) wheel1Speed = 0;
0659 90C2A0    1969            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
065C E0        1970            movx    a,@dptr
065D FA        1971            mov     r2,a
065E A3        1972            inc     dptr
065F E0        1973            movx    a,@dptr
0660 FB        1974            mov     r3,a
0661 30E750    1975            jnb     acc.7,L023009?
0664 90C2A0    1976            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0667 E4        1977            clr     a
0668 F0        1978            movx    @dptr,a
0669 A3        1979            inc     dptr
066A F0        1980            movx    @dptr,a
066B           1981   L023009?:
066B           1982   ;        EFM8_JDY40_test.c:493: if (wheel2Speed > 507) wheel2Speed = 507;
066B 7840      1983            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
066D C3        1984            clr     c
066E 74FB      1985            mov     a,#0xFB
0670 96        1986            subb    a,@r0
0671 7481      1987            mov     a,#(0x01 ^ 0x80)
0673 08        1988            inc     r0
0674 86F0      1989            mov     b,@r0
0676 63F080    1990            xrl     b,#0x80
0679 95F0      1991            subb    a,b
067B 5000      1992            jnc     L023011?
067D 7840      1993            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
067F 76FB      1994            mov     @r0,#0xFB
0681 08        1995            inc     r0
0682 7601      1996            mov     @r0,#0x01
0684           1997   L023011?:
0684           1998   ;        EFM8_JDY40_test.c:494: if (wheel2Speed < 0) wheel2Speed = 0;
0684 7841      1999            mov     r0,#(_ADCsteeringRatio_wheel2Speed_1_143 + 1)
0686 E6        2000            mov     a,@r0
0687 30E7D0    2001            jnb     acc.7,L023013?
068A 7840      2002            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
068C E4        2003            clr     a
068D F6        2004            mov     @r0,a
068E 08        2005            inc     r0
068F F6        2006            mov     @r0,a
0690           2007   L023013?:
0690           2008   ;        EFM8_JDY40_test.c:496: if ( baseSpeed < 3 && baseSteer > 3 ) 
0690 E510      2009            mov     a,_ADCsteeringRatio_sloc0_1_0
0692 7000      2010            jnz     L023047?
0694 020000    2011            ljmp    L023023?
0697           2012   L023047?:
0697 C3        2013            clr     c
0698 7403      2014            mov     a,#0x03
069A 9E        2015            subb    a,r6
069B E4        2016            clr     a
069C 6480      2017            xrl     a,#0x80
069E 8FF0      2018            mov     b,r7
06A0 63F080    2019            xrl     b,#0x80
06A3 95F0      2020            subb    a,b
06A5 5000      2021            jnc     L023023?
06A7           2022   ;        EFM8_JDY40_test.c:499: wheel1Speed = 507 + centersteering;
06A7 7880      2023            mov     r0,#_ADCsteeringRatio_centersteering_1_143
06A9 74FB      2024            mov     a,#0xFB
06AB 26        2025            add     a,@r0
06AC FA        2026            mov     r2,a
06AD 7401      2027            mov     a,#0x01
06AF 08        2028            inc     r0
06B0 36        2029            addc    a,@r0
06B1 FB        2030            mov     r3,a
06B2 90C2A0    2031            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06B5 EA        2032            mov     a,r2
06B6 F0        2033            movx    @dptr,a
06B7 A3        2034            inc     dptr
06B8 EB        2035            mov     a,r3
06B9 F0        2036            movx    @dptr,a
06BA           2037   ;        EFM8_JDY40_test.c:500: wheel2Speed = 507 - centersteering;      
06BA 7880      2038            mov     r0,#_ADCsteeringRatio_centersteering_1_143
06BC 7940      2039            mov     r1,#_ADCsteeringRatio_wheel2Speed_1_143
06BE 74FB      2040            mov     a,#0xFB
06C0 C3        2041            clr     c
06C1 96        2042            subb    a,@r0
06C2 F7        2043            mov     @r1,a
06C3 7401      2044            mov     a,#0x01
06C5 08        2045            inc     r0
06C6 96        2046            subb    a,@r0
06C7 09        2047            inc     r1
06C8 F7        2048            mov     @r1,a
06C9           2049   ;        EFM8_JDY40_test.c:502: if (wheel1Speed > 507) wheel1Speed = 507;
06C9 C3        2050            clr     c
06CA 74FB      2051            mov     a,#0xFB
06CC 9A        2052            subb    a,r2
06CD 7481      2053            mov     a,#(0x01 ^ 0x80)
06CF 8BF0      2054            mov     b,r3
06D1 63F080    2055            xrl     b,#0x80
06D4 95F0      2056            subb    a,b
06D6 5000      2057            jnc     L023015?
06D8 90C2A0    2058            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06DB 74FB      2059            mov     a,#0xFB
06DD F0        2060            movx    @dptr,a
06DE A3        2061            inc     dptr
06DF 7401      2062            mov     a,#0x01
06E1 F0        2063            movx    @dptr,a
06E2           2064   L023015?:
06E2           2065   ;        EFM8_JDY40_test.c:503: if (wheel1Speed < 0) wheel1Speed = 0;
06E2 90C2A0    2066            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06E5 E0        2067            movx    a,@dptr
06E6 FA        2068            mov     r2,a
06E7 A3        2069            inc     dptr
06E8 E0        2070            movx    a,@dptr
06E9 FB        2071            mov     r3,a
06EA 30E7D0    2072            jnb     acc.7,L023017?
06ED 90C2A0    2073            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06F0 E4        2074            clr     a
06F1 F0        2075            movx    @dptr,a
06F2 A3        2076            inc     dptr
06F3 F0        2077            movx    @dptr,a
06F4           2078   L023017?:
06F4           2079   ;        EFM8_JDY40_test.c:505: if (wheel2Speed > 507) wheel2Speed = 507;
06F4 7840      2080            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
06F6 C3        2081            clr     c
06F7 74FB      2082            mov     a,#0xFB
06F9 96        2083            subb    a,@r0
06FA 7481      2084            mov     a,#(0x01 ^ 0x80)
06FC 08        2085            inc     r0
06FD 86F0      2086            mov     b,@r0
06FF 63F080    2087            xrl     b,#0x80
0702 95F0      2088            subb    a,b
0704 5000      2089            jnc     L023019?
0706 7840      2090            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
0708 76FB      2091            mov     @r0,#0xFB
070A 08        2092            inc     r0
070B 7601      2093            mov     @r0,#0x01
070D           2094   L023019?:
070D           2095   ;        EFM8_JDY40_test.c:506: if (wheel2Speed < 0) wheel2Speed = 0;
070D 7841      2096            mov     r0,#(_ADCsteeringRatio_wheel2Speed_1_143 + 1)
070F E6        2097            mov     a,@r0
0710 30E750    2098            jnb     acc.7,L023023?
0713 7840      2099            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
0715 E4        2100            clr     a
0716 F6        2101            mov     @r0,a
0717 08        2102            inc     r0
0718 F6        2103            mov     @r0,a
0719           2104   L023023?:
0719           2105   ;        EFM8_JDY40_test.c:508: *ADCwheel1 = (unsigned int)((wheel1Speed * 1023L) / 507L);
0719 85B060    2106            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_3
071C 85B161    2107            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_3 + 1)
071F 85B262    2108            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_3 + 2)
0722 90C2A0    2109            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0725 E0        2110            movx    a,@dptr
0726 FD        2111            mov     r5,a
0727 A3        2112            inc     dptr
0728 E0        2113            movx    a,@dptr
0729 8D00      2114            mov     __mullong_PARM_2,r5
072B F501      2115            mov     (__mullong_PARM_2 + 1),a
072D 33        2116            rlc     a
072E 95E0      2117            subb    a,acc
0730 F502      2118            mov     (__mullong_PARM_2 + 2),a
0732 F503      2119            mov     (__mullong_PARM_2 + 3),a
0734 9003FF    2120            mov     dptr,#0x03FF
0737 E4        2121            clr     a
0738 F5F0      2122            mov     b,a
073A 120000    2123            lcall   __mullong
073D 7500FB    2124            mov     __divslong_PARM_2,#0xFB
0740 750101    2125            mov     (__divslong_PARM_2 + 1),#0x01
0743 750200    2126            mov     (__divslong_PARM_2 + 2),#0x00
0746 750300    2127            mov     (__divslong_PARM_2 + 3),#0x00
0749 120000    2128            lcall   __divslong
074C AA82      2129            mov     r2,dpl
074E AB83      2130            mov     r3,dph
0750 856082    2131            mov     dpl,_ADCsteeringRatio_sloc1_1_0
0753 856183    2132            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
0756 8562F0    2133            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
0759 EA        2134            mov     a,r2
075A 120000    2135            lcall   __gptrput
075D A3        2136            inc     dptr
075E EB        2137            mov     a,r3
075F 120000    2138            lcall   __gptrput
0762           2139   ;        EFM8_JDY40_test.c:509: *ADCwheel2 = (unsigned int)((wheel2Speed * 1023L) / 507L);       
0762 856060    2140            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_4
0765 856161    2141            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_4 + 1)
0768 856262    2142            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_4 + 2)
076B 7840      2143            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
076D 8600      2144            mov     __mullong_PARM_2,@r0
076F 08        2145            inc     r0
0770 8601      2146            mov     (__mullong_PARM_2 + 1),@r0
0772 E6        2147            mov     a,@r0
0773 33        2148            rlc     a
0774 95E0      2149            subb    a,acc
0776 F502      2150            mov     (__mullong_PARM_2 + 2),a
0778 F503      2151            mov     (__mullong_PARM_2 + 3),a
077A 9003FF    2152            mov     dptr,#0x03FF
077D E4        2153            clr     a
077E F5F0      2154            mov     b,a
0780 120000    2155            lcall   __mullong
0783 7500FB    2156            mov     __divslong_PARM_2,#0xFB
0786 750101    2157            mov     (__divslong_PARM_2 + 1),#0x01
0789 750200    2158            mov     (__divslong_PARM_2 + 2),#0x00
078C 750300    2159            mov     (__divslong_PARM_2 + 3),#0x00
078F 120000    2160            lcall   __divslong
0792 AA82      2161            mov     r2,dpl
0794 AB83      2162            mov     r3,dph
0796 856082    2163            mov     dpl,_ADCsteeringRatio_sloc1_1_0
0799 856183    2164            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
079C 8562F0    2165            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
079F EA        2166            mov     a,r2
07A0 120000    2167            lcall   __gptrput
07A3 A3        2168            inc     dptr
07A4 EB        2169            mov     a,r3
07A5 020000    2170            ljmp    __gptrput
07A8           2171   ;------------------------------------------------------------
07A8           2172   ;Allocation info for local variables in function 'GetPeriod'
07A8           2173   ;------------------------------------------------------------
07A8           2174   ;n                         Allocated to registers r2 r3 
07A8           2175   ;overflow_count            Allocated to registers r4 r5 
07A8           2176   ;i                         Allocated to registers r6 
07A8           2177   ;------------------------------------------------------------
07A8           2178   ;        EFM8_JDY40_test.c:513: unsigned long GetPeriod (int n)
07A8           2179   ;        -----------------------------------------
07A8           2180   ;         function GetPeriod
07A8           2181   ;        -----------------------------------------
07A8           2182   _GetPeriod:
07A8 AA82      2183            mov     r2,dpl
07AA AB83      2184            mov     r3,dph
07AC           2185   ;        EFM8_JDY40_test.c:518: TR0=0; // Stop Timer/Counter 0
07AC C28C      2186            clr     _TR0
07AE           2187   ;        EFM8_JDY40_test.c:519: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
07AE 5389F0    2188            anl     _TMOD,#0xF0
07B1           2189   ;        EFM8_JDY40_test.c:520: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
07B1 438901    2190            orl     _TMOD,#0x01
07B4           2191   ;        EFM8_JDY40_test.c:523: TR0=0;
07B4 C28C      2192            clr     _TR0
07B6           2193   ;        EFM8_JDY40_test.c:524: TL0=0; TH0=0; TF0=0; overflow_count=0;
07B6 758A00    2194            mov     _TL0,#0x00
07B9 758C00    2195            mov     _TH0,#0x00
07BC C28D      2196            clr     _TF0
07BE           2197   ;        EFM8_JDY40_test.c:525: TR0=1;
07BE D28C      2198            setb    _TR0
07C0           2199   ;        EFM8_JDY40_test.c:528: TR0=0;
07C0 C28C      2200            clr     _TR0
07C2           2201   ;        EFM8_JDY40_test.c:529: TL0=0; TH0=0; TF0=0; overflow_count=0;
07C2 758A00    2202            mov     _TL0,#0x00
07C5 758C00    2203            mov     _TH0,#0x00
07C8 C28D      2204            clr     _TF0
07CA           2205   ;        EFM8_JDY40_test.c:530: TR0=1;
07CA D28C      2206            setb    _TR0
07CC           2207   ;        EFM8_JDY40_test.c:531: while(PERIOD_PIN!=0) // Wait for the signal to be zero
07CC 7C00      2208            mov     r4,#0x00
07CE 7D00      2209            mov     r5,#0x00
07D0           2210   L024005?:
07D0 308620    2211            jnb     _P0_6,L024007?
07D3           2212   ;        EFM8_JDY40_test.c:533: if(TF0==1) // Did the 16-bit timer overflow?
07D3           2213   ;        EFM8_JDY40_test.c:535: TF0=0;
07D3 108D60    2214            jbc     _TF0,L024050?
07D6 8000      2215            sjmp    L024005?
07D8           2216   L024050?:
07D8           2217   ;        EFM8_JDY40_test.c:536: overflow_count++;
07D8 0C        2218            inc     r4
07D9 BC00A0    2219            cjne    r4,#0x00,L024051?
07DC 0D        2220            inc     r5
07DD           2221   L024051?:
07DD           2222   ;        EFM8_JDY40_test.c:537: if(overflow_count==10) // If it overflows too many times assume no signal is present
07DD BC0AE0    2223            cjne    r4,#0x0A,L024005?
07E0 BD00E0    2224            cjne    r5,#0x00,L024005?
07E3           2225   ;        EFM8_JDY40_test.c:539: TR0=0;
07E3 C28C      2226            clr     _TR0
07E5           2227   ;        EFM8_JDY40_test.c:540: return 0; // No signal
07E5 900000    2228            mov     dptr,#(0x00&0x00ff)
07E8 E4        2229            clr     a
07E9 F5F0      2230            mov     b,a
07EB 22        2231            ret
07EC           2232   L024007?:
07EC           2233   ;        EFM8_JDY40_test.c:546: TR0=0;
07EC C28C      2234            clr     _TR0
07EE           2235   ;        EFM8_JDY40_test.c:547: TL0=0; TH0=0; TF0=0; overflow_count=0;
07EE 758A00    2236            mov     _TL0,#0x00
07F1 758C00    2237            mov     _TH0,#0x00
07F4 C28D      2238            clr     _TF0
07F6           2239   ;        EFM8_JDY40_test.c:548: TR0=1;
07F6 D28C      2240            setb    _TR0
07F8           2241   ;        EFM8_JDY40_test.c:549: while(PERIOD_PIN!=1) // Wait for the signal to be one
07F8 7C00      2242            mov     r4,#0x00
07FA 7D00      2243            mov     r5,#0x00
07FC           2244   L024012?:
07FC 208620    2245            jb      _P0_6,L024014?
07FF           2246   ;        EFM8_JDY40_test.c:551: if(TF0==1) // Did the 16-bit timer overflow?
07FF           2247   ;        EFM8_JDY40_test.c:553: TF0=0;
07FF 108D60    2248            jbc     _TF0,L024055?
0802 8000      2249            sjmp    L024012?
0804           2250   L024055?:
0804           2251   ;        EFM8_JDY40_test.c:554: overflow_count++;
0804 0C        2252            inc     r4
0805 BC00A0    2253            cjne    r4,#0x00,L024056?
0808 0D        2254            inc     r5
0809           2255   L024056?:
0809           2256   ;        EFM8_JDY40_test.c:555: if(overflow_count==10) // If it overflows too many times assume no signal is present
0809 BC0AE0    2257            cjne    r4,#0x0A,L024012?
080C BD00E0    2258            cjne    r5,#0x00,L024012?
080F           2259   ;        EFM8_JDY40_test.c:557: TR0=0;
080F C28C      2260            clr     _TR0
0811           2261   ;        EFM8_JDY40_test.c:558: return 0; // No signal
0811 900000    2262            mov     dptr,#(0x00&0x00ff)
0814 E4        2263            clr     a
0815 F5F0      2264            mov     b,a
0817 22        2265            ret
0818           2266   L024014?:
0818           2267   ;        EFM8_JDY40_test.c:564: TR0=0;
0818 C28C      2268            clr     _TR0
081A           2269   ;        EFM8_JDY40_test.c:565: TL0=0; TH0=0; TF0=0; overflow_count=0;
081A 758A00    2270            mov     _TL0,#0x00
081D 758C00    2271            mov     _TH0,#0x00
0820 C28D      2272            clr     _TF0
0822 7C00      2273            mov     r4,#0x00
0824 7D00      2274            mov     r5,#0x00
0826           2275   ;        EFM8_JDY40_test.c:566: TR0=1; // Start the timer
0826 D28C      2276            setb    _TR0
0828           2277   ;        EFM8_JDY40_test.c:567: for(i=0; i<n; i++) // Measure the time of 'n' periods
0828 7E00      2278            mov     r6,#0x00
082A           2279   L024025?:
082A 8E07      2280            mov     ar7,r6
082C 7800      2281            mov     r0,#0x00
082E C3        2282            clr     c
082F EF        2283            mov     a,r7
0830 9A        2284            subb    a,r2
0831 E8        2285            mov     a,r0
0832 6480      2286            xrl     a,#0x80
0834 8BF0      2287            mov     b,r3
0836 63F080    2288            xrl     b,#0x80
0839 95F0      2289            subb    a,b
083B 5000      2290            jnc     L024028?
083D           2291   ;        EFM8_JDY40_test.c:569: while(PERIOD_PIN!=0) // Wait for the signal to be zero
083D 8C07      2292            mov     ar7,r4
083F 8D00      2293            mov     ar0,r5
0841           2294   L024017?:
0841 3086A0    2295            jnb     _P0_6,L024043?
0844           2296   ;        EFM8_JDY40_test.c:571: if(TF0==1) // Did the 16-bit timer overflow?
0844           2297   ;        EFM8_JDY40_test.c:573: TF0=0;
0844 108DE0    2298            jbc     _TF0,L024061?
0847 8000      2299            sjmp    L024017?
0849           2300   L024061?:
0849           2301   ;        EFM8_JDY40_test.c:574: overflow_count++;
0849 0F        2302            inc     r7
084A BF0060    2303            cjne    r7,#0x00,L024017?
084D 08        2304            inc     r0
084E           2305   ;        EFM8_JDY40_test.c:577: while(PERIOD_PIN!=1) // Wait for the signal to be one
084E 8000      2306            sjmp    L024017?
0850           2307   L024043?:
0850           2308   L024022?:
0850 208660    2309            jb      _P0_6,L024047?
0853           2310   ;        EFM8_JDY40_test.c:579: if(TF0==1) // Did the 16-bit timer overflow?
0853           2311   ;        EFM8_JDY40_test.c:581: TF0=0;
0853 108DA0    2312            jbc     _TF0,L024063?
0856 8000      2313            sjmp    L024022?
0858           2314   L024063?:
0858           2315   ;        EFM8_JDY40_test.c:582: overflow_count++;
0858 0F        2316            inc     r7
0859 BF0020    2317            cjne    r7,#0x00,L024022?
085C 08        2318            inc     r0
085D 8000      2319            sjmp    L024022?
085F           2320   L024047?:
085F 8F04      2321            mov     ar4,r7
0861 8805      2322            mov     ar5,r0
0863           2323   ;        EFM8_JDY40_test.c:567: for(i=0; i<n; i++) // Measure the time of 'n' periods
0863 0E        2324            inc     r6
0864 8000      2325            sjmp    L024025?
0866           2326   L024028?:
0866           2327   ;        EFM8_JDY40_test.c:586: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
0866 C28C      2328            clr     _TR0
0868           2329   ;        EFM8_JDY40_test.c:588: return (overflow_count*65536+TH0*256+TL0);
0868 8D03      2330            mov     ar3,r5
086A 8C02      2331            mov     ar2,r4
086C 7D00      2332            mov     r5,#0x00
086E 7C00      2333            mov     r4,#0x00
0870 AF8C      2334            mov     r7,_TH0
0872 7E00      2335            mov     r6,#0x00
0874 EF        2336            mov     a,r7
0875 33        2337            rlc     a
0876 95E0      2338            subb    a,acc
0878 F8        2339            mov     r0,a
0879 F9        2340            mov     r1,a
087A EE        2341            mov     a,r6
087B 2C        2342            add     a,r4
087C FC        2343            mov     r4,a
087D EF        2344            mov     a,r7
087E 3D        2345            addc    a,r5
087F FD        2346            mov     r5,a
0880 E8        2347            mov     a,r0
0881 3A        2348            addc    a,r2
0882 FA        2349            mov     r2,a
0883 E9        2350            mov     a,r1
0884 3B        2351            addc    a,r3
0885 FB        2352            mov     r3,a
0886 AE8A      2353            mov     r6,_TL0
0888 E4        2354            clr     a
0889 FF        2355            mov     r7,a
088A 33        2356            rlc     a
088B 95E0      2357            subb    a,acc
088D F8        2358            mov     r0,a
088E F9        2359            mov     r1,a
088F EE        2360            mov     a,r6
0890 2C        2361            add     a,r4
0891 FC        2362            mov     r4,a
0892 EF        2363            mov     a,r7
0893 3D        2364            addc    a,r5
0894 FD        2365            mov     r5,a
0895 E8        2366            mov     a,r0
0896 3A        2367            addc    a,r2
0897 FA        2368            mov     r2,a
0898 E9        2369            mov     a,r1
0899 3B        2370            addc    a,r3
089A 8C82      2371            mov     dpl,r4
089C 8D83      2372            mov     dph,r5
089E 8AF0      2373            mov     b,r2
08A0 22        2374            ret
08A1           2375   ;------------------------------------------------------------
08A1           2376   ;Allocation info for local variables in function 'eputs'
08A1           2377   ;------------------------------------------------------------
08A1           2378   ;String                    Allocated to registers r2 r3 r4 
08A1           2379   ;------------------------------------------------------------
08A1           2380   ;        EFM8_JDY40_test.c:591: void eputs(char *String)
08A1           2381   ;        -----------------------------------------
08A1           2382   ;         function eputs
08A1           2383   ;        -----------------------------------------
08A1           2384   _eputs:
08A1 AA82      2385            mov     r2,dpl
08A3 AB83      2386            mov     r3,dph
08A5 ACF0      2387            mov     r4,b
08A7           2388   ;        EFM8_JDY40_test.c:593: while(*String)
08A7           2389   L025001?:
08A7 8A82      2390            mov     dpl,r2
08A9 8B83      2391            mov     dph,r3
08AB 8CF0      2392            mov     b,r4
08AD 120000    2393            lcall   __gptrget
08B0 FD        2394            mov     r5,a
08B1 6000      2395            jz      L025004?
08B3           2396   ;        EFM8_JDY40_test.c:595: putchar(*String);
08B3 8D82      2397            mov     dpl,r5
08B5 C002      2398            push    ar2
08B7 C003      2399            push    ar3
08B9 C004      2400            push    ar4
08BB 120000    2401            lcall   _putchar
08BE D004      2402            pop     ar4
08C0 D003      2403            pop     ar3
08C2 D002      2404            pop     ar2
08C4           2405   ;        EFM8_JDY40_test.c:596: String++;
08C4 0A        2406            inc     r2
08C5 BA00E0    2407            cjne    r2,#0x00,L025001?
08C8 0B        2408            inc     r3
08C9 8000      2409            sjmp    L025001?
08CB           2410   L025004?:
08CB 22        2411            ret
08CC           2412   ;------------------------------------------------------------
08CC           2413   ;Allocation info for local variables in function 'PrintNumber'
08CC           2414   ;------------------------------------------------------------
08CC           2415   ;Base                      Allocated with name '_PrintNumber_PARM_2'
08CC           2416   ;digits                    Allocated with name '_PrintNumber_PARM_3'
08CC           2417   ;val                       Allocated with name '_PrintNumber_val_1_162'
08CC           2418   ;j                         Allocated with name '_PrintNumber_j_1_163'
08CC           2419   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
08CC           2420   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
08CC           2421   ;buff                      Allocated with name '_PrintNumber_buff_1_163'
08CC           2422   ;------------------------------------------------------------
08CC           2423   ;        EFM8_JDY40_test.c:600: void PrintNumber(long int val, int Base, int digits)
08CC           2424   ;        -----------------------------------------
08CC           2425   ;         function PrintNumber
08CC           2426   ;        -----------------------------------------
08CC           2427   _PrintNumber:
08CC 8582B0    2428            mov     _PrintNumber_val_1_162,dpl
08CF 8583B1    2429            mov     (_PrintNumber_val_1_162 + 1),dph
08D2 85F0B2    2430            mov     (_PrintNumber_val_1_162 + 2),b
08D5 F5B3      2431            mov     (_PrintNumber_val_1_162 + 3),a
08D7           2432   ;        EFM8_JDY40_test.c:606: buff[NBITS]=0;
08D7 90C310    2433            mov     dptr,#(_PrintNumber_buff_1_163 + 0x0020)
08DA E4        2434            clr     a
08DB F0        2435            movx    @dptr,a
08DC           2436   ;        EFM8_JDY40_test.c:608: if(val<0)
08DC E5B3      2437            mov     a,(_PrintNumber_val_1_162 + 3)
08DE 30E7A0    2438            jnb     acc.7,L026012?
08E1           2439   ;        EFM8_JDY40_test.c:610: putchar('-');
08E1 75822D    2440            mov     dpl,#0x2D
08E4 120000    2441            lcall   _putchar
08E7           2442   ;        EFM8_JDY40_test.c:611: val*=-1;
08E7 C3        2443            clr     c
08E8 E4        2444            clr     a
08E9 95B0      2445            subb    a,_PrintNumber_val_1_162
08EB F5B0      2446            mov     _PrintNumber_val_1_162,a
08ED E4        2447            clr     a
08EE 95B1      2448            subb    a,(_PrintNumber_val_1_162 + 1)
08F0 F5B1      2449            mov     (_PrintNumber_val_1_162 + 1),a
08F2 E4        2450            clr     a
08F3 95B2      2451            subb    a,(_PrintNumber_val_1_162 + 2)
08F5 F5B2      2452            mov     (_PrintNumber_val_1_162 + 2),a
08F7 E4        2453            clr     a
08F8 95B3      2454            subb    a,(_PrintNumber_val_1_162 + 3)
08FA F5B3      2455            mov     (_PrintNumber_val_1_162 + 3),a
08FC           2456   ;        EFM8_JDY40_test.c:615: while ( (val>0) | (digits>0) )
08FC           2457   L026012?:
08FC 75001F    2458            mov     _PrintNumber_j_1_163,#0x1F
08FF E4        2459            clr     a
0900 F501      2460            mov     (_PrintNumber_j_1_163 + 1),a
0902 A8C0      2461            mov     r0,_PrintNumber_PARM_3
0904 A9C1      2462            mov     r1,(_PrintNumber_PARM_3 + 1)
0906           2463   L026005?:
0906 C3        2464            clr     c
0907 E4        2465            clr     a
0908 95B0      2466            subb    a,_PrintNumber_val_1_162
090A E4        2467            clr     a
090B 95B1      2468            subb    a,(_PrintNumber_val_1_162 + 1)
090D E4        2469            clr     a
090E 95B2      2470            subb    a,(_PrintNumber_val_1_162 + 2)
0910 E4        2471            clr     a
0911 6480      2472            xrl     a,#0x80
0913 85B3F0    2473            mov     b,(_PrintNumber_val_1_162 + 3)
0916 63F080    2474            xrl     b,#0x80
0919 95F0      2475            subb    a,b
091B E4        2476            clr     a
091C 33        2477            rlc     a
091D FE        2478            mov     r6,a
091E C3        2479            clr     c
091F E4        2480            clr     a
0920 98        2481            subb    a,r0
0921 E4        2482            clr     a
0922 6480      2483            xrl     a,#0x80
0924 89F0      2484            mov     b,r1
0926 63F080    2485            xrl     b,#0x80
0929 95F0      2486            subb    a,b
092B E4        2487            clr     a
092C 33        2488            rlc     a
092D FF        2489            mov     r7,a
092E 4E        2490            orl     a,r6
092F 7000      2491            jnz     L026016?
0931 020000    2492            ljmp    L026007?
0934           2493   L026016?:
0934           2494   ;        EFM8_JDY40_test.c:617: buff[j--]=HexDigit[val%Base];
0934 AE00      2495            mov     r6,_PrintNumber_j_1_163
0936 AF01      2496            mov     r7,(_PrintNumber_j_1_163 + 1)
0938 1500      2497            dec     _PrintNumber_j_1_163
093A 74FF      2498            mov     a,#0xff
093C B500A0    2499            cjne    a,_PrintNumber_j_1_163,L026017?
093F 1501      2500            dec     (_PrintNumber_j_1_163 + 1)
0941           2501   L026017?:
0941 EE        2502            mov     a,r6
0942 24F0      2503            add     a,#_PrintNumber_buff_1_163
0944 F550      2504            mov     _PrintNumber_sloc0_1_0,a
0946 EF        2505            mov     a,r7
0947 34C2      2506            addc    a,#(_PrintNumber_buff_1_163 >> 8)
0949 F551      2507            mov     (_PrintNumber_sloc0_1_0 + 1),a
094B 8510A0    2508            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
094E E511      2509            mov     a,(_PrintNumber_PARM_2 + 1)
0950 F5A1      2510            mov     (_PrintNumber_sloc1_1_0 + 1),a
0952 33        2511            rlc     a
0953 95E0      2512            subb    a,acc
0955 F5A2      2513            mov     (_PrintNumber_sloc1_1_0 + 2),a
0957 F5A3      2514            mov     (_PrintNumber_sloc1_1_0 + 3),a
0959 85A000    2515            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
095C 85A101    2516            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
095F 85A202    2517            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
0962 85A303    2518            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
0965 85B082    2519            mov     dpl,_PrintNumber_val_1_162
0968 85B183    2520            mov     dph,(_PrintNumber_val_1_162 + 1)
096B 85B2F0    2521            mov     b,(_PrintNumber_val_1_162 + 2)
096E E5B3      2522            mov     a,(_PrintNumber_val_1_162 + 3)
0970 C000      2523            push    ar0
0972 C001      2524            push    ar1
0974 120000    2525            lcall   __modslong
0977 AE82      2526            mov     r6,dpl
0979 AF83      2527            mov     r7,dph
097B EE        2528            mov     a,r6
097C 24B0      2529            add     a,#_PrintNumber_HexDigit_1_163
097E F582      2530            mov     dpl,a
0980 EF        2531            mov     a,r7
0981 3411      2532            addc    a,#(_PrintNumber_HexDigit_1_163 >> 8)
0983 F583      2533            mov     dph,a
0985 E4        2534            clr     a
0986 93        2535            movc    a,@a+dptr
0987 855082    2536            mov     dpl,_PrintNumber_sloc0_1_0
098A 855183    2537            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
098D F0        2538            movx    @dptr,a
098E           2539   ;        EFM8_JDY40_test.c:618: val/=Base;
098E 85A000    2540            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
0991 85A101    2541            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
0994 85A202    2542            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
0997 85A303    2543            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
099A 85B082    2544            mov     dpl,_PrintNumber_val_1_162
099D 85B183    2545            mov     dph,(_PrintNumber_val_1_162 + 1)
09A0 85B2F0    2546            mov     b,(_PrintNumber_val_1_162 + 2)
09A3 E5B3      2547            mov     a,(_PrintNumber_val_1_162 + 3)
09A5 120000    2548            lcall   __divslong
09A8 8582B0    2549            mov     _PrintNumber_val_1_162,dpl
09AB 8583B1    2550            mov     (_PrintNumber_val_1_162 + 1),dph
09AE 85F0B2    2551            mov     (_PrintNumber_val_1_162 + 2),b
09B1 F5B3      2552            mov     (_PrintNumber_val_1_162 + 3),a
09B3 D001      2553            pop     ar1
09B5 D000      2554            pop     ar0
09B7           2555   ;        EFM8_JDY40_test.c:619: if(digits!=0) digits--;
09B7 E8        2556            mov     a,r0
09B8 49        2557            orl     a,r1
09B9 7000      2558            jnz     L026018?
09BB 020000    2559            ljmp    L026005?
09BE           2560   L026018?:
09BE 18        2561            dec     r0
09BF B8FFB0    2562            cjne    r0,#0xff,L026019?
09C2 19        2563            dec     r1
09C3           2564   L026019?:
09C3 020000    2565            ljmp    L026005?
09C6           2566   L026007?:
09C6           2567   ;        EFM8_JDY40_test.c:621: eputs(&buff[j+1]);
09C6 E500      2568            mov     a,_PrintNumber_j_1_163
09C8 04        2569            inc     a
09C9 24F0      2570            add     a,#_PrintNumber_buff_1_163
09CB FA        2571            mov     r2,a
09CC E4        2572            clr     a
09CD 34C2      2573            addc    a,#(_PrintNumber_buff_1_163 >> 8)
09CF FB        2574            mov     r3,a
09D0 7C00      2575            mov     r4,#0x00
09D2 8A82      2576            mov     dpl,r2
09D4 8B83      2577            mov     dph,r3
09D6 8CF0      2578            mov     b,r4
09D8 020000    2579            ljmp    _eputs
09DB           2580   ;------------------------------------------------------------
09DB           2581   ;Allocation info for local variables in function 'GetFrequency'
09DB           2582   ;------------------------------------------------------------
09DB           2583   ;pin                       Allocated with name '_GetFrequency_PARM_2'
09DB           2584   ;c                         Allocated to registers r2 r3 r4 r5 
09DB           2585   ;f                         Allocated to registers r6 r7 r0 r1 
09DB           2586   ;------------------------------------------------------------
09DB           2587   ;        EFM8_JDY40_test.c:624: unsigned long GetFrequency (long int c, int pin)
09DB           2588   ;        -----------------------------------------
09DB           2589   ;         function GetFrequency
09DB           2590   ;        -----------------------------------------
09DB           2591   _GetFrequency:
09DB AA82      2592            mov     r2,dpl
09DD AB83      2593            mov     r3,dph
09DF ACF0      2594            mov     r4,b
09E1 FD        2595            mov     r5,a
09E2           2596   ;        EFM8_JDY40_test.c:626: long int f = 0;
09E2 7E00      2597            mov     r6,#0x00
09E4 7F00      2598            mov     r7,#0x00
09E6 7800      2599            mov     r0,#0x00
09E8 7900      2600            mov     r1,#0x00
09EA           2601   ;        EFM8_JDY40_test.c:628: if(c>0)
09EA C3        2602            clr     c
09EB E4        2603            clr     a
09EC 9A        2604            subb    a,r2
09ED E4        2605            clr     a
09EE 9B        2606            subb    a,r3
09EF E4        2607            clr     a
09F0 9C        2608            subb    a,r4
09F1 E4        2609            clr     a
09F2 6480      2610            xrl     a,#0x80
09F4 8DF0      2611            mov     b,r5
09F6 63F080    2612            xrl     b,#0x80
09F9 95F0      2613            subb    a,b
09FB 4000      2614            jc      L027006?
09FD 020000    2615            ljmp    L027002?
0A00           2616   L027006?:
0A00           2617   ;        EFM8_JDY40_test.c:630: f=(SYSCLK*200.0)/(c*12);
0A00 8A00      2618            mov     __mullong_PARM_2,r2
0A02 8B01      2619            mov     (__mullong_PARM_2 + 1),r3
0A04 8C02      2620            mov     (__mullong_PARM_2 + 2),r4
0A06 8D03      2621            mov     (__mullong_PARM_2 + 3),r5
0A08 90000C    2622            mov     dptr,#(0x0C&0x00ff)
0A0B E4        2623            clr     a
0A0C F5F0      2624            mov     b,a
0A0E 120000    2625            lcall   __mullong
0A11 120000    2626            lcall   ___slong2fs
0A14 AA82      2627            mov     r2,dpl
0A16 AB83      2628            mov     r3,dph
0A18 ACF0      2629            mov     r4,b
0A1A FD        2630            mov     r5,a
0A1B C002      2631            push    ar2
0A1D C003      2632            push    ar3
0A1F C004      2633            push    ar4
0A21 C005      2634            push    ar5
0A23 9093A4    2635            mov     dptr,#0x93A4
0A26 75F056    2636            mov     b,#0x56
0A29 7450      2637            mov     a,#0x50
0A2B 120000    2638            lcall   ___fsdiv
0A2E AA82      2639            mov     r2,dpl
0A30 AB83      2640            mov     r3,dph
0A32 ACF0      2641            mov     r4,b
0A34 FD        2642            mov     r5,a
0A35 E581      2643            mov     a,sp
0A37 24FC      2644            add     a,#0xfc
0A39 F581      2645            mov     sp,a
0A3B 8A82      2646            mov     dpl,r2
0A3D 8B83      2647            mov     dph,r3
0A3F 8CF0      2648            mov     b,r4
0A41 ED        2649            mov     a,r5
0A42 120000    2650            lcall   ___fs2slong
0A45 AE82      2651            mov     r6,dpl
0A47 AF83      2652            mov     r7,dph
0A49 A8F0      2653            mov     r0,b
0A4B F9        2654            mov     r1,a
0A4C           2655   ;        EFM8_JDY40_test.c:631: eputs(" f");
0A4C 90DFF0    2656            mov     dptr,#__str_4
0A4F 75F080    2657            mov     b,#0x80
0A52 C006      2658            push    ar6
0A54 C007      2659            push    ar7
0A56 C000      2660            push    ar0
0A58 C001      2661            push    ar1
0A5A 120000    2662            lcall   _eputs
0A5D           2663   ;        EFM8_JDY40_test.c:632: PrintNumber(pin, 10, 1);
0A5D AA70      2664            mov     r2,_GetFrequency_PARM_2
0A5F E571      2665            mov     a,(_GetFrequency_PARM_2 + 1)
0A61 FB        2666            mov     r3,a
0A62 33        2667            rlc     a
0A63 95E0      2668            subb    a,acc
0A65 FC        2669            mov     r4,a
0A66 FD        2670            mov     r5,a
0A67 75100A    2671            mov     _PrintNumber_PARM_2,#0x0A
0A6A E4        2672            clr     a
0A6B F511      2673            mov     (_PrintNumber_PARM_2 + 1),a
0A6D 75C001    2674            mov     _PrintNumber_PARM_3,#0x01
0A70 E4        2675            clr     a
0A71 F5C1      2676            mov     (_PrintNumber_PARM_3 + 1),a
0A73 8A82      2677            mov     dpl,r2
0A75 8B83      2678            mov     dph,r3
0A77 8CF0      2679            mov     b,r4
0A79 ED        2680            mov     a,r5
0A7A 120000    2681            lcall   _PrintNumber
0A7D           2682   ;        EFM8_JDY40_test.c:633: eputs(" = ");
0A7D 90E030    2683            mov     dptr,#__str_5
0A80 75F080    2684            mov     b,#0x80
0A83 120000    2685            lcall   _eputs
0A86 D001      2686            pop     ar1
0A88 D000      2687            pop     ar0
0A8A D007      2688            pop     ar7
0A8C D006      2689            pop     ar6
0A8E           2690   ;        EFM8_JDY40_test.c:634: PrintNumber(f, 10, 7);
0A8E 75100A    2691            mov     _PrintNumber_PARM_2,#0x0A
0A91 E4        2692            clr     a
0A92 F511      2693            mov     (_PrintNumber_PARM_2 + 1),a
0A94 75C007    2694            mov     _PrintNumber_PARM_3,#0x07
0A97 E4        2695            clr     a
0A98 F5C1      2696            mov     (_PrintNumber_PARM_3 + 1),a
0A9A 8E82      2697            mov     dpl,r6
0A9C 8F83      2698            mov     dph,r7
0A9E 88F0      2699            mov     b,r0
0AA0 E9        2700            mov     a,r1
0AA1 C006      2701            push    ar6
0AA3 C007      2702            push    ar7
0AA5 C000      2703            push    ar0
0AA7 C001      2704            push    ar1
0AA9 120000    2705            lcall   _PrintNumber
0AAC           2706   ;        EFM8_JDY40_test.c:635: eputs("Hz");
0AAC 90E070    2707            mov     dptr,#__str_6
0AAF 75F080    2708            mov     b,#0x80
0AB2 120000    2709            lcall   _eputs
0AB5 D001      2710            pop     ar1
0AB7 D000      2711            pop     ar0
0AB9 D007      2712            pop     ar7
0ABB D006      2713            pop     ar6
0ABD           2714   L027002?:
0ABD           2715   ;        EFM8_JDY40_test.c:643: return f;
0ABD 8E82      2716            mov     dpl,r6
0ABF 8F83      2717            mov     dph,r7
0AC1 88F0      2718            mov     b,r0
0AC3 E9        2719            mov     a,r1
0AC4 22        2720            ret
0AC5           2721   ;------------------------------------------------------------
0AC5           2722   ;Allocation info for local variables in function 'CoinDecider'
0AC5           2723   ;------------------------------------------------------------
0AC5           2724   ;freq                      Allocated to registers r2 r3 r4 r5 
0AC5           2725   ;------------------------------------------------------------
0AC5           2726   ;        EFM8_JDY40_test.c:646: int CoinDecider(long int freq)
0AC5           2727   ;        -----------------------------------------
0AC5           2728   ;         function CoinDecider
0AC5           2729   ;        -----------------------------------------
0AC5           2730   _CoinDecider:
0AC5 AA82      2731            mov     r2,dpl
0AC7 AB83      2732            mov     r3,dph
0AC9 ACF0      2733            mov     r4,b
0ACB FD        2734            mov     r5,a
0ACC           2735   ;        EFM8_JDY40_test.c:648: if(freq>=56300) // detects a coin
0ACC C3        2736            clr     c
0ACD EA        2737            mov     a,r2
0ACE 94EC      2738            subb    a,#0xEC
0AD0 EB        2739            mov     a,r3
0AD1 94DB      2740            subb    a,#0xDB
0AD3 EC        2741            mov     a,r4
0AD4 9400      2742            subb    a,#0x00
0AD6 ED        2743            mov     a,r5
0AD7 6480      2744            xrl     a,#0x80
0AD9 9480      2745            subb    a,#0x80
0ADB 5000      2746            jnc     L028018?
0ADD 020000    2747            ljmp    L028010?
0AE0           2748   L028018?:
0AE0           2749   ;        EFM8_JDY40_test.c:651: if((freq >= 56200) && (freq < 56400))
0AE0 C3        2750            clr     c
0AE1 EA        2751            mov     a,r2
0AE2 9488      2752            subb    a,#0x88
0AE4 EB        2753            mov     a,r3
0AE5 94DB      2754            subb    a,#0xDB
0AE7 EC        2755            mov     a,r4
0AE8 9400      2756            subb    a,#0x00
0AEA ED        2757            mov     a,r5
0AEB 6480      2758            xrl     a,#0x80
0AED 9480      2759            subb    a,#0x80
0AEF 4000      2760            jc      L028006?
0AF1 EA        2761            mov     a,r2
0AF2 9450      2762            subb    a,#0x50
0AF4 EB        2763            mov     a,r3
0AF5 94DC      2764            subb    a,#0xDC
0AF7 EC        2765            mov     a,r4
0AF8 9400      2766            subb    a,#0x00
0AFA ED        2767            mov     a,r5
0AFB 6480      2768            xrl     a,#0x80
0AFD 9480      2769            subb    a,#0x80
0AFF 5000      2770            jnc     L028006?
0B01           2771   ;        EFM8_JDY40_test.c:653: printf(" DIME");
0B01 7470      2772            mov     a,#__str_7
0B03 C0E0      2773            push    acc
0B05 74E1      2774            mov     a,#(__str_7 >> 8)
0B07 C0E0      2775            push    acc
0B09 7480      2776            mov     a,#0x80
0B0B C0E0      2777            push    acc
0B0D 120000    2778            lcall   _printf
0B10 1581      2779            dec     sp
0B12 1581      2780            dec     sp
0B14 1581      2781            dec     sp
0B16 8000      2782            sjmp    L028007?
0B18           2783   L028006?:
0B18           2784   ;        EFM8_JDY40_test.c:657: else if ((freq >= 56400) && (freq < 56700))
0B18 C3        2785            clr     c
0B19 EA        2786            mov     a,r2
0B1A 9450      2787            subb    a,#0x50
0B1C EB        2788            mov     a,r3
0B1D 94DC      2789            subb    a,#0xDC
0B1F EC        2790            mov     a,r4
0B20 9400      2791            subb    a,#0x00
0B22 ED        2792            mov     a,r5
0B23 6480      2793            xrl     a,#0x80
0B25 9480      2794            subb    a,#0x80
0B27 4000      2795            jc      L028002?
0B29 EA        2796            mov     a,r2
0B2A 947C      2797            subb    a,#0x7C
0B2C EB        2798            mov     a,r3
0B2D 94DD      2799            subb    a,#0xDD
0B2F EC        2800            mov     a,r4
0B30 9400      2801            subb    a,#0x00
0B32 ED        2802            mov     a,r5
0B33 6480      2803            xrl     a,#0x80
0B35 9480      2804            subb    a,#0x80
0B37 5000      2805            jnc     L028002?
0B39           2806   ;        EFM8_JDY40_test.c:659: printf(" NICKEL");
0B39 7430      2807            mov     a,#__str_8
0B3B C0E0      2808            push    acc
0B3D 74E2      2809            mov     a,#(__str_8 >> 8)
0B3F C0E0      2810            push    acc
0B41 7480      2811            mov     a,#0x80
0B43 C0E0      2812            push    acc
0B45 120000    2813            lcall   _printf
0B48 1581      2814            dec     sp
0B4A 1581      2815            dec     sp
0B4C 1581      2816            dec     sp
0B4E 8000      2817            sjmp    L028007?
0B50           2818   L028002?:
0B50           2819   ;        EFM8_JDY40_test.c:665: printf(" LOONIE");
0B50 7470      2820            mov     a,#__str_9
0B52 C0E0      2821            push    acc
0B54 74E2      2822            mov     a,#(__str_9 >> 8)
0B56 C0E0      2823            push    acc
0B58 7480      2824            mov     a,#0x80
0B5A C0E0      2825            push    acc
0B5C 120000    2826            lcall   _printf
0B5F 1581      2827            dec     sp
0B61 1581      2828            dec     sp
0B63 1581      2829            dec     sp
0B65           2830   L028007?:
0B65           2831   ;        EFM8_JDY40_test.c:668: return 1;
0B65 900001    2832            mov     dptr,#0x0001
0B68           2833   ;        EFM8_JDY40_test.c:676: return 0;
0B68 22        2834            ret
0B69           2835   L028010?:
0B69 900000    2836            mov     dptr,#0x0000
0B6C 22        2837            ret
0B6D           2838   ;------------------------------------------------------------
0B6D           2839   ;Allocation info for local variables in function 'automaticmode'
0B6D           2840   ;------------------------------------------------------------
0B6D           2841   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0B6D           2842   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0B6D           2843   ;control                   Allocated to registers 
0B6D           2844   ;------------------------------------------------------------
0B6D           2845   ;        EFM8_JDY40_test.c:684: void automaticmode(float fowardper, float sideper)
0B6D           2846   ;        -----------------------------------------
0B6D           2847   ;         function automaticmode
0B6D           2848   ;        -----------------------------------------
0B6D           2849   _automaticmode:
0B6D AA82      2850            mov     r2,dpl
0B6F AB83      2851            mov     r3,dph
0B71 ACF0      2852            mov     r4,b
0B73 FD        2853            mov     r5,a
0B74           2854   ;        EFM8_JDY40_test.c:687: direction = 3;
0B74 750003    2855            mov     _direction,#0x03
0B77 E4        2856            clr     a
0B78 F501      2857            mov     (_direction + 1),a
0B7A           2858   ;        EFM8_JDY40_test.c:689: P3_7=1;  //wheel 1
0B7A D2B7      2859            setb    _P3_7
0B7C           2860   ;        EFM8_JDY40_test.c:690: P3_2=0;  // wheel 1 
0B7C C2B2      2861            clr     _P3_2
0B7E           2862   ;        EFM8_JDY40_test.c:691: P3_0=0; // wheel 2
0B7E C2B0      2863            clr     _P3_0
0B80           2864   ;        EFM8_JDY40_test.c:692: P2_5=1; // wheel 2
0B80 D2A5      2865            setb    _P2_5
0B82           2866   ;        EFM8_JDY40_test.c:695: if ( fowardper >= p_thresh)
0B82 74CD      2867            mov     a,#0xCD
0B84 C0E0      2868            push    acc
0B86 74CC      2869            mov     a,#0xCC
0B88 C0E0      2870            push    acc
0B8A C0E0      2871            push    acc
0B8C 743D      2872            mov     a,#0x3D
0B8E C0E0      2873            push    acc
0B90 8A82      2874            mov     dpl,r2
0B92 8B83      2875            mov     dph,r3
0B94 8CF0      2876            mov     b,r4
0B96 ED        2877            mov     a,r5
0B97 120000    2878            lcall   ___fslt
0B9A AA82      2879            mov     r2,dpl
0B9C E581      2880            mov     a,sp
0B9E 24FC      2881            add     a,#0xfc
0BA0 F581      2882            mov     sp,a
0BA2 EA        2883            mov     a,r2
0BA3 7000      2884            jnz     L029006?
0BA5           2885   ;        EFM8_JDY40_test.c:697: P3_7=0;  //wheel 1
0BA5 C2B7      2886            clr     _P3_7
0BA7           2887   ;        EFM8_JDY40_test.c:698: P3_2=1;  // wheel 1 
0BA7 D2B2      2888            setb    _P3_2
0BA9           2889   ;        EFM8_JDY40_test.c:699: P3_0=1; // wheel 2
0BA9 D2B0      2890            setb    _P3_0
0BAB           2891   ;        EFM8_JDY40_test.c:700: P2_5=0; // wheel 2
0BAB C2A5      2892            clr     _P2_5
0BAD           2893   ;        EFM8_JDY40_test.c:701: waitms(1500);
0BAD 9005DC    2894            mov     dptr,#0x05DC
0BB0 120000    2895            lcall   _waitms
0BB3           2896   ;        EFM8_JDY40_test.c:702: if ( peggingsidnatu == 0 )
0BB3 E5C0      2897            mov     a,_peggingsidnatu
0BB5 45C1      2898            orl     a,(_peggingsidnatu + 1)
0BB7 7000      2899            jnz     L029002?
0BB9           2900   ;        EFM8_JDY40_test.c:704: P3_7=0;  //wheel 1
0BB9 C2B7      2901            clr     _P3_7
0BBB           2902   ;        EFM8_JDY40_test.c:705: P3_2=1;  // wheel 1 
0BBB D2B2      2903            setb    _P3_2
0BBD           2904   ;        EFM8_JDY40_test.c:706: P3_0=0; // wheel 2
0BBD C2B0      2905            clr     _P3_0
0BBF           2906   ;        EFM8_JDY40_test.c:707: P2_5=0; // wheel 2
0BBF C2A5      2907            clr     _P2_5
0BC1           2908   ;        EFM8_JDY40_test.c:708: waitms(1500);
0BC1 9005DC    2909            mov     dptr,#0x05DC
0BC4 120000    2910            lcall   _waitms
0BC7           2911   ;        EFM8_JDY40_test.c:709: peggingsidnatu = 1;
0BC7 75C001    2912            mov     _peggingsidnatu,#0x01
0BCA E4        2913            clr     a
0BCB F5C1      2914            mov     (_peggingsidnatu + 1),a
0BCD           2915   ;        EFM8_JDY40_test.c:710: return;
0BCD 22        2916            ret
0BCE           2917   L029002?:
0BCE           2918   ;        EFM8_JDY40_test.c:713: if ( peggingsidnatu == 1 )
0BCE 7401      2919            mov     a,#0x01
0BD0 B5C070    2920            cjne    a,_peggingsidnatu,L029023?
0BD3 E4        2921            clr     a
0BD4 B5C170    2922            cjne    a,(_peggingsidnatu + 1),L029023?
0BD7 8000      2923            sjmp    L029024?
0BD9           2924   L029023?:
0BD9 8000      2925            sjmp    L029006?
0BDB           2926   L029024?:
0BDB           2927   ;        EFM8_JDY40_test.c:715: P3_7=0;  //wheel 1
0BDB C2B7      2928            clr     _P3_7
0BDD           2929   ;        EFM8_JDY40_test.c:716: P3_2=0;  // wheel 1 
0BDD C2B2      2930            clr     _P3_2
0BDF           2931   ;        EFM8_JDY40_test.c:717: P3_0=1; // wheel 2
0BDF D2B0      2932            setb    _P3_0
0BE1           2933   ;        EFM8_JDY40_test.c:718: P2_5=0; // wheel 2
0BE1 C2A5      2934            clr     _P2_5
0BE3           2935   ;        EFM8_JDY40_test.c:719: waitms(1500);
0BE3 9005DC    2936            mov     dptr,#0x05DC
0BE6 120000    2937            lcall   _waitms
0BE9           2938   ;        EFM8_JDY40_test.c:720: peggingsidnatu = 0;
0BE9 E4        2939            clr     a
0BEA F5C0      2940            mov     _peggingsidnatu,a
0BEC F5C1      2941            mov     (_peggingsidnatu + 1),a
0BEE           2942   ;        EFM8_JDY40_test.c:721: return;
0BEE 22        2943            ret
0BEF           2944   L029006?:
0BEF           2945   ;        EFM8_JDY40_test.c:726: if ( sideper >= p_thresh)
0BEF 74CD      2946            mov     a,#0xCD
0BF1 C0E0      2947            push    acc
0BF3 74CC      2948            mov     a,#0xCC
0BF5 C0E0      2949            push    acc
0BF7 C0E0      2950            push    acc
0BF9 743D      2951            mov     a,#0x3D
0BFB C0E0      2952            push    acc
0BFD 852082    2953            mov     dpl,_automaticmode_PARM_2
0C00 852183    2954            mov     dph,(_automaticmode_PARM_2 + 1)
0C03 8522F0    2955            mov     b,(_automaticmode_PARM_2 + 2)
0C06 E523      2956            mov     a,(_automaticmode_PARM_2 + 3)
0C08 120000    2957            lcall   ___fslt
0C0B AA82      2958            mov     r2,dpl
0C0D E581      2959            mov     a,sp
0C0F 24FC      2960            add     a,#0xfc
0C11 F581      2961            mov     sp,a
0C13 EA        2962            mov     a,r2
0C14 7000      2963            jnz     L029013?
0C16           2964   ;        EFM8_JDY40_test.c:728: if ( peggingsidnatu == 0 )
0C16 E5C0      2965            mov     a,_peggingsidnatu
0C18 45C1      2966            orl     a,(_peggingsidnatu + 1)
0C1A 7000      2967            jnz     L029008?
0C1C           2968   ;        EFM8_JDY40_test.c:730: P3_7=0;  //wheel 1
0C1C C2B7      2969            clr     _P3_7
0C1E           2970   ;        EFM8_JDY40_test.c:731: P3_2=1;  // wheel 1 
0C1E D2B2      2971            setb    _P3_2
0C20           2972   ;        EFM8_JDY40_test.c:732: P3_0=0; // wheel 2
0C20 C2B0      2973            clr     _P3_0
0C22           2974   ;        EFM8_JDY40_test.c:733: P2_5=0; // wheel 2
0C22 C2A5      2975            clr     _P2_5
0C24           2976   ;        EFM8_JDY40_test.c:734: waitms(1500);
0C24 9005DC    2977            mov     dptr,#0x05DC
0C27           2978   ;        EFM8_JDY40_test.c:736: return;
0C27 020000    2979            ljmp    _waitms
0C2A           2980   L029008?:
0C2A           2981   ;        EFM8_JDY40_test.c:739: if ( peggingsidnatu == 1 )
0C2A 7401      2982            mov     a,#0x01
0C2C B5C070    2983            cjne    a,_peggingsidnatu,L029027?
0C2F E4        2984            clr     a
0C30 B5C170    2985            cjne    a,(_peggingsidnatu + 1),L029027?
0C33 8000      2986            sjmp    L029028?
0C35           2987   L029027?:
0C35 22        2988            ret
0C36           2989   L029028?:
0C36           2990   ;        EFM8_JDY40_test.c:741: P3_7=0;  //wheel 1
0C36 C2B7      2991            clr     _P3_7
0C38           2992   ;        EFM8_JDY40_test.c:742: P3_2=0;  // wheel 1 
0C38 C2B2      2993            clr     _P3_2
0C3A           2994   ;        EFM8_JDY40_test.c:743: P3_0=1; // wheel 2
0C3A D2B0      2995            setb    _P3_0
0C3C           2996   ;        EFM8_JDY40_test.c:744: P2_5=0; // wheel 2
0C3C C2A5      2997            clr     _P2_5
0C3E           2998   ;        EFM8_JDY40_test.c:745: waitms(1500);
0C3E 9005DC    2999            mov     dptr,#0x05DC
0C41           3000   ;        EFM8_JDY40_test.c:747: return;
0C41 020000    3001            ljmp    _waitms
0C44           3002   L029013?:
0C44 22        3003            ret
0C45           3004   ;------------------------------------------------------------
0C45           3005   ;Allocation info for local variables in function 'LCD_pulse'
0C45           3006   ;------------------------------------------------------------
0C45           3007   ;------------------------------------------------------------
0C45           3008   ;        EFM8_JDY40_test.c:754: void LCD_pulse (void)
0C45           3009   ;        -----------------------------------------
0C45           3010   ;         function LCD_pulse
0C45           3011   ;        -----------------------------------------
0C45           3012   _LCD_pulse:
0C45           3013   ;        EFM8_JDY40_test.c:756: LCD_E=1;
0C45 D2A0      3014            setb    _P2_0
0C47           3015   ;        EFM8_JDY40_test.c:757: Timer3us(40);
0C47 758228    3016            mov     dpl,#0x28
0C4A 120000    3017            lcall   _Timer3us
0C4D           3018   ;        EFM8_JDY40_test.c:758: LCD_E=0;
0C4D C2A0      3019            clr     _P2_0
0C4F 22        3020            ret
0C50           3021   ;------------------------------------------------------------
0C50           3022   ;Allocation info for local variables in function 'LCD_byte'
0C50           3023   ;------------------------------------------------------------
0C50           3024   ;x                         Allocated to registers r2 
0C50           3025   ;------------------------------------------------------------
0C50           3026   ;        EFM8_JDY40_test.c:761: void LCD_byte (unsigned char x)
0C50           3027   ;        -----------------------------------------
0C50           3028   ;         function LCD_byte
0C50           3029   ;        -----------------------------------------
0C50           3030   _LCD_byte:
0C50 AA82      3031            mov     r2,dpl
0C52           3032   ;        EFM8_JDY40_test.c:764: ACC=x; //Send high nible
0C52 8AE0      3033            mov     _ACC,r2
0C54           3034   ;        EFM8_JDY40_test.c:765: LCD_D7=ACC_7;
0C54 A2E7      3035            mov     c,_ACC_7
0C56 9290      3036            mov     _P1_0,c
0C58           3037   ;        EFM8_JDY40_test.c:766: LCD_D6=ACC_6;
0C58 A2E6      3038            mov     c,_ACC_6
0C5A 9291      3039            mov     _P1_1,c
0C5C           3040   ;        EFM8_JDY40_test.c:767: LCD_D5=ACC_5;
0C5C A2E5      3041            mov     c,_ACC_5
0C5E 9292      3042            mov     _P1_2,c
0C60           3043   ;        EFM8_JDY40_test.c:768: LCD_D4=ACC_4;
0C60 A2E4      3044            mov     c,_ACC_4
0C62 9293      3045            mov     _P1_3,c
0C64           3046   ;        EFM8_JDY40_test.c:769: LCD_pulse();
0C64 C002      3047            push    ar2
0C66 120000    3048            lcall   _LCD_pulse
0C69           3049   ;        EFM8_JDY40_test.c:770: Timer3us(40);
0C69 758228    3050            mov     dpl,#0x28
0C6C 120000    3051            lcall   _Timer3us
0C6F D002      3052            pop     ar2
0C71           3053   ;        EFM8_JDY40_test.c:771: ACC=x; //Send low nible
0C71 8AE0      3054            mov     _ACC,r2
0C73           3055   ;        EFM8_JDY40_test.c:772: LCD_D7=ACC_3;
0C73 A2E3      3056            mov     c,_ACC_3
0C75 9290      3057            mov     _P1_0,c
0C77           3058   ;        EFM8_JDY40_test.c:773: LCD_D6=ACC_2;
0C77 A2E2      3059            mov     c,_ACC_2
0C79 9291      3060            mov     _P1_1,c
0C7B           3061   ;        EFM8_JDY40_test.c:774: LCD_D5=ACC_1;
0C7B A2E1      3062            mov     c,_ACC_1
0C7D 9292      3063            mov     _P1_2,c
0C7F           3064   ;        EFM8_JDY40_test.c:775: LCD_D4=ACC_0;
0C7F A2E0      3065            mov     c,_ACC_0
0C81 9293      3066            mov     _P1_3,c
0C83           3067   ;        EFM8_JDY40_test.c:776: LCD_pulse();
0C83 020000    3068            ljmp    _LCD_pulse
0C86           3069   ;------------------------------------------------------------
0C86           3070   ;Allocation info for local variables in function 'WriteData'
0C86           3071   ;------------------------------------------------------------
0C86           3072   ;x                         Allocated to registers r2 
0C86           3073   ;------------------------------------------------------------
0C86           3074   ;        EFM8_JDY40_test.c:779: void WriteData (unsigned char x)
0C86           3075   ;        -----------------------------------------
0C86           3076   ;         function WriteData
0C86           3077   ;        -----------------------------------------
0C86           3078   _WriteData:
0C86 AA82      3079            mov     r2,dpl
0C88           3080   ;        EFM8_JDY40_test.c:781: LCD_RS=1;
0C88 D297      3081            setb    _P1_7
0C8A           3082   ;        EFM8_JDY40_test.c:782: LCD_byte(x);
0C8A 8A82      3083            mov     dpl,r2
0C8C 120000    3084            lcall   _LCD_byte
0C8F           3085   ;        EFM8_JDY40_test.c:783: waitms(2);
0C8F 900002    3086            mov     dptr,#0x0002
0C92 020000    3087            ljmp    _waitms
0C95           3088   ;------------------------------------------------------------
0C95           3089   ;Allocation info for local variables in function 'WriteCommand'
0C95           3090   ;------------------------------------------------------------
0C95           3091   ;x                         Allocated to registers r2 
0C95           3092   ;------------------------------------------------------------
0C95           3093   ;        EFM8_JDY40_test.c:786: void WriteCommand (unsigned char x)
0C95           3094   ;        -----------------------------------------
0C95           3095   ;         function WriteCommand
0C95           3096   ;        -----------------------------------------
0C95           3097   _WriteCommand:
0C95 AA82      3098            mov     r2,dpl
0C97           3099   ;        EFM8_JDY40_test.c:788: LCD_RS=0;
0C97 C297      3100            clr     _P1_7
0C99           3101   ;        EFM8_JDY40_test.c:789: LCD_byte(x);
0C99 8A82      3102            mov     dpl,r2
0C9B 120000    3103            lcall   _LCD_byte
0C9E           3104   ;        EFM8_JDY40_test.c:790: waitms(5);
0C9E 900005    3105            mov     dptr,#0x0005
0CA1 020000    3106            ljmp    _waitms
0CA4           3107   ;------------------------------------------------------------
0CA4           3108   ;Allocation info for local variables in function 'LCD_4BIT'
0CA4           3109   ;------------------------------------------------------------
0CA4           3110   ;------------------------------------------------------------
0CA4           3111   ;        EFM8_JDY40_test.c:793: void LCD_4BIT (void)
0CA4           3112   ;        -----------------------------------------
0CA4           3113   ;         function LCD_4BIT
0CA4           3114   ;        -----------------------------------------
0CA4           3115   _LCD_4BIT:
0CA4           3116   ;        EFM8_JDY40_test.c:795: LCD_E=0; // Resting state of LCD's enable is zero
0CA4 C2A0      3117            clr     _P2_0
0CA6           3118   ;        EFM8_JDY40_test.c:797: waitms(20);
0CA6 900014    3119            mov     dptr,#0x0014
0CA9 120000    3120            lcall   _waitms
0CAC           3121   ;        EFM8_JDY40_test.c:799: WriteCommand(0x33);
0CAC 758233    3122            mov     dpl,#0x33
0CAF 120000    3123            lcall   _WriteCommand
0CB2           3124   ;        EFM8_JDY40_test.c:800: WriteCommand(0x33);
0CB2 758233    3125            mov     dpl,#0x33
0CB5 120000    3126            lcall   _WriteCommand
0CB8           3127   ;        EFM8_JDY40_test.c:801: WriteCommand(0x32); // Change to 4-bit mode
0CB8 758232    3128            mov     dpl,#0x32
0CBB 120000    3129            lcall   _WriteCommand
0CBE           3130   ;        EFM8_JDY40_test.c:804: WriteCommand(0x28);
0CBE 758228    3131            mov     dpl,#0x28
0CC1 120000    3132            lcall   _WriteCommand
0CC4           3133   ;        EFM8_JDY40_test.c:805: WriteCommand(0x0c);
0CC4 75820C    3134            mov     dpl,#0x0C
0CC7 120000    3135            lcall   _WriteCommand
0CCA           3136   ;        EFM8_JDY40_test.c:806: WriteCommand(0x01); // Clear screen command (takes some time)
0CCA 758201    3137            mov     dpl,#0x01
0CCD 120000    3138            lcall   _WriteCommand
0CD0           3139   ;        EFM8_JDY40_test.c:807: waitms(20); // Wait for clear screen command to finsih.
0CD0 900014    3140            mov     dptr,#0x0014
0CD3 020000    3141            ljmp    _waitms
0CD6           3142   ;------------------------------------------------------------
0CD6           3143   ;Allocation info for local variables in function 'main'
0CD6           3144   ;------------------------------------------------------------
0CD6           3145   ;timeout                   Allocated to registers 
0CD6           3146   ;pulse_width               Allocated to registers 
0CD6           3147   ;pulse_width1              Allocated to registers 
0CD6           3148   ;speed                     Allocated with name '_main_speed_1_196'
0CD6           3149   ;steering                  Allocated with name '_main_steering_1_196'
0CD6           3150   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_196'
0CD6           3151   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_196'
0CD6           3152   ;customMouth0              Allocated to registers 
0CD6           3153   ;customMouth1              Allocated to registers 
0CD6           3154   ;customMouth2              Allocated to registers 
0CD6           3155   ;customMouth3              Allocated to registers 
0CD6           3156   ;customMouth4              Allocated to registers 
0CD6           3157   ;customMouth5              Allocated to registers 
0CD6           3158   ;customMouth6              Allocated to registers 
0CD6           3159   ;customMouth7              Allocated to registers 
0CD6           3160   ;customEye0                Allocated to registers 
0CD6           3161   ;customEye1                Allocated to registers 
0CD6           3162   ;customEye2                Allocated to registers 
0CD6           3163   ;customEye3                Allocated to registers 
0CD6           3164   ;customEye4                Allocated to registers 
0CD6           3165   ;customEye5                Allocated to registers 
0CD6           3166   ;customEye6                Allocated to registers 
0CD6           3167   ;customEye7                Allocated to registers 
0CD6           3168   ;i                         Allocated to registers r2 r3 
0CD6           3169   ;count                     Allocated to registers r2 r3 r4 r5 
0CD6           3170   ;f                         Allocated to registers r2 r3 r4 r5 
0CD6           3171   ;coinPresent               Allocated to registers 
0CD6           3172   ;v                         Allocated with name '_main_v_1_196'
0CD6           3173   ;------------------------------------------------------------
0CD6           3174   ;        EFM8_JDY40_test.c:811: void main (void)
0CD6           3175   ;        -----------------------------------------
0CD6           3176   ;         function main
0CD6           3177   ;        -----------------------------------------
0CD6           3178   _main:
0CD6           3179   ;        EFM8_JDY40_test.c:835: waitms(500);
0CD6 9001F4    3180            mov     dptr,#0x01F4
0CD9 120000    3181            lcall   _waitms
0CDC           3182   ;        EFM8_JDY40_test.c:836: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0CDC 74F0      3183            mov     a,#__str_10
0CDE C0E0      3184            push    acc
0CE0 74E4      3185            mov     a,#(__str_10 >> 8)
0CE2 C0E0      3186            push    acc
0CE4 7480      3187            mov     a,#0x80
0CE6 C0E0      3188            push    acc
0CE8 120000    3189            lcall   _printf
0CEB 1581      3190            dec     sp
0CED 1581      3191            dec     sp
0CEF 1581      3192            dec     sp
0CF1           3193   ;        EFM8_JDY40_test.c:837: UART1_Init(9600);
0CF1 902580    3194            mov     dptr,#0x2580
0CF4 E4        3195            clr     a
0CF5 F5F0      3196            mov     b,a
0CF7 120000    3197            lcall   _UART1_Init
0CFA           3198   ;        EFM8_JDY40_test.c:839: ReceptionOff();
0CFA 120000    3199            lcall   _ReceptionOff
0CFD           3200   ;        EFM8_JDY40_test.c:840: LCD_4BIT();
0CFD 120000    3201            lcall   _LCD_4BIT
0D00           3202   ;        EFM8_JDY40_test.c:842: TIMER0_Init(); 
0D00 120000    3203            lcall   _TIMER0_Init
0D03           3204   ;        EFM8_JDY40_test.c:844: InitPinADC(2, 1); // Configure P2.1 as analog input
0D03 756001    3205            mov     _InitPinADC_PARM_2,#0x01
0D06 758202    3206            mov     dpl,#0x02
0D09 120000    3207            lcall   _InitPinADC
0D0C           3208   ;        EFM8_JDY40_test.c:845: InitPinADC(2, 3); // Configure P2.1 as analog input
0D0C 756003    3209            mov     _InitPinADC_PARM_2,#0x03
0D0F 758202    3210            mov     dpl,#0x02
0D12 120000    3211            lcall   _InitPinADC
0D15           3212   ;        EFM8_JDY40_test.c:846: InitADC();
0D15 120000    3213            lcall   _InitADC
0D18           3214   ;        EFM8_JDY40_test.c:851: SendATCommand("AT+VER\r\n");
0D18 90E530    3215            mov     dptr,#__str_11
0D1B 75F080    3216            mov     b,#0x80
0D1E 120000    3217            lcall   _SendATCommand
0D21           3218   ;        EFM8_JDY40_test.c:852: SendATCommand("AT+BAUD\r\n");
0D21 90E570    3219            mov     dptr,#__str_12
0D24 75F080    3220            mov     b,#0x80
0D27 120000    3221            lcall   _SendATCommand
0D2A           3222   ;        EFM8_JDY40_test.c:853: SendATCommand("AT+RFID\r\n");
0D2A 90E5B0    3223            mov     dptr,#__str_13
0D2D 75F080    3224            mov     b,#0x80
0D30 120000    3225            lcall   _SendATCommand
0D33           3226   ;        EFM8_JDY40_test.c:854: SendATCommand("AT+DVID\r\n");
0D33 90E5F0    3227            mov     dptr,#__str_14
0D36 75F080    3228            mov     b,#0x80
0D39 120000    3229            lcall   _SendATCommand
0D3C           3230   ;        EFM8_JDY40_test.c:855: SendATCommand("AT+RFC120\r\n");
0D3C 90E630    3231            mov     dptr,#__str_15
0D3F 75F080    3232            mov     b,#0x80
0D42 120000    3233            lcall   _SendATCommand
0D45           3234   ;        EFM8_JDY40_test.c:856: SendATCommand("AT+POWE\r\n");
0D45 90E670    3235            mov     dptr,#__str_16
0D48 75F080    3236            mov     b,#0x80
0D4B 120000    3237            lcall   _SendATCommand
0D4E           3238   ;        EFM8_JDY40_test.c:857: SendATCommand("AT+CLSS\r\n");
0D4E 90E6B0    3239            mov     dptr,#__str_17
0D51 75F080    3240            mov     b,#0x80
0D54 120000    3241            lcall   _SendATCommand
0D57           3242   ;        EFM8_JDY40_test.c:861: SendATCommand("AT+DVIDFFFF\r\n"); 
0D57 90E6F0    3243            mov     dptr,#__str_18
0D5A 75F080    3244            mov     b,#0x80
0D5D 120000    3245            lcall   _SendATCommand
0D60           3246   ;        EFM8_JDY40_test.c:863: WriteCommand(0x40);  // Set CGRAM address
0D60 758240    3247            mov     dpl,#0x40
0D63 120000    3248            lcall   _WriteCommand
0D66           3249   ;        EFM8_JDY40_test.c:864: WriteData(customMouth0 = 0x00);
0D66 758200    3250            mov     dpl,#0x00
0D69 120000    3251            lcall   _WriteData
0D6C           3252   ;        EFM8_JDY40_test.c:865: WriteData(customMouth1 = 0x00);
0D6C 758200    3253            mov     dpl,#0x00
0D6F 120000    3254            lcall   _WriteData
0D72           3255   ;        EFM8_JDY40_test.c:866: WriteData(customMouth2 = 0x00);
0D72 758200    3256            mov     dpl,#0x00
0D75 120000    3257            lcall   _WriteData
0D78           3258   ;        EFM8_JDY40_test.c:867: WriteData(customMouth3 = 0x11);
0D78 758211    3259            mov     dpl,#0x11
0D7B 120000    3260            lcall   _WriteData
0D7E           3261   ;        EFM8_JDY40_test.c:868: WriteData(customMouth4 = 0x15);
0D7E 758215    3262            mov     dpl,#0x15
0D81 120000    3263            lcall   _WriteData
0D84           3264   ;        EFM8_JDY40_test.c:869: WriteData(customMouth5 = 0x0A);
0D84 75820A    3265            mov     dpl,#0x0A
0D87 120000    3266            lcall   _WriteData
0D8A           3267   ;        EFM8_JDY40_test.c:870: WriteData(customMouth6 = 0x00);
0D8A 758200    3268            mov     dpl,#0x00
0D8D 120000    3269            lcall   _WriteData
0D90           3270   ;        EFM8_JDY40_test.c:871: WriteData(customMouth7 = 0x00);
0D90 758200    3271            mov     dpl,#0x00
0D93 120000    3272            lcall   _WriteData
0D96           3273   ;        EFM8_JDY40_test.c:873: WriteCommand(0x48);
0D96 758248    3274            mov     dpl,#0x48
0D99 120000    3275            lcall   _WriteCommand
0D9C           3276   ;        EFM8_JDY40_test.c:874: WriteData(customEye0 = 0x00);
0D9C 758200    3277            mov     dpl,#0x00
0D9F 120000    3278            lcall   _WriteData
0DA2           3279   ;        EFM8_JDY40_test.c:875: WriteData(customEye1 = 0x0E);    
0DA2 75820E    3280            mov     dpl,#0x0E
0DA5 120000    3281            lcall   _WriteData
0DA8           3282   ;        EFM8_JDY40_test.c:876: WriteData(customEye2 = 0x19);
0DA8 758219    3283            mov     dpl,#0x19
0DAB 120000    3284            lcall   _WriteData
0DAE           3285   ;        EFM8_JDY40_test.c:877: WriteData(customEye3 = 0x19);
0DAE 758219    3286            mov     dpl,#0x19
0DB1 120000    3287            lcall   _WriteData
0DB4           3288   ;        EFM8_JDY40_test.c:878: WriteData(customEye4 = 0x1F);
0DB4 75821F    3289            mov     dpl,#0x1F
0DB7 120000    3290            lcall   _WriteData
0DBA           3291   ;        EFM8_JDY40_test.c:879: WriteData(customEye5 = 0x17);
0DBA 758217    3292            mov     dpl,#0x17
0DBD 120000    3293            lcall   _WriteData
0DC0           3294   ;        EFM8_JDY40_test.c:880: WriteData(customEye6 = 0x0E);
0DC0 75820E    3295            mov     dpl,#0x0E
0DC3 120000    3296            lcall   _WriteData
0DC6           3297   ;        EFM8_JDY40_test.c:881: WriteData(customEye7 = 0x00);
0DC6 758200    3298            mov     dpl,#0x00
0DC9 120000    3299            lcall   _WriteData
0DCC           3300   ;        EFM8_JDY40_test.c:883: WriteCommand(0x56);
0DCC 758256    3301            mov     dpl,#0x56
0DCF 120000    3302            lcall   _WriteCommand
0DD2           3303   ;        EFM8_JDY40_test.c:884: for(i=0; i<8; i++) {
0DD2 7A00      3304            mov     r2,#0x00
0DD4 7B00      3305            mov     r3,#0x00
0DD6           3306   L035020?:
0DD6 C3        3307            clr     c
0DD7 EA        3308            mov     a,r2
0DD8 9408      3309            subb    a,#0x08
0DDA EB        3310            mov     a,r3
0DDB 6480      3311            xrl     a,#0x80
0DDD 9480      3312            subb    a,#0x80
0DDF 5000      3313            jnc     L035023?
0DE1           3314   ;        EFM8_JDY40_test.c:886: WriteData(customSparkle[i]);
0DE1 EA        3315            mov     a,r2
0DE2 24F0      3316            add     a,#_customSparkle
0DE4 F582      3317            mov     dpl,a
0DE6 EB        3318            mov     a,r3
0DE7 3411      3319            addc    a,#(_customSparkle >> 8)
0DE9 F583      3320            mov     dph,a
0DEB E4        3321            clr     a
0DEC 93        3322            movc    a,@a+dptr
0DED F582      3323            mov     dpl,a
0DEF C002      3324            push    ar2
0DF1 C003      3325            push    ar3
0DF3 120000    3326            lcall   _WriteData
0DF6 D003      3327            pop     ar3
0DF8 D002      3328            pop     ar2
0DFA           3329   ;        EFM8_JDY40_test.c:884: for(i=0; i<8; i++) {
0DFA 0A        3330            inc     r2
0DFB BA0030    3331            cjne    r2,#0x00,L035020?
0DFE 0B        3332            inc     r3
0DFF 8000      3333            sjmp    L035020?
0E01           3334   L035023?:
0E01           3335   ;        EFM8_JDY40_test.c:891: WriteCommand(0x89);
0E01 758289    3336            mov     dpl,#0x89
0E04 120000    3337            lcall   _WriteCommand
0E07           3338   ;        EFM8_JDY40_test.c:892: WriteData(0);
0E07 758200    3339            mov     dpl,#0x00
0E0A 120000    3340            lcall   _WriteData
0E0D           3341   ;        EFM8_JDY40_test.c:894: WriteCommand(0x8b);
0E0D 75828B    3342            mov     dpl,#0x8B
0E10 120000    3343            lcall   _WriteCommand
0E13           3344   ;        EFM8_JDY40_test.c:895: WriteData(0);
0E13 758200    3345            mov     dpl,#0x00
0E16 120000    3346            lcall   _WriteData
0E19           3347   ;        EFM8_JDY40_test.c:897: WriteCommand(0xca);
0E19 7582CA    3348            mov     dpl,#0xCA
0E1C 120000    3349            lcall   _WriteCommand
0E1F           3350   ;        EFM8_JDY40_test.c:898: WriteData(1);
0E1F 758201    3351            mov     dpl,#0x01
0E22 120000    3352            lcall   _WriteData
0E25           3353   ;        EFM8_JDY40_test.c:899: while(1)
0E25           3354   L035018?:
0E25           3355   ;        EFM8_JDY40_test.c:902: count = GetPeriod(200);
0E25 9000C8    3356            mov     dptr,#0x00C8
0E28 120000    3357            lcall   _GetPeriod
0E2B AA82      3358            mov     r2,dpl
0E2D AB83      3359            mov     r3,dph
0E2F ACF0      3360            mov     r4,b
0E31 FD        3361            mov     r5,a
0E32           3362   ;        EFM8_JDY40_test.c:903: f = GetFrequency(count, 1);
0E32 757001    3363            mov     _GetFrequency_PARM_2,#0x01
0E35 E4        3364            clr     a
0E36 F571      3365            mov     (_GetFrequency_PARM_2 + 1),a
0E38 8A82      3366            mov     dpl,r2
0E3A 8B83      3367            mov     dph,r3
0E3C 8CF0      3368            mov     b,r4
0E3E ED        3369            mov     a,r5
0E3F 120000    3370            lcall   _GetFrequency
0E42           3371   ;        EFM8_JDY40_test.c:904: coinPresent = CoinDecider(f); 
0E42 AA82      3372            mov     r2,dpl
0E44 AB83      3373            mov     r3,dph
0E46 ACF0      3374            mov     r4,b
0E48 FD        3375            mov     r5,a
0E49 C002      3376            push    ar2
0E4B C003      3377            push    ar3
0E4D C004      3378            push    ar4
0E4F C005      3379            push    ar5
0E51 120000    3380            lcall   _CoinDecider
0E54 E582      3381            mov     a,dpl
0E56 8583F0    3382            mov     b,dph
0E59 D005      3383            pop     ar5
0E5B D004      3384            pop     ar4
0E5D D003      3385            pop     ar3
0E5F D002      3386            pop     ar2
0E61           3387   ;        EFM8_JDY40_test.c:905: if(coinPresent)
0E61 45F0      3388            orl     a,b
0E63 6000      3389            jz      L035002?
0E65           3390   ;        EFM8_JDY40_test.c:907: sprintf(msg, "%ld", f-55000); // subtracted so that it sends a smaller value
0E65 EA        3391            mov     a,r2
0E66 2428      3392            add     a,#0x28
0E68 FA        3393            mov     r2,a
0E69 EB        3394            mov     a,r3
0E6A 3429      3395            addc    a,#0x29
0E6C FB        3396            mov     r3,a
0E6D EC        3397            mov     a,r4
0E6E 34FF      3398            addc    a,#0xff
0E70 FC        3399            mov     r4,a
0E71 ED        3400            mov     a,r5
0E72 34FF      3401            addc    a,#0xff
0E74 FD        3402            mov     r5,a
0E75 C002      3403            push    ar2
0E77 C003      3404            push    ar3
0E79 C004      3405            push    ar4
0E7B C005      3406            push    ar5
0E7D 7430      3407            mov     a,#__str_19
0E7F C0E0      3408            push    acc
0E81 74E8      3409            mov     a,#(__str_19 >> 8)
0E83 C0E0      3410            push    acc
0E85 7480      3411            mov     a,#0x80
0E87 C0E0      3412            push    acc
0E89 7490      3413            mov     a,#_msg
0E8B C0E0      3414            push    acc
0E8D 744C      3415            mov     a,#(_msg >> 8)
0E8F C0E0      3416            push    acc
0E91 7440      3417            mov     a,#0x40
0E93 C0E0      3418            push    acc
0E95 120000    3419            lcall   _sprintf
0E98 E581      3420            mov     a,sp
0E9A 24F6      3421            add     a,#0xf6
0E9C F581      3422            mov     sp,a
0E9E           3423   ;        EFM8_JDY40_test.c:908: sendstr1(msg);
0E9E 904C90    3424            mov     dptr,#_msg
0EA1 75F040    3425            mov     b,#0x40
0EA4 120000    3426            lcall   _sendstr1
0EA7           3427   L035002?:
0EA7           3428   ;        EFM8_JDY40_test.c:912: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0EA7 75820E    3429            mov     dpl,#0x0E
0EAA 120000    3430            lcall   _Volts_at_Pin
0EAD AA82      3431            mov     r2,dpl
0EAF AB83      3432            mov     r3,dph
0EB1 ACF0      3433            mov     r4,b
0EB3 FD        3434            mov     r5,a
0EB4 8A20      3435            mov     _main_v_1_196,r2
0EB6 8B21      3436            mov     (_main_v_1_196 + 1),r3
0EB8 8C22      3437            mov     (_main_v_1_196 + 2),r4
0EBA 8D23      3438            mov     (_main_v_1_196 + 3),r5
0EBC           3439   ;        EFM8_JDY40_test.c:913: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0EBC 758210    3440            mov     dpl,#0x10
0EBF 120000    3441            lcall   _Volts_at_Pin
0EC2 AA82      3442            mov     r2,dpl
0EC4 AB83      3443            mov     r3,dph
0EC6 ACF0      3444            mov     r4,b
0EC8 FD        3445            mov     r5,a
0EC9 8A24      3446            mov     (_main_v_1_196 + 0x0004),r2
0ECB 8B25      3447            mov     ((_main_v_1_196 + 0x0004) + 1),r3
0ECD 8C26      3448            mov     ((_main_v_1_196 + 0x0004) + 2),r4
0ECF 8D27      3449            mov     ((_main_v_1_196 + 0x0004) + 3),r5
0ED1           3450   ;        EFM8_JDY40_test.c:919: if(RXU1()) // Something has arrived
0ED1 120000    3451            lcall   _RXU1
0ED4 4000      3452            jc      L035039?
0ED6 020000    3453            ljmp    L035016?
0ED9           3454   L035039?:
0ED9           3455   ;        EFM8_JDY40_test.c:922: getstr1(buff, sizeof(buff));
0ED9 754014    3456            mov     _getstr1_PARM_2,#0x14
0EDC 904CD0    3457            mov     dptr,#_buff
0EDF 75F040    3458            mov     b,#0x40
0EE2 120000    3459            lcall   _getstr1
0EE5           3460   ;        EFM8_JDY40_test.c:923: if ( strcmp(buff, "A") == 0 )
0EE5 750070    3461            mov     _strcmp_PARM_2,#__str_20
0EE8 7501E9    3462            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
0EEB 750280    3463            mov     (_strcmp_PARM_2 + 2),#0x80
0EEE 904CD0    3464            mov     dptr,#_buff
0EF1 75F040    3465            mov     b,#0x40
0EF4 120000    3466            lcall   _strcmp
0EF7 E582      3467            mov     a,dpl
0EF9 8583F0    3468            mov     b,dph
0EFC 45F0      3469            orl     a,b
0EFE 6000      3470            jz      L035040?
0F00 020000    3471            ljmp    L035011?
0F03           3472   L035040?:
0F03           3473   ;        EFM8_JDY40_test.c:925: waitms(500);
0F03 9001F4    3474            mov     dptr,#0x01F4
0F06 120000    3475            lcall   _waitms
0F09           3476   ;        EFM8_JDY40_test.c:926: while(1)
0F09           3477   L035008?:
0F09           3478   ;        EFM8_JDY40_test.c:928: direction=3; 
0F09 750003    3479            mov     _direction,#0x03
0F0C E4        3480            clr     a
0F0D F501      3481            mov     (_direction + 1),a
0F0F           3482   ;        EFM8_JDY40_test.c:930: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0F0F 75820E    3483            mov     dpl,#0x0E
0F12 120000    3484            lcall   _Volts_at_Pin
0F15 AA82      3485            mov     r2,dpl
0F17 AB83      3486            mov     r3,dph
0F19 ACF0      3487            mov     r4,b
0F1B FD        3488            mov     r5,a
0F1C 8A20      3489            mov     _main_v_1_196,r2
0F1E 8B21      3490            mov     (_main_v_1_196 + 1),r3
0F20 8C22      3491            mov     (_main_v_1_196 + 2),r4
0F22 8D23      3492            mov     (_main_v_1_196 + 3),r5
0F24           3493   ;        EFM8_JDY40_test.c:931: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0F24 758210    3494            mov     dpl,#0x10
0F27 120000    3495            lcall   _Volts_at_Pin
0F2A AA82      3496            mov     r2,dpl
0F2C AB83      3497            mov     r3,dph
0F2E ACF0      3498            mov     r4,b
0F30 FD        3499            mov     r5,a
0F31 8A24      3500            mov     (_main_v_1_196 + 0x0004),r2
0F33 8B25      3501            mov     ((_main_v_1_196 + 0x0004) + 1),r3
0F35 8C26      3502            mov     ((_main_v_1_196 + 0x0004) + 2),r4
0F37 8D27      3503            mov     ((_main_v_1_196 + 0x0004) + 3),r5
0F39           3504   ;        EFM8_JDY40_test.c:932: automaticmode(v[0], v[1]);
0F39 8A20      3505            mov     _automaticmode_PARM_2,r2
0F3B 8B21      3506            mov     (_automaticmode_PARM_2 + 1),r3
0F3D 8C22      3507            mov     (_automaticmode_PARM_2 + 2),r4
0F3F 8D23      3508            mov     (_automaticmode_PARM_2 + 3),r5
0F41 852082    3509            mov     dpl,_main_v_1_196
0F44 852183    3510            mov     dph,(_main_v_1_196 + 1)
0F47 8522F0    3511            mov     b,(_main_v_1_196 + 2)
0F4A E523      3512            mov     a,(_main_v_1_196 + 3)
0F4C 120000    3513            lcall   _automaticmode
0F4F           3514   ;        EFM8_JDY40_test.c:933: printf("michelle and xinyi sitting in a tree\n\r");
0F4F 74B0      3515            mov     a,#__str_21
0F51 C0E0      3516            push    acc
0F53 74EA      3517            mov     a,#(__str_21 >> 8)
0F55 C0E0      3518            push    acc
0F57 7480      3519            mov     a,#0x80
0F59 C0E0      3520            push    acc
0F5B 120000    3521            lcall   _printf
0F5E 1581      3522            dec     sp
0F60 1581      3523            dec     sp
0F62 1581      3524            dec     sp
0F64           3525   ;        EFM8_JDY40_test.c:935: if(RXU1())
0F64 120000    3526            lcall   _RXU1
0F67 5000      3527            jnc     L035008?
0F69           3528   ;        EFM8_JDY40_test.c:937: getstr1(buff, sizeof(buff));
0F69 754014    3529            mov     _getstr1_PARM_2,#0x14
0F6C 904CD0    3530            mov     dptr,#_buff
0F6F 75F040    3531            mov     b,#0x40
0F72 120000    3532            lcall   _getstr1
0F75           3533   ;        EFM8_JDY40_test.c:938: if (strcmp(buff, "A") == 0 ) break;
0F75 750070    3534            mov     _strcmp_PARM_2,#__str_20
0F78 7501E9    3535            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
0F7B 750280    3536            mov     (_strcmp_PARM_2 + 2),#0x80
0F7E 904CD0    3537            mov     dptr,#_buff
0F81 75F040    3538            mov     b,#0x40
0F84 120000    3539            lcall   _strcmp
0F87 E582      3540            mov     a,dpl
0F89 8583F0    3541            mov     b,dph
0F8C 45F0      3542            orl     a,b
0F8E 6000      3543            jz      L035042?
0F90 020000    3544            ljmp    L035008?
0F93           3545   L035042?:
0F93           3546   L035011?:
0F93           3547   ;        EFM8_JDY40_test.c:946: sscanf(buff, "S%dT%d", &speed, &steering);
0F93 7440      3548            mov     a,#_main_steering_1_196
0F95 C0E0      3549            push    acc
0F97 74C0      3550            mov     a,#(_main_steering_1_196 >> 8)
0F99 C0E0      3551            push    acc
0F9B 7440      3552            mov     a,#0x40
0F9D C0E0      3553            push    acc
0F9F 74F0      3554            mov     a,#_main_speed_1_196
0FA1 C0E0      3555            push    acc
0FA3 74BF      3556            mov     a,#(_main_speed_1_196 >> 8)
0FA5 C0E0      3557            push    acc
0FA7 7440      3558            mov     a,#0x40
0FA9 C0E0      3559            push    acc
0FAB 7430      3560            mov     a,#__str_22
0FAD C0E0      3561            push    acc
0FAF 74EB      3562            mov     a,#(__str_22 >> 8)
0FB1 C0E0      3563            push    acc
0FB3 7480      3564            mov     a,#0x80
0FB5 C0E0      3565            push    acc
0FB7 74D0      3566            mov     a,#_buff
0FB9 C0E0      3567            push    acc
0FBB 744C      3568            mov     a,#(_buff >> 8)
0FBD C0E0      3569            push    acc
0FBF 7440      3570            mov     a,#0x40
0FC1 C0E0      3571            push    acc
0FC3 120000    3572            lcall   _sscanf
0FC6 E581      3573            mov     a,sp
0FC8 24F4      3574            add     a,#0xf4
0FCA F581      3575            mov     sp,a
0FCC           3576   ;        EFM8_JDY40_test.c:948: if (speed < 503 )
0FCC C3        3577            clr     c
0FCD E5F0      3578            mov     a,_main_speed_1_196
0FCF 94F7      3579            subb    a,#0xF7
0FD1 E5F1      3580            mov     a,(_main_speed_1_196 + 1)
0FD3 6480      3581            xrl     a,#0x80
0FD5 9481      3582            subb    a,#0x81
0FD7 5000      3583            jnc     L035013?
0FD9           3584   ;        EFM8_JDY40_test.c:950: P2_5 = 0;
0FD9 C2A5      3585            clr     _P2_5
0FDB           3586   ;        EFM8_JDY40_test.c:951: P3_7=0;
0FDB C2B7      3587            clr     _P3_7
0FDD           3588   ;        EFM8_JDY40_test.c:952: direction = 1;
0FDD 750001    3589            mov     _direction,#0x01
0FE0 E4        3590            clr     a
0FE1 F501      3591            mov     (_direction + 1),a
0FE3 8000      3592            sjmp    L035014?
0FE5           3593   L035013?:
0FE5           3594   ;        EFM8_JDY40_test.c:956: P3_2=0;
0FE5 C2B2      3595            clr     _P3_2
0FE7           3596   ;        EFM8_JDY40_test.c:957: P3_0=0;
0FE7 C2B0      3597            clr     _P3_0
0FE9           3598   ;        EFM8_JDY40_test.c:958: direction = 0;
0FE9 E4        3599            clr     a
0FEA F500      3600            mov     _direction,a
0FEC F501      3601            mov     (_direction + 1),a
0FEE           3602   L035014?:
0FEE           3603   ;        EFM8_JDY40_test.c:961: ADCsteeringRatio(speed, steering, &adcwheel1, &adcwheel2);
0FEE 75B090    3604            mov     _ADCsteeringRatio_PARM_3,#_main_adcwheel1_1_196
0FF1 75B100    3605            mov     (_ADCsteeringRatio_PARM_3 + 1),#0x00
0FF4 75B240    3606            mov     (_ADCsteeringRatio_PARM_3 + 2),#0x40
0FF7 7560E0    3607            mov     _ADCsteeringRatio_PARM_4,#_main_adcwheel2_1_196
0FFA 756100    3608            mov     (_ADCsteeringRatio_PARM_4 + 1),#0x00
0FFD 756240    3609            mov     (_ADCsteeringRatio_PARM_4 + 2),#0x40
1000 854000    3610            mov     _ADCsteeringRatio_PARM_2,_main_steering_1_196
1003 854101    3611            mov     (_ADCsteeringRatio_PARM_2 + 1),(_main_steering_1_196 + 1)
1006 85F082    3612            mov     dpl,_main_speed_1_196
1009 85F183    3613            mov     dph,(_main_speed_1_196 + 1)
100C 120000    3614            lcall   _ADCsteeringRatio
100F           3615   ;        EFM8_JDY40_test.c:963: pwm_duty4 = ADCtoPWM(adcwheel1);
100F 859082    3616            mov     dpl,_main_adcwheel1_1_196
1012 859183    3617            mov     dph,(_main_adcwheel1_1_196 + 1)
1015 120000    3618            lcall   _ADCtoPWM
1018 8582C0    3619            mov     _pwm_duty4,dpl
101B 8583C1    3620            mov     (_pwm_duty4 + 1),dph
101E           3621   ;        EFM8_JDY40_test.c:964: pwm_duty2 = ADCtoPWM(adcwheel2);
101E 85E082    3622            mov     dpl,_main_adcwheel2_1_196
1021 85E183    3623            mov     dph,(_main_adcwheel2_1_196 + 1)
1024 120000    3624            lcall   _ADCtoPWM
1027 858240    3625            mov     _pwm_duty2,dpl
102A 858341    3626            mov     (_pwm_duty2 + 1),dph
102D           3627   ;        EFM8_JDY40_test.c:966: printf("pwm_duty4 = %u pwm_duty3 = %u adcwheel1=%u adcwheel2=%u speed = %d steering = %d", pwm_duty4, pwm_duty2, adcwheel1, adcwheel2, speed, steering);
102D C040      3628            push    _main_steering_1_196
102F C041      3629            push    (_main_steering_1_196 + 1)
1031 C0F0      3630            push    _main_speed_1_196
1033 C0F1      3631            push    (_main_speed_1_196 + 1)
1035 C0E0      3632            push    _main_adcwheel2_1_196
1037 C0E1      3633            push    (_main_adcwheel2_1_196 + 1)
1039 C090      3634            push    _main_adcwheel1_1_196
103B C091      3635            push    (_main_adcwheel1_1_196 + 1)
103D C040      3636            push    _pwm_duty2
103F C041      3637            push    (_pwm_duty2 + 1)
1041 C0C0      3638            push    _pwm_duty4
1043 C0C1      3639            push    (_pwm_duty4 + 1)
1045 7430      3640            mov     a,#__str_23
1047 C0E0      3641            push    acc
1049 74EC      3642            mov     a,#(__str_23 >> 8)
104B C0E0      3643            push    acc
104D 7480      3644            mov     a,#0x80
104F C0E0      3645            push    acc
1051 120000    3646            lcall   _printf
1054 E581      3647            mov     a,sp
1056 24F1      3648            add     a,#0xf1
1058 F581      3649            mov     sp,a
105A           3650   ;        EFM8_JDY40_test.c:968: waitms(5); // The radio seems to need this delay...
105A 900005    3651            mov     dptr,#0x0005
105D 120000    3652            lcall   _waitms
1060           3653   L035016?:
1060           3654   ;        EFM8_JDY40_test.c:972: eputs("\n");
1060 90EC70    3655            mov     dptr,#__str_24
1063 75F080    3656            mov     b,#0x80
1066 120000    3657            lcall   _eputs
1069 020000    3658            ljmp    L035018?
106C           3659            rseg R_CSEG
106C           3660   
0000           3661            rseg R_XINIT
0000           3662   
0000           3663            rseg R_CONST
0000           3664   _customSparkle:
0000 04        3665            db 0x04         ; 4
0001 04        3666            db 0x04         ; 4
0002 0A        3667            db 0x0a         ; 10
0003 11        3668            db 0x11         ; 17
0004 0A        3669            db 0x0a         ; 10
0005 04        3670            db 0x04         ; 4
0006 04        3671            db 0x04         ; 4
0007 00        3672            db 0x00         ; 0
0008           3673   __str_0:
0008 436F6D6D  3674            db 'Command: %s'
     616E643A
     202573
0013 00        3675            db 0x00
0014           3676   __str_1:
0014 52657370  3677            db 'Response: %s'
     6F6E7365
     3A202573
0020 0D        3678            db 0x0D
0021 0A        3679            db 0x0A
0022 00        3680            db 0x00
0023           3681   __str_2:
0023 41542B44  3682            db 'AT+DVID0000'
     56494430
     303030
002E 0D        3683            db 0x0D
002F 0A        3684            db 0x0A
0030 00        3685            db 0x00
0031           3686   _PrintNumber_HexDigit_1_163:
0031 30313233  3687            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0041 00        3688            db 0x00
0042           3689   __str_4:
0042 2066      3690            db ' f'
0044 00        3691            db 0x00
0045           3692   __str_5:
0045 203D20    3693            db ' = '
0048 00        3694            db 0x00
0049           3695   __str_6:
0049 487A      3696            db 'Hz'
004B 00        3697            db 0x00
004C           3698   __str_7:
004C 2044494D  3699            db ' DIME'
     45
0051 00        3700            db 0x00
0052           3701   __str_8:
0052 204E4943  3702            db ' NICKEL'
     4B454C
0059 00        3703            db 0x00
005A           3704   __str_9:
005A 204C4F4F  3705            db ' LOONIE'
     4E4945
0061 00        3706            db 0x00
0062           3707   __str_10:
0062 0D        3708            db 0x0D
0063 0A        3709            db 0x0A
0064 45464D38  3710            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
007F 0D        3711            db 0x0D
0080 0A        3712            db 0x0A
0081 00        3713            db 0x00
0082           3714   __str_11:
0082 41542B56  3715            db 'AT+VER'
     4552
0088 0D        3716            db 0x0D
0089 0A        3717            db 0x0A
008A 00        3718            db 0x00
008B           3719   __str_12:
008B 41542B42  3720            db 'AT+BAUD'
     415544
0092 0D        3721            db 0x0D
0093 0A        3722            db 0x0A
0094 00        3723            db 0x00
0095           3724   __str_13:
0095 41542B52  3725            db 'AT+RFID'
     464944
009C 0D        3726            db 0x0D
009D 0A        3727            db 0x0A
009E 00        3728            db 0x00
009F           3729   __str_14:
009F 41542B44  3730            db 'AT+DVID'
     564944
00A6 0D        3731            db 0x0D
00A7 0A        3732            db 0x0A
00A8 00        3733            db 0x00
00A9           3734   __str_15:
00A9 41542B52  3735            db 'AT+RFC120'
     46433132
     30
00B2 0D        3736            db 0x0D
00B3 0A        3737            db 0x0A
00B4 00        3738            db 0x00
00B5           3739   __str_16:
00B5 41542B50  3740            db 'AT+POWE'
     4F5745
00BC 0D        3741            db 0x0D
00BD 0A        3742            db 0x0A
00BE 00        3743            db 0x00
00BF           3744   __str_17:
00BF 41542B43  3745            db 'AT+CLSS'
     4C5353
00C6 0D        3746            db 0x0D
00C7 0A        3747            db 0x0A
00C8 00        3748            db 0x00
00C9           3749   __str_18:
00C9 41542B44  3750            db 'AT+DVIDFFFF'
     56494446
     464646
00D4 0D        3751            db 0x0D
00D5 0A        3752            db 0x0A
00D6 00        3753            db 0x00
00D7           3754   __str_19:
00D7 256C64    3755            db '%ld'
00DA 00        3756            db 0x00
00DB           3757   __str_20:
00DB 41        3758            db 'A'
00DC 00        3759            db 0x00
00DD           3760   __str_21:
00DD 6D696368  3761            db 'michelle and xinyi sitting in a tree'
     656C6C65
     20616E64
     2078696E
     79692073
     69747469
     6E672069
     6E206120
     74726565
0101 0A        3762            db 0x0A
0102 0D        3763            db 0x0D
0103 00        3764            db 0x00
0104           3765   __str_22:
0104 53256454  3766            db 'S%dT%d'
     2564
010A 00        3767            db 0x00
010B           3768   __str_23:
010B 70776D5F  3769            db 'pwm_duty4 = %u pwm_duty3 = %u adcwheel1=%u adcwheel2=%u spee'
     64757479
     34203D20
     25752070
     776D5F64
     75747933
     203D2025
     75206164
     63776865
     656C313D
     25752061
     64637768
     65656C32
     3D257520
     73706565
0147 64203D20  3770            db 'd = %d steering = %d'
     25642073
     74656572
     696E6720
     3D202564
015B 00        3771            db 0x00
015C           3772   __str_24:
015C 0A        3773            db 0x0A
015D 00        3774            db 0x00
015E           3775   
008E           3776            CSEG
008E           3777   
008E           3778   end
