0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 13:25:18 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_160
0000             28            public _main
0000             29            public _CoinDecider
0000             30            public _GetFrequency
0000             31            public _PrintNumber
0000             32            public _eputs
0000             33            public _GetPeriod
0000             34            public _ADCsteeringRatio
0000             35            public _ADCtoPWM
0000             36            public _Timer2_ISR
0000             37            public _Timer4_ISR
0000             38            public _Volts_at_Pin
0000             39            public _ADC_at_Pin
0000             40            public _InitPinADC
0000             41            public _InitADC
0000             42            public _TIMER0_Init
0000             43            public _ReceptionOff
0000             44            public _SendATCommand
0000             45            public _waitms_or_RI1
0000             46            public _RXU1
0000             47            public _getstr1
0000             48            public _getchar1_with_timeout
0000             49            public _getchar1
0000             50            public _sendstr1
0000             51            public _putchar1
0000             52            public _UART1_Init
0000             53            public _waitms
0000             54            public _Timer3us
0000             55            public __c51_external_startup
0000             56            public _msg
0000             57            public _buff
0000             58            public _GetFrequency_PARM_2
0000             59            public _PrintNumber_PARM_3
0000             60            public _PrintNumber_PARM_2
0000             61            public _ADCsteeringRatio_PARM_4
0000             62            public _ADCsteeringRatio_PARM_3
0000             63            public _ADCsteeringRatio_PARM_2
0000             64            public _getstr1_PARM_2
0000             65            public _overflow_count
0000             66            public _direction
0000             67            public _pwm_duty2
0000             68            public _pwm_counter2
0000             69            public _pwm_duty4
0000             70            public _pwm_counter4
0000             71   ;--------------------------------------------------------
0000             72   ; Special Function Registers
0000             73   ;--------------------------------------------------------
0000             74   _ACC            DATA 0xe0
0000             75   _ADC0ASAH       DATA 0xb6
0000             76   _ADC0ASAL       DATA 0xb5
0000             77   _ADC0ASCF       DATA 0xa1
0000             78   _ADC0ASCT       DATA 0xc7
0000             79   _ADC0CF0        DATA 0xbc
0000             80   _ADC0CF1        DATA 0xb9
0000             81   _ADC0CF2        DATA 0xdf
0000             82   _ADC0CN0        DATA 0xe8
0000             83   _ADC0CN1        DATA 0xb2
0000             84   _ADC0CN2        DATA 0xb3
0000             85   _ADC0GTH        DATA 0xc4
0000             86   _ADC0GTL        DATA 0xc3
0000             87   _ADC0H          DATA 0xbe
0000             88   _ADC0L          DATA 0xbd
0000             89   _ADC0LTH        DATA 0xc6
0000             90   _ADC0LTL        DATA 0xc5
0000             91   _ADC0MX         DATA 0xbb
0000             92   _B              DATA 0xf0
0000             93   _CKCON0         DATA 0x8e
0000             94   _CKCON1         DATA 0xa6
0000             95   _CLEN0          DATA 0xc6
0000             96   _CLIE0          DATA 0xc7
0000             97   _CLIF0          DATA 0xe8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _CLOUT0         DATA 0xd1
0000            100   _CLU0CF         DATA 0xb1
0000            101   _CLU0FN         DATA 0xaf
0000            102   _CLU0MX         DATA 0x84
0000            103   _CLU1CF         DATA 0xb3
0000            104   _CLU1FN         DATA 0xb2
0000            105   _CLU1MX         DATA 0x85
0000            106   _CLU2CF         DATA 0xb6
0000            107   _CLU2FN         DATA 0xb5
0000            108   _CLU2MX         DATA 0x91
0000            109   _CLU3CF         DATA 0xbf
0000            110   _CLU3FN         DATA 0xbe
0000            111   _CLU3MX         DATA 0xae
0000            112   _CMP0CN0        DATA 0x9b
0000            113   _CMP0CN1        DATA 0x99
0000            114   _CMP0MD         DATA 0x9d
0000            115   _CMP0MX         DATA 0x9f
0000            116   _CMP1CN0        DATA 0xbf
0000            117   _CMP1CN1        DATA 0xac
0000            118   _CMP1MD         DATA 0xab
0000            119   _CMP1MX         DATA 0xaa
0000            120   _CRC0CN0        DATA 0xce
0000            121   _CRC0CN1        DATA 0x86
0000            122   _CRC0CNT        DATA 0xd3
0000            123   _CRC0DAT        DATA 0xcb
0000            124   _CRC0FLIP       DATA 0xcf
0000            125   _CRC0IN         DATA 0xca
0000            126   _CRC0ST         DATA 0xd2
0000            127   _DAC0CF0        DATA 0x91
0000            128   _DAC0CF1        DATA 0x92
0000            129   _DAC0H          DATA 0x85
0000            130   _DAC0L          DATA 0x84
0000            131   _DAC1CF0        DATA 0x93
0000            132   _DAC1CF1        DATA 0x94
0000            133   _DAC1H          DATA 0x8a
0000            134   _DAC1L          DATA 0x89
0000            135   _DAC2CF0        DATA 0x95
0000            136   _DAC2CF1        DATA 0x96
0000            137   _DAC2H          DATA 0x8c
0000            138   _DAC2L          DATA 0x8b
0000            139   _DAC3CF0        DATA 0x9a
0000            140   _DAC3CF1        DATA 0x9c
0000            141   _DAC3H          DATA 0x8e
0000            142   _DAC3L          DATA 0x8d
0000            143   _DACGCF0        DATA 0x88
0000            144   _DACGCF1        DATA 0x98
0000            145   _DACGCF2        DATA 0xa2
0000            146   _DERIVID        DATA 0xad
0000            147   _DEVICEID       DATA 0xb5
0000            148   _DPH            DATA 0x83
0000            149   _DPL            DATA 0x82
0000            150   _EIE1           DATA 0xe6
0000            151   _EIE2           DATA 0xf3
0000            152   _EIP1           DATA 0xbb
0000            153   _EIP1H          DATA 0xee
0000            154   _EIP2           DATA 0xed
0000            155   _EIP2H          DATA 0xf6
0000            156   _EMI0CN         DATA 0xe7
0000            157   _FLKEY          DATA 0xb7
0000            158   _HFO0CAL        DATA 0xc7
0000            159   _HFO1CAL        DATA 0xd6
0000            160   _HFOCN          DATA 0xef
0000            161   _I2C0ADM        DATA 0xff
0000            162   _I2C0CN0        DATA 0xba
0000            163   _I2C0DIN        DATA 0xbc
0000            164   _I2C0DOUT       DATA 0xbb
0000            165   _I2C0FCN0       DATA 0xad
0000            166   _I2C0FCN1       DATA 0xab
0000            167   _I2C0FCT        DATA 0xf5
0000            168   _I2C0SLAD       DATA 0xbd
0000            169   _I2C0STAT       DATA 0xb9
0000            170   _IE             DATA 0xa8
0000            171   _IP             DATA 0xb8
0000            172   _IPH            DATA 0xf2
0000            173   _IT01CF         DATA 0xe4
0000            174   _LFO0CN         DATA 0xb1
0000            175   _P0             DATA 0x80
0000            176   _P0MASK         DATA 0xfe
0000            177   _P0MAT          DATA 0xfd
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P0MDOUT        DATA 0xa4
0000            180   _P0SKIP         DATA 0xd4
0000            181   _P1             DATA 0x90
0000            182   _P1MASK         DATA 0xee
0000            183   _P1MAT          DATA 0xed
0000            184   _P1MDIN         DATA 0xf2
0000            185   _P1MDOUT        DATA 0xa5
0000            186   _P1SKIP         DATA 0xd5
0000            187   _P2             DATA 0xa0
0000            188   _P2MASK         DATA 0xfc
0000            189   _P2MAT          DATA 0xfb
0000            190   _P2MDIN         DATA 0xf3
0000            191   _P2MDOUT        DATA 0xa6
0000            192   _P2SKIP         DATA 0xcc
0000            193   _P3             DATA 0xb0
0000            194   _P3MDIN         DATA 0xf4
0000            195   _P3MDOUT        DATA 0x9c
0000            196   _PCA0CENT       DATA 0x9e
0000            197   _PCA0CLR        DATA 0x9c
0000            198   _PCA0CN0        DATA 0xd8
0000            199   _PCA0CPH0       DATA 0xfc
0000            200   _PCA0CPH1       DATA 0xea
0000            201   _PCA0CPH2       DATA 0xec
0000            202   _PCA0CPH3       DATA 0xf5
0000            203   _PCA0CPH4       DATA 0x85
0000            204   _PCA0CPH5       DATA 0xde
0000            205   _PCA0CPL0       DATA 0xfb
0000            206   _PCA0CPL1       DATA 0xe9
0000            207   _PCA0CPL2       DATA 0xeb
0000            208   _PCA0CPL3       DATA 0xf4
0000            209   _PCA0CPL4       DATA 0x84
0000            210   _PCA0CPL5       DATA 0xdd
0000            211   _PCA0CPM0       DATA 0xda
0000            212   _PCA0CPM1       DATA 0xdb
0000            213   _PCA0CPM2       DATA 0xdc
0000            214   _PCA0CPM3       DATA 0xae
0000            215   _PCA0CPM4       DATA 0xaf
0000            216   _PCA0CPM5       DATA 0xcc
0000            217   _PCA0H          DATA 0xfa
0000            218   _PCA0L          DATA 0xf9
0000            219   _PCA0MD         DATA 0xd9
0000            220   _PCA0POL        DATA 0x96
0000            221   _PCA0PWM        DATA 0xf7
0000            222   _PCON0          DATA 0x87
0000            223   _PCON1          DATA 0xcd
0000            224   _PFE0CN         DATA 0xc1
0000            225   _PRTDRV         DATA 0xf6
0000            226   _PSCTL          DATA 0x8f
0000            227   _PSTAT0         DATA 0xaa
0000            228   _PSW            DATA 0xd0
0000            229   _REF0CN         DATA 0xd1
0000            230   _REG0CN         DATA 0xc9
0000            231   _REVID          DATA 0xb6
0000            232   _RSTSRC         DATA 0xef
0000            233   _SBCON1         DATA 0x94
0000            234   _SBRLH1         DATA 0x96
0000            235   _SBRLL1         DATA 0x95
0000            236   _SBUF           DATA 0x99
0000            237   _SBUF0          DATA 0x99
0000            238   _SBUF1          DATA 0x92
0000            239   _SCON           DATA 0x98
0000            240   _SCON0          DATA 0x98
0000            241   _SCON1          DATA 0xc8
0000            242   _SFRPAGE        DATA 0xa7
0000            243   _SFRPGCN        DATA 0xbc
0000            244   _SFRSTACK       DATA 0xd7
0000            245   _SMB0ADM        DATA 0xd6
0000            246   _SMB0ADR        DATA 0xd7
0000            247   _SMB0CF         DATA 0xc1
0000            248   _SMB0CN0        DATA 0xc0
0000            249   _SMB0DAT        DATA 0xc2
0000            250   _SMB0FCN0       DATA 0xc3
0000            251   _SMB0FCN1       DATA 0xc4
0000            252   _SMB0FCT        DATA 0xef
0000            253   _SMB0RXLN       DATA 0xc5
0000            254   _SMB0TC         DATA 0xac
0000            255   _SMOD1          DATA 0x93
0000            256   _SP             DATA 0x81
0000            257   _SPI0CFG        DATA 0xa1
0000            258   _SPI0CKR        DATA 0xa2
0000            259   _SPI0CN0        DATA 0xf8
0000            260   _SPI0DAT        DATA 0xa3
0000            261   _SPI0FCN0       DATA 0x9a
0000            262   _SPI0FCN1       DATA 0x9b
0000            263   _SPI0FCT        DATA 0xf7
0000            264   _SPI0PCF        DATA 0xdf
0000            265   _TCON           DATA 0x88
0000            266   _TH0            DATA 0x8c
0000            267   _TH1            DATA 0x8d
0000            268   _TL0            DATA 0x8a
0000            269   _TL1            DATA 0x8b
0000            270   _TMOD           DATA 0x89
0000            271   _TMR2CN0        DATA 0xc8
0000            272   _TMR2CN1        DATA 0xfd
0000            273   _TMR2H          DATA 0xcf
0000            274   _TMR2L          DATA 0xce
0000            275   _TMR2RLH        DATA 0xcb
0000            276   _TMR2RLL        DATA 0xca
0000            277   _TMR3CN0        DATA 0x91
0000            278   _TMR3CN1        DATA 0xfe
0000            279   _TMR3H          DATA 0x95
0000            280   _TMR3L          DATA 0x94
0000            281   _TMR3RLH        DATA 0x93
0000            282   _TMR3RLL        DATA 0x92
0000            283   _TMR4CN0        DATA 0x98
0000            284   _TMR4CN1        DATA 0xff
0000            285   _TMR4H          DATA 0xa5
0000            286   _TMR4L          DATA 0xa4
0000            287   _TMR4RLH        DATA 0xa3
0000            288   _TMR4RLL        DATA 0xa2
0000            289   _TMR5CN0        DATA 0xc0
0000            290   _TMR5CN1        DATA 0xf1
0000            291   _TMR5H          DATA 0xd5
0000            292   _TMR5L          DATA 0xd4
0000            293   _TMR5RLH        DATA 0xd3
0000            294   _TMR5RLL        DATA 0xd2
0000            295   _UART0PCF       DATA 0xd9
0000            296   _UART1FCN0      DATA 0x9d
0000            297   _UART1FCN1      DATA 0xd8
0000            298   _UART1FCT       DATA 0xfa
0000            299   _UART1LIN       DATA 0x9e
0000            300   _UART1PCF       DATA 0xda
0000            301   _VDM0CN         DATA 0xff
0000            302   _WDTCN          DATA 0x97
0000            303   _XBR0           DATA 0xe1
0000            304   _XBR1           DATA 0xe2
0000            305   _XBR2           DATA 0xe3
0000            306   _XOSC0CN        DATA 0x86
0000            307   _DPTR           DATA 0x8382
0000            308   _TMR2RL         DATA 0xcbca
0000            309   _TMR3RL         DATA 0x9392
0000            310   _TMR4RL         DATA 0xa3a2
0000            311   _TMR5RL         DATA 0xd3d2
0000            312   _TMR0           DATA 0x8c8a
0000            313   _TMR1           DATA 0x8d8b
0000            314   _TMR2           DATA 0xcfce
0000            315   _TMR3           DATA 0x9594
0000            316   _TMR4           DATA 0xa5a4
0000            317   _TMR5           DATA 0xd5d4
0000            318   _SBRL1          DATA 0x9695
0000            319   _PCA0           DATA 0xfaf9
0000            320   _PCA0CP0        DATA 0xfcfb
0000            321   _PCA0CP1        DATA 0xeae9
0000            322   _PCA0CP2        DATA 0xeceb
0000            323   _PCA0CP3        DATA 0xf5f4
0000            324   _PCA0CP4        DATA 0x8584
0000            325   _PCA0CP5        DATA 0xdedd
0000            326   _ADC0ASA        DATA 0xb6b5
0000            327   _ADC0GT         DATA 0xc4c3
0000            328   _ADC0           DATA 0xbebd
0000            329   _ADC0LT         DATA 0xc6c5
0000            330   _DAC0           DATA 0x8584
0000            331   _DAC1           DATA 0x8a89
0000            332   _DAC2           DATA 0x8c8b
0000            333   _DAC3           DATA 0x8e8d
0000            334   ;--------------------------------------------------------
0000            335   ; special function bits
0000            336   ;--------------------------------------------------------
0000            337   _ACC_0          BIT 0xe0
0000            338   _ACC_1          BIT 0xe1
0000            339   _ACC_2          BIT 0xe2
0000            340   _ACC_3          BIT 0xe3
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_5          BIT 0xe5
0000            343   _ACC_6          BIT 0xe6
0000            344   _ACC_7          BIT 0xe7
0000            345   _TEMPE          BIT 0xe8
0000            346   _ADGN0          BIT 0xe9
0000            347   _ADGN1          BIT 0xea
0000            348   _ADWINT         BIT 0xeb
0000            349   _ADBUSY         BIT 0xec
0000            350   _ADINT          BIT 0xed
0000            351   _IPOEN          BIT 0xee
0000            352   _ADEN           BIT 0xef
0000            353   _B_0            BIT 0xf0
0000            354   _B_1            BIT 0xf1
0000            355   _B_2            BIT 0xf2
0000            356   _B_3            BIT 0xf3
0000            357   _B_4            BIT 0xf4
0000            358   _B_5            BIT 0xf5
0000            359   _B_6            BIT 0xf6
0000            360   _B_7            BIT 0xf7
0000            361   _C0FIF          BIT 0xe8
0000            362   _C0RIF          BIT 0xe9
0000            363   _C1FIF          BIT 0xea
0000            364   _C1RIF          BIT 0xeb
0000            365   _C2FIF          BIT 0xec
0000            366   _C2RIF          BIT 0xed
0000            367   _C3FIF          BIT 0xee
0000            368   _C3RIF          BIT 0xef
0000            369   _D1SRC0         BIT 0x88
0000            370   _D1SRC1         BIT 0x89
0000            371   _D1AMEN         BIT 0x8a
0000            372   _D01REFSL       BIT 0x8b
0000            373   _D3SRC0         BIT 0x8c
0000            374   _D3SRC1         BIT 0x8d
0000            375   _D3AMEN         BIT 0x8e
0000            376   _D23REFSL       BIT 0x8f
0000            377   _D0UDIS         BIT 0x98
0000            378   _D1UDIS         BIT 0x99
0000            379   _D2UDIS         BIT 0x9a
0000            380   _D3UDIS         BIT 0x9b
0000            381   _EX0            BIT 0xa8
0000            382   _ET0            BIT 0xa9
0000            383   _EX1            BIT 0xaa
0000            384   _ET1            BIT 0xab
0000            385   _ES0            BIT 0xac
0000            386   _ET2            BIT 0xad
0000            387   _ESPI0          BIT 0xae
0000            388   _EA             BIT 0xaf
0000            389   _PX0            BIT 0xb8
0000            390   _PT0            BIT 0xb9
0000            391   _PX1            BIT 0xba
0000            392   _PT1            BIT 0xbb
0000            393   _PS0            BIT 0xbc
0000            394   _PT2            BIT 0xbd
0000            395   _PSPI0          BIT 0xbe
0000            396   _P0_0           BIT 0x80
0000            397   _P0_1           BIT 0x81
0000            398   _P0_2           BIT 0x82
0000            399   _P0_3           BIT 0x83
0000            400   _P0_4           BIT 0x84
0000            401   _P0_5           BIT 0x85
0000            402   _P0_6           BIT 0x86
0000            403   _P0_7           BIT 0x87
0000            404   _P1_0           BIT 0x90
0000            405   _P1_1           BIT 0x91
0000            406   _P1_2           BIT 0x92
0000            407   _P1_3           BIT 0x93
0000            408   _P1_4           BIT 0x94
0000            409   _P1_5           BIT 0x95
0000            410   _P1_6           BIT 0x96
0000            411   _P1_7           BIT 0x97
0000            412   _P2_0           BIT 0xa0
0000            413   _P2_1           BIT 0xa1
0000            414   _P2_2           BIT 0xa2
0000            415   _P2_3           BIT 0xa3
0000            416   _P2_4           BIT 0xa4
0000            417   _P2_5           BIT 0xa5
0000            418   _P2_6           BIT 0xa6
0000            419   _P3_0           BIT 0xb0
0000            420   _P3_1           BIT 0xb1
0000            421   _P3_2           BIT 0xb2
0000            422   _P3_3           BIT 0xb3
0000            423   _P3_4           BIT 0xb4
0000            424   _P3_7           BIT 0xb7
0000            425   _CCF0           BIT 0xd8
0000            426   _CCF1           BIT 0xd9
0000            427   _CCF2           BIT 0xda
0000            428   _CCF3           BIT 0xdb
0000            429   _CCF4           BIT 0xdc
0000            430   _CCF5           BIT 0xdd
0000            431   _CR             BIT 0xde
0000            432   _CF             BIT 0xdf
0000            433   _PARITY         BIT 0xd0
0000            434   _F1             BIT 0xd1
0000            435   _OV             BIT 0xd2
0000            436   _RS0            BIT 0xd3
0000            437   _RS1            BIT 0xd4
0000            438   _F0             BIT 0xd5
0000            439   _AC             BIT 0xd6
0000            440   _CY             BIT 0xd7
0000            441   _RI             BIT 0x98
0000            442   _TI             BIT 0x99
0000            443   _RB8            BIT 0x9a
0000            444   _TB8            BIT 0x9b
0000            445   _REN            BIT 0x9c
0000            446   _CE             BIT 0x9d
0000            447   _SMODE          BIT 0x9e
0000            448   _RI1            BIT 0xc8
0000            449   _TI1            BIT 0xc9
0000            450   _RBX1           BIT 0xca
0000            451   _TBX1           BIT 0xcb
0000            452   _REN1           BIT 0xcc
0000            453   _PERR1          BIT 0xcd
0000            454   _OVR1           BIT 0xce
0000            455   _SI             BIT 0xc0
0000            456   _ACK            BIT 0xc1
0000            457   _ARBLOST        BIT 0xc2
0000            458   _ACKRQ          BIT 0xc3
0000            459   _STO            BIT 0xc4
0000            460   _STA            BIT 0xc5
0000            461   _TXMODE         BIT 0xc6
0000            462   _MASTER         BIT 0xc7
0000            463   _SPIEN          BIT 0xf8
0000            464   _TXNF           BIT 0xf9
0000            465   _NSSMD0         BIT 0xfa
0000            466   _NSSMD1         BIT 0xfb
0000            467   _RXOVRN         BIT 0xfc
0000            468   _MODF           BIT 0xfd
0000            469   _WCOL           BIT 0xfe
0000            470   _SPIF           BIT 0xff
0000            471   _IT0            BIT 0x88
0000            472   _IE0            BIT 0x89
0000            473   _IT1            BIT 0x8a
0000            474   _IE1            BIT 0x8b
0000            475   _TR0            BIT 0x8c
0000            476   _TF0            BIT 0x8d
0000            477   _TR1            BIT 0x8e
0000            478   _TF1            BIT 0x8f
0000            479   _T2XCLK0        BIT 0xc8
0000            480   _T2XCLK1        BIT 0xc9
0000            481   _TR2            BIT 0xca
0000            482   _T2SPLIT        BIT 0xcb
0000            483   _TF2CEN         BIT 0xcc
0000            484   _TF2LEN         BIT 0xcd
0000            485   _TF2L           BIT 0xce
0000            486   _TF2H           BIT 0xcf
0000            487   _T4XCLK0        BIT 0x98
0000            488   _T4XCLK1        BIT 0x99
0000            489   _TR4            BIT 0x9a
0000            490   _T4SPLIT        BIT 0x9b
0000            491   _TF4CEN         BIT 0x9c
0000            492   _TF4LEN         BIT 0x9d
0000            493   _TF4L           BIT 0x9e
0000            494   _TF4H           BIT 0x9f
0000            495   _T5XCLK0        BIT 0xc0
0000            496   _T5XCLK1        BIT 0xc1
0000            497   _TR5            BIT 0xc2
0000            498   _T5SPLIT        BIT 0xc3
0000            499   _TF5CEN         BIT 0xc4
0000            500   _TF5LEN         BIT 0xc5
0000            501   _TF5L           BIT 0xc6
0000            502   _TF5H           BIT 0xc7
0000            503   _RIE            BIT 0xd8
0000            504   _RXTO0          BIT 0xd9
0000            505   _RXTO1          BIT 0xda
0000            506   _RFRQ           BIT 0xdb
0000            507   _TIE            BIT 0xdc
0000            508   _TXHOLD         BIT 0xdd
0000            509   _TXNF1          BIT 0xde
0000            510   _TFRQ           BIT 0xdf
0000            511   ;--------------------------------------------------------
0000            512   ; overlayable register banks
0000            513   ;--------------------------------------------------------
0000            514            rbank0 segment data overlay
0000            515   ;--------------------------------------------------------
0000            516   ; internal ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_DSEG
0000            519   _pwm_counter4:
0000            520            ds 2
0002            521   _pwm_duty4:
0002            522            ds 2
0004            523   _pwm_counter2:
0004            524            ds 2
0006            525   _pwm_duty2:
0006            526            ds 2
0008            527   _direction:
0008            528            ds 2
000A            529   _overflow_count:
000A            530            ds 1
000B            531   _getstr1_PARM_2:
000B            532            ds 1
000C            533   _ADCsteeringRatio_PARM_2:
000C            534            ds 2
000E            535   _ADCsteeringRatio_PARM_3:
000E            536            ds 3
0011            537   _ADCsteeringRatio_PARM_4:
0011            538            ds 3
0014            539   _ADCsteeringRatio_steeringFactor_1_141:
0014            540            ds 4
0018            541   _PrintNumber_PARM_2:
0018            542            ds 2
001A            543   _PrintNumber_PARM_3:
001A            544            ds 2
001C            545   _PrintNumber_val_1_159:
001C            546            ds 4
0020            547   _PrintNumber_j_1_160:
0020            548            ds 2
0022            549   _PrintNumber_sloc0_1_0:
0022            550            ds 2
0024            551   _PrintNumber_sloc1_1_0:
0024            552            ds 4
0028            553   _GetFrequency_PARM_2:
0028            554            ds 2
002A            555   _main_speed_1_175:
002A            556            ds 2
002C            557   _main_steering_1_175:
002C            558            ds 2
002E            559   _main_adcwheel1_1_175:
002E            560            ds 2
0030            561   _main_adcwheel2_1_175:
0030            562            ds 2
0032            563   _main_v_1_175:
0032            564            ds 8
003A            565   ;--------------------------------------------------------
003A            566   ; overlayable items in internal ram 
003A            567   ;--------------------------------------------------------
0000            568            rseg    R_OSEG
0000            569            rseg    R_OSEG
0000            570            rseg    R_OSEG
0000            571            rseg    R_OSEG
0000            572   _InitPinADC_PARM_2:
0000            573            ds 1
0001            574            rseg    R_OSEG
0001            575            rseg    R_OSEG
0001            576   ;--------------------------------------------------------
0001            577   ; indirectly addressable internal ram data
0001            578   ;--------------------------------------------------------
0000            579            rseg R_ISEG
0000            580   _buff:
0000            581            ds 20
0014            582   _msg:
0014            583            ds 20
0028            584   ;--------------------------------------------------------
0028            585   ; absolute internal ram data
0028            586   ;--------------------------------------------------------
0000            587            DSEG
0000            588   ;--------------------------------------------------------
0000            589   ; bit data
0000            590   ;--------------------------------------------------------
0000            591            rseg R_BSEG
0000            592   ;--------------------------------------------------------
0000            593   ; paged external ram data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_PSEG
0000            596   ;--------------------------------------------------------
0000            597   ; external ram data
0000            598   ;--------------------------------------------------------
0000            599            rseg R_XSEG
0000            600   _PrintNumber_buff_1_160:
0000            601            ds 33
0021            602   ;--------------------------------------------------------
0021            603   ; absolute external ram data
0021            604   ;--------------------------------------------------------
0000            605            XSEG
0000            606   ;--------------------------------------------------------
0000            607   ; external initialized ram data
0000            608   ;--------------------------------------------------------
0000            609            rseg R_IXSEG
0000            610            rseg R_HOME
0000            611            rseg R_GSINIT
0000            612            rseg R_CSEG
0000            613   ;--------------------------------------------------------
0000            614   ; Reset entry point and interrupt vectors
0000            615   ;--------------------------------------------------------
0000            616            CSEG at 0x0000
0000 020000     617            ljmp    _crt0
002B            618            CSEG at 0x002b
002B 020000     619            ljmp    _Timer2_ISR
008B            620            CSEG at 0x008b
008B 020000     621            ljmp    _Timer4_ISR
008E            622   ;--------------------------------------------------------
008E            623   ; global & static initialisations
008E            624   ;--------------------------------------------------------
0000            625            rseg R_HOME
0000            626            rseg R_GSINIT
0000            627            rseg R_GSINIT
0000            628   ;--------------------------------------------------------
0000            629   ; data variables initialization
0000            630   ;--------------------------------------------------------
0000            631            rseg R_DINIT
0000            632   ;        EFM8_JDY40_test.c:21: volatile unsigned int pwm_counter4=0;
0000 E4         633            clr     a
0001 F5A8       634            mov     _pwm_counter4,a
0003 F5A9       635            mov     (_pwm_counter4 + 1),a
0005            636   ;        EFM8_JDY40_test.c:22: volatile unsigned int pwm_duty4=65535; //(0�65535)
0005 7568FF     637            mov     _pwm_duty4,#0xFF
0008 7569FF     638            mov     (_pwm_duty4 + 1),#0xFF
000B            639   ;        EFM8_JDY40_test.c:28: volatile unsigned int pwm_counter2=0;
000B E4         640            clr     a
000C F528       641            mov     _pwm_counter2,a
000E F529       642            mov     (_pwm_counter2 + 1),a
0010            643   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_duty2=65535; //(0�65535)
0010 75E8FF     644            mov     _pwm_duty2,#0xFF
0013 75E9FF     645            mov     (_pwm_duty2 + 1),#0xFF
0016            646   ;        EFM8_JDY40_test.c:30: volatile int direction=0;
0016 E4         647            clr     a
0017 F5A8       648            mov     _direction,a
0019 F5A9       649            mov     (_direction + 1),a
001B            650            ; The linker places a 'ret' at the end of segment R_DINIT.
001B            651   ;--------------------------------------------------------
001B            652   ; code
001B            653   ;--------------------------------------------------------
0000            654            rseg R_CSEG
0000            655   ;------------------------------------------------------------
0000            656   ;Allocation info for local variables in function '_c51_external_startup'
0000            657   ;------------------------------------------------------------
0000            658   ;------------------------------------------------------------
0000            659   ;        EFM8_JDY40_test.c:42: char _c51_external_startup (void)
0000            660   ;        -----------------------------------------
0000            661   ;         function _c51_external_startup
0000            662   ;        -----------------------------------------
0000            663   __c51_external_startup:
0000            664            using   0
0000            665   ;        EFM8_JDY40_test.c:45: SFRPAGE = 0x00;
0000 75A700     666            mov     _SFRPAGE,#0x00
0003            667   ;        EFM8_JDY40_test.c:46: WDTCN = 0xDE; //First key
0003 7597DE     668            mov     _WDTCN,#0xDE
0006            669   ;        EFM8_JDY40_test.c:47: WDTCN = 0xAD; //Second key
0006 7597AD     670            mov     _WDTCN,#0xAD
0009            671   ;        EFM8_JDY40_test.c:49: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     672            mov     _VDM0CN,#0x80
000C            673   ;        EFM8_JDY40_test.c:50: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     674            mov     _RSTSRC,#0x06
000F            675   ;        EFM8_JDY40_test.c:57: SFRPAGE = 0x10;
000F 75A710     676            mov     _SFRPAGE,#0x10
0012            677   ;        EFM8_JDY40_test.c:58: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     678            mov     _PFE0CN,#0x20
0015            679   ;        EFM8_JDY40_test.c:59: SFRPAGE = 0x00;
0015 75A700     680            mov     _SFRPAGE,#0x00
0018            681   ;        EFM8_JDY40_test.c:80: CLKSEL = 0x00;
0018 75A900     682            mov     _CLKSEL,#0x00
001B            683   ;        EFM8_JDY40_test.c:81: CLKSEL = 0x00;
001B 75A900     684            mov     _CLKSEL,#0x00
001E            685   ;        EFM8_JDY40_test.c:82: while ((CLKSEL & 0x80) == 0);
001E            686   L002001?:
001E E5A9       687            mov     a,_CLKSEL
0020 30E758     688            jnb     acc.7,L002001?
0023            689   ;        EFM8_JDY40_test.c:83: CLKSEL = 0x03;
0023 75A903     690            mov     _CLKSEL,#0x03
0026            691   ;        EFM8_JDY40_test.c:84: CLKSEL = 0x03;
0026 75A903     692            mov     _CLKSEL,#0x03
0029            693   ;        EFM8_JDY40_test.c:85: while ((CLKSEL & 0x80) == 0);
0029            694   L002004?:
0029 E5A9       695            mov     a,_CLKSEL
002B 30E7D8     696            jnb     acc.7,L002004?
002E            697   ;        EFM8_JDY40_test.c:90: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     698            orl     _P0MDOUT,#0x11
0031            699   ;        EFM8_JDY40_test.c:91: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     700            orl     _P2MDOUT,#0x01
0034            701   ;        EFM8_JDY40_test.c:92: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     702            mov     _XBR0,#0x01
0037            703   ;        EFM8_JDY40_test.c:93: XBR1     = 0X00;
0037 75E200     704            mov     _XBR1,#0x00
003A            705   ;        EFM8_JDY40_test.c:94: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     706            mov     _XBR2,#0x41
003D            707   ;        EFM8_JDY40_test.c:96: P3MDOUT |= 0b10000101;
003D 439C85     708            orl     _P3MDOUT,#0x85
0040            709   ;        EFM8_JDY40_test.c:97: XBR2     = 0x41; // existing line
0040 75E341     710            mov     _XBR2,#0x41
0043            711   ;        EFM8_JDY40_test.c:98: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     712            orl     _P3MDOUT,#0x85
0046            713   ;        EFM8_JDY40_test.c:104: SCON0 = 0x10;
0046 759810     714            mov     _SCON0,#0x10
0049            715   ;        EFM8_JDY40_test.c:105: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     716            mov     _TH1,#0xE6
004C            717   ;        EFM8_JDY40_test.c:106: TL1 = TH1;      // Init Timer1
004C 858D8B     718            mov     _TL1,_TH1
004F            719   ;        EFM8_JDY40_test.c:107: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     720            anl     _TMOD,#0x0F
0052            721   ;        EFM8_JDY40_test.c:108: TMOD |=  0x20;                       
0052 438920     722            orl     _TMOD,#0x20
0055            723   ;        EFM8_JDY40_test.c:109: TR1 = 1; // START Timer1
0055 D28E       724            setb    _TR1
0057            725   ;        EFM8_JDY40_test.c:110: TI = 1;  // Indicate TX0 ready
0057 D299       726            setb    _TI
0059            727   ;        EFM8_JDY40_test.c:114: SFRPAGE=0x10;
0059 75A710     728            mov     _SFRPAGE,#0x10
005C            729   ;        EFM8_JDY40_test.c:115: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     730            mov     _TMR4CN0,#0x00
005F            731   ;        EFM8_JDY40_test.c:116: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     732            orl     _CKCON1,#0x01
0062            733   ;        EFM8_JDY40_test.c:117: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     734            mov     _TMR4RL,#0xA8
0065 75A3FD     735            mov     (_TMR4RL >> 8),#0xFD
0068            736   ;        EFM8_JDY40_test.c:118: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     737            mov     _TMR4,#0xFF
006B 75A5FF     738            mov     (_TMR4 >> 8),#0xFF
006E            739   ;        EFM8_JDY40_test.c:119: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     740            orl     _EIE2,#0x04
0071            741   ;        EFM8_JDY40_test.c:120: TR4=1;
0071 D29A       742            setb    _TR4
0073            743   ;        EFM8_JDY40_test.c:121: EA=1;
0073 D2AF       744            setb    _EA
0075            745   ;        EFM8_JDY40_test.c:124: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     746            mov     _TMR2CN0,#0x00
0078            747   ;        EFM8_JDY40_test.c:125: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     748            orl     _CKCON0,#0x10
007B            749   ;        EFM8_JDY40_test.c:126: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     750            mov     _TMR2RL,#0xA8
007E 75CBFD     751            mov     (_TMR2RL >> 8),#0xFD
0081            752   ;        EFM8_JDY40_test.c:127: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     753            mov     _TMR2,#0xFF
0084 75CFFF     754            mov     (_TMR2 >> 8),#0xFF
0087            755   ;        EFM8_JDY40_test.c:128: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       756            setb    _ET2
0089            757   ;        EFM8_JDY40_test.c:129: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       758            setb    _TR2
008B            759   ;        EFM8_JDY40_test.c:130: SFRPAGE=0x00;
008B 75A700     760            mov     _SFRPAGE,#0x00
008E            761   ;        EFM8_JDY40_test.c:131: return 0;
008E 758200     762            mov     dpl,#0x00
0091 22         763            ret
0092            764   ;------------------------------------------------------------
0092            765   ;Allocation info for local variables in function 'Timer3us'
0092            766   ;------------------------------------------------------------
0092            767   ;us                        Allocated to registers r2 
0092            768   ;i                         Allocated to registers r3 
0092            769   ;------------------------------------------------------------
0092            770   ;        EFM8_JDY40_test.c:135: void Timer3us(unsigned char us)
0092            771   ;        -----------------------------------------
0092            772   ;         function Timer3us
0092            773   ;        -----------------------------------------
0092            774   _Timer3us:
0092 AA82       775            mov     r2,dpl
0094            776   ;        EFM8_JDY40_test.c:140: CKCON0|=0b_0100_0000;
0094 438E40     777            orl     _CKCON0,#0x40
0097            778   ;        EFM8_JDY40_test.c:142: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0097 7592B8     779            mov     _TMR3RL,#0xB8
009A 7593FF     780            mov     (_TMR3RL >> 8),#0xFF
009D            781   ;        EFM8_JDY40_test.c:143: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
009D 859294     782            mov     _TMR3,_TMR3RL
00A0 859395     783            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00A3            784   ;        EFM8_JDY40_test.c:145: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00A3 759104     785            mov     _TMR3CN0,#0x04
00A6            786   ;        EFM8_JDY40_test.c:146: for (i = 0; i < us; i++)       // Count <us> overflows
00A6 7B00       787            mov     r3,#0x00
00A8            788   L003004?:
00A8 C3         789            clr     c
00A9 EB         790            mov     a,r3
00AA 9A         791            subb    a,r2
00AB 5000       792            jnc     L003007?
00AD            793   ;        EFM8_JDY40_test.c:148: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00AD            794   L003001?:
00AD E591       795            mov     a,_TMR3CN0
00AF 30E7D8     796            jnb     acc.7,L003001?
00B2            797   ;        EFM8_JDY40_test.c:149: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00B2 53917F     798            anl     _TMR3CN0,#0x7F
00B5            799   ;        EFM8_JDY40_test.c:146: for (i = 0; i < us; i++)       // Count <us> overflows
00B5 0B         800            inc     r3
00B6 8000       801            sjmp    L003004?
00B8            802   L003007?:
00B8            803   ;        EFM8_JDY40_test.c:151: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00B8 759100     804            mov     _TMR3CN0,#0x00
00BB 22         805            ret
00BC            806   ;------------------------------------------------------------
00BC            807   ;Allocation info for local variables in function 'waitms'
00BC            808   ;------------------------------------------------------------
00BC            809   ;ms                        Allocated to registers r2 r3 
00BC            810   ;j                         Allocated to registers r4 r5 
00BC            811   ;k                         Allocated to registers r6 
00BC            812   ;------------------------------------------------------------
00BC            813   ;        EFM8_JDY40_test.c:154: void waitms (unsigned int ms)
00BC            814   ;        -----------------------------------------
00BC            815   ;         function waitms
00BC            816   ;        -----------------------------------------
00BC            817   _waitms:
00BC AA82       818            mov     r2,dpl
00BE AB83       819            mov     r3,dph
00C0            820   ;        EFM8_JDY40_test.c:158: for(j=0; j<ms; j++)
00C0 7C00       821            mov     r4,#0x00
00C2 7D00       822            mov     r5,#0x00
00C4            823   L004005?:
00C4 C3         824            clr     c
00C5 EC         825            mov     a,r4
00C6 9A         826            subb    a,r2
00C7 ED         827            mov     a,r5
00C8 9B         828            subb    a,r3
00C9 5000       829            jnc     L004009?
00CB            830   ;        EFM8_JDY40_test.c:159: for (k=0; k<4; k++) Timer3us(250);
00CB 7E00       831            mov     r6,#0x00
00CD            832   L004001?:
00CD BE0418     833            cjne    r6,#0x04,L004018?
00D0            834   L004018?:
00D0 5000       835            jnc     L004007?
00D2 7582FA     836            mov     dpl,#0xFA
00D5 C002       837            push    ar2
00D7 C003       838            push    ar3
00D9 C004       839            push    ar4
00DB C005       840            push    ar5
00DD C006       841            push    ar6
00DF 120000     842            lcall   _Timer3us
00E2 D006       843            pop     ar6
00E4 D005       844            pop     ar5
00E6 D004       845            pop     ar4
00E8 D003       846            pop     ar3
00EA D002       847            pop     ar2
00EC 0E         848            inc     r6
00ED 8000       849            sjmp    L004001?
00EF            850   L004007?:
00EF            851   ;        EFM8_JDY40_test.c:158: for(j=0; j<ms; j++)
00EF 0C         852            inc     r4
00F0 BC0058     853            cjne    r4,#0x00,L004005?
00F3 0D         854            inc     r5
00F4 8000       855            sjmp    L004005?
00F6            856   L004009?:
00F6 22         857            ret
00F7            858   ;------------------------------------------------------------
00F7            859   ;Allocation info for local variables in function 'UART1_Init'
00F7            860   ;------------------------------------------------------------
00F7            861   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00F7            862   ;------------------------------------------------------------
00F7            863   ;        EFM8_JDY40_test.c:162: void UART1_Init (unsigned long baudrate)
00F7            864   ;        -----------------------------------------
00F7            865   ;         function UART1_Init
00F7            866   ;        -----------------------------------------
00F7            867   _UART1_Init:
00F7 AA82       868            mov     r2,dpl
00F9 AB83       869            mov     r3,dph
00FB ACF0       870            mov     r4,b
00FD FD         871            mov     r5,a
00FE            872   ;        EFM8_JDY40_test.c:164: SFRPAGE = 0x20;
00FE 75A720     873            mov     _SFRPAGE,#0x20
0101            874   ;        EFM8_JDY40_test.c:165: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0101 75930C     875            mov     _SMOD1,#0x0C
0104            876   ;        EFM8_JDY40_test.c:166: SCON1 = 0x10;
0104 75C810     877            mov     _SCON1,#0x10
0107            878   ;        EFM8_JDY40_test.c:167: SBCON1 =0x00;   // disable baud rate generator
0107 759400     879            mov     _SBCON1,#0x00
010A            880   ;        EFM8_JDY40_test.c:168: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
010A 8A00       881            mov     __divulong_PARM_2,r2
010C 8B01       882            mov     (__divulong_PARM_2 + 1),r3
010E 8C02       883            mov     (__divulong_PARM_2 + 2),r4
0110 8D03       884            mov     (__divulong_PARM_2 + 3),r5
0112 90A200     885            mov     dptr,#0xA200
0115 75F04A     886            mov     b,#0x4A
0118 7404       887            mov     a,#0x04
011A 120000     888            lcall   __divulong
011D AA82       889            mov     r2,dpl
011F AB83       890            mov     r3,dph
0121 ACF0       891            mov     r4,b
0123 FD         892            mov     r5,a
0124 750018     893            mov     __divulong_PARM_2,#0x18
0127 E4         894            clr     a
0128 F501       895            mov     (__divulong_PARM_2 + 1),a
012A F502       896            mov     (__divulong_PARM_2 + 2),a
012C F503       897            mov     (__divulong_PARM_2 + 3),a
012E 8A82       898            mov     dpl,r2
0130 8B83       899            mov     dph,r3
0132 8CF0       900            mov     b,r4
0134 ED         901            mov     a,r5
0135 120000     902            lcall   __divulong
0138 AA82       903            mov     r2,dpl
013A AB83       904            mov     r3,dph
013C ACF0       905            mov     r4,b
013E FD         906            mov     r5,a
013F E4         907            clr     a
0140 C3         908            clr     c
0141 9A         909            subb    a,r2
0142 FA         910            mov     r2,a
0143 E4         911            clr     a
0144 9B         912            subb    a,r3
0145 FB         913            mov     r3,a
0146 7401       914            mov     a,#0x01
0148 9C         915            subb    a,r4
0149 E4         916            clr     a
014A 9D         917            subb    a,r5
014B 8A95       918            mov     _SBRL1,r2
014D 8B96       919            mov     (_SBRL1 >> 8),r3
014F            920   ;        EFM8_JDY40_test.c:169: TI1 = 1; // indicate ready for TX
014F D2C9       921            setb    _TI1
0151            922   ;        EFM8_JDY40_test.c:170: SBCON1 |= 0x40;   // enable baud rate generator
0151 439440     923            orl     _SBCON1,#0x40
0154            924   ;        EFM8_JDY40_test.c:171: SFRPAGE = 0x00;
0154 75A700     925            mov     _SFRPAGE,#0x00
0157 22         926            ret
0158            927   ;------------------------------------------------------------
0158            928   ;Allocation info for local variables in function 'putchar1'
0158            929   ;------------------------------------------------------------
0158            930   ;c                         Allocated to registers r2 
0158            931   ;------------------------------------------------------------
0158            932   ;        EFM8_JDY40_test.c:174: void putchar1 (char c) 
0158            933   ;        -----------------------------------------
0158            934   ;         function putchar1
0158            935   ;        -----------------------------------------
0158            936   _putchar1:
0158 AA82       937            mov     r2,dpl
015A            938   ;        EFM8_JDY40_test.c:176: SFRPAGE = 0x20;
015A 75A720     939            mov     _SFRPAGE,#0x20
015D            940   ;        EFM8_JDY40_test.c:177: while (!TI1);
015D            941   L006001?:
015D            942   ;        EFM8_JDY40_test.c:178: TI1=0;
015D 10C9A8     943            jbc     _TI1,L006008?
0160 8000       944            sjmp    L006001?
0162            945   L006008?:
0162            946   ;        EFM8_JDY40_test.c:179: SBUF1 = c;
0162 8A92       947            mov     _SBUF1,r2
0164            948   ;        EFM8_JDY40_test.c:180: SFRPAGE = 0x00;
0164 75A700     949            mov     _SFRPAGE,#0x00
0167 22         950            ret
0168            951   ;------------------------------------------------------------
0168            952   ;Allocation info for local variables in function 'sendstr1'
0168            953   ;------------------------------------------------------------
0168            954   ;s                         Allocated to registers r2 r3 r4 
0168            955   ;------------------------------------------------------------
0168            956   ;        EFM8_JDY40_test.c:183: void sendstr1 (char * s)
0168            957   ;        -----------------------------------------
0168            958   ;         function sendstr1
0168            959   ;        -----------------------------------------
0168            960   _sendstr1:
0168 AA82       961            mov     r2,dpl
016A AB83       962            mov     r3,dph
016C ACF0       963            mov     r4,b
016E            964   ;        EFM8_JDY40_test.c:185: while(*s)
016E            965   L007001?:
016E 8A82       966            mov     dpl,r2
0170 8B83       967            mov     dph,r3
0172 8CF0       968            mov     b,r4
0174 120000     969            lcall   __gptrget
0177 FD         970            mov     r5,a
0178 6000       971            jz      L007004?
017A            972   ;        EFM8_JDY40_test.c:187: putchar1(*s);
017A 8D82       973            mov     dpl,r5
017C C002       974            push    ar2
017E C003       975            push    ar3
0180 C004       976            push    ar4
0182 120000     977            lcall   _putchar1
0185 D004       978            pop     ar4
0187 D003       979            pop     ar3
0189 D002       980            pop     ar2
018B            981   ;        EFM8_JDY40_test.c:188: s++;     
018B 0A         982            inc     r2
018C BA00E8     983            cjne    r2,#0x00,L007001?
018F 0B         984            inc     r3
0190 8000       985            sjmp    L007001?
0192            986   L007004?:
0192 22         987            ret
0193            988   ;------------------------------------------------------------
0193            989   ;Allocation info for local variables in function 'getchar1'
0193            990   ;------------------------------------------------------------
0193            991   ;c                         Allocated to registers 
0193            992   ;------------------------------------------------------------
0193            993   ;        EFM8_JDY40_test.c:192: char getchar1 (void)
0193            994   ;        -----------------------------------------
0193            995   ;         function getchar1
0193            996   ;        -----------------------------------------
0193            997   _getchar1:
0193            998   ;        EFM8_JDY40_test.c:195: SFRPAGE = 0x20;
0193 75A720     999            mov     _SFRPAGE,#0x20
0196           1000   ;        EFM8_JDY40_test.c:196: while (!RI1);
0196           1001   L008001?:
0196           1002   ;        EFM8_JDY40_test.c:197: RI1=0;
0196 10C8E8    1003            jbc     _RI1,L008008?
0199 8000      1004            sjmp    L008001?
019B           1005   L008008?:
019B           1006   ;        EFM8_JDY40_test.c:199: SCON1&=0b_0011_1111;
019B 53C83F    1007            anl     _SCON1,#0x3F
019E           1008   ;        EFM8_JDY40_test.c:200: c = SBUF1;
019E 859282    1009            mov     dpl,_SBUF1
01A1           1010   ;        EFM8_JDY40_test.c:201: SFRPAGE = 0x00;
01A1 75A700    1011            mov     _SFRPAGE,#0x00
01A4           1012   ;        EFM8_JDY40_test.c:202: return (c);
01A4 22        1013            ret
01A5           1014   ;------------------------------------------------------------
01A5           1015   ;Allocation info for local variables in function 'getchar1_with_timeout'
01A5           1016   ;------------------------------------------------------------
01A5           1017   ;c                         Allocated to registers 
01A5           1018   ;timeout                   Allocated to registers r2 r3 
01A5           1019   ;------------------------------------------------------------
01A5           1020   ;        EFM8_JDY40_test.c:205: char getchar1_with_timeout (void)
01A5           1021   ;        -----------------------------------------
01A5           1022   ;         function getchar1_with_timeout
01A5           1023   ;        -----------------------------------------
01A5           1024   _getchar1_with_timeout:
01A5           1025   ;        EFM8_JDY40_test.c:209: SFRPAGE = 0x20;
01A5 75A720    1026            mov     _SFRPAGE,#0x20
01A8           1027   ;        EFM8_JDY40_test.c:211: while (!RI1)
01A8 7A00      1028            mov     r2,#0x00
01AA 7B00      1029            mov     r3,#0x00
01AC           1030   L009003?:
01AC 20C868    1031            jb      _RI1,L009005?
01AF           1032   ;        EFM8_JDY40_test.c:213: SFRPAGE = 0x00;
01AF 75A700    1033            mov     _SFRPAGE,#0x00
01B2           1034   ;        EFM8_JDY40_test.c:214: Timer3us(20);
01B2 758214    1035            mov     dpl,#0x14
01B5 C002      1036            push    ar2
01B7 C003      1037            push    ar3
01B9 120000    1038            lcall   _Timer3us
01BC D003      1039            pop     ar3
01BE D002      1040            pop     ar2
01C0           1041   ;        EFM8_JDY40_test.c:215: SFRPAGE = 0x20;
01C0 75A720    1042            mov     _SFRPAGE,#0x20
01C3           1043   ;        EFM8_JDY40_test.c:216: timeout++;
01C3 0A        1044            inc     r2
01C4 BA00A8    1045            cjne    r2,#0x00,L009012?
01C7 0B        1046            inc     r3
01C8           1047   L009012?:
01C8           1048   ;        EFM8_JDY40_test.c:217: if(timeout==25000)
01C8 BAA828    1049            cjne    r2,#0xA8,L009003?
01CB BB6128    1050            cjne    r3,#0x61,L009003?
01CE           1051   ;        EFM8_JDY40_test.c:219: SFRPAGE = 0x00;
01CE 75A700    1052            mov     _SFRPAGE,#0x00
01D1           1053   ;        EFM8_JDY40_test.c:220: return ('\n'); // Timeout after half second
01D1 75820A    1054            mov     dpl,#0x0A
01D4 22        1055            ret
01D5           1056   L009005?:
01D5           1057   ;        EFM8_JDY40_test.c:223: RI1=0;
01D5 C2C8      1058            clr     _RI1
01D7           1059   ;        EFM8_JDY40_test.c:225: SCON1&=0b_0011_1111;
01D7 53C83F    1060            anl     _SCON1,#0x3F
01DA           1061   ;        EFM8_JDY40_test.c:226: c = SBUF1;
01DA 859282    1062            mov     dpl,_SBUF1
01DD           1063   ;        EFM8_JDY40_test.c:227: SFRPAGE = 0x00;
01DD 75A700    1064            mov     _SFRPAGE,#0x00
01E0           1065   ;        EFM8_JDY40_test.c:228: return (c);
01E0 22        1066            ret
01E1           1067   ;------------------------------------------------------------
01E1           1068   ;Allocation info for local variables in function 'getstr1'
01E1           1069   ;------------------------------------------------------------
01E1           1070   ;n                         Allocated with name '_getstr1_PARM_2'
01E1           1071   ;s                         Allocated to registers r2 r3 r4 
01E1           1072   ;c                         Allocated to registers r1 
01E1           1073   ;cnt                       Allocated to registers r5 
01E1           1074   ;------------------------------------------------------------
01E1           1075   ;        EFM8_JDY40_test.c:231: void getstr1 (char * s, unsigned char n)
01E1           1076   ;        -----------------------------------------
01E1           1077   ;         function getstr1
01E1           1078   ;        -----------------------------------------
01E1           1079   _getstr1:
01E1 AA82      1080            mov     r2,dpl
01E3 AB83      1081            mov     r3,dph
01E5 ACF0      1082            mov     r4,b
01E7           1083   ;        EFM8_JDY40_test.c:237: while(1)
01E7 7D00      1084            mov     r5,#0x00
01E9 8A06      1085            mov     ar6,r2
01EB 8B07      1086            mov     ar7,r3
01ED 8C00      1087            mov     ar0,r4
01EF           1088   L010007?:
01EF           1089   ;        EFM8_JDY40_test.c:239: c=getchar1_with_timeout();
01EF C002      1090            push    ar2
01F1 C003      1091            push    ar3
01F3 C004      1092            push    ar4
01F5 C005      1093            push    ar5
01F7 C006      1094            push    ar6
01F9 C007      1095            push    ar7
01FB C000      1096            push    ar0
01FD 120000    1097            lcall   _getchar1_with_timeout
0200 A982      1098            mov     r1,dpl
0202 D000      1099            pop     ar0
0204 D007      1100            pop     ar7
0206 D006      1101            pop     ar6
0208 D005      1102            pop     ar5
020A D004      1103            pop     ar4
020C D003      1104            pop     ar3
020E D002      1105            pop     ar2
0210           1106   ;        EFM8_JDY40_test.c:240: if(c=='\n')
0210 B90A28    1107            cjne    r1,#0x0A,L010002?
0213           1108   ;        EFM8_JDY40_test.c:242: *s=0;
0213 8A82      1109            mov     dpl,r2
0215 8B83      1110            mov     dph,r3
0217 8CF0      1111            mov     b,r4
0219 E4        1112            clr     a
021A           1113   ;        EFM8_JDY40_test.c:243: return;
021A 020000    1114            ljmp    __gptrput
021D           1115   L010002?:
021D           1116   ;        EFM8_JDY40_test.c:246: if (cnt<n)
021D C3        1117            clr     c
021E ED        1118            mov     a,r5
021F 9528      1119            subb    a,_getstr1_PARM_2
0221 5000      1120            jnc     L010004?
0223           1121   ;        EFM8_JDY40_test.c:248: cnt++;
0223 0D        1122            inc     r5
0224           1123   ;        EFM8_JDY40_test.c:249: *s=c;
0224 8E82      1124            mov     dpl,r6
0226 8F83      1125            mov     dph,r7
0228 88F0      1126            mov     b,r0
022A E9        1127            mov     a,r1
022B 120000    1128            lcall   __gptrput
022E A3        1129            inc     dptr
022F AE82      1130            mov     r6,dpl
0231 AF83      1131            mov     r7,dph
0233           1132   ;        EFM8_JDY40_test.c:250: s++;
0233 8E02      1133            mov     ar2,r6
0235 8F03      1134            mov     ar3,r7
0237 8804      1135            mov     ar4,r0
0239 8000      1136            sjmp    L010007?
023B           1137   L010004?:
023B           1138   ;        EFM8_JDY40_test.c:254: *s=0;
023B 8A82      1139            mov     dpl,r2
023D 8B83      1140            mov     dph,r3
023F 8CF0      1141            mov     b,r4
0241 E4        1142            clr     a
0242           1143   ;        EFM8_JDY40_test.c:255: return;
0242 020000    1144            ljmp    __gptrput
0245           1145   ;------------------------------------------------------------
0245           1146   ;Allocation info for local variables in function 'RXU1'
0245           1147   ;------------------------------------------------------------
0245           1148   ;------------------------------------------------------------
0245           1149   ;        EFM8_JDY40_test.c:261: bit RXU1 (void)
0245           1150   ;        -----------------------------------------
0245           1151   ;         function RXU1
0245           1152   ;        -----------------------------------------
0245           1153   _RXU1:
0245           1154   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
0245 75A720    1155            mov     _SFRPAGE,#0x20
0248           1156   ;        EFM8_JDY40_test.c:265: mybit=RI1;
0248 A2C8      1157            mov     c,_RI1
024A           1158   ;        EFM8_JDY40_test.c:266: SFRPAGE = 0x00;
024A 75A700    1159            mov     _SFRPAGE,#0x00
024D           1160   ;        EFM8_JDY40_test.c:267: return mybit;
024D 22        1161            ret
024E           1162   ;------------------------------------------------------------
024E           1163   ;Allocation info for local variables in function 'waitms_or_RI1'
024E           1164   ;------------------------------------------------------------
024E           1165   ;ms                        Allocated to registers r2 r3 
024E           1166   ;j                         Allocated to registers r4 r5 
024E           1167   ;k                         Allocated to registers r6 
024E           1168   ;------------------------------------------------------------
024E           1169   ;        EFM8_JDY40_test.c:270: void waitms_or_RI1 (unsigned int ms)
024E           1170   ;        -----------------------------------------
024E           1171   ;         function waitms_or_RI1
024E           1172   ;        -----------------------------------------
024E           1173   _waitms_or_RI1:
024E AA82      1174            mov     r2,dpl
0250 AB83      1175            mov     r3,dph
0252           1176   ;        EFM8_JDY40_test.c:274: for(j=0; j<ms; j++)
0252 7C00      1177            mov     r4,#0x00
0254 7D00      1178            mov     r5,#0x00
0256           1179   L012007?:
0256 C3        1180            clr     c
0257 EC        1181            mov     a,r4
0258 9A        1182            subb    a,r2
0259 ED        1183            mov     a,r5
025A 9B        1184            subb    a,r3
025B 5000      1185            jnc     L012011?
025D           1186   ;        EFM8_JDY40_test.c:276: for (k=0; k<4; k++)
025D 7E00      1187            mov     r6,#0x00
025F           1188   L012003?:
025F BE04A8    1189            cjne    r6,#0x04,L012019?
0262           1190   L012019?:
0262 5000      1191            jnc     L012009?
0264           1192   ;        EFM8_JDY40_test.c:278: if(RXU1()) return;
0264 C002      1193            push    ar2
0266 C003      1194            push    ar3
0268 C004      1195            push    ar4
026A C005      1196            push    ar5
026C C006      1197            push    ar6
026E 120000    1198            lcall   _RXU1
0271 E4        1199            clr     a
0272 33        1200            rlc     a
0273 D006      1201            pop     ar6
0275 D005      1202            pop     ar5
0277 D004      1203            pop     ar4
0279 D003      1204            pop     ar3
027B D002      1205            pop     ar2
027D 6000      1206            jz      L012002?
027F 22        1207            ret
0280           1208   L012002?:
0280           1209   ;        EFM8_JDY40_test.c:279: Timer3us(250);
0280 7582FA    1210            mov     dpl,#0xFA
0283 C002      1211            push    ar2
0285 C003      1212            push    ar3
0287 C004      1213            push    ar4
0289 C005      1214            push    ar5
028B C006      1215            push    ar6
028D 120000    1216            lcall   _Timer3us
0290 D006      1217            pop     ar6
0292 D005      1218            pop     ar5
0294 D004      1219            pop     ar4
0296 D003      1220            pop     ar3
0298 D002      1221            pop     ar2
029A           1222   ;        EFM8_JDY40_test.c:276: for (k=0; k<4; k++)
029A 0E        1223            inc     r6
029B 8000      1224            sjmp    L012003?
029D           1225   L012009?:
029D           1226   ;        EFM8_JDY40_test.c:274: for(j=0; j<ms; j++)
029D 0C        1227            inc     r4
029E BC00E8    1228            cjne    r4,#0x00,L012007?
02A1 0D        1229            inc     r5
02A2 8000      1230            sjmp    L012007?
02A4           1231   L012011?:
02A4 22        1232            ret
02A5           1233   ;------------------------------------------------------------
02A5           1234   ;Allocation info for local variables in function 'SendATCommand'
02A5           1235   ;------------------------------------------------------------
02A5           1236   ;s                         Allocated to registers r2 r3 r4 
02A5           1237   ;------------------------------------------------------------
02A5           1238   ;        EFM8_JDY40_test.c:284: void SendATCommand (char * s)
02A5           1239   ;        -----------------------------------------
02A5           1240   ;         function SendATCommand
02A5           1241   ;        -----------------------------------------
02A5           1242   _SendATCommand:
02A5 AA82      1243            mov     r2,dpl
02A7 AB83      1244            mov     r3,dph
02A9 ACF0      1245            mov     r4,b
02AB           1246   ;        EFM8_JDY40_test.c:286: printf("Command: %s", s);
02AB C002      1247            push    ar2
02AD C003      1248            push    ar3
02AF C004      1249            push    ar4
02B1 C002      1250            push    ar2
02B3 C003      1251            push    ar3
02B5 C004      1252            push    ar4
02B7 7468      1253            mov     a,#__str_0
02B9 C0E0      1254            push    acc
02BB 74C8      1255            mov     a,#(__str_0 >> 8)
02BD C0E0      1256            push    acc
02BF 7480      1257            mov     a,#0x80
02C1 C0E0      1258            push    acc
02C3 120000    1259            lcall   _printf
02C6 E581      1260            mov     a,sp
02C8 24FA      1261            add     a,#0xfa
02CA F581      1262            mov     sp,a
02CC           1263   ;        EFM8_JDY40_test.c:287: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02CC C2A0      1264            clr     _P2_0
02CE           1265   ;        EFM8_JDY40_test.c:288: waitms(5);
02CE 900005    1266            mov     dptr,#0x0005
02D1 120000    1267            lcall   _waitms
02D4 D004      1268            pop     ar4
02D6 D003      1269            pop     ar3
02D8 D002      1270            pop     ar2
02DA           1271   ;        EFM8_JDY40_test.c:289: sendstr1(s);
02DA 8A82      1272            mov     dpl,r2
02DC 8B83      1273            mov     dph,r3
02DE 8CF0      1274            mov     b,r4
02E0 120000    1275            lcall   _sendstr1
02E3           1276   ;        EFM8_JDY40_test.c:290: getstr1(buff, sizeof(buff)-1);
02E3 752813    1277            mov     _getstr1_PARM_2,#0x13
02E6 901960    1278            mov     dptr,#_buff
02E9 75F040    1279            mov     b,#0x40
02EC 120000    1280            lcall   _getstr1
02EF           1281   ;        EFM8_JDY40_test.c:291: waitms(10);
02EF 90000A    1282            mov     dptr,#0x000A
02F2 120000    1283            lcall   _waitms
02F5           1284   ;        EFM8_JDY40_test.c:292: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F5 D2A0      1285            setb    _P2_0
02F7           1286   ;        EFM8_JDY40_test.c:293: printf("Response: %s\r\n", buff);
02F7 7460      1287            mov     a,#_buff
02F9 C0E0      1288            push    acc
02FB 7419      1289            mov     a,#(_buff >> 8)
02FD C0E0      1290            push    acc
02FF 7440      1291            mov     a,#0x40
0301 C0E0      1292            push    acc
0303 7428      1293            mov     a,#__str_1
0305 C0E0      1294            push    acc
0307 74C9      1295            mov     a,#(__str_1 >> 8)
0309 C0E0      1296            push    acc
030B 7480      1297            mov     a,#0x80
030D C0E0      1298            push    acc
030F 120000    1299            lcall   _printf
0312 E581      1300            mov     a,sp
0314 24FA      1301            add     a,#0xfa
0316 F581      1302            mov     sp,a
0318 22        1303            ret
0319           1304   ;------------------------------------------------------------
0319           1305   ;Allocation info for local variables in function 'ReceptionOff'
0319           1306   ;------------------------------------------------------------
0319           1307   ;------------------------------------------------------------
0319           1308   ;        EFM8_JDY40_test.c:296: void ReceptionOff (void)
0319           1309   ;        -----------------------------------------
0319           1310   ;         function ReceptionOff
0319           1311   ;        -----------------------------------------
0319           1312   _ReceptionOff:
0319           1313   ;        EFM8_JDY40_test.c:298: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0319 C2A0      1314            clr     _P2_0
031B           1315   ;        EFM8_JDY40_test.c:299: waitms(10);
031B 90000A    1316            mov     dptr,#0x000A
031E 120000    1317            lcall   _waitms
0321           1318   ;        EFM8_JDY40_test.c:300: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0321 90C968    1319            mov     dptr,#__str_2
0324 75F080    1320            mov     b,#0x80
0327 120000    1321            lcall   _sendstr1
032A           1322   ;        EFM8_JDY40_test.c:301: waitms(10);
032A 90000A    1323            mov     dptr,#0x000A
032D 120000    1324            lcall   _waitms
0330           1325   ;        EFM8_JDY40_test.c:303: SCON1&=0b_0011_1111;
0330 53C83F    1326            anl     _SCON1,#0x3F
0333           1327   ;        EFM8_JDY40_test.c:304: P2_0=1; // 'set' pin to 1 is normal operation mode.
0333 D2A0      1328            setb    _P2_0
0335 22        1329            ret
0336           1330   ;------------------------------------------------------------
0336           1331   ;Allocation info for local variables in function 'TIMER0_Init'
0336           1332   ;------------------------------------------------------------
0336           1333   ;------------------------------------------------------------
0336           1334   ;        EFM8_JDY40_test.c:308: void TIMER0_Init(void)
0336           1335   ;        -----------------------------------------
0336           1336   ;         function TIMER0_Init
0336           1337   ;        -----------------------------------------
0336           1338   _TIMER0_Init:
0336           1339   ;        EFM8_JDY40_test.c:310: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0336 5389F0    1340            anl     _TMOD,#0xF0
0339           1341   ;        EFM8_JDY40_test.c:311: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0339 438901    1342            orl     _TMOD,#0x01
033C           1343   ;        EFM8_JDY40_test.c:312: TR0=0; // Stop Timer/Counter 0
033C C28C      1344            clr     _TR0
033E 22        1345            ret
033F           1346   ;------------------------------------------------------------
033F           1347   ;Allocation info for local variables in function 'InitADC'
033F           1348   ;------------------------------------------------------------
033F           1349   ;------------------------------------------------------------
033F           1350   ;        EFM8_JDY40_test.c:316: void InitADC (void)
033F           1351   ;        -----------------------------------------
033F           1352   ;         function InitADC
033F           1353   ;        -----------------------------------------
033F           1354   _InitADC:
033F           1355   ;        EFM8_JDY40_test.c:318: SFRPAGE = 0x00;
033F 75A700    1356            mov     _SFRPAGE,#0x00
0342           1357   ;        EFM8_JDY40_test.c:319: ADEN=0; // Disable ADC
0342 C2EF      1358            clr     _ADEN
0344           1359   ;        EFM8_JDY40_test.c:324: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0344 75B280    1360            mov     _ADC0CN1,#0x80
0347           1361   ;        EFM8_JDY40_test.c:328: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0347 75BC20    1362            mov     _ADC0CF0,#0x20
034A           1363   ;        EFM8_JDY40_test.c:332: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
034A 75B91E    1364            mov     _ADC0CF1,#0x1E
034D           1365   ;        EFM8_JDY40_test.c:341: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
034D 75E800    1366            mov     _ADC0CN0,#0x00
0350           1367   ;        EFM8_JDY40_test.c:346: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0350 75DF3F    1368            mov     _ADC0CF2,#0x3F
0353           1369   ;        EFM8_JDY40_test.c:350: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0353 75B300    1370            mov     _ADC0CN2,#0x00
0356           1371   ;        EFM8_JDY40_test.c:352: ADEN=1; // Enable ADC
0356 D2EF      1372            setb    _ADEN
0358 22        1373            ret
0359           1374   ;------------------------------------------------------------
0359           1375   ;Allocation info for local variables in function 'InitPinADC'
0359           1376   ;------------------------------------------------------------
0359           1377   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0359           1378   ;portno                    Allocated to registers r2 
0359           1379   ;mask                      Allocated to registers r3 
0359           1380   ;------------------------------------------------------------
0359           1381   ;        EFM8_JDY40_test.c:355: void InitPinADC (unsigned char portno, unsigned char pinno)
0359           1382   ;        -----------------------------------------
0359           1383   ;         function InitPinADC
0359           1384   ;        -----------------------------------------
0359           1385   _InitPinADC:
0359 AA82      1386            mov     r2,dpl
035B           1387   ;        EFM8_JDY40_test.c:359: mask=1<<pinno;
035B 8560F0    1388            mov     b,_InitPinADC_PARM_2
035E 05F0      1389            inc     b
0360 7401      1390            mov     a,#0x01
0362 8000      1391            sjmp    L017013?
0364           1392   L017011?:
0364 25E0      1393            add     a,acc
0366           1394   L017013?:
0366 D5F0E8    1395            djnz    b,L017011?
0369 FB        1396            mov     r3,a
036A           1397   ;        EFM8_JDY40_test.c:361: SFRPAGE = 0x20;
036A 75A720    1398            mov     _SFRPAGE,#0x20
036D           1399   ;        EFM8_JDY40_test.c:362: switch (portno)
036D BA0028    1400            cjne    r2,#0x00,L017014?
0370 8000      1401            sjmp    L017001?
0372           1402   L017014?:
0372 BA01A8    1403            cjne    r2,#0x01,L017015?
0375 8000      1404            sjmp    L017002?
0377           1405   L017015?:
0377           1406   ;        EFM8_JDY40_test.c:364: case 0:
0377 BA0228    1407            cjne    r2,#0x02,L017005?
037A 8000      1408            sjmp    L017003?
037C           1409   L017001?:
037C           1410   ;        EFM8_JDY40_test.c:365: P0MDIN &= (~mask); // Set pin as analog input
037C EB        1411            mov     a,r3
037D F4        1412            cpl     a
037E FA        1413            mov     r2,a
037F 52F1      1414            anl     _P0MDIN,a
0381           1415   ;        EFM8_JDY40_test.c:366: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0381 EB        1416            mov     a,r3
0382 42D4      1417            orl     _P0SKIP,a
0384           1418   ;        EFM8_JDY40_test.c:367: break;
0384           1419   ;        EFM8_JDY40_test.c:368: case 1:
0384 8000      1420            sjmp    L017005?
0386           1421   L017002?:
0386           1422   ;        EFM8_JDY40_test.c:369: P1MDIN &= (~mask); // Set pin as analog input
0386 EB        1423            mov     a,r3
0387 F4        1424            cpl     a
0388 FA        1425            mov     r2,a
0389 52F2      1426            anl     _P1MDIN,a
038B           1427   ;        EFM8_JDY40_test.c:370: P1SKIP |= mask; // Skip Crossbar decoding for this pin
038B EB        1428            mov     a,r3
038C 42D5      1429            orl     _P1SKIP,a
038E           1430   ;        EFM8_JDY40_test.c:371: break;
038E           1431   ;        EFM8_JDY40_test.c:372: case 2:
038E 8000      1432            sjmp    L017005?
0390           1433   L017003?:
0390           1434   ;        EFM8_JDY40_test.c:373: P2MDIN &= (~mask); // Set pin as analog input
0390 EB        1435            mov     a,r3
0391 F4        1436            cpl     a
0392 FA        1437            mov     r2,a
0393 52F3      1438            anl     _P2MDIN,a
0395           1439   ;        EFM8_JDY40_test.c:374: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0395 EB        1440            mov     a,r3
0396 42CC      1441            orl     _P2SKIP,a
0398           1442   ;        EFM8_JDY40_test.c:378: }
0398           1443   L017005?:
0398           1444   ;        EFM8_JDY40_test.c:379: SFRPAGE = 0x00;
0398 75A700    1445            mov     _SFRPAGE,#0x00
039B 22        1446            ret
039C           1447   ;------------------------------------------------------------
039C           1448   ;Allocation info for local variables in function 'ADC_at_Pin'
039C           1449   ;------------------------------------------------------------
039C           1450   ;pin                       Allocated to registers 
039C           1451   ;------------------------------------------------------------
039C           1452   ;        EFM8_JDY40_test.c:382: unsigned int ADC_at_Pin(unsigned char pin)
039C           1453   ;        -----------------------------------------
039C           1454   ;         function ADC_at_Pin
039C           1455   ;        -----------------------------------------
039C           1456   _ADC_at_Pin:
039C 8582BB    1457            mov     _ADC0MX,dpl
039F           1458   ;        EFM8_JDY40_test.c:385: ADINT = 0;
039F C2ED      1459            clr     _ADINT
03A1           1460   ;        EFM8_JDY40_test.c:386: ADBUSY = 1;     // Convert voltage at the pin
03A1 D2EC      1461            setb    _ADBUSY
03A3           1462   ;        EFM8_JDY40_test.c:387: while (!ADINT); // Wait for conversion to complete
03A3           1463   L018001?:
03A3 30EDA8    1464            jnb     _ADINT,L018001?
03A6           1465   ;        EFM8_JDY40_test.c:388: return (ADC0);
03A6 85BD82    1466            mov     dpl,_ADC0
03A9 85BE83    1467            mov     dph,(_ADC0 >> 8)
03AC 22        1468            ret
03AD           1469   ;------------------------------------------------------------
03AD           1470   ;Allocation info for local variables in function 'Volts_at_Pin'
03AD           1471   ;------------------------------------------------------------
03AD           1472   ;pin                       Allocated to registers r2 
03AD           1473   ;------------------------------------------------------------
03AD           1474   ;        EFM8_JDY40_test.c:391: float Volts_at_Pin(unsigned char pin)
03AD           1475   ;        -----------------------------------------
03AD           1476   ;         function Volts_at_Pin
03AD           1477   ;        -----------------------------------------
03AD           1478   _Volts_at_Pin:
03AD           1479   ;        EFM8_JDY40_test.c:393: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
03AD 120000    1480            lcall   _ADC_at_Pin
03B0 120000    1481            lcall   ___uint2fs
03B3 AA82      1482            mov     r2,dpl
03B5 AB83      1483            mov     r3,dph
03B7 ACF0      1484            mov     r4,b
03B9 FD        1485            mov     r5,a
03BA C002      1486            push    ar2
03BC C003      1487            push    ar3
03BE C004      1488            push    ar4
03C0 C005      1489            push    ar5
03C2 906C8B    1490            mov     dptr,#0x6C8B
03C5 75F053    1491            mov     b,#0x53
03C8 7440      1492            mov     a,#0x40
03CA 120000    1493            lcall   ___fsmul
03CD AA82      1494            mov     r2,dpl
03CF AB83      1495            mov     r3,dph
03D1 ACF0      1496            mov     r4,b
03D3 FD        1497            mov     r5,a
03D4 E581      1498            mov     a,sp
03D6 24FC      1499            add     a,#0xfc
03D8 F581      1500            mov     sp,a
03DA E4        1501            clr     a
03DB C0E0      1502            push    acc
03DD 74FC      1503            mov     a,#0xFC
03DF C0E0      1504            push    acc
03E1 747F      1505            mov     a,#0x7F
03E3 C0E0      1506            push    acc
03E5 7446      1507            mov     a,#0x46
03E7 C0E0      1508            push    acc
03E9 8A82      1509            mov     dpl,r2
03EB 8B83      1510            mov     dph,r3
03ED 8CF0      1511            mov     b,r4
03EF ED        1512            mov     a,r5
03F0 120000    1513            lcall   ___fsdiv
03F3 AA82      1514            mov     r2,dpl
03F5 AB83      1515            mov     r3,dph
03F7 ACF0      1516            mov     r4,b
03F9 FD        1517            mov     r5,a
03FA E581      1518            mov     a,sp
03FC 24FC      1519            add     a,#0xfc
03FE F581      1520            mov     sp,a
0400 8A82      1521            mov     dpl,r2
0402 8B83      1522            mov     dph,r3
0404 8CF0      1523            mov     b,r4
0406 ED        1524            mov     a,r5
0407 22        1525            ret
0408           1526   ;------------------------------------------------------------
0408           1527   ;Allocation info for local variables in function 'Timer4_ISR'
0408           1528   ;------------------------------------------------------------
0408           1529   ;------------------------------------------------------------
0408           1530   ;        EFM8_JDY40_test.c:397: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
0408           1531   ;        -----------------------------------------
0408           1532   ;         function Timer4_ISR
0408           1533   ;        -----------------------------------------
0408           1534   _Timer4_ISR:
0408 C0E0      1535            push    acc
040A C0D0      1536            push    psw
040C 75D000    1537            mov     psw,#0x00
040F           1538   ;        EFM8_JDY40_test.c:399: SFRPAGE=0x10;
040F 75A710    1539            mov     _SFRPAGE,#0x10
0412           1540   ;        EFM8_JDY40_test.c:400: TF4H = 0; 
0412 C29F      1541            clr     _TF4H
0414           1542   ;        EFM8_JDY40_test.c:402: pwm_counter4 += 256; // counting steps
0414 85A8A8    1543            mov     _pwm_counter4,_pwm_counter4
0417 7401      1544            mov     a,#0x01
0419 25A9      1545            add     a,(_pwm_counter4 + 1)
041B F5A9      1546            mov     (_pwm_counter4 + 1),a
041D           1547   ;        EFM8_JDY40_test.c:403: if ( direction == 1) {
041D 7401      1548            mov     a,#0x01
041F B5A8E8    1549            cjne    a,_direction,L020009?
0422 E4        1550            clr     a
0423 B5A9E8    1551            cjne    a,(_direction + 1),L020009?
0426 8000      1552            sjmp    L020010?
0428           1553   L020009?:
0428 8000      1554            sjmp    L020002?
042A           1555   L020010?:
042A           1556   ;        EFM8_JDY40_test.c:404: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
042A C3        1557            clr     c
042B E5A8      1558            mov     a,_pwm_counter4
042D 9568      1559            subb    a,_pwm_duty4
042F E5A9      1560            mov     a,(_pwm_counter4 + 1)
0431 9569      1561            subb    a,(_pwm_duty4 + 1)
0433 92B0      1562            mov     _P3_0,c
0435           1563   L020002?:
0435           1564   ;        EFM8_JDY40_test.c:406: if ( direction  == 0 ) {
0435 E5A8      1565            mov     a,_direction
0437 45A9      1566            orl     a,(_direction + 1)
0439 7000      1567            jnz     L020005?
043B           1568   ;        EFM8_JDY40_test.c:407: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
043B C3        1569            clr     c
043C E5A8      1570            mov     a,_pwm_counter4
043E 9568      1571            subb    a,_pwm_duty4
0440 E5A9      1572            mov     a,(_pwm_counter4 + 1)
0442 9569      1573            subb    a,(_pwm_duty4 + 1)
0444 92A5      1574            mov     _P2_5,c
0446           1575   L020005?:
0446 D0D0      1576            pop     psw
0448 D0E0      1577            pop     acc
044A 32        1578            reti
044B           1579   ;        eliminated unneeded push/pop dpl
044B           1580   ;        eliminated unneeded push/pop dph
044B           1581   ;        eliminated unneeded push/pop b
044B           1582   ;------------------------------------------------------------
044B           1583   ;Allocation info for local variables in function 'Timer2_ISR'
044B           1584   ;------------------------------------------------------------
044B           1585   ;------------------------------------------------------------
044B           1586   ;        EFM8_JDY40_test.c:411: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
044B           1587   ;        -----------------------------------------
044B           1588   ;         function Timer2_ISR
044B           1589   ;        -----------------------------------------
044B           1590   _Timer2_ISR:
044B C0E0      1591            push    acc
044D C0D0      1592            push    psw
044F 75D000    1593            mov     psw,#0x00
0452           1594   ;        EFM8_JDY40_test.c:413: SFRPAGE=0x0;
0452 75A700    1595            mov     _SFRPAGE,#0x00
0455           1596   ;        EFM8_JDY40_test.c:414: TF2H = 0; // Clear Timer2 interrupt flag
0455 C2CF      1597            clr     _TF2H
0457           1598   ;        EFM8_JDY40_test.c:415: pwm_counter2 += 256; // counting steps
0457 852828    1599            mov     _pwm_counter2,_pwm_counter2
045A 7401      1600            mov     a,#0x01
045C 2529      1601            add     a,(_pwm_counter2 + 1)
045E F529      1602            mov     (_pwm_counter2 + 1),a
0460           1603   ;        EFM8_JDY40_test.c:416: if ( direction == 1) {
0460 7401      1604            mov     a,#0x01
0462 B5A8E8    1605            cjne    a,_direction,L021009?
0465 E4        1606            clr     a
0466 B5A9E8    1607            cjne    a,(_direction + 1),L021009?
0469 8000      1608            sjmp    L021010?
046B           1609   L021009?:
046B 8000      1610            sjmp    L021002?
046D           1611   L021010?:
046D           1612   ;        EFM8_JDY40_test.c:417: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
046D C3        1613            clr     c
046E E528      1614            mov     a,_pwm_counter2
0470 95E8      1615            subb    a,_pwm_duty2
0472 E529      1616            mov     a,(_pwm_counter2 + 1)
0474 95E9      1617            subb    a,(_pwm_duty2 + 1)
0476 92B2      1618            mov     _P3_2,c
0478           1619   L021002?:
0478           1620   ;        EFM8_JDY40_test.c:419: if (direction == 0 ){
0478 E5A8      1621            mov     a,_direction
047A 45A9      1622            orl     a,(_direction + 1)
047C 7000      1623            jnz     L021005?
047E           1624   ;        EFM8_JDY40_test.c:420: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
047E C3        1625            clr     c
047F E528      1626            mov     a,_pwm_counter2
0481 95E8      1627            subb    a,_pwm_duty2
0483 E529      1628            mov     a,(_pwm_counter2 + 1)
0485 95E9      1629            subb    a,(_pwm_duty2 + 1)
0487 92B7      1630            mov     _P3_7,c
0489           1631   L021005?:
0489 D0D0      1632            pop     psw
048B D0E0      1633            pop     acc
048D 32        1634            reti
048E           1635   ;        eliminated unneeded push/pop dpl
048E           1636   ;        eliminated unneeded push/pop dph
048E           1637   ;        eliminated unneeded push/pop b
048E           1638   ;------------------------------------------------------------
048E           1639   ;Allocation info for local variables in function 'ADCtoPWM'
048E           1640   ;------------------------------------------------------------
048E           1641   ;adc_value                 Allocated to registers r2 r3 
048E           1642   ;------------------------------------------------------------
048E           1643   ;        EFM8_JDY40_test.c:424: unsigned int ADCtoPWM(int adc_value)
048E           1644   ;        -----------------------------------------
048E           1645   ;         function ADCtoPWM
048E           1646   ;        -----------------------------------------
048E           1647   _ADCtoPWM:
048E AA82      1648            mov     r2,dpl
0490 AB83      1649            mov     r3,dph
0492           1650   ;        EFM8_JDY40_test.c:429: return (unsigned int)((adc_value * 65535UL) / 1008UL);
0492 8A00      1651            mov     __mullong_PARM_2,r2
0494 EB        1652            mov     a,r3
0495 F501      1653            mov     (__mullong_PARM_2 + 1),a
0497 33        1654            rlc     a
0498 95E0      1655            subb    a,acc
049A F502      1656            mov     (__mullong_PARM_2 + 2),a
049C F503      1657            mov     (__mullong_PARM_2 + 3),a
049E 90FFFF    1658            mov     dptr,#0xFFFF
04A1 E4        1659            clr     a
04A2 F5F0      1660            mov     b,a
04A4 120000    1661            lcall   __mullong
04A7 7500F0    1662            mov     __divulong_PARM_2,#0xF0
04AA 750103    1663            mov     (__divulong_PARM_2 + 1),#0x03
04AD 750200    1664            mov     (__divulong_PARM_2 + 2),#0x00
04B0 750300    1665            mov     (__divulong_PARM_2 + 3),#0x00
04B3 020000    1666            ljmp    __divulong
04B6           1667   ;------------------------------------------------------------
04B6           1668   ;Allocation info for local variables in function 'ADCsteeringRatio'
04B6           1669   ;------------------------------------------------------------
04B6           1670   ;steering                  Allocated with name '_ADCsteeringRatio_PARM_2'
04B6           1671   ;ADCwheel1                 Allocated with name '_ADCsteeringRatio_PARM_3'
04B6           1672   ;ADCwheel2                 Allocated with name '_ADCsteeringRatio_PARM_4'
04B6           1673   ;speed                     Allocated to registers r2 r3 
04B6           1674   ;centersteering            Allocated to registers r4 r5 
04B6           1675   ;centerspeed               Allocated to registers 
04B6           1676   ;steeringFactor            Allocated with name '_ADCsteeringRatio_steeringFactor_1_141'
04B6           1677   ;baseSpeed                 Allocated to registers r6 r7 
04B6           1678   ;baseSteer                 Allocated to registers r0 r1 
04B6           1679   ;wheel1Speed               Allocated to registers r6 r7 
04B6           1680   ;wheel2Speed               Allocated to registers r2 r3 
04B6           1681   ;------------------------------------------------------------
04B6           1682   ;        EFM8_JDY40_test.c:437: void ADCsteeringRatio(int speed, int steering, int *ADCwheel1, int *ADCwheel2) 
04B6           1683   ;        -----------------------------------------
04B6           1684   ;         function ADCsteeringRatio
04B6           1685   ;        -----------------------------------------
04B6           1686   _ADCsteeringRatio:
04B6 AA82      1687            mov     r2,dpl
04B8 AB83      1688            mov     r3,dph
04BA           1689   ;        EFM8_JDY40_test.c:441: int centersteering = steering - 508;
04BA E500      1690            mov     a,_ADCsteeringRatio_PARM_2
04BC 2404      1691            add     a,#0x04
04BE FC        1692            mov     r4,a
04BF E501      1693            mov     a,(_ADCsteeringRatio_PARM_2 + 1)
04C1 34FE      1694            addc    a,#0xfe
04C3 FD        1695            mov     r5,a
04C4           1696   ;        EFM8_JDY40_test.c:449: centerspeed = speed - 504;
04C4 EA        1697            mov     a,r2
04C5 2408      1698            add     a,#0x08
04C7 F582      1699            mov     dpl,a
04C9 EB        1700            mov     a,r3
04CA 34FE      1701            addc    a,#0xfe
04CC F583      1702            mov     dph,a
04CE           1703   ;        EFM8_JDY40_test.c:452: baseSpeed = abs(centerspeed);
04CE C002      1704            push    ar2
04D0 C003      1705            push    ar3
04D2 C004      1706            push    ar4
04D4 C005      1707            push    ar5
04D6 120000    1708            lcall   _abs
04D9 AE82      1709            mov     r6,dpl
04DB AF83      1710            mov     r7,dph
04DD D005      1711            pop     ar5
04DF D004      1712            pop     ar4
04E1           1713   ;        EFM8_JDY40_test.c:453: baseSteer = abs(centersteering);
04E1 8C82      1714            mov     dpl,r4
04E3 8D83      1715            mov     dph,r5
04E5 C004      1716            push    ar4
04E7 C005      1717            push    ar5
04E9 C006      1718            push    ar6
04EB C007      1719            push    ar7
04ED 120000    1720            lcall   _abs
04F0 A882      1721            mov     r0,dpl
04F2 A983      1722            mov     r1,dph
04F4 D007      1723            pop     ar7
04F6 D006      1724            pop     ar6
04F8 D005      1725            pop     ar5
04FA D004      1726            pop     ar4
04FC D003      1727            pop     ar3
04FE D002      1728            pop     ar2
0500           1729   ;        EFM8_JDY40_test.c:454: if ( baseSpeed < 5 && baseSteer < 5 ) 
0500 C3        1730            clr     c
0501 EE        1731            mov     a,r6
0502 9405      1732            subb    a,#0x05
0504 EF        1733            mov     a,r7
0505 6480      1734            xrl     a,#0x80
0507 9480      1735            subb    a,#0x80
0509 5000      1736            jnc     L023002?
050B C3        1737            clr     c
050C E8        1738            mov     a,r0
050D 9405      1739            subb    a,#0x05
050F E9        1740            mov     a,r1
0510 6480      1741            xrl     a,#0x80
0512 9480      1742            subb    a,#0x80
0514 5000      1743            jnc     L023002?
0516           1744   ;        EFM8_JDY40_test.c:456: *ADCwheel1 = 0;
0516 AEB0      1745            mov     r6,_ADCsteeringRatio_PARM_3
0518 AFB1      1746            mov     r7,(_ADCsteeringRatio_PARM_3 + 1)
051A A8B2      1747            mov     r0,(_ADCsteeringRatio_PARM_3 + 2)
051C 8E82      1748            mov     dpl,r6
051E 8F83      1749            mov     dph,r7
0520 88F0      1750            mov     b,r0
0522 E4        1751            clr     a
0523 120000    1752            lcall   __gptrput
0526 A3        1753            inc     dptr
0527 E4        1754            clr     a
0528 120000    1755            lcall   __gptrput
052B           1756   ;        EFM8_JDY40_test.c:457: *ADCwheel2 = 0;
052B AE60      1757            mov     r6,_ADCsteeringRatio_PARM_4
052D AF61      1758            mov     r7,(_ADCsteeringRatio_PARM_4 + 1)
052F A862      1759            mov     r0,(_ADCsteeringRatio_PARM_4 + 2)
0531 8E82      1760            mov     dpl,r6
0533 8F83      1761            mov     dph,r7
0535 88F0      1762            mov     b,r0
0537 E4        1763            clr     a
0538 120000    1764            lcall   __gptrput
053B A3        1765            inc     dptr
053C E4        1766            clr     a
053D           1767   ;        EFM8_JDY40_test.c:458: return;
053D 020000    1768            ljmp    __gptrput
0540           1769   L023002?:
0540           1770   ;        EFM8_JDY40_test.c:462: steeringFactor = (float)centersteering / 508; // ranges from -1.0 (full left) to +1.0 (full right)
0540 8C82      1771            mov     dpl,r4
0542 8D83      1772            mov     dph,r5
0544 C002      1773            push    ar2
0546 C003      1774            push    ar3
0548 120000    1775            lcall   ___sint2fs
054B AC82      1776            mov     r4,dpl
054D AD83      1777            mov     r5,dph
054F AEF0      1778            mov     r6,b
0551 FF        1779            mov     r7,a
0552 E4        1780            clr     a
0553 C0E0      1781            push    acc
0555 C0E0      1782            push    acc
0557 74FE      1783            mov     a,#0xFE
0559 C0E0      1784            push    acc
055B 7443      1785            mov     a,#0x43
055D C0E0      1786            push    acc
055F 8C82      1787            mov     dpl,r4
0561 8D83      1788            mov     dph,r5
0563 8EF0      1789            mov     b,r6
0565 EF        1790            mov     a,r7
0566 120000    1791            lcall   ___fsdiv
0569 8582C8    1792            mov     _ADCsteeringRatio_steeringFactor_1_141,dpl
056C 8583C9    1793            mov     (_ADCsteeringRatio_steeringFactor_1_141 + 1),dph
056F 85F0CA    1794            mov     (_ADCsteeringRatio_steeringFactor_1_141 + 2),b
0572 F5CB      1795            mov     (_ADCsteeringRatio_steeringFactor_1_141 + 3),a
0574 E581      1796            mov     a,sp
0576 24FC      1797            add     a,#0xfc
0578 F581      1798            mov     sp,a
057A           1799   ;        EFM8_JDY40_test.c:464: if ( steeringFactor > 1 ) steeringFactor = 1;
057A E4        1800            clr     a
057B C0E0      1801            push    acc
057D C0E0      1802            push    acc
057F 7480      1803            mov     a,#0x80
0581 C0E0      1804            push    acc
0583 743F      1805            mov     a,#0x3F
0585 C0E0      1806            push    acc
0587 85C882    1807            mov     dpl,_ADCsteeringRatio_steeringFactor_1_141
058A 85C983    1808            mov     dph,(_ADCsteeringRatio_steeringFactor_1_141 + 1)
058D 85CAF0    1809            mov     b,(_ADCsteeringRatio_steeringFactor_1_141 + 2)
0590 E5CB      1810            mov     a,(_ADCsteeringRatio_steeringFactor_1_141 + 3)
0592 120000    1811            lcall   ___fsgt
0595 A882      1812            mov     r0,dpl
0597 E581      1813            mov     a,sp
0599 24FC      1814            add     a,#0xfc
059B F581      1815            mov     sp,a
059D D003      1816            pop     ar3
059F D002      1817            pop     ar2
05A1 E8        1818            mov     a,r0
05A2 6000      1819            jz      L023005?
05A4 75C800    1820            mov     _ADCsteeringRatio_steeringFactor_1_141,#0x00
05A7 75C900    1821            mov     (_ADCsteeringRatio_steeringFactor_1_141 + 1),#0x00
05AA 75CA80    1822            mov     (_ADCsteeringRatio_steeringFactor_1_141 + 2),#0x80
05AD 75CB3F    1823            mov     (_ADCsteeringRatio_steeringFactor_1_141 + 3),#0x3F
05B0           1824   L023005?:
05B0           1825   ;        EFM8_JDY40_test.c:468: wheel1Speed = speed + (int)(speed * steeringFactor);
05B0 8A82      1826            mov     dpl,r2
05B2 8B83      1827            mov     dph,r3
05B4 C002      1828            push    ar2
05B6 C003      1829            push    ar3
05B8 120000    1830            lcall   ___sint2fs
05BB A882      1831            mov     r0,dpl
05BD A983      1832            mov     r1,dph
05BF ACF0      1833            mov     r4,b
05C1 FD        1834            mov     r5,a
05C2 C0C8      1835            push    _ADCsteeringRatio_steeringFactor_1_141
05C4 C0C9      1836            push    (_ADCsteeringRatio_steeringFactor_1_141 + 1)
05C6 C0CA      1837            push    (_ADCsteeringRatio_steeringFactor_1_141 + 2)
05C8 C0CB      1838            push    (_ADCsteeringRatio_steeringFactor_1_141 + 3)
05CA 8882      1839            mov     dpl,r0
05CC 8983      1840            mov     dph,r1
05CE 8CF0      1841            mov     b,r4
05D0 ED        1842            mov     a,r5
05D1 120000    1843            lcall   ___fsmul
05D4 AC82      1844            mov     r4,dpl
05D6 AD83      1845            mov     r5,dph
05D8 AEF0      1846            mov     r6,b
05DA FF        1847            mov     r7,a
05DB E581      1848            mov     a,sp
05DD 24FC      1849            add     a,#0xfc
05DF F581      1850            mov     sp,a
05E1 8C82      1851            mov     dpl,r4
05E3 8D83      1852            mov     dph,r5
05E5 8EF0      1853            mov     b,r6
05E7 EF        1854            mov     a,r7
05E8 120000    1855            lcall   ___fs2sint
05EB AC82      1856            mov     r4,dpl
05ED AD83      1857            mov     r5,dph
05EF D003      1858            pop     ar3
05F1 D002      1859            pop     ar2
05F3 EC        1860            mov     a,r4
05F4 2A        1861            add     a,r2
05F5 FE        1862            mov     r6,a
05F6 ED        1863            mov     a,r5
05F7 3B        1864            addc    a,r3
05F8 FF        1865            mov     r7,a
05F9           1866   ;        EFM8_JDY40_test.c:469: wheel2Speed = speed - (int)(speed * steeringFactor);
05F9 EA        1867            mov     a,r2
05FA C3        1868            clr     c
05FB 9C        1869            subb    a,r4
05FC FA        1870            mov     r2,a
05FD EB        1871            mov     a,r3
05FE 9D        1872            subb    a,r5
05FF FB        1873            mov     r3,a
0600           1874   ;        EFM8_JDY40_test.c:470: if (wheel1Speed > 1008) wheel1Speed = 1008;
0600 C3        1875            clr     c
0601 74F0      1876            mov     a,#0xF0
0603 9E        1877            subb    a,r6
0604 7483      1878            mov     a,#(0x03 ^ 0x80)
0606 8FF0      1879            mov     b,r7
0608 63F080    1880            xrl     b,#0x80
060B 95F0      1881            subb    a,b
060D 5000      1882            jnc     L023007?
060F 7EF0      1883            mov     r6,#0xF0
0611 7F03      1884            mov     r7,#0x03
0613           1885   L023007?:
0613           1886   ;        EFM8_JDY40_test.c:471: if (wheel1Speed < 0) wheel1Speed = 0;
0613 EF        1887            mov     a,r7
0614 30E740    1888            jnb     acc.7,L023009?
0617 7E00      1889            mov     r6,#0x00
0619 7F00      1890            mov     r7,#0x00
061B           1891   L023009?:
061B           1892   ;        EFM8_JDY40_test.c:473: if (wheel2Speed > 1008) wheel2Speed = 1008;
061B C3        1893            clr     c
061C 74F0      1894            mov     a,#0xF0
061E 9A        1895            subb    a,r2
061F 7483      1896            mov     a,#(0x03 ^ 0x80)
0621 8BF0      1897            mov     b,r3
0623 63F080    1898            xrl     b,#0x80
0626 95F0      1899            subb    a,b
0628 5000      1900            jnc     L023011?
062A 7AF0      1901            mov     r2,#0xF0
062C 7B03      1902            mov     r3,#0x03
062E           1903   L023011?:
062E           1904   ;        EFM8_JDY40_test.c:474: if (wheel2Speed < 0) wheel2Speed = 0;
062E EB        1905            mov     a,r3
062F 30E7C0    1906            jnb     acc.7,L023013?
0632 7A00      1907            mov     r2,#0x00
0634 7B00      1908            mov     r3,#0x00
0636           1909   L023013?:
0636           1910   ;        EFM8_JDY40_test.c:476: *ADCwheel1 = (unsigned int)(wheel1Speed);
0636 ACB0      1911            mov     r4,_ADCsteeringRatio_PARM_3
0638 ADB1      1912            mov     r5,(_ADCsteeringRatio_PARM_3 + 1)
063A A8B2      1913            mov     r0,(_ADCsteeringRatio_PARM_3 + 2)
063C 8C82      1914            mov     dpl,r4
063E 8D83      1915            mov     dph,r5
0640 88F0      1916            mov     b,r0
0642 EE        1917            mov     a,r6
0643 120000    1918            lcall   __gptrput
0646 A3        1919            inc     dptr
0647 EF        1920            mov     a,r7
0648 120000    1921            lcall   __gptrput
064B           1922   ;        EFM8_JDY40_test.c:477: *ADCwheel2 = (unsigned int)(wheel2Speed);        
064B AC60      1923            mov     r4,_ADCsteeringRatio_PARM_4
064D AD61      1924            mov     r5,(_ADCsteeringRatio_PARM_4 + 1)
064F AE62      1925            mov     r6,(_ADCsteeringRatio_PARM_4 + 2)
0651 8C82      1926            mov     dpl,r4
0653 8D83      1927            mov     dph,r5
0655 8EF0      1928            mov     b,r6
0657 EA        1929            mov     a,r2
0658 120000    1930            lcall   __gptrput
065B A3        1931            inc     dptr
065C EB        1932            mov     a,r3
065D 020000    1933            ljmp    __gptrput
0660           1934   ;------------------------------------------------------------
0660           1935   ;Allocation info for local variables in function 'GetPeriod'
0660           1936   ;------------------------------------------------------------
0660           1937   ;n                         Allocated to registers r2 r3 
0660           1938   ;overflow_count            Allocated to registers r4 r5 
0660           1939   ;i                         Allocated to registers r6 
0660           1940   ;------------------------------------------------------------
0660           1941   ;        EFM8_JDY40_test.c:480: unsigned long GetPeriod (int n)
0660           1942   ;        -----------------------------------------
0660           1943   ;         function GetPeriod
0660           1944   ;        -----------------------------------------
0660           1945   _GetPeriod:
0660 AA82      1946            mov     r2,dpl
0662 AB83      1947            mov     r3,dph
0664           1948   ;        EFM8_JDY40_test.c:485: TR0=0; // Stop Timer/Counter 0
0664 C28C      1949            clr     _TR0
0666           1950   ;        EFM8_JDY40_test.c:486: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0666 5389F0    1951            anl     _TMOD,#0xF0
0669           1952   ;        EFM8_JDY40_test.c:487: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0669 438901    1953            orl     _TMOD,#0x01
066C           1954   ;        EFM8_JDY40_test.c:490: TR0=0;
066C C28C      1955            clr     _TR0
066E           1956   ;        EFM8_JDY40_test.c:491: TL0=0; TH0=0; TF0=0; overflow_count=0;
066E 758A00    1957            mov     _TL0,#0x00
0671 758C00    1958            mov     _TH0,#0x00
0674 C28D      1959            clr     _TF0
0676           1960   ;        EFM8_JDY40_test.c:492: TR0=1;
0676 D28C      1961            setb    _TR0
0678           1962   ;        EFM8_JDY40_test.c:495: TR0=0;
0678 C28C      1963            clr     _TR0
067A           1964   ;        EFM8_JDY40_test.c:496: TL0=0; TH0=0; TF0=0; overflow_count=0;
067A 758A00    1965            mov     _TL0,#0x00
067D 758C00    1966            mov     _TH0,#0x00
0680 C28D      1967            clr     _TF0
0682           1968   ;        EFM8_JDY40_test.c:497: TR0=1;
0682 D28C      1969            setb    _TR0
0684           1970   ;        EFM8_JDY40_test.c:498: while(PERIOD_PIN!=0) // Wait for the signal to be zero
0684 7C00      1971            mov     r4,#0x00
0686 7D00      1972            mov     r5,#0x00
0688           1973   L024005?:
0688 30A640    1974            jnb     _P2_6,L024007?
068B           1975   ;        EFM8_JDY40_test.c:500: if(TF0==1) // Did the 16-bit timer overflow?
068B           1976   ;        EFM8_JDY40_test.c:502: TF0=0;
068B 108D80    1977            jbc     _TF0,L024050?
068E 8000      1978            sjmp    L024005?
0690           1979   L024050?:
0690           1980   ;        EFM8_JDY40_test.c:503: overflow_count++;
0690 0C        1981            inc     r4
0691 BC00C0    1982            cjne    r4,#0x00,L024051?
0694 0D        1983            inc     r5
0695           1984   L024051?:
0695           1985   ;        EFM8_JDY40_test.c:504: if(overflow_count==10) // If it overflows too many times assume no signal is present
0695 BC0A00    1986            cjne    r4,#0x0A,L024005?
0698 BD0000    1987            cjne    r5,#0x00,L024005?
069B           1988   ;        EFM8_JDY40_test.c:506: TR0=0;
069B C28C      1989            clr     _TR0
069D           1990   ;        EFM8_JDY40_test.c:507: return 0; // No signal
069D 900000    1991            mov     dptr,#(0x00&0x00ff)
06A0 E4        1992            clr     a
06A1 F5F0      1993            mov     b,a
06A3 22        1994            ret
06A4           1995   L024007?:
06A4           1996   ;        EFM8_JDY40_test.c:513: TR0=0;
06A4 C28C      1997            clr     _TR0
06A6           1998   ;        EFM8_JDY40_test.c:514: TL0=0; TH0=0; TF0=0; overflow_count=0;
06A6 758A00    1999            mov     _TL0,#0x00
06A9 758C00    2000            mov     _TH0,#0x00
06AC C28D      2001            clr     _TF0
06AE           2002   ;        EFM8_JDY40_test.c:515: TR0=1;
06AE D28C      2003            setb    _TR0
06B0           2004   ;        EFM8_JDY40_test.c:516: while(PERIOD_PIN!=1) // Wait for the signal to be one
06B0 7C00      2005            mov     r4,#0x00
06B2 7D00      2006            mov     r5,#0x00
06B4           2007   L024012?:
06B4 20A640    2008            jb      _P2_6,L024014?
06B7           2009   ;        EFM8_JDY40_test.c:518: if(TF0==1) // Did the 16-bit timer overflow?
06B7           2010   ;        EFM8_JDY40_test.c:520: TF0=0;
06B7 108D80    2011            jbc     _TF0,L024055?
06BA 8000      2012            sjmp    L024012?
06BC           2013   L024055?:
06BC           2014   ;        EFM8_JDY40_test.c:521: overflow_count++;
06BC 0C        2015            inc     r4
06BD BC00C0    2016            cjne    r4,#0x00,L024056?
06C0 0D        2017            inc     r5
06C1           2018   L024056?:
06C1           2019   ;        EFM8_JDY40_test.c:522: if(overflow_count==10) // If it overflows too many times assume no signal is present
06C1 BC0A00    2020            cjne    r4,#0x0A,L024012?
06C4 BD0000    2021            cjne    r5,#0x00,L024012?
06C7           2022   ;        EFM8_JDY40_test.c:524: TR0=0;
06C7 C28C      2023            clr     _TR0
06C9           2024   ;        EFM8_JDY40_test.c:525: return 0; // No signal
06C9 900000    2025            mov     dptr,#(0x00&0x00ff)
06CC E4        2026            clr     a
06CD F5F0      2027            mov     b,a
06CF 22        2028            ret
06D0           2029   L024014?:
06D0           2030   ;        EFM8_JDY40_test.c:531: TR0=0;
06D0 C28C      2031            clr     _TR0
06D2           2032   ;        EFM8_JDY40_test.c:532: TL0=0; TH0=0; TF0=0; overflow_count=0;
06D2 758A00    2033            mov     _TL0,#0x00
06D5 758C00    2034            mov     _TH0,#0x00
06D8 C28D      2035            clr     _TF0
06DA 7C00      2036            mov     r4,#0x00
06DC 7D00      2037            mov     r5,#0x00
06DE           2038   ;        EFM8_JDY40_test.c:533: TR0=1; // Start the timer
06DE D28C      2039            setb    _TR0
06E0           2040   ;        EFM8_JDY40_test.c:534: for(i=0; i<n; i++) // Measure the time of 'n' periods
06E0 7E00      2041            mov     r6,#0x00
06E2           2042   L024025?:
06E2 8E07      2043            mov     ar7,r6
06E4 7800      2044            mov     r0,#0x00
06E6 C3        2045            clr     c
06E7 EF        2046            mov     a,r7
06E8 9A        2047            subb    a,r2
06E9 E8        2048            mov     a,r0
06EA 6480      2049            xrl     a,#0x80
06EC 8BF0      2050            mov     b,r3
06EE 63F080    2051            xrl     b,#0x80
06F1 95F0      2052            subb    a,b
06F3 5000      2053            jnc     L024028?
06F5           2054   ;        EFM8_JDY40_test.c:536: while(PERIOD_PIN!=0) // Wait for the signal to be zero
06F5 8C07      2055            mov     ar7,r4
06F7 8D00      2056            mov     ar0,r5
06F9           2057   L024017?:
06F9 30A6C0    2058            jnb     _P2_6,L024043?
06FC           2059   ;        EFM8_JDY40_test.c:538: if(TF0==1) // Did the 16-bit timer overflow?
06FC           2060   ;        EFM8_JDY40_test.c:540: TF0=0;
06FC 108D00    2061            jbc     _TF0,L024061?
06FF 8000      2062            sjmp    L024017?
0701           2063   L024061?:
0701           2064   ;        EFM8_JDY40_test.c:541: overflow_count++;
0701 0F        2065            inc     r7
0702 BF0080    2066            cjne    r7,#0x00,L024017?
0705 08        2067            inc     r0
0706           2068   ;        EFM8_JDY40_test.c:544: while(PERIOD_PIN!=1) // Wait for the signal to be one
0706 8000      2069            sjmp    L024017?
0708           2070   L024043?:
0708           2071   L024022?:
0708 20A680    2072            jb      _P2_6,L024047?
070B           2073   ;        EFM8_JDY40_test.c:546: if(TF0==1) // Did the 16-bit timer overflow?
070B           2074   ;        EFM8_JDY40_test.c:548: TF0=0;
070B 108DC0    2075            jbc     _TF0,L024063?
070E 8000      2076            sjmp    L024022?
0710           2077   L024063?:
0710           2078   ;        EFM8_JDY40_test.c:549: overflow_count++;
0710 0F        2079            inc     r7
0711 BF0040    2080            cjne    r7,#0x00,L024022?
0714 08        2081            inc     r0
0715 8000      2082            sjmp    L024022?
0717           2083   L024047?:
0717 8F04      2084            mov     ar4,r7
0719 8805      2085            mov     ar5,r0
071B           2086   ;        EFM8_JDY40_test.c:534: for(i=0; i<n; i++) // Measure the time of 'n' periods
071B 0E        2087            inc     r6
071C 8000      2088            sjmp    L024025?
071E           2089   L024028?:
071E           2090   ;        EFM8_JDY40_test.c:553: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
071E C28C      2091            clr     _TR0
0720           2092   ;        EFM8_JDY40_test.c:555: return (overflow_count*65536+TH0*256+TL0);
0720 8D03      2093            mov     ar3,r5
0722 8C02      2094            mov     ar2,r4
0724 7D00      2095            mov     r5,#0x00
0726 7C00      2096            mov     r4,#0x00
0728 AF8C      2097            mov     r7,_TH0
072A 7E00      2098            mov     r6,#0x00
072C EF        2099            mov     a,r7
072D 33        2100            rlc     a
072E 95E0      2101            subb    a,acc
0730 F8        2102            mov     r0,a
0731 F9        2103            mov     r1,a
0732 EE        2104            mov     a,r6
0733 2C        2105            add     a,r4
0734 FC        2106            mov     r4,a
0735 EF        2107            mov     a,r7
0736 3D        2108            addc    a,r5
0737 FD        2109            mov     r5,a
0738 E8        2110            mov     a,r0
0739 3A        2111            addc    a,r2
073A FA        2112            mov     r2,a
073B E9        2113            mov     a,r1
073C 3B        2114            addc    a,r3
073D FB        2115            mov     r3,a
073E AE8A      2116            mov     r6,_TL0
0740 E4        2117            clr     a
0741 FF        2118            mov     r7,a
0742 33        2119            rlc     a
0743 95E0      2120            subb    a,acc
0745 F8        2121            mov     r0,a
0746 F9        2122            mov     r1,a
0747 EE        2123            mov     a,r6
0748 2C        2124            add     a,r4
0749 FC        2125            mov     r4,a
074A EF        2126            mov     a,r7
074B 3D        2127            addc    a,r5
074C FD        2128            mov     r5,a
074D E8        2129            mov     a,r0
074E 3A        2130            addc    a,r2
074F FA        2131            mov     r2,a
0750 E9        2132            mov     a,r1
0751 3B        2133            addc    a,r3
0752 8C82      2134            mov     dpl,r4
0754 8D83      2135            mov     dph,r5
0756 8AF0      2136            mov     b,r2
0758 22        2137            ret
0759           2138   ;------------------------------------------------------------
0759           2139   ;Allocation info for local variables in function 'eputs'
0759           2140   ;------------------------------------------------------------
0759           2141   ;String                    Allocated to registers r2 r3 r4 
0759           2142   ;------------------------------------------------------------
0759           2143   ;        EFM8_JDY40_test.c:558: void eputs(char *String)
0759           2144   ;        -----------------------------------------
0759           2145   ;         function eputs
0759           2146   ;        -----------------------------------------
0759           2147   _eputs:
0759 AA82      2148            mov     r2,dpl
075B AB83      2149            mov     r3,dph
075D ACF0      2150            mov     r4,b
075F           2151   ;        EFM8_JDY40_test.c:560: while(*String)
075F           2152   L025001?:
075F 8A82      2153            mov     dpl,r2
0761 8B83      2154            mov     dph,r3
0763 8CF0      2155            mov     b,r4
0765 120000    2156            lcall   __gptrget
0768 FD        2157            mov     r5,a
0769 6000      2158            jz      L025004?
076B           2159   ;        EFM8_JDY40_test.c:562: putchar(*String);
076B 8D82      2160            mov     dpl,r5
076D C002      2161            push    ar2
076F C003      2162            push    ar3
0771 C004      2163            push    ar4
0773 120000    2164            lcall   _putchar
0776 D004      2165            pop     ar4
0778 D003      2166            pop     ar3
077A D002      2167            pop     ar2
077C           2168   ;        EFM8_JDY40_test.c:563: String++;
077C 0A        2169            inc     r2
077D BA0000    2170            cjne    r2,#0x00,L025001?
0780 0B        2171            inc     r3
0781 8000      2172            sjmp    L025001?
0783           2173   L025004?:
0783 22        2174            ret
0784           2175   ;------------------------------------------------------------
0784           2176   ;Allocation info for local variables in function 'PrintNumber'
0784           2177   ;------------------------------------------------------------
0784           2178   ;Base                      Allocated with name '_PrintNumber_PARM_2'
0784           2179   ;digits                    Allocated with name '_PrintNumber_PARM_3'
0784           2180   ;val                       Allocated with name '_PrintNumber_val_1_159'
0784           2181   ;j                         Allocated with name '_PrintNumber_j_1_160'
0784           2182   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
0784           2183   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
0784           2184   ;buff                      Allocated with name '_PrintNumber_buff_1_160'
0784           2185   ;------------------------------------------------------------
0784           2186   ;        EFM8_JDY40_test.c:567: void PrintNumber(long int val, int Base, int digits)
0784           2187   ;        -----------------------------------------
0784           2188   ;         function PrintNumber
0784           2189   ;        -----------------------------------------
0784           2190   _PrintNumber:
0784 858218    2191            mov     _PrintNumber_val_1_159,dpl
0787 858319    2192            mov     (_PrintNumber_val_1_159 + 1),dph
078A 85F01A    2193            mov     (_PrintNumber_val_1_159 + 2),b
078D F51B      2194            mov     (_PrintNumber_val_1_159 + 3),a
078F           2195   ;        EFM8_JDY40_test.c:573: buff[NBITS]=0;
078F 90BEF8    2196            mov     dptr,#(_PrintNumber_buff_1_160 + 0x0020)
0792 E4        2197            clr     a
0793 F0        2198            movx    @dptr,a
0794           2199   ;        EFM8_JDY40_test.c:575: if(val<0)
0794 E51B      2200            mov     a,(_PrintNumber_val_1_159 + 3)
0796 30E7C0    2201            jnb     acc.7,L026012?
0799           2202   ;        EFM8_JDY40_test.c:577: putchar('-');
0799 75822D    2203            mov     dpl,#0x2D
079C 120000    2204            lcall   _putchar
079F           2205   ;        EFM8_JDY40_test.c:578: val*=-1;
079F C3        2206            clr     c
07A0 E4        2207            clr     a
07A1 9518      2208            subb    a,_PrintNumber_val_1_159
07A3 F518      2209            mov     _PrintNumber_val_1_159,a
07A5 E4        2210            clr     a
07A6 9519      2211            subb    a,(_PrintNumber_val_1_159 + 1)
07A8 F519      2212            mov     (_PrintNumber_val_1_159 + 1),a
07AA E4        2213            clr     a
07AB 951A      2214            subb    a,(_PrintNumber_val_1_159 + 2)
07AD F51A      2215            mov     (_PrintNumber_val_1_159 + 2),a
07AF E4        2216            clr     a
07B0 951B      2217            subb    a,(_PrintNumber_val_1_159 + 3)
07B2 F51B      2218            mov     (_PrintNumber_val_1_159 + 3),a
07B4           2219   ;        EFM8_JDY40_test.c:582: while ( (val>0) | (digits>0) )
07B4           2220   L026012?:
07B4 75681F    2221            mov     _PrintNumber_j_1_160,#0x1F
07B7 E4        2222            clr     a
07B8 F569      2223            mov     (_PrintNumber_j_1_160 + 1),a
07BA A8C0      2224            mov     r0,_PrintNumber_PARM_3
07BC A9C1      2225            mov     r1,(_PrintNumber_PARM_3 + 1)
07BE           2226   L026005?:
07BE C3        2227            clr     c
07BF E4        2228            clr     a
07C0 9518      2229            subb    a,_PrintNumber_val_1_159
07C2 E4        2230            clr     a
07C3 9519      2231            subb    a,(_PrintNumber_val_1_159 + 1)
07C5 E4        2232            clr     a
07C6 951A      2233            subb    a,(_PrintNumber_val_1_159 + 2)
07C8 E4        2234            clr     a
07C9 6480      2235            xrl     a,#0x80
07CB 851BF0    2236            mov     b,(_PrintNumber_val_1_159 + 3)
07CE 63F080    2237            xrl     b,#0x80
07D1 95F0      2238            subb    a,b
07D3 E4        2239            clr     a
07D4 33        2240            rlc     a
07D5 FE        2241            mov     r6,a
07D6 C3        2242            clr     c
07D7 E4        2243            clr     a
07D8 98        2244            subb    a,r0
07D9 E4        2245            clr     a
07DA 6480      2246            xrl     a,#0x80
07DC 89F0      2247            mov     b,r1
07DE 63F080    2248            xrl     b,#0x80
07E1 95F0      2249            subb    a,b
07E3 E4        2250            clr     a
07E4 33        2251            rlc     a
07E5 FF        2252            mov     r7,a
07E6 4E        2253            orl     a,r6
07E7 7000      2254            jnz     L026016?
07E9 020000    2255            ljmp    L026007?
07EC           2256   L026016?:
07EC           2257   ;        EFM8_JDY40_test.c:584: buff[j--]=HexDigit[val%Base];
07EC AE68      2258            mov     r6,_PrintNumber_j_1_160
07EE AF69      2259            mov     r7,(_PrintNumber_j_1_160 + 1)
07F0 1568      2260            dec     _PrintNumber_j_1_160
07F2 74FF      2261            mov     a,#0xff
07F4 B568C0    2262            cjne    a,_PrintNumber_j_1_160,L026017?
07F7 1569      2263            dec     (_PrintNumber_j_1_160 + 1)
07F9           2264   L026017?:
07F9 EE        2265            mov     a,r6
07FA 24D8      2266            add     a,#_PrintNumber_buff_1_160
07FC F5B8      2267            mov     _PrintNumber_sloc0_1_0,a
07FE EF        2268            mov     a,r7
07FF 34BE      2269            addc    a,#(_PrintNumber_buff_1_160 >> 8)
0801 F5B9      2270            mov     (_PrintNumber_sloc0_1_0 + 1),a
0803 851008    2271            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
0806 E511      2272            mov     a,(_PrintNumber_PARM_2 + 1)
0808 F509      2273            mov     (_PrintNumber_sloc1_1_0 + 1),a
080A 33        2274            rlc     a
080B 95E0      2275            subb    a,acc
080D F50A      2276            mov     (_PrintNumber_sloc1_1_0 + 2),a
080F F50B      2277            mov     (_PrintNumber_sloc1_1_0 + 3),a
0811 850800    2278            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
0814 850901    2279            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
0817 850A02    2280            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
081A 850B03    2281            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
081D 851882    2282            mov     dpl,_PrintNumber_val_1_159
0820 851983    2283            mov     dph,(_PrintNumber_val_1_159 + 1)
0823 851AF0    2284            mov     b,(_PrintNumber_val_1_159 + 2)
0826 E51B      2285            mov     a,(_PrintNumber_val_1_159 + 3)
0828 C000      2286            push    ar0
082A C001      2287            push    ar1
082C 120000    2288            lcall   __modslong
082F AE82      2289            mov     r6,dpl
0831 AF83      2290            mov     r7,dph
0833 EE        2291            mov     a,r6
0834 24B0      2292            add     a,#_PrintNumber_HexDigit_1_160
0836 F582      2293            mov     dpl,a
0838 EF        2294            mov     a,r7
0839 3411      2295            addc    a,#(_PrintNumber_HexDigit_1_160 >> 8)
083B F583      2296            mov     dph,a
083D E4        2297            clr     a
083E 93        2298            movc    a,@a+dptr
083F 85B882    2299            mov     dpl,_PrintNumber_sloc0_1_0
0842 85B983    2300            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
0845 F0        2301            movx    @dptr,a
0846           2302   ;        EFM8_JDY40_test.c:585: val/=Base;
0846 850800    2303            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
0849 850901    2304            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
084C 850A02    2305            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
084F 850B03    2306            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
0852 851882    2307            mov     dpl,_PrintNumber_val_1_159
0855 851983    2308            mov     dph,(_PrintNumber_val_1_159 + 1)
0858 851AF0    2309            mov     b,(_PrintNumber_val_1_159 + 2)
085B E51B      2310            mov     a,(_PrintNumber_val_1_159 + 3)
085D 120000    2311            lcall   __divslong
0860 858218    2312            mov     _PrintNumber_val_1_159,dpl
0863 858319    2313            mov     (_PrintNumber_val_1_159 + 1),dph
0866 85F01A    2314            mov     (_PrintNumber_val_1_159 + 2),b
0869 F51B      2315            mov     (_PrintNumber_val_1_159 + 3),a
086B D001      2316            pop     ar1
086D D000      2317            pop     ar0
086F           2318   ;        EFM8_JDY40_test.c:586: if(digits!=0) digits--;
086F E8        2319            mov     a,r0
0870 49        2320            orl     a,r1
0871 7000      2321            jnz     L026018?
0873 020000    2322            ljmp    L026005?
0876           2323   L026018?:
0876 18        2324            dec     r0
0877 B8FF60    2325            cjne    r0,#0xff,L026019?
087A 19        2326            dec     r1
087B           2327   L026019?:
087B 020000    2328            ljmp    L026005?
087E           2329   L026007?:
087E           2330   ;        EFM8_JDY40_test.c:588: eputs(&buff[j+1]);
087E E568      2331            mov     a,_PrintNumber_j_1_160
0880 04        2332            inc     a
0881 24D8      2333            add     a,#_PrintNumber_buff_1_160
0883 FA        2334            mov     r2,a
0884 E4        2335            clr     a
0885 34BE      2336            addc    a,#(_PrintNumber_buff_1_160 >> 8)
0887 FB        2337            mov     r3,a
0888 7C00      2338            mov     r4,#0x00
088A 8A82      2339            mov     dpl,r2
088C 8B83      2340            mov     dph,r3
088E 8CF0      2341            mov     b,r4
0890 020000    2342            ljmp    _eputs
0893           2343   ;------------------------------------------------------------
0893           2344   ;Allocation info for local variables in function 'GetFrequency'
0893           2345   ;------------------------------------------------------------
0893           2346   ;pin                       Allocated with name '_GetFrequency_PARM_2'
0893           2347   ;c                         Allocated to registers r2 r3 r4 r5 
0893           2348   ;f                         Allocated to registers r6 r7 r0 r1 
0893           2349   ;------------------------------------------------------------
0893           2350   ;        EFM8_JDY40_test.c:591: unsigned long GetFrequency (long int c, int pin)
0893           2351   ;        -----------------------------------------
0893           2352   ;         function GetFrequency
0893           2353   ;        -----------------------------------------
0893           2354   _GetFrequency:
0893 AA82      2355            mov     r2,dpl
0895 AB83      2356            mov     r3,dph
0897 ACF0      2357            mov     r4,b
0899 FD        2358            mov     r5,a
089A           2359   ;        EFM8_JDY40_test.c:593: long int f = 0;
089A 7E00      2360            mov     r6,#0x00
089C 7F00      2361            mov     r7,#0x00
089E 7800      2362            mov     r0,#0x00
08A0 7900      2363            mov     r1,#0x00
08A2           2364   ;        EFM8_JDY40_test.c:595: if(c>0)
08A2 C3        2365            clr     c
08A3 E4        2366            clr     a
08A4 9A        2367            subb    a,r2
08A5 E4        2368            clr     a
08A6 9B        2369            subb    a,r3
08A7 E4        2370            clr     a
08A8 9C        2371            subb    a,r4
08A9 E4        2372            clr     a
08AA 6480      2373            xrl     a,#0x80
08AC 8DF0      2374            mov     b,r5
08AE 63F080    2375            xrl     b,#0x80
08B1 95F0      2376            subb    a,b
08B3 4000      2377            jc      L027006?
08B5 020000    2378            ljmp    L027002?
08B8           2379   L027006?:
08B8           2380   ;        EFM8_JDY40_test.c:597: f=(SYSCLK*200.0)/(c*12);
08B8 8A00      2381            mov     __mullong_PARM_2,r2
08BA 8B01      2382            mov     (__mullong_PARM_2 + 1),r3
08BC 8C02      2383            mov     (__mullong_PARM_2 + 2),r4
08BE 8D03      2384            mov     (__mullong_PARM_2 + 3),r5
08C0 90000C    2385            mov     dptr,#(0x0C&0x00ff)
08C3 E4        2386            clr     a
08C4 F5F0      2387            mov     b,a
08C6 120000    2388            lcall   __mullong
08C9 120000    2389            lcall   ___slong2fs
08CC AA82      2390            mov     r2,dpl
08CE AB83      2391            mov     r3,dph
08D0 ACF0      2392            mov     r4,b
08D2 FD        2393            mov     r5,a
08D3 C002      2394            push    ar2
08D5 C003      2395            push    ar3
08D7 C004      2396            push    ar4
08D9 C005      2397            push    ar5
08DB 9093A4    2398            mov     dptr,#0x93A4
08DE 75F056    2399            mov     b,#0x56
08E1 7450      2400            mov     a,#0x50
08E3 120000    2401            lcall   ___fsdiv
08E6 AA82      2402            mov     r2,dpl
08E8 AB83      2403            mov     r3,dph
08EA ACF0      2404            mov     r4,b
08EC FD        2405            mov     r5,a
08ED E581      2406            mov     a,sp
08EF 24FC      2407            add     a,#0xfc
08F1 F581      2408            mov     sp,a
08F3 8A82      2409            mov     dpl,r2
08F5 8B83      2410            mov     dph,r3
08F7 8CF0      2411            mov     b,r4
08F9 ED        2412            mov     a,r5
08FA 120000    2413            lcall   ___fs2slong
08FD AE82      2414            mov     r6,dpl
08FF AF83      2415            mov     r7,dph
0901 A8F0      2416            mov     r0,b
0903 F9        2417            mov     r1,a
0904           2418   ;        EFM8_JDY40_test.c:598: eputs(" f");
0904 90DAA0    2419            mov     dptr,#__str_4
0907 75F080    2420            mov     b,#0x80
090A C006      2421            push    ar6
090C C007      2422            push    ar7
090E C000      2423            push    ar0
0910 C001      2424            push    ar1
0912 120000    2425            lcall   _eputs
0915           2426   ;        EFM8_JDY40_test.c:599: PrintNumber(pin, 10, 1);
0915 AAB0      2427            mov     r2,_GetFrequency_PARM_2
0917 E5B1      2428            mov     a,(_GetFrequency_PARM_2 + 1)
0919 FB        2429            mov     r3,a
091A 33        2430            rlc     a
091B 95E0      2431            subb    a,acc
091D FC        2432            mov     r4,a
091E FD        2433            mov     r5,a
091F 75100A    2434            mov     _PrintNumber_PARM_2,#0x0A
0922 E4        2435            clr     a
0923 F511      2436            mov     (_PrintNumber_PARM_2 + 1),a
0925 75C001    2437            mov     _PrintNumber_PARM_3,#0x01
0928 E4        2438            clr     a
0929 F5C1      2439            mov     (_PrintNumber_PARM_3 + 1),a
092B 8A82      2440            mov     dpl,r2
092D 8B83      2441            mov     dph,r3
092F 8CF0      2442            mov     b,r4
0931 ED        2443            mov     a,r5
0932 120000    2444            lcall   _PrintNumber
0935           2445   ;        EFM8_JDY40_test.c:600: eputs(" = ");
0935 90DAE0    2446            mov     dptr,#__str_5
0938 75F080    2447            mov     b,#0x80
093B 120000    2448            lcall   _eputs
093E D001      2449            pop     ar1
0940 D000      2450            pop     ar0
0942 D007      2451            pop     ar7
0944 D006      2452            pop     ar6
0946           2453   ;        EFM8_JDY40_test.c:601: PrintNumber(f, 10, 7);
0946 75100A    2454            mov     _PrintNumber_PARM_2,#0x0A
0949 E4        2455            clr     a
094A F511      2456            mov     (_PrintNumber_PARM_2 + 1),a
094C 75C007    2457            mov     _PrintNumber_PARM_3,#0x07
094F E4        2458            clr     a
0950 F5C1      2459            mov     (_PrintNumber_PARM_3 + 1),a
0952 8E82      2460            mov     dpl,r6
0954 8F83      2461            mov     dph,r7
0956 88F0      2462            mov     b,r0
0958 E9        2463            mov     a,r1
0959 C006      2464            push    ar6
095B C007      2465            push    ar7
095D C000      2466            push    ar0
095F C001      2467            push    ar1
0961 120000    2468            lcall   _PrintNumber
0964           2469   ;        EFM8_JDY40_test.c:602: eputs("Hz");
0964 90DB20    2470            mov     dptr,#__str_6
0967 75F080    2471            mov     b,#0x80
096A 120000    2472            lcall   _eputs
096D D001      2473            pop     ar1
096F D000      2474            pop     ar0
0971 D007      2475            pop     ar7
0973 D006      2476            pop     ar6
0975           2477   L027002?:
0975           2478   ;        EFM8_JDY40_test.c:610: return f;
0975 8E82      2479            mov     dpl,r6
0977 8F83      2480            mov     dph,r7
0979 88F0      2481            mov     b,r0
097B E9        2482            mov     a,r1
097C 22        2483            ret
097D           2484   ;------------------------------------------------------------
097D           2485   ;Allocation info for local variables in function 'CoinDecider'
097D           2486   ;------------------------------------------------------------
097D           2487   ;freq                      Allocated to registers r2 r3 r4 r5 
097D           2488   ;------------------------------------------------------------
097D           2489   ;        EFM8_JDY40_test.c:613: int CoinDecider(long int freq)
097D           2490   ;        -----------------------------------------
097D           2491   ;         function CoinDecider
097D           2492   ;        -----------------------------------------
097D           2493   _CoinDecider:
097D AA82      2494            mov     r2,dpl
097F AB83      2495            mov     r3,dph
0981 ACF0      2496            mov     r4,b
0983 FD        2497            mov     r5,a
0984           2498   ;        EFM8_JDY40_test.c:615: if(freq>=56300) // detects a coin
0984 C3        2499            clr     c
0985 EA        2500            mov     a,r2
0986 94EC      2501            subb    a,#0xEC
0988 EB        2502            mov     a,r3
0989 94DB      2503            subb    a,#0xDB
098B EC        2504            mov     a,r4
098C 9400      2505            subb    a,#0x00
098E ED        2506            mov     a,r5
098F 6480      2507            xrl     a,#0x80
0991 9480      2508            subb    a,#0x80
0993 5000      2509            jnc     L028018?
0995 020000    2510            ljmp    L028010?
0998           2511   L028018?:
0998           2512   ;        EFM8_JDY40_test.c:618: if((freq >= 56200) && (freq < 56400))
0998 C3        2513            clr     c
0999 EA        2514            mov     a,r2
099A 9488      2515            subb    a,#0x88
099C EB        2516            mov     a,r3
099D 94DB      2517            subb    a,#0xDB
099F EC        2518            mov     a,r4
09A0 9400      2519            subb    a,#0x00
09A2 ED        2520            mov     a,r5
09A3 6480      2521            xrl     a,#0x80
09A5 9480      2522            subb    a,#0x80
09A7 4000      2523            jc      L028006?
09A9 EA        2524            mov     a,r2
09AA 9450      2525            subb    a,#0x50
09AC EB        2526            mov     a,r3
09AD 94DC      2527            subb    a,#0xDC
09AF EC        2528            mov     a,r4
09B0 9400      2529            subb    a,#0x00
09B2 ED        2530            mov     a,r5
09B3 6480      2531            xrl     a,#0x80
09B5 9480      2532            subb    a,#0x80
09B7 5000      2533            jnc     L028006?
09B9           2534   ;        EFM8_JDY40_test.c:620: eputs(" DIME");
09B9 90DC20    2535            mov     dptr,#__str_7
09BC 75F080    2536            mov     b,#0x80
09BF 120000    2537            lcall   _eputs
09C2 8000      2538            sjmp    L028007?
09C4           2539   L028006?:
09C4           2540   ;        EFM8_JDY40_test.c:624: else if ((freq >= 56400) && (freq < 56700))
09C4 C3        2541            clr     c
09C5 EA        2542            mov     a,r2
09C6 9450      2543            subb    a,#0x50
09C8 EB        2544            mov     a,r3
09C9 94DC      2545            subb    a,#0xDC
09CB EC        2546            mov     a,r4
09CC 9400      2547            subb    a,#0x00
09CE ED        2548            mov     a,r5
09CF 6480      2549            xrl     a,#0x80
09D1 9480      2550            subb    a,#0x80
09D3 4000      2551            jc      L028002?
09D5 EA        2552            mov     a,r2
09D6 947C      2553            subb    a,#0x7C
09D8 EB        2554            mov     a,r3
09D9 94DD      2555            subb    a,#0xDD
09DB EC        2556            mov     a,r4
09DC 9400      2557            subb    a,#0x00
09DE ED        2558            mov     a,r5
09DF 6480      2559            xrl     a,#0x80
09E1 9480      2560            subb    a,#0x80
09E3 5000      2561            jnc     L028002?
09E5           2562   ;        EFM8_JDY40_test.c:626: eputs(" NICKEL");
09E5 90DCE0    2563            mov     dptr,#__str_8
09E8 75F080    2564            mov     b,#0x80
09EB 120000    2565            lcall   _eputs
09EE 8000      2566            sjmp    L028007?
09F0           2567   L028002?:
09F0           2568   ;        EFM8_JDY40_test.c:632: eputs(" LOONIE");
09F0 90DD20    2569            mov     dptr,#__str_9
09F3 75F080    2570            mov     b,#0x80
09F6 120000    2571            lcall   _eputs
09F9           2572   L028007?:
09F9           2573   ;        EFM8_JDY40_test.c:635: return 1;
09F9 900001    2574            mov     dptr,#0x0001
09FC           2575   ;        EFM8_JDY40_test.c:643: return 0;
09FC 22        2576            ret
09FD           2577   L028010?:
09FD 900000    2578            mov     dptr,#0x0000
0A00 22        2579            ret
0A01           2580   ;------------------------------------------------------------
0A01           2581   ;Allocation info for local variables in function 'main'
0A01           2582   ;------------------------------------------------------------
0A01           2583   ;evilcode                  Allocated with name '_main_evilcode_1_175'
0A01           2584   ;evilcode1                 Allocated with name '_main_evilcode1_1_175'
0A01           2585   ;timeout                   Allocated to registers 
0A01           2586   ;pulse_width               Allocated to registers 
0A01           2587   ;pulse_width1              Allocated to registers 
0A01           2588   ;speed                     Allocated with name '_main_speed_1_175'
0A01           2589   ;steering                  Allocated with name '_main_steering_1_175'
0A01           2590   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_175'
0A01           2591   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_175'
0A01           2592   ;count                     Allocated to registers r2 r3 r4 r5 
0A01           2593   ;f                         Allocated to registers r2 r3 r4 r5 
0A01           2594   ;coinPresent               Allocated to registers 
0A01           2595   ;p_thresh                  Allocated to registers 
0A01           2596   ;v                         Allocated with name '_main_v_1_175'
0A01           2597   ;------------------------------------------------------------
0A01           2598   ;        EFM8_JDY40_test.c:646: void main (void)
0A01           2599   ;        -----------------------------------------
0A01           2600   ;         function main
0A01           2601   ;        -----------------------------------------
0A01           2602   _main:
0A01           2603   ;        EFM8_JDY40_test.c:664: waitms(500);
0A01 9001F4    2604            mov     dptr,#0x01F4
0A04 120000    2605            lcall   _waitms
0A07           2606   ;        EFM8_JDY40_test.c:665: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0A07 7460      2607            mov     a,#__str_10
0A09 C0E0      2608            push    acc
0A0B 74DD      2609            mov     a,#(__str_10 >> 8)
0A0D C0E0      2610            push    acc
0A0F 7480      2611            mov     a,#0x80
0A11 C0E0      2612            push    acc
0A13 120000    2613            lcall   _printf
0A16 1581      2614            dec     sp
0A18 1581      2615            dec     sp
0A1A 1581      2616            dec     sp
0A1C           2617   ;        EFM8_JDY40_test.c:666: UART1_Init(9600);
0A1C 902580    2618            mov     dptr,#0x2580
0A1F E4        2619            clr     a
0A20 F5F0      2620            mov     b,a
0A22 120000    2621            lcall   _UART1_Init
0A25           2622   ;        EFM8_JDY40_test.c:668: ReceptionOff();
0A25 120000    2623            lcall   _ReceptionOff
0A28           2624   ;        EFM8_JDY40_test.c:670: TIMER0_Init(); 
0A28 120000    2625            lcall   _TIMER0_Init
0A2B           2626   ;        EFM8_JDY40_test.c:672: InitPinADC(2, 1); // Configure P2.1 as analog input
0A2B 756001    2627            mov     _InitPinADC_PARM_2,#0x01
0A2E 758202    2628            mov     dpl,#0x02
0A31 120000    2629            lcall   _InitPinADC
0A34           2630   ;        EFM8_JDY40_test.c:673: InitPinADC(2, 2); // Configure P2.2 as analog input
0A34 756002    2631            mov     _InitPinADC_PARM_2,#0x02
0A37 758202    2632            mov     dpl,#0x02
0A3A 120000    2633            lcall   _InitPinADC
0A3D           2634   ;        EFM8_JDY40_test.c:674: InitADC();
0A3D 120000    2635            lcall   _InitADC
0A40           2636   ;        EFM8_JDY40_test.c:677: SendATCommand("AT+VER\r\n");
0A40 90DDA0    2637            mov     dptr,#__str_11
0A43 75F080    2638            mov     b,#0x80
0A46 120000    2639            lcall   _SendATCommand
0A49           2640   ;        EFM8_JDY40_test.c:678: SendATCommand("AT+BAUD\r\n");
0A49 90DDE0    2641            mov     dptr,#__str_12
0A4C 75F080    2642            mov     b,#0x80
0A4F 120000    2643            lcall   _SendATCommand
0A52           2644   ;        EFM8_JDY40_test.c:679: SendATCommand("AT+RFID\r\n");
0A52 90DE20    2645            mov     dptr,#__str_13
0A55 75F080    2646            mov     b,#0x80
0A58 120000    2647            lcall   _SendATCommand
0A5B           2648   ;        EFM8_JDY40_test.c:680: SendATCommand("AT+DVID\r\n");
0A5B 90DE60    2649            mov     dptr,#__str_14
0A5E 75F080    2650            mov     b,#0x80
0A61 120000    2651            lcall   _SendATCommand
0A64           2652   ;        EFM8_JDY40_test.c:681: SendATCommand("AT+RFC120\r\n");
0A64 90DEA0    2653            mov     dptr,#__str_15
0A67 75F080    2654            mov     b,#0x80
0A6A 120000    2655            lcall   _SendATCommand
0A6D           2656   ;        EFM8_JDY40_test.c:682: SendATCommand("AT+POWE\r\n");
0A6D 90DEE0    2657            mov     dptr,#__str_16
0A70 75F080    2658            mov     b,#0x80
0A73 120000    2659            lcall   _SendATCommand
0A76           2660   ;        EFM8_JDY40_test.c:683: SendATCommand("AT+CLSS\r\n");
0A76 90DF20    2661            mov     dptr,#__str_17
0A79 75F080    2662            mov     b,#0x80
0A7C 120000    2663            lcall   _SendATCommand
0A7F           2664   ;        EFM8_JDY40_test.c:687: SendATCommand("AT+DVIDFFFF\r\n");  
0A7F 90DF60    2665            mov     dptr,#__str_18
0A82 75F080    2666            mov     b,#0x80
0A85 120000    2667            lcall   _SendATCommand
0A88           2668   ;        EFM8_JDY40_test.c:689: while(1)
0A88           2669   L029009?:
0A88           2670   ;        EFM8_JDY40_test.c:692: count = GetPeriod(200);
0A88 9000C8    2671            mov     dptr,#0x00C8
0A8B 120000    2672            lcall   _GetPeriod
0A8E AA82      2673            mov     r2,dpl
0A90 AB83      2674            mov     r3,dph
0A92 ACF0      2675            mov     r4,b
0A94 FD        2676            mov     r5,a
0A95           2677   ;        EFM8_JDY40_test.c:693: f = GetFrequency(count, 1);
0A95 75B001    2678            mov     _GetFrequency_PARM_2,#0x01
0A98 E4        2679            clr     a
0A99 F5B1      2680            mov     (_GetFrequency_PARM_2 + 1),a
0A9B 8A82      2681            mov     dpl,r2
0A9D 8B83      2682            mov     dph,r3
0A9F 8CF0      2683            mov     b,r4
0AA1 ED        2684            mov     a,r5
0AA2 120000    2685            lcall   _GetFrequency
0AA5           2686   ;        EFM8_JDY40_test.c:694: coinPresent = CoinDecider(f); 
0AA5 AA82      2687            mov     r2,dpl
0AA7 AB83      2688            mov     r3,dph
0AA9 ACF0      2689            mov     r4,b
0AAB FD        2690            mov     r5,a
0AAC C002      2691            push    ar2
0AAE C003      2692            push    ar3
0AB0 C004      2693            push    ar4
0AB2 C005      2694            push    ar5
0AB4 120000    2695            lcall   _CoinDecider
0AB7 E582      2696            mov     a,dpl
0AB9 8583F0    2697            mov     b,dph
0ABC D005      2698            pop     ar5
0ABE D004      2699            pop     ar4
0AC0 D003      2700            pop     ar3
0AC2 D002      2701            pop     ar2
0AC4           2702   ;        EFM8_JDY40_test.c:695: if(coinPresent)
0AC4 45F0      2703            orl     a,b
0AC6 6000      2704            jz      L029002?
0AC8           2705   ;        EFM8_JDY40_test.c:697: sprintf(msg, "%ld", f);
0AC8 C002      2706            push    ar2
0ACA C003      2707            push    ar3
0ACC C004      2708            push    ar4
0ACE C005      2709            push    ar5
0AD0 7420      2710            mov     a,#__str_19
0AD2 C0E0      2711            push    acc
0AD4 74E0      2712            mov     a,#(__str_19 >> 8)
0AD6 C0E0      2713            push    acc
0AD8 7480      2714            mov     a,#0x80
0ADA C0E0      2715            push    acc
0ADC 7420      2716            mov     a,#_msg
0ADE C0E0      2717            push    acc
0AE0 7419      2718            mov     a,#(_msg >> 8)
0AE2 C0E0      2719            push    acc
0AE4 7440      2720            mov     a,#0x40
0AE6 C0E0      2721            push    acc
0AE8 120000    2722            lcall   _sprintf
0AEB E581      2723            mov     a,sp
0AED 24F6      2724            add     a,#0xf6
0AEF F581      2725            mov     sp,a
0AF1           2726   ;        EFM8_JDY40_test.c:698: sendstr1(msg);
0AF1 901920    2727            mov     dptr,#_msg
0AF4 75F040    2728            mov     b,#0x40
0AF7 120000    2729            lcall   _sendstr1
0AFA           2730   L029002?:
0AFA           2731   ;        EFM8_JDY40_test.c:702: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0AFA 75820E    2732            mov     dpl,#0x0E
0AFD 120000    2733            lcall   _Volts_at_Pin
0B00 AA82      2734            mov     r2,dpl
0B02 AB83      2735            mov     r3,dph
0B04 ACF0      2736            mov     r4,b
0B06 FD        2737            mov     r5,a
0B07 8A88      2738            mov     _main_v_1_175,r2
0B09 8B89      2739            mov     (_main_v_1_175 + 1),r3
0B0B 8C8A      2740            mov     (_main_v_1_175 + 2),r4
0B0D 8D8B      2741            mov     (_main_v_1_175 + 3),r5
0B0F           2742   ;        EFM8_JDY40_test.c:703: v[1] = Volts_at_Pin(QFP32_MUX_P2_2);
0B0F 75820F    2743            mov     dpl,#0x0F
0B12 120000    2744            lcall   _Volts_at_Pin
0B15 AA82      2745            mov     r2,dpl
0B17 AB83      2746            mov     r3,dph
0B19 ACF0      2747            mov     r4,b
0B1B FD        2748            mov     r5,a
0B1C 8A8C      2749            mov     (_main_v_1_175 + 0x0004),r2
0B1E 8B8D      2750            mov     ((_main_v_1_175 + 0x0004) + 1),r3
0B20 8C8E      2751            mov     ((_main_v_1_175 + 0x0004) + 2),r4
0B22 8D8F      2752            mov     ((_main_v_1_175 + 0x0004) + 3),r5
0B24           2753   ;        EFM8_JDY40_test.c:726: if(RXU1()) // Something has arrived
0B24 120000    2754            lcall   _RXU1
0B27 4000      2755            jc      L029018?
0B29 020000    2756            ljmp    L029009?
0B2C           2757   L029018?:
0B2C           2758   ;        EFM8_JDY40_test.c:729: getstr1(buff, sizeof(buff));
0B2C 752814    2759            mov     _getstr1_PARM_2,#0x14
0B2F 901960    2760            mov     dptr,#_buff
0B32 75F040    2761            mov     b,#0x40
0B35 120000    2762            lcall   _getstr1
0B38           2763   ;        EFM8_JDY40_test.c:730: sscanf(buff, "S%dT%d", &speed, &steering);
0B38 74A8      2764            mov     a,#_main_steering_1_175
0B3A C0E0      2765            push    acc
0B3C 74BD      2766            mov     a,#(_main_steering_1_175 >> 8)
0B3E C0E0      2767            push    acc
0B40 7440      2768            mov     a,#0x40
0B42 C0E0      2769            push    acc
0B44 7458      2770            mov     a,#_main_speed_1_175
0B46 C0E0      2771            push    acc
0B48 74BD      2772            mov     a,#(_main_speed_1_175 >> 8)
0B4A C0E0      2773            push    acc
0B4C 7440      2774            mov     a,#0x40
0B4E C0E0      2775            push    acc
0B50 74E0      2776            mov     a,#__str_20
0B52 C0E0      2777            push    acc
0B54 74E0      2778            mov     a,#(__str_20 >> 8)
0B56 C0E0      2779            push    acc
0B58 7480      2780            mov     a,#0x80
0B5A C0E0      2781            push    acc
0B5C 7460      2782            mov     a,#_buff
0B5E C0E0      2783            push    acc
0B60 7419      2784            mov     a,#(_buff >> 8)
0B62 C0E0      2785            push    acc
0B64 7440      2786            mov     a,#0x40
0B66 C0E0      2787            push    acc
0B68 120000    2788            lcall   _sscanf
0B6B E581      2789            mov     a,sp
0B6D 24F4      2790            add     a,#0xf4
0B6F F581      2791            mov     sp,a
0B71           2792   ;        EFM8_JDY40_test.c:731: if (speed < 503 )
0B71 C3        2793            clr     c
0B72 E558      2794            mov     a,_main_speed_1_175
0B74 94F7      2795            subb    a,#0xF7
0B76 E559      2796            mov     a,(_main_speed_1_175 + 1)
0B78 6480      2797            xrl     a,#0x80
0B7A 9481      2798            subb    a,#0x81
0B7C 5000      2799            jnc     L029004?
0B7E           2800   ;        EFM8_JDY40_test.c:733: P2_5 = 0;
0B7E C2A5      2801            clr     _P2_5
0B80           2802   ;        EFM8_JDY40_test.c:734: P3_7=0;
0B80 C2B7      2803            clr     _P3_7
0B82           2804   ;        EFM8_JDY40_test.c:735: direction = 1;
0B82 75A801    2805            mov     _direction,#0x01
0B85 E4        2806            clr     a
0B86 F5A9      2807            mov     (_direction + 1),a
0B88 8000      2808            sjmp    L029005?
0B8A           2809   L029004?:
0B8A           2810   ;        EFM8_JDY40_test.c:739: P3_2=0;
0B8A C2B2      2811            clr     _P3_2
0B8C           2812   ;        EFM8_JDY40_test.c:740: P3_0=0;
0B8C C2B0      2813            clr     _P3_0
0B8E           2814   ;        EFM8_JDY40_test.c:741: direction = 0;
0B8E E4        2815            clr     a
0B8F F5A8      2816            mov     _direction,a
0B91 F5A9      2817            mov     (_direction + 1),a
0B93           2818   L029005?:
0B93           2819   ;        EFM8_JDY40_test.c:744: ADCsteeringRatio(speed, steering, &adcwheel1, &adcwheel2);
0B93 75B0F8    2820            mov     _ADCsteeringRatio_PARM_3,#_main_adcwheel1_1_175
0B96 75B100    2821            mov     (_ADCsteeringRatio_PARM_3 + 1),#0x00
0B99 75B240    2822            mov     (_ADCsteeringRatio_PARM_3 + 2),#0x40
0B9C 756048    2823            mov     _ADCsteeringRatio_PARM_4,#_main_adcwheel2_1_175
0B9F 756100    2824            mov     (_ADCsteeringRatio_PARM_4 + 1),#0x00
0BA2 756240    2825            mov     (_ADCsteeringRatio_PARM_4 + 2),#0x40
0BA5 85A800    2826            mov     _ADCsteeringRatio_PARM_2,_main_steering_1_175
0BA8 85A901    2827            mov     (_ADCsteeringRatio_PARM_2 + 1),(_main_steering_1_175 + 1)
0BAB 855882    2828            mov     dpl,_main_speed_1_175
0BAE 855983    2829            mov     dph,(_main_speed_1_175 + 1)
0BB1 120000    2830            lcall   _ADCsteeringRatio
0BB4           2831   ;        EFM8_JDY40_test.c:746: pwm_duty4 = ADCtoPWM(adcwheel1);
0BB4 85F882    2832            mov     dpl,_main_adcwheel1_1_175
0BB7 85F983    2833            mov     dph,(_main_adcwheel1_1_175 + 1)
0BBA 120000    2834            lcall   _ADCtoPWM
0BBD 858268    2835            mov     _pwm_duty4,dpl
0BC0 858369    2836            mov     (_pwm_duty4 + 1),dph
0BC3           2837   ;        EFM8_JDY40_test.c:747: pwm_duty2 = ADCtoPWM(adcwheel2);
0BC3 854882    2838            mov     dpl,_main_adcwheel2_1_175
0BC6 854983    2839            mov     dph,(_main_adcwheel2_1_175 + 1)
0BC9 120000    2840            lcall   _ADCtoPWM
0BCC 8582E8    2841            mov     _pwm_duty2,dpl
0BCF 8583E9    2842            mov     (_pwm_duty2 + 1),dph
0BD2           2843   ;        EFM8_JDY40_test.c:749: printf("duty4= %u duty2 = %u buff=%s speed=%u steering=%u\n\r", pwm_duty4, pwm_duty2, buff, adcwheel1, adcwheel2);
0BD2 C048      2844            push    _main_adcwheel2_1_175
0BD4 C049      2845            push    (_main_adcwheel2_1_175 + 1)
0BD6 C0F8      2846            push    _main_adcwheel1_1_175
0BD8 C0F9      2847            push    (_main_adcwheel1_1_175 + 1)
0BDA 7460      2848            mov     a,#_buff
0BDC C0E0      2849            push    acc
0BDE 7419      2850            mov     a,#(_buff >> 8)
0BE0 C0E0      2851            push    acc
0BE2 7440      2852            mov     a,#0x40
0BE4 C0E0      2853            push    acc
0BE6 C0E8      2854            push    _pwm_duty2
0BE8 C0E9      2855            push    (_pwm_duty2 + 1)
0BEA C068      2856            push    _pwm_duty4
0BEC C069      2857            push    (_pwm_duty4 + 1)
0BEE 74E0      2858            mov     a,#__str_21
0BF0 C0E0      2859            push    acc
0BF2 74E1      2860            mov     a,#(__str_21 >> 8)
0BF4 C0E0      2861            push    acc
0BF6 7480      2862            mov     a,#0x80
0BF8 C0E0      2863            push    acc
0BFA 120000    2864            lcall   _printf
0BFD E581      2865            mov     a,sp
0BFF 24F2      2866            add     a,#0xf2
0C01 F581      2867            mov     sp,a
0C03           2868   ;        EFM8_JDY40_test.c:752: waitms(5); // The radio seems to need this delay...
0C03 900005    2869            mov     dptr,#0x0005
0C06 120000    2870            lcall   _waitms
0C09 020000    2871            ljmp    L029009?
0C0C           2872            rseg R_CSEG
0C0C           2873   
0000           2874            rseg R_XINIT
0000           2875   
0000           2876            rseg R_CONST
0000           2877   __str_0:
0000 436F6D6D  2878            db 'Command: %s'
     616E643A
     202573
000B 00        2879            db 0x00
000C           2880   __str_1:
000C 52657370  2881            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2882            db 0x0D
0019 0A        2883            db 0x0A
001A 00        2884            db 0x00
001B           2885   __str_2:
001B 41542B44  2886            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2887            db 0x0D
0027 0A        2888            db 0x0A
0028 00        2889            db 0x00
0029           2890   _PrintNumber_HexDigit_1_160:
0029 30313233  2891            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0039 00        2892            db 0x00
003A           2893   __str_4:
003A 2066      2894            db ' f'
003C 00        2895            db 0x00
003D           2896   __str_5:
003D 203D20    2897            db ' = '
0040 00        2898            db 0x00
0041           2899   __str_6:
0041 487A      2900            db 'Hz'
0043 00        2901            db 0x00
0044           2902   __str_7:
0044 2044494D  2903            db ' DIME'
     45
0049 00        2904            db 0x00
004A           2905   __str_8:
004A 204E4943  2906            db ' NICKEL'
     4B454C
0051 00        2907            db 0x00
0052           2908   __str_9:
0052 204C4F4F  2909            db ' LOONIE'
     4E4945
0059 00        2910            db 0x00
005A           2911   __str_10:
005A 0D        2912            db 0x0D
005B 0A        2913            db 0x0A
005C 45464D38  2914            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0077 0D        2915            db 0x0D
0078 0A        2916            db 0x0A
0079 00        2917            db 0x00
007A           2918   __str_11:
007A 41542B56  2919            db 'AT+VER'
     4552
0080 0D        2920            db 0x0D
0081 0A        2921            db 0x0A
0082 00        2922            db 0x00
0083           2923   __str_12:
0083 41542B42  2924            db 'AT+BAUD'
     415544
008A 0D        2925            db 0x0D
008B 0A        2926            db 0x0A
008C 00        2927            db 0x00
008D           2928   __str_13:
008D 41542B52  2929            db 'AT+RFID'
     464944
0094 0D        2930            db 0x0D
0095 0A        2931            db 0x0A
0096 00        2932            db 0x00
0097           2933   __str_14:
0097 41542B44  2934            db 'AT+DVID'
     564944
009E 0D        2935            db 0x0D
009F 0A        2936            db 0x0A
00A0 00        2937            db 0x00
00A1           2938   __str_15:
00A1 41542B52  2939            db 'AT+RFC120'
     46433132
     30
00AA 0D        2940            db 0x0D
00AB 0A        2941            db 0x0A
00AC 00        2942            db 0x00
00AD           2943   __str_16:
00AD 41542B50  2944            db 'AT+POWE'
     4F5745
00B4 0D        2945            db 0x0D
00B5 0A        2946            db 0x0A
00B6 00        2947            db 0x00
00B7           2948   __str_17:
00B7 41542B43  2949            db 'AT+CLSS'
     4C5353
00BE 0D        2950            db 0x0D
00BF 0A        2951            db 0x0A
00C0 00        2952            db 0x00
00C1           2953   __str_18:
00C1 41542B44  2954            db 'AT+DVIDFFFF'
     56494446
     464646
00CC 0D        2955            db 0x0D
00CD 0A        2956            db 0x0A
00CE 00        2957            db 0x00
00CF           2958   __str_19:
00CF 256C64    2959            db '%ld'
00D2 00        2960            db 0x00
00D3           2961   __str_20:
00D3 53256454  2962            db 'S%dT%d'
     2564
00D9 00        2963            db 0x00
00DA           2964   __str_21:
00DA 64757479  2965            db 'duty4= %u duty2 = %u buff=%s speed=%u steering=%u'
     343D2025
     75206475
     74793220
     3D202575
     20627566
     663D2573
     20737065
     65643D25
     75207374
     65657269
     6E673D25
     75
010B 0A        2966            db 0x0A
010C 0D        2967            db 0x0D
010D 00        2968            db 0x00
010E           2969   
008E           2970            CSEG
008E           2971   
008E           2972   end
