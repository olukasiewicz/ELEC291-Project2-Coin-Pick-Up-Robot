0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 27 13:55:49 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_163
0000             28            public _main
0000             29            public _automaticmode
0000             30            public _CoinDecider
0000             31            public _GetFrequency
0000             32            public _PrintNumber
0000             33            public _eputs
0000             34            public _GetPeriod
0000             35            public _ADCsteeringRatio
0000             36            public _ADCtoPWM
0000             37            public _Timer2_ISR
0000             38            public _Timer4_ISR
0000             39            public _Volts_at_Pin
0000             40            public _ADC_at_Pin
0000             41            public _InitPinADC
0000             42            public _InitADC
0000             43            public _TIMER0_Init
0000             44            public _ReceptionOff
0000             45            public _SendATCommand
0000             46            public _waitms_or_RI1
0000             47            public _RXU1
0000             48            public _getstr1
0000             49            public _getchar1_with_timeout
0000             50            public _getchar1
0000             51            public _sendstr1
0000             52            public _putchar1
0000             53            public _UART1_Init
0000             54            public _waitms
0000             55            public _Timer3us
0000             56            public __c51_external_startup
0000             57            public _msg
0000             58            public _buff
0000             59            public _automaticmode_PARM_2
0000             60            public _GetFrequency_PARM_2
0000             61            public _PrintNumber_PARM_3
0000             62            public _PrintNumber_PARM_2
0000             63            public _ADCsteeringRatio_PARM_4
0000             64            public _ADCsteeringRatio_PARM_3
0000             65            public _ADCsteeringRatio_PARM_2
0000             66            public _getstr1_PARM_2
0000             67            public _overflow_count
0000             68            public _peggingsidnatu
0000             69            public _direction
0000             70            public _pwm_duty2
0000             71            public _pwm_counter2
0000             72            public _pwm_duty4
0000             73            public _pwm_counter4
0000             74   ;--------------------------------------------------------
0000             75   ; Special Function Registers
0000             76   ;--------------------------------------------------------
0000             77   _ACC            DATA 0xe0
0000             78   _ADC0ASAH       DATA 0xb6
0000             79   _ADC0ASAL       DATA 0xb5
0000             80   _ADC0ASCF       DATA 0xa1
0000             81   _ADC0ASCT       DATA 0xc7
0000             82   _ADC0CF0        DATA 0xbc
0000             83   _ADC0CF1        DATA 0xb9
0000             84   _ADC0CF2        DATA 0xdf
0000             85   _ADC0CN0        DATA 0xe8
0000             86   _ADC0CN1        DATA 0xb2
0000             87   _ADC0CN2        DATA 0xb3
0000             88   _ADC0GTH        DATA 0xc4
0000             89   _ADC0GTL        DATA 0xc3
0000             90   _ADC0H          DATA 0xbe
0000             91   _ADC0L          DATA 0xbd
0000             92   _ADC0LTH        DATA 0xc6
0000             93   _ADC0LTL        DATA 0xc5
0000             94   _ADC0MX         DATA 0xbb
0000             95   _B              DATA 0xf0
0000             96   _CKCON0         DATA 0x8e
0000             97   _CKCON1         DATA 0xa6
0000             98   _CLEN0          DATA 0xc6
0000             99   _CLIE0          DATA 0xc7
0000            100   _CLIF0          DATA 0xe8
0000            101   _CLKSEL         DATA 0xa9
0000            102   _CLOUT0         DATA 0xd1
0000            103   _CLU0CF         DATA 0xb1
0000            104   _CLU0FN         DATA 0xaf
0000            105   _CLU0MX         DATA 0x84
0000            106   _CLU1CF         DATA 0xb3
0000            107   _CLU1FN         DATA 0xb2
0000            108   _CLU1MX         DATA 0x85
0000            109   _CLU2CF         DATA 0xb6
0000            110   _CLU2FN         DATA 0xb5
0000            111   _CLU2MX         DATA 0x91
0000            112   _CLU3CF         DATA 0xbf
0000            113   _CLU3FN         DATA 0xbe
0000            114   _CLU3MX         DATA 0xae
0000            115   _CMP0CN0        DATA 0x9b
0000            116   _CMP0CN1        DATA 0x99
0000            117   _CMP0MD         DATA 0x9d
0000            118   _CMP0MX         DATA 0x9f
0000            119   _CMP1CN0        DATA 0xbf
0000            120   _CMP1CN1        DATA 0xac
0000            121   _CMP1MD         DATA 0xab
0000            122   _CMP1MX         DATA 0xaa
0000            123   _CRC0CN0        DATA 0xce
0000            124   _CRC0CN1        DATA 0x86
0000            125   _CRC0CNT        DATA 0xd3
0000            126   _CRC0DAT        DATA 0xcb
0000            127   _CRC0FLIP       DATA 0xcf
0000            128   _CRC0IN         DATA 0xca
0000            129   _CRC0ST         DATA 0xd2
0000            130   _DAC0CF0        DATA 0x91
0000            131   _DAC0CF1        DATA 0x92
0000            132   _DAC0H          DATA 0x85
0000            133   _DAC0L          DATA 0x84
0000            134   _DAC1CF0        DATA 0x93
0000            135   _DAC1CF1        DATA 0x94
0000            136   _DAC1H          DATA 0x8a
0000            137   _DAC1L          DATA 0x89
0000            138   _DAC2CF0        DATA 0x95
0000            139   _DAC2CF1        DATA 0x96
0000            140   _DAC2H          DATA 0x8c
0000            141   _DAC2L          DATA 0x8b
0000            142   _DAC3CF0        DATA 0x9a
0000            143   _DAC3CF1        DATA 0x9c
0000            144   _DAC3H          DATA 0x8e
0000            145   _DAC3L          DATA 0x8d
0000            146   _DACGCF0        DATA 0x88
0000            147   _DACGCF1        DATA 0x98
0000            148   _DACGCF2        DATA 0xa2
0000            149   _DERIVID        DATA 0xad
0000            150   _DEVICEID       DATA 0xb5
0000            151   _DPH            DATA 0x83
0000            152   _DPL            DATA 0x82
0000            153   _EIE1           DATA 0xe6
0000            154   _EIE2           DATA 0xf3
0000            155   _EIP1           DATA 0xbb
0000            156   _EIP1H          DATA 0xee
0000            157   _EIP2           DATA 0xed
0000            158   _EIP2H          DATA 0xf6
0000            159   _EMI0CN         DATA 0xe7
0000            160   _FLKEY          DATA 0xb7
0000            161   _HFO0CAL        DATA 0xc7
0000            162   _HFO1CAL        DATA 0xd6
0000            163   _HFOCN          DATA 0xef
0000            164   _I2C0ADM        DATA 0xff
0000            165   _I2C0CN0        DATA 0xba
0000            166   _I2C0DIN        DATA 0xbc
0000            167   _I2C0DOUT       DATA 0xbb
0000            168   _I2C0FCN0       DATA 0xad
0000            169   _I2C0FCN1       DATA 0xab
0000            170   _I2C0FCT        DATA 0xf5
0000            171   _I2C0SLAD       DATA 0xbd
0000            172   _I2C0STAT       DATA 0xb9
0000            173   _IE             DATA 0xa8
0000            174   _IP             DATA 0xb8
0000            175   _IPH            DATA 0xf2
0000            176   _IT01CF         DATA 0xe4
0000            177   _LFO0CN         DATA 0xb1
0000            178   _P0             DATA 0x80
0000            179   _P0MASK         DATA 0xfe
0000            180   _P0MAT          DATA 0xfd
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P0MDOUT        DATA 0xa4
0000            183   _P0SKIP         DATA 0xd4
0000            184   _P1             DATA 0x90
0000            185   _P1MASK         DATA 0xee
0000            186   _P1MAT          DATA 0xed
0000            187   _P1MDIN         DATA 0xf2
0000            188   _P1MDOUT        DATA 0xa5
0000            189   _P1SKIP         DATA 0xd5
0000            190   _P2             DATA 0xa0
0000            191   _P2MASK         DATA 0xfc
0000            192   _P2MAT          DATA 0xfb
0000            193   _P2MDIN         DATA 0xf3
0000            194   _P2MDOUT        DATA 0xa6
0000            195   _P2SKIP         DATA 0xcc
0000            196   _P3             DATA 0xb0
0000            197   _P3MDIN         DATA 0xf4
0000            198   _P3MDOUT        DATA 0x9c
0000            199   _PCA0CENT       DATA 0x9e
0000            200   _PCA0CLR        DATA 0x9c
0000            201   _PCA0CN0        DATA 0xd8
0000            202   _PCA0CPH0       DATA 0xfc
0000            203   _PCA0CPH1       DATA 0xea
0000            204   _PCA0CPH2       DATA 0xec
0000            205   _PCA0CPH3       DATA 0xf5
0000            206   _PCA0CPH4       DATA 0x85
0000            207   _PCA0CPH5       DATA 0xde
0000            208   _PCA0CPL0       DATA 0xfb
0000            209   _PCA0CPL1       DATA 0xe9
0000            210   _PCA0CPL2       DATA 0xeb
0000            211   _PCA0CPL3       DATA 0xf4
0000            212   _PCA0CPL4       DATA 0x84
0000            213   _PCA0CPL5       DATA 0xdd
0000            214   _PCA0CPM0       DATA 0xda
0000            215   _PCA0CPM1       DATA 0xdb
0000            216   _PCA0CPM2       DATA 0xdc
0000            217   _PCA0CPM3       DATA 0xae
0000            218   _PCA0CPM4       DATA 0xaf
0000            219   _PCA0CPM5       DATA 0xcc
0000            220   _PCA0H          DATA 0xfa
0000            221   _PCA0L          DATA 0xf9
0000            222   _PCA0MD         DATA 0xd9
0000            223   _PCA0POL        DATA 0x96
0000            224   _PCA0PWM        DATA 0xf7
0000            225   _PCON0          DATA 0x87
0000            226   _PCON1          DATA 0xcd
0000            227   _PFE0CN         DATA 0xc1
0000            228   _PRTDRV         DATA 0xf6
0000            229   _PSCTL          DATA 0x8f
0000            230   _PSTAT0         DATA 0xaa
0000            231   _PSW            DATA 0xd0
0000            232   _REF0CN         DATA 0xd1
0000            233   _REG0CN         DATA 0xc9
0000            234   _REVID          DATA 0xb6
0000            235   _RSTSRC         DATA 0xef
0000            236   _SBCON1         DATA 0x94
0000            237   _SBRLH1         DATA 0x96
0000            238   _SBRLL1         DATA 0x95
0000            239   _SBUF           DATA 0x99
0000            240   _SBUF0          DATA 0x99
0000            241   _SBUF1          DATA 0x92
0000            242   _SCON           DATA 0x98
0000            243   _SCON0          DATA 0x98
0000            244   _SCON1          DATA 0xc8
0000            245   _SFRPAGE        DATA 0xa7
0000            246   _SFRPGCN        DATA 0xbc
0000            247   _SFRSTACK       DATA 0xd7
0000            248   _SMB0ADM        DATA 0xd6
0000            249   _SMB0ADR        DATA 0xd7
0000            250   _SMB0CF         DATA 0xc1
0000            251   _SMB0CN0        DATA 0xc0
0000            252   _SMB0DAT        DATA 0xc2
0000            253   _SMB0FCN0       DATA 0xc3
0000            254   _SMB0FCN1       DATA 0xc4
0000            255   _SMB0FCT        DATA 0xef
0000            256   _SMB0RXLN       DATA 0xc5
0000            257   _SMB0TC         DATA 0xac
0000            258   _SMOD1          DATA 0x93
0000            259   _SP             DATA 0x81
0000            260   _SPI0CFG        DATA 0xa1
0000            261   _SPI0CKR        DATA 0xa2
0000            262   _SPI0CN0        DATA 0xf8
0000            263   _SPI0DAT        DATA 0xa3
0000            264   _SPI0FCN0       DATA 0x9a
0000            265   _SPI0FCN1       DATA 0x9b
0000            266   _SPI0FCT        DATA 0xf7
0000            267   _SPI0PCF        DATA 0xdf
0000            268   _TCON           DATA 0x88
0000            269   _TH0            DATA 0x8c
0000            270   _TH1            DATA 0x8d
0000            271   _TL0            DATA 0x8a
0000            272   _TL1            DATA 0x8b
0000            273   _TMOD           DATA 0x89
0000            274   _TMR2CN0        DATA 0xc8
0000            275   _TMR2CN1        DATA 0xfd
0000            276   _TMR2H          DATA 0xcf
0000            277   _TMR2L          DATA 0xce
0000            278   _TMR2RLH        DATA 0xcb
0000            279   _TMR2RLL        DATA 0xca
0000            280   _TMR3CN0        DATA 0x91
0000            281   _TMR3CN1        DATA 0xfe
0000            282   _TMR3H          DATA 0x95
0000            283   _TMR3L          DATA 0x94
0000            284   _TMR3RLH        DATA 0x93
0000            285   _TMR3RLL        DATA 0x92
0000            286   _TMR4CN0        DATA 0x98
0000            287   _TMR4CN1        DATA 0xff
0000            288   _TMR4H          DATA 0xa5
0000            289   _TMR4L          DATA 0xa4
0000            290   _TMR4RLH        DATA 0xa3
0000            291   _TMR4RLL        DATA 0xa2
0000            292   _TMR5CN0        DATA 0xc0
0000            293   _TMR5CN1        DATA 0xf1
0000            294   _TMR5H          DATA 0xd5
0000            295   _TMR5L          DATA 0xd4
0000            296   _TMR5RLH        DATA 0xd3
0000            297   _TMR5RLL        DATA 0xd2
0000            298   _UART0PCF       DATA 0xd9
0000            299   _UART1FCN0      DATA 0x9d
0000            300   _UART1FCN1      DATA 0xd8
0000            301   _UART1FCT       DATA 0xfa
0000            302   _UART1LIN       DATA 0x9e
0000            303   _UART1PCF       DATA 0xda
0000            304   _VDM0CN         DATA 0xff
0000            305   _WDTCN          DATA 0x97
0000            306   _XBR0           DATA 0xe1
0000            307   _XBR1           DATA 0xe2
0000            308   _XBR2           DATA 0xe3
0000            309   _XOSC0CN        DATA 0x86
0000            310   _DPTR           DATA 0x8382
0000            311   _TMR2RL         DATA 0xcbca
0000            312   _TMR3RL         DATA 0x9392
0000            313   _TMR4RL         DATA 0xa3a2
0000            314   _TMR5RL         DATA 0xd3d2
0000            315   _TMR0           DATA 0x8c8a
0000            316   _TMR1           DATA 0x8d8b
0000            317   _TMR2           DATA 0xcfce
0000            318   _TMR3           DATA 0x9594
0000            319   _TMR4           DATA 0xa5a4
0000            320   _TMR5           DATA 0xd5d4
0000            321   _SBRL1          DATA 0x9695
0000            322   _PCA0           DATA 0xfaf9
0000            323   _PCA0CP0        DATA 0xfcfb
0000            324   _PCA0CP1        DATA 0xeae9
0000            325   _PCA0CP2        DATA 0xeceb
0000            326   _PCA0CP3        DATA 0xf5f4
0000            327   _PCA0CP4        DATA 0x8584
0000            328   _PCA0CP5        DATA 0xdedd
0000            329   _ADC0ASA        DATA 0xb6b5
0000            330   _ADC0GT         DATA 0xc4c3
0000            331   _ADC0           DATA 0xbebd
0000            332   _ADC0LT         DATA 0xc6c5
0000            333   _DAC0           DATA 0x8584
0000            334   _DAC1           DATA 0x8a89
0000            335   _DAC2           DATA 0x8c8b
0000            336   _DAC3           DATA 0x8e8d
0000            337   ;--------------------------------------------------------
0000            338   ; special function bits
0000            339   ;--------------------------------------------------------
0000            340   _ACC_0          BIT 0xe0
0000            341   _ACC_1          BIT 0xe1
0000            342   _ACC_2          BIT 0xe2
0000            343   _ACC_3          BIT 0xe3
0000            344   _ACC_4          BIT 0xe4
0000            345   _ACC_5          BIT 0xe5
0000            346   _ACC_6          BIT 0xe6
0000            347   _ACC_7          BIT 0xe7
0000            348   _TEMPE          BIT 0xe8
0000            349   _ADGN0          BIT 0xe9
0000            350   _ADGN1          BIT 0xea
0000            351   _ADWINT         BIT 0xeb
0000            352   _ADBUSY         BIT 0xec
0000            353   _ADINT          BIT 0xed
0000            354   _IPOEN          BIT 0xee
0000            355   _ADEN           BIT 0xef
0000            356   _B_0            BIT 0xf0
0000            357   _B_1            BIT 0xf1
0000            358   _B_2            BIT 0xf2
0000            359   _B_3            BIT 0xf3
0000            360   _B_4            BIT 0xf4
0000            361   _B_5            BIT 0xf5
0000            362   _B_6            BIT 0xf6
0000            363   _B_7            BIT 0xf7
0000            364   _C0FIF          BIT 0xe8
0000            365   _C0RIF          BIT 0xe9
0000            366   _C1FIF          BIT 0xea
0000            367   _C1RIF          BIT 0xeb
0000            368   _C2FIF          BIT 0xec
0000            369   _C2RIF          BIT 0xed
0000            370   _C3FIF          BIT 0xee
0000            371   _C3RIF          BIT 0xef
0000            372   _D1SRC0         BIT 0x88
0000            373   _D1SRC1         BIT 0x89
0000            374   _D1AMEN         BIT 0x8a
0000            375   _D01REFSL       BIT 0x8b
0000            376   _D3SRC0         BIT 0x8c
0000            377   _D3SRC1         BIT 0x8d
0000            378   _D3AMEN         BIT 0x8e
0000            379   _D23REFSL       BIT 0x8f
0000            380   _D0UDIS         BIT 0x98
0000            381   _D1UDIS         BIT 0x99
0000            382   _D2UDIS         BIT 0x9a
0000            383   _D3UDIS         BIT 0x9b
0000            384   _EX0            BIT 0xa8
0000            385   _ET0            BIT 0xa9
0000            386   _EX1            BIT 0xaa
0000            387   _ET1            BIT 0xab
0000            388   _ES0            BIT 0xac
0000            389   _ET2            BIT 0xad
0000            390   _ESPI0          BIT 0xae
0000            391   _EA             BIT 0xaf
0000            392   _PX0            BIT 0xb8
0000            393   _PT0            BIT 0xb9
0000            394   _PX1            BIT 0xba
0000            395   _PT1            BIT 0xbb
0000            396   _PS0            BIT 0xbc
0000            397   _PT2            BIT 0xbd
0000            398   _PSPI0          BIT 0xbe
0000            399   _P0_0           BIT 0x80
0000            400   _P0_1           BIT 0x81
0000            401   _P0_2           BIT 0x82
0000            402   _P0_3           BIT 0x83
0000            403   _P0_4           BIT 0x84
0000            404   _P0_5           BIT 0x85
0000            405   _P0_6           BIT 0x86
0000            406   _P0_7           BIT 0x87
0000            407   _P1_0           BIT 0x90
0000            408   _P1_1           BIT 0x91
0000            409   _P1_2           BIT 0x92
0000            410   _P1_3           BIT 0x93
0000            411   _P1_4           BIT 0x94
0000            412   _P1_5           BIT 0x95
0000            413   _P1_6           BIT 0x96
0000            414   _P1_7           BIT 0x97
0000            415   _P2_0           BIT 0xa0
0000            416   _P2_1           BIT 0xa1
0000            417   _P2_2           BIT 0xa2
0000            418   _P2_3           BIT 0xa3
0000            419   _P2_4           BIT 0xa4
0000            420   _P2_5           BIT 0xa5
0000            421   _P2_6           BIT 0xa6
0000            422   _P3_0           BIT 0xb0
0000            423   _P3_1           BIT 0xb1
0000            424   _P3_2           BIT 0xb2
0000            425   _P3_3           BIT 0xb3
0000            426   _P3_4           BIT 0xb4
0000            427   _P3_7           BIT 0xb7
0000            428   _CCF0           BIT 0xd8
0000            429   _CCF1           BIT 0xd9
0000            430   _CCF2           BIT 0xda
0000            431   _CCF3           BIT 0xdb
0000            432   _CCF4           BIT 0xdc
0000            433   _CCF5           BIT 0xdd
0000            434   _CR             BIT 0xde
0000            435   _CF             BIT 0xdf
0000            436   _PARITY         BIT 0xd0
0000            437   _F1             BIT 0xd1
0000            438   _OV             BIT 0xd2
0000            439   _RS0            BIT 0xd3
0000            440   _RS1            BIT 0xd4
0000            441   _F0             BIT 0xd5
0000            442   _AC             BIT 0xd6
0000            443   _CY             BIT 0xd7
0000            444   _RI             BIT 0x98
0000            445   _TI             BIT 0x99
0000            446   _RB8            BIT 0x9a
0000            447   _TB8            BIT 0x9b
0000            448   _REN            BIT 0x9c
0000            449   _CE             BIT 0x9d
0000            450   _SMODE          BIT 0x9e
0000            451   _RI1            BIT 0xc8
0000            452   _TI1            BIT 0xc9
0000            453   _RBX1           BIT 0xca
0000            454   _TBX1           BIT 0xcb
0000            455   _REN1           BIT 0xcc
0000            456   _PERR1          BIT 0xcd
0000            457   _OVR1           BIT 0xce
0000            458   _SI             BIT 0xc0
0000            459   _ACK            BIT 0xc1
0000            460   _ARBLOST        BIT 0xc2
0000            461   _ACKRQ          BIT 0xc3
0000            462   _STO            BIT 0xc4
0000            463   _STA            BIT 0xc5
0000            464   _TXMODE         BIT 0xc6
0000            465   _MASTER         BIT 0xc7
0000            466   _SPIEN          BIT 0xf8
0000            467   _TXNF           BIT 0xf9
0000            468   _NSSMD0         BIT 0xfa
0000            469   _NSSMD1         BIT 0xfb
0000            470   _RXOVRN         BIT 0xfc
0000            471   _MODF           BIT 0xfd
0000            472   _WCOL           BIT 0xfe
0000            473   _SPIF           BIT 0xff
0000            474   _IT0            BIT 0x88
0000            475   _IE0            BIT 0x89
0000            476   _IT1            BIT 0x8a
0000            477   _IE1            BIT 0x8b
0000            478   _TR0            BIT 0x8c
0000            479   _TF0            BIT 0x8d
0000            480   _TR1            BIT 0x8e
0000            481   _TF1            BIT 0x8f
0000            482   _T2XCLK0        BIT 0xc8
0000            483   _T2XCLK1        BIT 0xc9
0000            484   _TR2            BIT 0xca
0000            485   _T2SPLIT        BIT 0xcb
0000            486   _TF2CEN         BIT 0xcc
0000            487   _TF2LEN         BIT 0xcd
0000            488   _TF2L           BIT 0xce
0000            489   _TF2H           BIT 0xcf
0000            490   _T4XCLK0        BIT 0x98
0000            491   _T4XCLK1        BIT 0x99
0000            492   _TR4            BIT 0x9a
0000            493   _T4SPLIT        BIT 0x9b
0000            494   _TF4CEN         BIT 0x9c
0000            495   _TF4LEN         BIT 0x9d
0000            496   _TF4L           BIT 0x9e
0000            497   _TF4H           BIT 0x9f
0000            498   _T5XCLK0        BIT 0xc0
0000            499   _T5XCLK1        BIT 0xc1
0000            500   _TR5            BIT 0xc2
0000            501   _T5SPLIT        BIT 0xc3
0000            502   _TF5CEN         BIT 0xc4
0000            503   _TF5LEN         BIT 0xc5
0000            504   _TF5L           BIT 0xc6
0000            505   _TF5H           BIT 0xc7
0000            506   _RIE            BIT 0xd8
0000            507   _RXTO0          BIT 0xd9
0000            508   _RXTO1          BIT 0xda
0000            509   _RFRQ           BIT 0xdb
0000            510   _TIE            BIT 0xdc
0000            511   _TXHOLD         BIT 0xdd
0000            512   _TXNF1          BIT 0xde
0000            513   _TFRQ           BIT 0xdf
0000            514   ;--------------------------------------------------------
0000            515   ; overlayable register banks
0000            516   ;--------------------------------------------------------
0000            517            rbank0 segment data overlay
0000            518   ;--------------------------------------------------------
0000            519   ; internal ram data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_DSEG
0000            522   _pwm_counter4:
0000            523            ds 2
0002            524   _pwm_duty4:
0002            525            ds 2
0004            526   _pwm_counter2:
0004            527            ds 2
0006            528   _pwm_duty2:
0006            529            ds 2
0008            530   _direction:
0008            531            ds 2
000A            532   _peggingsidnatu:
000A            533            ds 2
000C            534   _overflow_count:
000C            535            ds 1
000D            536   _getstr1_PARM_2:
000D            537            ds 1
000E            538   _ADCsteeringRatio_PARM_2:
000E            539            ds 2
0010            540   _ADCsteeringRatio_PARM_3:
0010            541            ds 3
0013            542   _ADCsteeringRatio_PARM_4:
0013            543            ds 3
0016            544   _ADCsteeringRatio_sloc0_1_0:
0016            545            ds 1
0017            546   _ADCsteeringRatio_sloc1_1_0:
0017            547            ds 3
001A            548   _PrintNumber_PARM_2:
001A            549            ds 2
001C            550   _PrintNumber_PARM_3:
001C            551            ds 2
001E            552   _PrintNumber_val_1_162:
001E            553            ds 4
0022            554   _PrintNumber_j_1_163:
0022            555            ds 2
0024            556   _PrintNumber_sloc0_1_0:
0024            557            ds 2
0026            558   _PrintNumber_sloc1_1_0:
0026            559            ds 4
002A            560   _GetFrequency_PARM_2:
002A            561            ds 2
002C            562   _automaticmode_PARM_2:
002C            563            ds 4
0030            564   _main_speed_1_186:
0030            565            ds 2
0032            566   _main_steering_1_186:
0032            567            ds 2
0034            568   _main_adcwheel1_1_186:
0034            569            ds 2
0036            570   _main_adcwheel2_1_186:
0036            571            ds 2
0038            572   _main_v_1_186:
0038            573            ds 8
0040            574   ;--------------------------------------------------------
0040            575   ; overlayable items in internal ram 
0040            576   ;--------------------------------------------------------
0000            577            rseg    R_OSEG
0000            578            rseg    R_OSEG
0000            579            rseg    R_OSEG
0000            580            rseg    R_OSEG
0000            581   _InitPinADC_PARM_2:
0000            582            ds 1
0001            583            rseg    R_OSEG
0001            584            rseg    R_OSEG
0001            585   ;--------------------------------------------------------
0001            586   ; indirectly addressable internal ram data
0001            587   ;--------------------------------------------------------
0000            588            rseg R_ISEG
0000            589   _buff:
0000            590            ds 20
0014            591   _msg:
0014            592            ds 20
0028            593   _ADCsteeringRatio_centersteering_1_143:
0028            594            ds 2
002A            595   _ADCsteeringRatio_steeringFactor_1_143:
002A            596            ds 4
002E            597   _ADCsteeringRatio_wheel2Speed_1_143:
002E            598            ds 2
0030            599   ;--------------------------------------------------------
0030            600   ; absolute internal ram data
0030            601   ;--------------------------------------------------------
0000            602            DSEG
0000            603   ;--------------------------------------------------------
0000            604   ; bit data
0000            605   ;--------------------------------------------------------
0000            606            rseg R_BSEG
0000            607   ;--------------------------------------------------------
0000            608   ; paged external ram data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_PSEG
0000            611   ;--------------------------------------------------------
0000            612   ; external ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_XSEG
0000            615   _ADCsteeringRatio_wheel1Speed_1_143:
0000            616            ds 2
0002            617   _PrintNumber_buff_1_163:
0002            618            ds 33
0023            619   ;--------------------------------------------------------
0023            620   ; absolute external ram data
0023            621   ;--------------------------------------------------------
0000            622            XSEG
0000            623   ;--------------------------------------------------------
0000            624   ; external initialized ram data
0000            625   ;--------------------------------------------------------
0000            626            rseg R_IXSEG
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_CSEG
0000            630   ;--------------------------------------------------------
0000            631   ; Reset entry point and interrupt vectors
0000            632   ;--------------------------------------------------------
0000            633            CSEG at 0x0000
0000 020000     634            ljmp    _crt0
002B            635            CSEG at 0x002b
002B 020000     636            ljmp    _Timer2_ISR
008B            637            CSEG at 0x008b
008B 020000     638            ljmp    _Timer4_ISR
008E            639   ;--------------------------------------------------------
008E            640   ; global & static initialisations
008E            641   ;--------------------------------------------------------
0000            642            rseg R_HOME
0000            643            rseg R_GSINIT
0000            644            rseg R_GSINIT
0000            645   ;--------------------------------------------------------
0000            646   ; data variables initialization
0000            647   ;--------------------------------------------------------
0000            648            rseg R_DINIT
0000            649   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         650            clr     a
0001 F578       651            mov     _pwm_counter4,a
0003 F579       652            mov     (_pwm_counter4 + 1),a
0005            653   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0�65535)
0005 7538FF     654            mov     _pwm_duty4,#0xFF
0008 7539FF     655            mov     (_pwm_duty4 + 1),#0xFF
000B            656   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         657            clr     a
000C F5F8       658            mov     _pwm_counter2,a
000E F5F9       659            mov     (_pwm_counter2 + 1),a
0010            660   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0�65535)
0010 75B8FF     661            mov     _pwm_duty2,#0xFF
0013 75B9FF     662            mov     (_pwm_duty2 + 1),#0xFF
0016            663   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         664            clr     a
0017 F578       665            mov     _direction,a
0019 F579       666            mov     (_direction + 1),a
001B            667   ;        EFM8_JDY40_test.c:32: volatile int peggingsidnatu=0;
001B E4         668            clr     a
001C F538       669            mov     _peggingsidnatu,a
001E F539       670            mov     (_peggingsidnatu + 1),a
0020            671            ; The linker places a 'ret' at the end of segment R_DINIT.
0020            672   ;--------------------------------------------------------
0020            673   ; code
0020            674   ;--------------------------------------------------------
0000            675            rseg R_CSEG
0000            676   ;------------------------------------------------------------
0000            677   ;Allocation info for local variables in function '_c51_external_startup'
0000            678   ;------------------------------------------------------------
0000            679   ;------------------------------------------------------------
0000            680   ;        EFM8_JDY40_test.c:44: char _c51_external_startup (void)
0000            681   ;        -----------------------------------------
0000            682   ;         function _c51_external_startup
0000            683   ;        -----------------------------------------
0000            684   __c51_external_startup:
0000            685            using   0
0000            686   ;        EFM8_JDY40_test.c:47: SFRPAGE = 0x00;
0000 75A700     687            mov     _SFRPAGE,#0x00
0003            688   ;        EFM8_JDY40_test.c:48: WDTCN = 0xDE; //First key
0003 7597DE     689            mov     _WDTCN,#0xDE
0006            690   ;        EFM8_JDY40_test.c:49: WDTCN = 0xAD; //Second key
0006 7597AD     691            mov     _WDTCN,#0xAD
0009            692   ;        EFM8_JDY40_test.c:51: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     693            mov     _VDM0CN,#0x80
000C            694   ;        EFM8_JDY40_test.c:52: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     695            mov     _RSTSRC,#0x06
000F            696   ;        EFM8_JDY40_test.c:59: SFRPAGE = 0x10;
000F 75A710     697            mov     _SFRPAGE,#0x10
0012            698   ;        EFM8_JDY40_test.c:60: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     699            mov     _PFE0CN,#0x20
0015            700   ;        EFM8_JDY40_test.c:61: SFRPAGE = 0x00;
0015 75A700     701            mov     _SFRPAGE,#0x00
0018            702   ;        EFM8_JDY40_test.c:82: CLKSEL = 0x00;
0018 75A900     703            mov     _CLKSEL,#0x00
001B            704   ;        EFM8_JDY40_test.c:83: CLKSEL = 0x00;
001B 75A900     705            mov     _CLKSEL,#0x00
001E            706   ;        EFM8_JDY40_test.c:84: while ((CLKSEL & 0x80) == 0);
001E            707   L002001?:
001E E5A9       708            mov     a,_CLKSEL
0020 30E7F0     709            jnb     acc.7,L002001?
0023            710   ;        EFM8_JDY40_test.c:85: CLKSEL = 0x03;
0023 75A903     711            mov     _CLKSEL,#0x03
0026            712   ;        EFM8_JDY40_test.c:86: CLKSEL = 0x03;
0026 75A903     713            mov     _CLKSEL,#0x03
0029            714   ;        EFM8_JDY40_test.c:87: while ((CLKSEL & 0x80) == 0);
0029            715   L002004?:
0029 E5A9       716            mov     a,_CLKSEL
002B 30E770     717            jnb     acc.7,L002004?
002E            718   ;        EFM8_JDY40_test.c:92: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     719            orl     _P0MDOUT,#0x11
0031            720   ;        EFM8_JDY40_test.c:93: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     721            orl     _P2MDOUT,#0x01
0034            722   ;        EFM8_JDY40_test.c:94: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     723            mov     _XBR0,#0x01
0037            724   ;        EFM8_JDY40_test.c:95: XBR1     = 0X00;
0037 75E200     725            mov     _XBR1,#0x00
003A            726   ;        EFM8_JDY40_test.c:96: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     727            mov     _XBR2,#0x41
003D            728   ;        EFM8_JDY40_test.c:98: P3MDOUT |= 0b10000101;
003D 439C85     729            orl     _P3MDOUT,#0x85
0040            730   ;        EFM8_JDY40_test.c:99: XBR2     = 0x41; // existing line
0040 75E341     731            mov     _XBR2,#0x41
0043            732   ;        EFM8_JDY40_test.c:100: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     733            orl     _P3MDOUT,#0x85
0046            734   ;        EFM8_JDY40_test.c:106: SCON0 = 0x10;
0046 759810     735            mov     _SCON0,#0x10
0049            736   ;        EFM8_JDY40_test.c:107: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     737            mov     _TH1,#0xE6
004C            738   ;        EFM8_JDY40_test.c:108: TL1 = TH1;      // Init Timer1
004C 858D8B     739            mov     _TL1,_TH1
004F            740   ;        EFM8_JDY40_test.c:109: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     741            anl     _TMOD,#0x0F
0052            742   ;        EFM8_JDY40_test.c:110: TMOD |=  0x20;                       
0052 438920     743            orl     _TMOD,#0x20
0055            744   ;        EFM8_JDY40_test.c:111: TR1 = 1; // START Timer1
0055 D28E       745            setb    _TR1
0057            746   ;        EFM8_JDY40_test.c:112: TI = 1;  // Indicate TX0 ready
0057 D299       747            setb    _TI
0059            748   ;        EFM8_JDY40_test.c:116: SFRPAGE=0x10;
0059 75A710     749            mov     _SFRPAGE,#0x10
005C            750   ;        EFM8_JDY40_test.c:117: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     751            mov     _TMR4CN0,#0x00
005F            752   ;        EFM8_JDY40_test.c:118: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     753            orl     _CKCON1,#0x01
0062            754   ;        EFM8_JDY40_test.c:119: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     755            mov     _TMR4RL,#0xA8
0065 75A3FD     756            mov     (_TMR4RL >> 8),#0xFD
0068            757   ;        EFM8_JDY40_test.c:120: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     758            mov     _TMR4,#0xFF
006B 75A5FF     759            mov     (_TMR4 >> 8),#0xFF
006E            760   ;        EFM8_JDY40_test.c:121: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     761            orl     _EIE2,#0x04
0071            762   ;        EFM8_JDY40_test.c:122: TR4=1;
0071 D29A       763            setb    _TR4
0073            764   ;        EFM8_JDY40_test.c:123: EA=1;
0073 D2AF       765            setb    _EA
0075            766   ;        EFM8_JDY40_test.c:126: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     767            mov     _TMR2CN0,#0x00
0078            768   ;        EFM8_JDY40_test.c:127: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     769            orl     _CKCON0,#0x10
007B            770   ;        EFM8_JDY40_test.c:128: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     771            mov     _TMR2RL,#0xA8
007E 75CBFD     772            mov     (_TMR2RL >> 8),#0xFD
0081            773   ;        EFM8_JDY40_test.c:129: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     774            mov     _TMR2,#0xFF
0084 75CFFF     775            mov     (_TMR2 >> 8),#0xFF
0087            776   ;        EFM8_JDY40_test.c:130: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       777            setb    _ET2
0089            778   ;        EFM8_JDY40_test.c:131: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       779            setb    _TR2
008B            780   ;        EFM8_JDY40_test.c:132: SFRPAGE=0x00;
008B 75A700     781            mov     _SFRPAGE,#0x00
008E            782   ;        EFM8_JDY40_test.c:133: return 0;
008E 758200     783            mov     dpl,#0x00
0091 22         784            ret
0092            785   ;------------------------------------------------------------
0092            786   ;Allocation info for local variables in function 'Timer3us'
0092            787   ;------------------------------------------------------------
0092            788   ;us                        Allocated to registers r2 
0092            789   ;i                         Allocated to registers r3 
0092            790   ;------------------------------------------------------------
0092            791   ;        EFM8_JDY40_test.c:137: void Timer3us(unsigned char us)
0092            792   ;        -----------------------------------------
0092            793   ;         function Timer3us
0092            794   ;        -----------------------------------------
0092            795   _Timer3us:
0092 AA82       796            mov     r2,dpl
0094            797   ;        EFM8_JDY40_test.c:142: CKCON0|=0b_0100_0000;
0094 438E40     798            orl     _CKCON0,#0x40
0097            799   ;        EFM8_JDY40_test.c:144: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0097 7592B8     800            mov     _TMR3RL,#0xB8
009A 7593FF     801            mov     (_TMR3RL >> 8),#0xFF
009D            802   ;        EFM8_JDY40_test.c:145: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
009D 859294     803            mov     _TMR3,_TMR3RL
00A0 859395     804            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00A3            805   ;        EFM8_JDY40_test.c:147: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00A3 759104     806            mov     _TMR3CN0,#0x04
00A6            807   ;        EFM8_JDY40_test.c:148: for (i = 0; i < us; i++)       // Count <us> overflows
00A6 7B00       808            mov     r3,#0x00
00A8            809   L003004?:
00A8 C3         810            clr     c
00A9 EB         811            mov     a,r3
00AA 9A         812            subb    a,r2
00AB 5000       813            jnc     L003007?
00AD            814   ;        EFM8_JDY40_test.c:150: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00AD            815   L003001?:
00AD E591       816            mov     a,_TMR3CN0
00AF 30E770     817            jnb     acc.7,L003001?
00B2            818   ;        EFM8_JDY40_test.c:151: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00B2 53917F     819            anl     _TMR3CN0,#0x7F
00B5            820   ;        EFM8_JDY40_test.c:148: for (i = 0; i < us; i++)       // Count <us> overflows
00B5 0B         821            inc     r3
00B6 8000       822            sjmp    L003004?
00B8            823   L003007?:
00B8            824   ;        EFM8_JDY40_test.c:153: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00B8 759100     825            mov     _TMR3CN0,#0x00
00BB 22         826            ret
00BC            827   ;------------------------------------------------------------
00BC            828   ;Allocation info for local variables in function 'waitms'
00BC            829   ;------------------------------------------------------------
00BC            830   ;ms                        Allocated to registers r2 r3 
00BC            831   ;j                         Allocated to registers r4 r5 
00BC            832   ;k                         Allocated to registers r6 
00BC            833   ;------------------------------------------------------------
00BC            834   ;        EFM8_JDY40_test.c:156: void waitms (unsigned int ms)
00BC            835   ;        -----------------------------------------
00BC            836   ;         function waitms
00BC            837   ;        -----------------------------------------
00BC            838   _waitms:
00BC AA82       839            mov     r2,dpl
00BE AB83       840            mov     r3,dph
00C0            841   ;        EFM8_JDY40_test.c:160: for(j=0; j<ms; j++)
00C0 7C00       842            mov     r4,#0x00
00C2 7D00       843            mov     r5,#0x00
00C4            844   L004005?:
00C4 C3         845            clr     c
00C5 EC         846            mov     a,r4
00C6 9A         847            subb    a,r2
00C7 ED         848            mov     a,r5
00C8 9B         849            subb    a,r3
00C9 5000       850            jnc     L004009?
00CB            851   ;        EFM8_JDY40_test.c:161: for (k=0; k<4; k++) Timer3us(250);
00CB 7E00       852            mov     r6,#0x00
00CD            853   L004001?:
00CD BE04B0     854            cjne    r6,#0x04,L004018?
00D0            855   L004018?:
00D0 5000       856            jnc     L004007?
00D2 7582FA     857            mov     dpl,#0xFA
00D5 C002       858            push    ar2
00D7 C003       859            push    ar3
00D9 C004       860            push    ar4
00DB C005       861            push    ar5
00DD C006       862            push    ar6
00DF 120000     863            lcall   _Timer3us
00E2 D006       864            pop     ar6
00E4 D005       865            pop     ar5
00E6 D004       866            pop     ar4
00E8 D003       867            pop     ar3
00EA D002       868            pop     ar2
00EC 0E         869            inc     r6
00ED 8000       870            sjmp    L004001?
00EF            871   L004007?:
00EF            872   ;        EFM8_JDY40_test.c:160: for(j=0; j<ms; j++)
00EF 0C         873            inc     r4
00F0 BC00F0     874            cjne    r4,#0x00,L004005?
00F3 0D         875            inc     r5
00F4 8000       876            sjmp    L004005?
00F6            877   L004009?:
00F6 22         878            ret
00F7            879   ;------------------------------------------------------------
00F7            880   ;Allocation info for local variables in function 'UART1_Init'
00F7            881   ;------------------------------------------------------------
00F7            882   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00F7            883   ;------------------------------------------------------------
00F7            884   ;        EFM8_JDY40_test.c:164: void UART1_Init (unsigned long baudrate)
00F7            885   ;        -----------------------------------------
00F7            886   ;         function UART1_Init
00F7            887   ;        -----------------------------------------
00F7            888   _UART1_Init:
00F7 AA82       889            mov     r2,dpl
00F9 AB83       890            mov     r3,dph
00FB ACF0       891            mov     r4,b
00FD FD         892            mov     r5,a
00FE            893   ;        EFM8_JDY40_test.c:166: SFRPAGE = 0x20;
00FE 75A720     894            mov     _SFRPAGE,#0x20
0101            895   ;        EFM8_JDY40_test.c:167: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0101 75930C     896            mov     _SMOD1,#0x0C
0104            897   ;        EFM8_JDY40_test.c:168: SCON1 = 0x10;
0104 75C810     898            mov     _SCON1,#0x10
0107            899   ;        EFM8_JDY40_test.c:169: SBCON1 =0x00;   // disable baud rate generator
0107 759400     900            mov     _SBCON1,#0x00
010A            901   ;        EFM8_JDY40_test.c:170: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
010A 8A00       902            mov     __divulong_PARM_2,r2
010C 8B01       903            mov     (__divulong_PARM_2 + 1),r3
010E 8C02       904            mov     (__divulong_PARM_2 + 2),r4
0110 8D03       905            mov     (__divulong_PARM_2 + 3),r5
0112 90A200     906            mov     dptr,#0xA200
0115 75F04A     907            mov     b,#0x4A
0118 7404       908            mov     a,#0x04
011A 120000     909            lcall   __divulong
011D AA82       910            mov     r2,dpl
011F AB83       911            mov     r3,dph
0121 ACF0       912            mov     r4,b
0123 FD         913            mov     r5,a
0124 750018     914            mov     __divulong_PARM_2,#0x18
0127 E4         915            clr     a
0128 F501       916            mov     (__divulong_PARM_2 + 1),a
012A F502       917            mov     (__divulong_PARM_2 + 2),a
012C F503       918            mov     (__divulong_PARM_2 + 3),a
012E 8A82       919            mov     dpl,r2
0130 8B83       920            mov     dph,r3
0132 8CF0       921            mov     b,r4
0134 ED         922            mov     a,r5
0135 120000     923            lcall   __divulong
0138 AA82       924            mov     r2,dpl
013A AB83       925            mov     r3,dph
013C ACF0       926            mov     r4,b
013E FD         927            mov     r5,a
013F E4         928            clr     a
0140 C3         929            clr     c
0141 9A         930            subb    a,r2
0142 FA         931            mov     r2,a
0143 E4         932            clr     a
0144 9B         933            subb    a,r3
0145 FB         934            mov     r3,a
0146 7401       935            mov     a,#0x01
0148 9C         936            subb    a,r4
0149 E4         937            clr     a
014A 9D         938            subb    a,r5
014B 8A95       939            mov     _SBRL1,r2
014D 8B96       940            mov     (_SBRL1 >> 8),r3
014F            941   ;        EFM8_JDY40_test.c:171: TI1 = 1; // indicate ready for TX
014F D2C9       942            setb    _TI1
0151            943   ;        EFM8_JDY40_test.c:172: SBCON1 |= 0x40;   // enable baud rate generator
0151 439440     944            orl     _SBCON1,#0x40
0154            945   ;        EFM8_JDY40_test.c:173: SFRPAGE = 0x00;
0154 75A700     946            mov     _SFRPAGE,#0x00
0157 22         947            ret
0158            948   ;------------------------------------------------------------
0158            949   ;Allocation info for local variables in function 'putchar1'
0158            950   ;------------------------------------------------------------
0158            951   ;c                         Allocated to registers r2 
0158            952   ;------------------------------------------------------------
0158            953   ;        EFM8_JDY40_test.c:176: void putchar1 (char c) 
0158            954   ;        -----------------------------------------
0158            955   ;         function putchar1
0158            956   ;        -----------------------------------------
0158            957   _putchar1:
0158 AA82       958            mov     r2,dpl
015A            959   ;        EFM8_JDY40_test.c:178: SFRPAGE = 0x20;
015A 75A720     960            mov     _SFRPAGE,#0x20
015D            961   ;        EFM8_JDY40_test.c:179: while (!TI1);
015D            962   L006001?:
015D            963   ;        EFM8_JDY40_test.c:180: TI1=0;
015D 10C940     964            jbc     _TI1,L006008?
0160 8000       965            sjmp    L006001?
0162            966   L006008?:
0162            967   ;        EFM8_JDY40_test.c:181: SBUF1 = c;
0162 8A92       968            mov     _SBUF1,r2
0164            969   ;        EFM8_JDY40_test.c:182: SFRPAGE = 0x00;
0164 75A700     970            mov     _SFRPAGE,#0x00
0167 22         971            ret
0168            972   ;------------------------------------------------------------
0168            973   ;Allocation info for local variables in function 'sendstr1'
0168            974   ;------------------------------------------------------------
0168            975   ;s                         Allocated to registers r2 r3 r4 
0168            976   ;------------------------------------------------------------
0168            977   ;        EFM8_JDY40_test.c:185: void sendstr1 (char * s)
0168            978   ;        -----------------------------------------
0168            979   ;         function sendstr1
0168            980   ;        -----------------------------------------
0168            981   _sendstr1:
0168 AA82       982            mov     r2,dpl
016A AB83       983            mov     r3,dph
016C ACF0       984            mov     r4,b
016E            985   ;        EFM8_JDY40_test.c:187: while(*s)
016E            986   L007001?:
016E 8A82       987            mov     dpl,r2
0170 8B83       988            mov     dph,r3
0172 8CF0       989            mov     b,r4
0174 120000     990            lcall   __gptrget
0177 FD         991            mov     r5,a
0178 6000       992            jz      L007004?
017A            993   ;        EFM8_JDY40_test.c:189: putchar1(*s);
017A 8D82       994            mov     dpl,r5
017C C002       995            push    ar2
017E C003       996            push    ar3
0180 C004       997            push    ar4
0182 120000     998            lcall   _putchar1
0185 D004       999            pop     ar4
0187 D003      1000            pop     ar3
0189 D002      1001            pop     ar2
018B           1002   ;        EFM8_JDY40_test.c:190: s++;     
018B 0A        1003            inc     r2
018C BA0080    1004            cjne    r2,#0x00,L007001?
018F 0B        1005            inc     r3
0190 8000      1006            sjmp    L007001?
0192           1007   L007004?:
0192 22        1008            ret
0193           1009   ;------------------------------------------------------------
0193           1010   ;Allocation info for local variables in function 'getchar1'
0193           1011   ;------------------------------------------------------------
0193           1012   ;c                         Allocated to registers 
0193           1013   ;------------------------------------------------------------
0193           1014   ;        EFM8_JDY40_test.c:194: char getchar1 (void)
0193           1015   ;        -----------------------------------------
0193           1016   ;         function getchar1
0193           1017   ;        -----------------------------------------
0193           1018   _getchar1:
0193           1019   ;        EFM8_JDY40_test.c:197: SFRPAGE = 0x20;
0193 75A720    1020            mov     _SFRPAGE,#0x20
0196           1021   ;        EFM8_JDY40_test.c:198: while (!RI1);
0196           1022   L008001?:
0196           1023   ;        EFM8_JDY40_test.c:199: RI1=0;
0196 10C880    1024            jbc     _RI1,L008008?
0199 8000      1025            sjmp    L008001?
019B           1026   L008008?:
019B           1027   ;        EFM8_JDY40_test.c:201: SCON1&=0b_0011_1111;
019B 53C83F    1028            anl     _SCON1,#0x3F
019E           1029   ;        EFM8_JDY40_test.c:202: c = SBUF1;
019E 859282    1030            mov     dpl,_SBUF1
01A1           1031   ;        EFM8_JDY40_test.c:203: SFRPAGE = 0x00;
01A1 75A700    1032            mov     _SFRPAGE,#0x00
01A4           1033   ;        EFM8_JDY40_test.c:204: return (c);
01A4 22        1034            ret
01A5           1035   ;------------------------------------------------------------
01A5           1036   ;Allocation info for local variables in function 'getchar1_with_timeout'
01A5           1037   ;------------------------------------------------------------
01A5           1038   ;c                         Allocated to registers 
01A5           1039   ;timeout                   Allocated to registers r2 r3 
01A5           1040   ;------------------------------------------------------------
01A5           1041   ;        EFM8_JDY40_test.c:207: char getchar1_with_timeout (void)
01A5           1042   ;        -----------------------------------------
01A5           1043   ;         function getchar1_with_timeout
01A5           1044   ;        -----------------------------------------
01A5           1045   _getchar1_with_timeout:
01A5           1046   ;        EFM8_JDY40_test.c:211: SFRPAGE = 0x20;
01A5 75A720    1047            mov     _SFRPAGE,#0x20
01A8           1048   ;        EFM8_JDY40_test.c:213: while (!RI1)
01A8 7A00      1049            mov     r2,#0x00
01AA 7B00      1050            mov     r3,#0x00
01AC           1051   L009003?:
01AC 20C800    1052            jb      _RI1,L009005?
01AF           1053   ;        EFM8_JDY40_test.c:215: SFRPAGE = 0x00;
01AF 75A700    1054            mov     _SFRPAGE,#0x00
01B2           1055   ;        EFM8_JDY40_test.c:216: Timer3us(20);
01B2 758214    1056            mov     dpl,#0x14
01B5 C002      1057            push    ar2
01B7 C003      1058            push    ar3
01B9 120000    1059            lcall   _Timer3us
01BC D003      1060            pop     ar3
01BE D002      1061            pop     ar2
01C0           1062   ;        EFM8_JDY40_test.c:217: SFRPAGE = 0x20;
01C0 75A720    1063            mov     _SFRPAGE,#0x20
01C3           1064   ;        EFM8_JDY40_test.c:218: timeout++;
01C3 0A        1065            inc     r2
01C4 BA0040    1066            cjne    r2,#0x00,L009012?
01C7 0B        1067            inc     r3
01C8           1068   L009012?:
01C8           1069   ;        EFM8_JDY40_test.c:219: if(timeout==25000)
01C8 BAA8C0    1070            cjne    r2,#0xA8,L009003?
01CB BB61C0    1071            cjne    r3,#0x61,L009003?
01CE           1072   ;        EFM8_JDY40_test.c:221: SFRPAGE = 0x00;
01CE 75A700    1073            mov     _SFRPAGE,#0x00
01D1           1074   ;        EFM8_JDY40_test.c:222: return ('\n'); // Timeout after half second
01D1 75820A    1075            mov     dpl,#0x0A
01D4 22        1076            ret
01D5           1077   L009005?:
01D5           1078   ;        EFM8_JDY40_test.c:225: RI1=0;
01D5 C2C8      1079            clr     _RI1
01D7           1080   ;        EFM8_JDY40_test.c:227: SCON1&=0b_0011_1111;
01D7 53C83F    1081            anl     _SCON1,#0x3F
01DA           1082   ;        EFM8_JDY40_test.c:228: c = SBUF1;
01DA 859282    1083            mov     dpl,_SBUF1
01DD           1084   ;        EFM8_JDY40_test.c:229: SFRPAGE = 0x00;
01DD 75A700    1085            mov     _SFRPAGE,#0x00
01E0           1086   ;        EFM8_JDY40_test.c:230: return (c);
01E0 22        1087            ret
01E1           1088   ;------------------------------------------------------------
01E1           1089   ;Allocation info for local variables in function 'getstr1'
01E1           1090   ;------------------------------------------------------------
01E1           1091   ;n                         Allocated with name '_getstr1_PARM_2'
01E1           1092   ;s                         Allocated to registers r2 r3 r4 
01E1           1093   ;c                         Allocated to registers r1 
01E1           1094   ;cnt                       Allocated to registers r5 
01E1           1095   ;------------------------------------------------------------
01E1           1096   ;        EFM8_JDY40_test.c:233: void getstr1 (char * s, unsigned char n)
01E1           1097   ;        -----------------------------------------
01E1           1098   ;         function getstr1
01E1           1099   ;        -----------------------------------------
01E1           1100   _getstr1:
01E1 AA82      1101            mov     r2,dpl
01E3 AB83      1102            mov     r3,dph
01E5 ACF0      1103            mov     r4,b
01E7           1104   ;        EFM8_JDY40_test.c:239: while(1)
01E7 7D00      1105            mov     r5,#0x00
01E9 8A06      1106            mov     ar6,r2
01EB 8B07      1107            mov     ar7,r3
01ED 8C00      1108            mov     ar0,r4
01EF           1109   L010007?:
01EF           1110   ;        EFM8_JDY40_test.c:241: c=getchar1_with_timeout();
01EF C002      1111            push    ar2
01F1 C003      1112            push    ar3
01F3 C004      1113            push    ar4
01F5 C005      1114            push    ar5
01F7 C006      1115            push    ar6
01F9 C007      1116            push    ar7
01FB C000      1117            push    ar0
01FD 120000    1118            lcall   _getchar1_with_timeout
0200 A982      1119            mov     r1,dpl
0202 D000      1120            pop     ar0
0204 D007      1121            pop     ar7
0206 D006      1122            pop     ar6
0208 D005      1123            pop     ar5
020A D004      1124            pop     ar4
020C D003      1125            pop     ar3
020E D002      1126            pop     ar2
0210           1127   ;        EFM8_JDY40_test.c:242: if(c=='\n')
0210 B90AC0    1128            cjne    r1,#0x0A,L010002?
0213           1129   ;        EFM8_JDY40_test.c:244: *s=0;
0213 8A82      1130            mov     dpl,r2
0215 8B83      1131            mov     dph,r3
0217 8CF0      1132            mov     b,r4
0219 E4        1133            clr     a
021A           1134   ;        EFM8_JDY40_test.c:245: return;
021A 020000    1135            ljmp    __gptrput
021D           1136   L010002?:
021D           1137   ;        EFM8_JDY40_test.c:248: if (cnt<n)
021D C3        1138            clr     c
021E ED        1139            mov     a,r5
021F 95B8      1140            subb    a,_getstr1_PARM_2
0221 5000      1141            jnc     L010004?
0223           1142   ;        EFM8_JDY40_test.c:250: cnt++;
0223 0D        1143            inc     r5
0224           1144   ;        EFM8_JDY40_test.c:251: *s=c;
0224 8E82      1145            mov     dpl,r6
0226 8F83      1146            mov     dph,r7
0228 88F0      1147            mov     b,r0
022A E9        1148            mov     a,r1
022B 120000    1149            lcall   __gptrput
022E A3        1150            inc     dptr
022F AE82      1151            mov     r6,dpl
0231 AF83      1152            mov     r7,dph
0233           1153   ;        EFM8_JDY40_test.c:252: s++;
0233 8E02      1154            mov     ar2,r6
0235 8F03      1155            mov     ar3,r7
0237 8804      1156            mov     ar4,r0
0239 8000      1157            sjmp    L010007?
023B           1158   L010004?:
023B           1159   ;        EFM8_JDY40_test.c:256: *s=0;
023B 8A82      1160            mov     dpl,r2
023D 8B83      1161            mov     dph,r3
023F 8CF0      1162            mov     b,r4
0241 E4        1163            clr     a
0242           1164   ;        EFM8_JDY40_test.c:257: return;
0242 020000    1165            ljmp    __gptrput
0245           1166   ;------------------------------------------------------------
0245           1167   ;Allocation info for local variables in function 'RXU1'
0245           1168   ;------------------------------------------------------------
0245           1169   ;------------------------------------------------------------
0245           1170   ;        EFM8_JDY40_test.c:263: bit RXU1 (void)
0245           1171   ;        -----------------------------------------
0245           1172   ;         function RXU1
0245           1173   ;        -----------------------------------------
0245           1174   _RXU1:
0245           1175   ;        EFM8_JDY40_test.c:266: SFRPAGE = 0x20;
0245 75A720    1176            mov     _SFRPAGE,#0x20
0248           1177   ;        EFM8_JDY40_test.c:267: mybit=RI1;
0248 A2C8      1178            mov     c,_RI1
024A           1179   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x00;
024A 75A700    1180            mov     _SFRPAGE,#0x00
024D           1181   ;        EFM8_JDY40_test.c:269: return mybit;
024D 22        1182            ret
024E           1183   ;------------------------------------------------------------
024E           1184   ;Allocation info for local variables in function 'waitms_or_RI1'
024E           1185   ;------------------------------------------------------------
024E           1186   ;ms                        Allocated to registers r2 r3 
024E           1187   ;j                         Allocated to registers r4 r5 
024E           1188   ;k                         Allocated to registers r6 
024E           1189   ;------------------------------------------------------------
024E           1190   ;        EFM8_JDY40_test.c:272: void waitms_or_RI1 (unsigned int ms)
024E           1191   ;        -----------------------------------------
024E           1192   ;         function waitms_or_RI1
024E           1193   ;        -----------------------------------------
024E           1194   _waitms_or_RI1:
024E AA82      1195            mov     r2,dpl
0250 AB83      1196            mov     r3,dph
0252           1197   ;        EFM8_JDY40_test.c:276: for(j=0; j<ms; j++)
0252 7C00      1198            mov     r4,#0x00
0254 7D00      1199            mov     r5,#0x00
0256           1200   L012007?:
0256 C3        1201            clr     c
0257 EC        1202            mov     a,r4
0258 9A        1203            subb    a,r2
0259 ED        1204            mov     a,r5
025A 9B        1205            subb    a,r3
025B 5000      1206            jnc     L012011?
025D           1207   ;        EFM8_JDY40_test.c:278: for (k=0; k<4; k++)
025D 7E00      1208            mov     r6,#0x00
025F           1209   L012003?:
025F BE0440    1210            cjne    r6,#0x04,L012019?
0262           1211   L012019?:
0262 5000      1212            jnc     L012009?
0264           1213   ;        EFM8_JDY40_test.c:280: if(RXU1()) return;
0264 C002      1214            push    ar2
0266 C003      1215            push    ar3
0268 C004      1216            push    ar4
026A C005      1217            push    ar5
026C C006      1218            push    ar6
026E 120000    1219            lcall   _RXU1
0271 E4        1220            clr     a
0272 33        1221            rlc     a
0273 D006      1222            pop     ar6
0275 D005      1223            pop     ar5
0277 D004      1224            pop     ar4
0279 D003      1225            pop     ar3
027B D002      1226            pop     ar2
027D 6000      1227            jz      L012002?
027F 22        1228            ret
0280           1229   L012002?:
0280           1230   ;        EFM8_JDY40_test.c:281: Timer3us(250);
0280 7582FA    1231            mov     dpl,#0xFA
0283 C002      1232            push    ar2
0285 C003      1233            push    ar3
0287 C004      1234            push    ar4
0289 C005      1235            push    ar5
028B C006      1236            push    ar6
028D 120000    1237            lcall   _Timer3us
0290 D006      1238            pop     ar6
0292 D005      1239            pop     ar5
0294 D004      1240            pop     ar4
0296 D003      1241            pop     ar3
0298 D002      1242            pop     ar2
029A           1243   ;        EFM8_JDY40_test.c:278: for (k=0; k<4; k++)
029A 0E        1244            inc     r6
029B 8000      1245            sjmp    L012003?
029D           1246   L012009?:
029D           1247   ;        EFM8_JDY40_test.c:276: for(j=0; j<ms; j++)
029D 0C        1248            inc     r4
029E BC0080    1249            cjne    r4,#0x00,L012007?
02A1 0D        1250            inc     r5
02A2 8000      1251            sjmp    L012007?
02A4           1252   L012011?:
02A4 22        1253            ret
02A5           1254   ;------------------------------------------------------------
02A5           1255   ;Allocation info for local variables in function 'SendATCommand'
02A5           1256   ;------------------------------------------------------------
02A5           1257   ;s                         Allocated to registers r2 r3 r4 
02A5           1258   ;------------------------------------------------------------
02A5           1259   ;        EFM8_JDY40_test.c:286: void SendATCommand (char * s)
02A5           1260   ;        -----------------------------------------
02A5           1261   ;         function SendATCommand
02A5           1262   ;        -----------------------------------------
02A5           1263   _SendATCommand:
02A5 AA82      1264            mov     r2,dpl
02A7 AB83      1265            mov     r3,dph
02A9 ACF0      1266            mov     r4,b
02AB           1267   ;        EFM8_JDY40_test.c:288: printf("Command: %s", s);
02AB C002      1268            push    ar2
02AD C003      1269            push    ar3
02AF C004      1270            push    ar4
02B1 C002      1271            push    ar2
02B3 C003      1272            push    ar3
02B5 C004      1273            push    ar4
02B7 7400      1274            mov     a,#__str_0
02B9 C0E0      1275            push    acc
02BB 74CB      1276            mov     a,#(__str_0 >> 8)
02BD C0E0      1277            push    acc
02BF 7480      1278            mov     a,#0x80
02C1 C0E0      1279            push    acc
02C3 120000    1280            lcall   _printf
02C6 E581      1281            mov     a,sp
02C8 24FA      1282            add     a,#0xfa
02CA F581      1283            mov     sp,a
02CC           1284   ;        EFM8_JDY40_test.c:289: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02CC C2A0      1285            clr     _P2_0
02CE           1286   ;        EFM8_JDY40_test.c:290: waitms(5);
02CE 900005    1287            mov     dptr,#0x0005
02D1 120000    1288            lcall   _waitms
02D4 D004      1289            pop     ar4
02D6 D003      1290            pop     ar3
02D8 D002      1291            pop     ar2
02DA           1292   ;        EFM8_JDY40_test.c:291: sendstr1(s);
02DA 8A82      1293            mov     dpl,r2
02DC 8B83      1294            mov     dph,r3
02DE 8CF0      1295            mov     b,r4
02E0 120000    1296            lcall   _sendstr1
02E3           1297   ;        EFM8_JDY40_test.c:292: getstr1(buff, sizeof(buff)-1);
02E3 75B813    1298            mov     _getstr1_PARM_2,#0x13
02E6 9019A0    1299            mov     dptr,#_buff
02E9 75F040    1300            mov     b,#0x40
02EC 120000    1301            lcall   _getstr1
02EF           1302   ;        EFM8_JDY40_test.c:293: waitms(10);
02EF 90000A    1303            mov     dptr,#0x000A
02F2 120000    1304            lcall   _waitms
02F5           1305   ;        EFM8_JDY40_test.c:294: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F5 D2A0      1306            setb    _P2_0
02F7           1307   ;        EFM8_JDY40_test.c:295: printf("Response: %s\r\n", buff);
02F7 74A0      1308            mov     a,#_buff
02F9 C0E0      1309            push    acc
02FB 7419      1310            mov     a,#(_buff >> 8)
02FD C0E0      1311            push    acc
02FF 7440      1312            mov     a,#0x40
0301 C0E0      1313            push    acc
0303 74C0      1314            mov     a,#__str_1
0305 C0E0      1315            push    acc
0307 74CB      1316            mov     a,#(__str_1 >> 8)
0309 C0E0      1317            push    acc
030B 7480      1318            mov     a,#0x80
030D C0E0      1319            push    acc
030F 120000    1320            lcall   _printf
0312 E581      1321            mov     a,sp
0314 24FA      1322            add     a,#0xfa
0316 F581      1323            mov     sp,a
0318 22        1324            ret
0319           1325   ;------------------------------------------------------------
0319           1326   ;Allocation info for local variables in function 'ReceptionOff'
0319           1327   ;------------------------------------------------------------
0319           1328   ;------------------------------------------------------------
0319           1329   ;        EFM8_JDY40_test.c:298: void ReceptionOff (void)
0319           1330   ;        -----------------------------------------
0319           1331   ;         function ReceptionOff
0319           1332   ;        -----------------------------------------
0319           1333   _ReceptionOff:
0319           1334   ;        EFM8_JDY40_test.c:300: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0319 C2A0      1335            clr     _P2_0
031B           1336   ;        EFM8_JDY40_test.c:301: waitms(10);
031B 90000A    1337            mov     dptr,#0x000A
031E 120000    1338            lcall   _waitms
0321           1339   ;        EFM8_JDY40_test.c:302: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0321 90CC00    1340            mov     dptr,#__str_2
0324 75F080    1341            mov     b,#0x80
0327 120000    1342            lcall   _sendstr1
032A           1343   ;        EFM8_JDY40_test.c:303: waitms(10);
032A 90000A    1344            mov     dptr,#0x000A
032D 120000    1345            lcall   _waitms
0330           1346   ;        EFM8_JDY40_test.c:305: SCON1&=0b_0011_1111;
0330 53C83F    1347            anl     _SCON1,#0x3F
0333           1348   ;        EFM8_JDY40_test.c:306: P2_0=1; // 'set' pin to 1 is normal operation mode.
0333 D2A0      1349            setb    _P2_0
0335 22        1350            ret
0336           1351   ;------------------------------------------------------------
0336           1352   ;Allocation info for local variables in function 'TIMER0_Init'
0336           1353   ;------------------------------------------------------------
0336           1354   ;------------------------------------------------------------
0336           1355   ;        EFM8_JDY40_test.c:310: void TIMER0_Init(void)
0336           1356   ;        -----------------------------------------
0336           1357   ;         function TIMER0_Init
0336           1358   ;        -----------------------------------------
0336           1359   _TIMER0_Init:
0336           1360   ;        EFM8_JDY40_test.c:312: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0336 5389F0    1361            anl     _TMOD,#0xF0
0339           1362   ;        EFM8_JDY40_test.c:313: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0339 438901    1363            orl     _TMOD,#0x01
033C           1364   ;        EFM8_JDY40_test.c:314: TR0=0; // Stop Timer/Counter 0
033C C28C      1365            clr     _TR0
033E 22        1366            ret
033F           1367   ;------------------------------------------------------------
033F           1368   ;Allocation info for local variables in function 'InitADC'
033F           1369   ;------------------------------------------------------------
033F           1370   ;------------------------------------------------------------
033F           1371   ;        EFM8_JDY40_test.c:318: void InitADC (void)
033F           1372   ;        -----------------------------------------
033F           1373   ;         function InitADC
033F           1374   ;        -----------------------------------------
033F           1375   _InitADC:
033F           1376   ;        EFM8_JDY40_test.c:320: SFRPAGE = 0x00;
033F 75A700    1377            mov     _SFRPAGE,#0x00
0342           1378   ;        EFM8_JDY40_test.c:321: ADEN=0; // Disable ADC
0342 C2EF      1379            clr     _ADEN
0344           1380   ;        EFM8_JDY40_test.c:326: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0344 75B280    1381            mov     _ADC0CN1,#0x80
0347           1382   ;        EFM8_JDY40_test.c:330: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0347 75BC20    1383            mov     _ADC0CF0,#0x20
034A           1384   ;        EFM8_JDY40_test.c:334: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
034A 75B91E    1385            mov     _ADC0CF1,#0x1E
034D           1386   ;        EFM8_JDY40_test.c:343: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
034D 75E800    1387            mov     _ADC0CN0,#0x00
0350           1388   ;        EFM8_JDY40_test.c:348: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0350 75DF3F    1389            mov     _ADC0CF2,#0x3F
0353           1390   ;        EFM8_JDY40_test.c:352: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0353 75B300    1391            mov     _ADC0CN2,#0x00
0356           1392   ;        EFM8_JDY40_test.c:354: ADEN=1; // Enable ADC
0356 D2EF      1393            setb    _ADEN
0358 22        1394            ret
0359           1395   ;------------------------------------------------------------
0359           1396   ;Allocation info for local variables in function 'InitPinADC'
0359           1397   ;------------------------------------------------------------
0359           1398   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0359           1399   ;portno                    Allocated to registers r2 
0359           1400   ;mask                      Allocated to registers r3 
0359           1401   ;------------------------------------------------------------
0359           1402   ;        EFM8_JDY40_test.c:357: void InitPinADC (unsigned char portno, unsigned char pinno)
0359           1403   ;        -----------------------------------------
0359           1404   ;         function InitPinADC
0359           1405   ;        -----------------------------------------
0359           1406   _InitPinADC:
0359 AA82      1407            mov     r2,dpl
035B           1408   ;        EFM8_JDY40_test.c:361: mask=1<<pinno;
035B 8560F0    1409            mov     b,_InitPinADC_PARM_2
035E 05F0      1410            inc     b
0360 7401      1411            mov     a,#0x01
0362 8000      1412            sjmp    L017013?
0364           1413   L017011?:
0364 25E0      1414            add     a,acc
0366           1415   L017013?:
0366 D5F080    1416            djnz    b,L017011?
0369 FB        1417            mov     r3,a
036A           1418   ;        EFM8_JDY40_test.c:363: SFRPAGE = 0x20;
036A 75A720    1419            mov     _SFRPAGE,#0x20
036D           1420   ;        EFM8_JDY40_test.c:364: switch (portno)
036D BA00C0    1421            cjne    r2,#0x00,L017014?
0370 8000      1422            sjmp    L017001?
0372           1423   L017014?:
0372 BA0140    1424            cjne    r2,#0x01,L017015?
0375 8000      1425            sjmp    L017002?
0377           1426   L017015?:
0377           1427   ;        EFM8_JDY40_test.c:366: case 0:
0377 BA02C0    1428            cjne    r2,#0x02,L017005?
037A 8000      1429            sjmp    L017003?
037C           1430   L017001?:
037C           1431   ;        EFM8_JDY40_test.c:367: P0MDIN &= (~mask); // Set pin as analog input
037C EB        1432            mov     a,r3
037D F4        1433            cpl     a
037E FA        1434            mov     r2,a
037F 52F1      1435            anl     _P0MDIN,a
0381           1436   ;        EFM8_JDY40_test.c:368: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0381 EB        1437            mov     a,r3
0382 42D4      1438            orl     _P0SKIP,a
0384           1439   ;        EFM8_JDY40_test.c:369: break;
0384           1440   ;        EFM8_JDY40_test.c:370: case 1:
0384 8000      1441            sjmp    L017005?
0386           1442   L017002?:
0386           1443   ;        EFM8_JDY40_test.c:371: P1MDIN &= (~mask); // Set pin as analog input
0386 EB        1444            mov     a,r3
0387 F4        1445            cpl     a
0388 FA        1446            mov     r2,a
0389 52F2      1447            anl     _P1MDIN,a
038B           1448   ;        EFM8_JDY40_test.c:372: P1SKIP |= mask; // Skip Crossbar decoding for this pin
038B EB        1449            mov     a,r3
038C 42D5      1450            orl     _P1SKIP,a
038E           1451   ;        EFM8_JDY40_test.c:373: break;
038E           1452   ;        EFM8_JDY40_test.c:374: case 2:
038E 8000      1453            sjmp    L017005?
0390           1454   L017003?:
0390           1455   ;        EFM8_JDY40_test.c:375: P2MDIN &= (~mask); // Set pin as analog input
0390 EB        1456            mov     a,r3
0391 F4        1457            cpl     a
0392 FA        1458            mov     r2,a
0393 52F3      1459            anl     _P2MDIN,a
0395           1460   ;        EFM8_JDY40_test.c:376: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0395 EB        1461            mov     a,r3
0396 42CC      1462            orl     _P2SKIP,a
0398           1463   ;        EFM8_JDY40_test.c:380: }
0398           1464   L017005?:
0398           1465   ;        EFM8_JDY40_test.c:381: SFRPAGE = 0x00;
0398 75A700    1466            mov     _SFRPAGE,#0x00
039B 22        1467            ret
039C           1468   ;------------------------------------------------------------
039C           1469   ;Allocation info for local variables in function 'ADC_at_Pin'
039C           1470   ;------------------------------------------------------------
039C           1471   ;pin                       Allocated to registers 
039C           1472   ;------------------------------------------------------------
039C           1473   ;        EFM8_JDY40_test.c:384: unsigned int ADC_at_Pin(unsigned char pin)
039C           1474   ;        -----------------------------------------
039C           1475   ;         function ADC_at_Pin
039C           1476   ;        -----------------------------------------
039C           1477   _ADC_at_Pin:
039C 8582BB    1478            mov     _ADC0MX,dpl
039F           1479   ;        EFM8_JDY40_test.c:387: ADINT = 0;
039F C2ED      1480            clr     _ADINT
03A1           1481   ;        EFM8_JDY40_test.c:388: ADBUSY = 1;     // Convert voltage at the pin
03A1 D2EC      1482            setb    _ADBUSY
03A3           1483   ;        EFM8_JDY40_test.c:389: while (!ADINT); // Wait for conversion to complete
03A3           1484   L018001?:
03A3 30ED40    1485            jnb     _ADINT,L018001?
03A6           1486   ;        EFM8_JDY40_test.c:390: return (ADC0);
03A6 85BD82    1487            mov     dpl,_ADC0
03A9 85BE83    1488            mov     dph,(_ADC0 >> 8)
03AC 22        1489            ret
03AD           1490   ;------------------------------------------------------------
03AD           1491   ;Allocation info for local variables in function 'Volts_at_Pin'
03AD           1492   ;------------------------------------------------------------
03AD           1493   ;pin                       Allocated to registers r2 
03AD           1494   ;------------------------------------------------------------
03AD           1495   ;        EFM8_JDY40_test.c:393: float Volts_at_Pin(unsigned char pin)
03AD           1496   ;        -----------------------------------------
03AD           1497   ;         function Volts_at_Pin
03AD           1498   ;        -----------------------------------------
03AD           1499   _Volts_at_Pin:
03AD           1500   ;        EFM8_JDY40_test.c:395: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
03AD 120000    1501            lcall   _ADC_at_Pin
03B0 120000    1502            lcall   ___uint2fs
03B3 AA82      1503            mov     r2,dpl
03B5 AB83      1504            mov     r3,dph
03B7 ACF0      1505            mov     r4,b
03B9 FD        1506            mov     r5,a
03BA C002      1507            push    ar2
03BC C003      1508            push    ar3
03BE C004      1509            push    ar4
03C0 C005      1510            push    ar5
03C2 906C8B    1511            mov     dptr,#0x6C8B
03C5 75F053    1512            mov     b,#0x53
03C8 7440      1513            mov     a,#0x40
03CA 120000    1514            lcall   ___fsmul
03CD AA82      1515            mov     r2,dpl
03CF AB83      1516            mov     r3,dph
03D1 ACF0      1517            mov     r4,b
03D3 FD        1518            mov     r5,a
03D4 E581      1519            mov     a,sp
03D6 24FC      1520            add     a,#0xfc
03D8 F581      1521            mov     sp,a
03DA E4        1522            clr     a
03DB C0E0      1523            push    acc
03DD 74FC      1524            mov     a,#0xFC
03DF C0E0      1525            push    acc
03E1 747F      1526            mov     a,#0x7F
03E3 C0E0      1527            push    acc
03E5 7446      1528            mov     a,#0x46
03E7 C0E0      1529            push    acc
03E9 8A82      1530            mov     dpl,r2
03EB 8B83      1531            mov     dph,r3
03ED 8CF0      1532            mov     b,r4
03EF ED        1533            mov     a,r5
03F0 120000    1534            lcall   ___fsdiv
03F3 AA82      1535            mov     r2,dpl
03F5 AB83      1536            mov     r3,dph
03F7 ACF0      1537            mov     r4,b
03F9 FD        1538            mov     r5,a
03FA E581      1539            mov     a,sp
03FC 24FC      1540            add     a,#0xfc
03FE F581      1541            mov     sp,a
0400 8A82      1542            mov     dpl,r2
0402 8B83      1543            mov     dph,r3
0404 8CF0      1544            mov     b,r4
0406 ED        1545            mov     a,r5
0407 22        1546            ret
0408           1547   ;------------------------------------------------------------
0408           1548   ;Allocation info for local variables in function 'Timer4_ISR'
0408           1549   ;------------------------------------------------------------
0408           1550   ;------------------------------------------------------------
0408           1551   ;        EFM8_JDY40_test.c:399: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
0408           1552   ;        -----------------------------------------
0408           1553   ;         function Timer4_ISR
0408           1554   ;        -----------------------------------------
0408           1555   _Timer4_ISR:
0408 C0E0      1556            push    acc
040A C0D0      1557            push    psw
040C 75D000    1558            mov     psw,#0x00
040F           1559   ;        EFM8_JDY40_test.c:401: SFRPAGE=0x10;
040F 75A710    1560            mov     _SFRPAGE,#0x10
0412           1561   ;        EFM8_JDY40_test.c:402: TF4H = 0; 
0412 C29F      1562            clr     _TF4H
0414           1563   ;        EFM8_JDY40_test.c:404: pwm_counter4 += 256; // counting steps
0414 857878    1564            mov     _pwm_counter4,_pwm_counter4
0417 7401      1565            mov     a,#0x01
0419 2579      1566            add     a,(_pwm_counter4 + 1)
041B F579      1567            mov     (_pwm_counter4 + 1),a
041D           1568   ;        EFM8_JDY40_test.c:405: if ( direction == 1) {
041D 7401      1569            mov     a,#0x01
041F B57880    1570            cjne    a,_direction,L020009?
0422 E4        1571            clr     a
0423 B57980    1572            cjne    a,(_direction + 1),L020009?
0426 8000      1573            sjmp    L020010?
0428           1574   L020009?:
0428 8000      1575            sjmp    L020002?
042A           1576   L020010?:
042A           1577   ;        EFM8_JDY40_test.c:406: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
042A C3        1578            clr     c
042B E578      1579            mov     a,_pwm_counter4
042D 9538      1580            subb    a,_pwm_duty4
042F E579      1581            mov     a,(_pwm_counter4 + 1)
0431 9539      1582            subb    a,(_pwm_duty4 + 1)
0433 92B0      1583            mov     _P3_0,c
0435           1584   L020002?:
0435           1585   ;        EFM8_JDY40_test.c:408: if ( direction  == 0 ) {
0435 E578      1586            mov     a,_direction
0437 4579      1587            orl     a,(_direction + 1)
0439 7000      1588            jnz     L020004?
043B           1589   ;        EFM8_JDY40_test.c:409: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
043B C3        1590            clr     c
043C E578      1591            mov     a,_pwm_counter4
043E 9538      1592            subb    a,_pwm_duty4
0440 E579      1593            mov     a,(_pwm_counter4 + 1)
0442 9539      1594            subb    a,(_pwm_duty4 + 1)
0444 92A5      1595            mov     _P2_5,c
0446           1596   L020004?:
0446           1597   ;        EFM8_JDY40_test.c:411: if ( direction == 3 ) 
0446 E578      1598            mov     a,_direction
0448 E579      1599            mov     a,(_direction + 1)
044A D0D0      1600            pop     psw
044C D0E0      1601            pop     acc
044E 32        1602            reti
044F           1603   ;        eliminated unneeded push/pop dpl
044F           1604   ;        eliminated unneeded push/pop dph
044F           1605   ;        eliminated unneeded push/pop b
044F           1606   ;------------------------------------------------------------
044F           1607   ;Allocation info for local variables in function 'Timer2_ISR'
044F           1608   ;------------------------------------------------------------
044F           1609   ;------------------------------------------------------------
044F           1610   ;        EFM8_JDY40_test.c:416: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
044F           1611   ;        -----------------------------------------
044F           1612   ;         function Timer2_ISR
044F           1613   ;        -----------------------------------------
044F           1614   _Timer2_ISR:
044F C0E0      1615            push    acc
0451 C0D0      1616            push    psw
0453 75D000    1617            mov     psw,#0x00
0456           1618   ;        EFM8_JDY40_test.c:418: SFRPAGE=0x0;
0456 75A700    1619            mov     _SFRPAGE,#0x00
0459           1620   ;        EFM8_JDY40_test.c:419: TF2H = 0; // Clear Timer2 interrupt flag
0459 C2CF      1621            clr     _TF2H
045B           1622   ;        EFM8_JDY40_test.c:420: pwm_counter2 += 256; // counting steps
045B 85F8F8    1623            mov     _pwm_counter2,_pwm_counter2
045E 7401      1624            mov     a,#0x01
0460 25F9      1625            add     a,(_pwm_counter2 + 1)
0462 F5F9      1626            mov     (_pwm_counter2 + 1),a
0464           1627   ;        EFM8_JDY40_test.c:421: if ( direction == 1) {
0464 7401      1628            mov     a,#0x01
0466 B57880    1629            cjne    a,_direction,L021009?
0469 E4        1630            clr     a
046A B57980    1631            cjne    a,(_direction + 1),L021009?
046D 8000      1632            sjmp    L021010?
046F           1633   L021009?:
046F 8000      1634            sjmp    L021002?
0471           1635   L021010?:
0471           1636   ;        EFM8_JDY40_test.c:422: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
0471 C3        1637            clr     c
0472 E5F8      1638            mov     a,_pwm_counter2
0474 95B8      1639            subb    a,_pwm_duty2
0476 E5F9      1640            mov     a,(_pwm_counter2 + 1)
0478 95B9      1641            subb    a,(_pwm_duty2 + 1)
047A 92B2      1642            mov     _P3_2,c
047C           1643   L021002?:
047C           1644   ;        EFM8_JDY40_test.c:424: if (direction == 0 ){
047C E578      1645            mov     a,_direction
047E 4579      1646            orl     a,(_direction + 1)
0480 7000      1647            jnz     L021004?
0482           1648   ;        EFM8_JDY40_test.c:425: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
0482 C3        1649            clr     c
0483 E5F8      1650            mov     a,_pwm_counter2
0485 95B8      1651            subb    a,_pwm_duty2
0487 E5F9      1652            mov     a,(_pwm_counter2 + 1)
0489 95B9      1653            subb    a,(_pwm_duty2 + 1)
048B 92B7      1654            mov     _P3_7,c
048D           1655   L021004?:
048D           1656   ;        EFM8_JDY40_test.c:427: if ( direction == 3 ) 
048D E578      1657            mov     a,_direction
048F E579      1658            mov     a,(_direction + 1)
0491 D0D0      1659            pop     psw
0493 D0E0      1660            pop     acc
0495 32        1661            reti
0496           1662   ;        eliminated unneeded push/pop dpl
0496           1663   ;        eliminated unneeded push/pop dph
0496           1664   ;        eliminated unneeded push/pop b
0496           1665   ;------------------------------------------------------------
0496           1666   ;Allocation info for local variables in function 'ADCtoPWM'
0496           1667   ;------------------------------------------------------------
0496           1668   ;adc_value                 Allocated to registers r2 r3 
0496           1669   ;------------------------------------------------------------
0496           1670   ;        EFM8_JDY40_test.c:432: unsigned int ADCtoPWM(int adc_value)
0496           1671   ;        -----------------------------------------
0496           1672   ;         function ADCtoPWM
0496           1673   ;        -----------------------------------------
0496           1674   _ADCtoPWM:
0496 AA82      1675            mov     r2,dpl
0498 AB83      1676            mov     r3,dph
049A           1677   ;        EFM8_JDY40_test.c:437: return (unsigned int)((adc_value * 65535UL) / 1023UL);
049A 8A00      1678            mov     __mullong_PARM_2,r2
049C EB        1679            mov     a,r3
049D F501      1680            mov     (__mullong_PARM_2 + 1),a
049F 33        1681            rlc     a
04A0 95E0      1682            subb    a,acc
04A2 F502      1683            mov     (__mullong_PARM_2 + 2),a
04A4 F503      1684            mov     (__mullong_PARM_2 + 3),a
04A6 90FFFF    1685            mov     dptr,#0xFFFF
04A9 E4        1686            clr     a
04AA F5F0      1687            mov     b,a
04AC 120000    1688            lcall   __mullong
04AF 7500FF    1689            mov     __divulong_PARM_2,#0xFF
04B2 750103    1690            mov     (__divulong_PARM_2 + 1),#0x03
04B5 750200    1691            mov     (__divulong_PARM_2 + 2),#0x00
04B8 750300    1692            mov     (__divulong_PARM_2 + 3),#0x00
04BB 020000    1693            ljmp    __divulong
04BE           1694   ;------------------------------------------------------------
04BE           1695   ;Allocation info for local variables in function 'ADCsteeringRatio'
04BE           1696   ;------------------------------------------------------------
04BE           1697   ;steering                  Allocated with name '_ADCsteeringRatio_PARM_2'
04BE           1698   ;ADCwheel1                 Allocated with name '_ADCsteeringRatio_PARM_3'
04BE           1699   ;ADCwheel2                 Allocated with name '_ADCsteeringRatio_PARM_4'
04BE           1700   ;speed                     Allocated to registers r2 r3 
04BE           1701   ;sloc0                     Allocated with name '_ADCsteeringRatio_sloc0_1_0'
04BE           1702   ;sloc1                     Allocated with name '_ADCsteeringRatio_sloc1_1_0'
04BE           1703   ;centerspeed               Allocated with name '_ADCsteeringRatio_centerspeed_1_143'
04BE           1704   ;baseSpeed                 Allocated with name '_ADCsteeringRatio_baseSpeed_1_143'
04BE           1705   ;wheel1Speed               Allocated with name '_ADCsteeringRatio_wheel1Speed_1_143'
04BE           1706   ;delta                     Allocated with name '_ADCsteeringRatio_delta_1_143'
04BE           1707   ;centersteering            Allocated with name '_ADCsteeringRatio_centersteering_1_143'
04BE           1708   ;steeringFactor            Allocated with name '_ADCsteeringRatio_steeringFactor_1_143'
04BE           1709   ;baseSteer                 Allocated to registers r6 r7 
04BE           1710   ;wheel2Speed               Allocated with name '_ADCsteeringRatio_wheel2Speed_1_143'
04BE           1711   ;------------------------------------------------------------
04BE           1712   ;        EFM8_JDY40_test.c:445: void ADCsteeringRatio(int speed, int steering, int *ADCwheel1, int *ADCwheel2) 
04BE           1713   ;        -----------------------------------------
04BE           1714   ;         function ADCsteeringRatio
04BE           1715   ;        -----------------------------------------
04BE           1716   _ADCsteeringRatio:
04BE AA82      1717            mov     r2,dpl
04C0 AB83      1718            mov     r3,dph
04C2           1719   ;        EFM8_JDY40_test.c:449: idata int centersteering = steering - 508;
04C2 7800      1720            mov     r0,#_ADCsteeringRatio_centersteering_1_143
04C4 E578      1721            mov     a,_ADCsteeringRatio_PARM_2
04C6 2404      1722            add     a,#0x04
04C8 F6        1723            mov     @r0,a
04C9 E579      1724            mov     a,(_ADCsteeringRatio_PARM_2 + 1)
04CB 34FE      1725            addc    a,#0xfe
04CD 08        1726            inc     r0
04CE F6        1727            mov     @r0,a
04CF           1728   ;        EFM8_JDY40_test.c:458: centerspeed = speed - 504;
04CF EA        1729            mov     a,r2
04D0 2408      1730            add     a,#0x08
04D2 F582      1731            mov     dpl,a
04D4 EB        1732            mov     a,r3
04D5 34FE      1733            addc    a,#0xfe
04D7 F583      1734            mov     dph,a
04D9           1735   ;        EFM8_JDY40_test.c:461: baseSpeed = abs(centerspeed);
04D9 120000    1736            lcall   _abs
04DC AA82      1737            mov     r2,dpl
04DE AB83      1738            mov     r3,dph
04E0           1739   ;        EFM8_JDY40_test.c:462: baseSteer = abs(centersteering);
04E0 7800      1740            mov     r0,#_ADCsteeringRatio_centersteering_1_143
04E2 8682      1741            mov     dpl,@r0
04E4 08        1742            inc     r0
04E5 8683      1743            mov     dph,@r0
04E7 C002      1744            push    ar2
04E9 C003      1745            push    ar3
04EB 120000    1746            lcall   _abs
04EE AE82      1747            mov     r6,dpl
04F0 AF83      1748            mov     r7,dph
04F2 D003      1749            pop     ar3
04F4 D002      1750            pop     ar2
04F6           1751   ;        EFM8_JDY40_test.c:463: if ( baseSpeed < 3 && baseSteer < 3 ) 
04F6 C3        1752            clr     c
04F7 EA        1753            mov     a,r2
04F8 9403      1754            subb    a,#0x03
04FA EB        1755            mov     a,r3
04FB 6480      1756            xrl     a,#0x80
04FD 9480      1757            subb    a,#0x80
04FF E4        1758            clr     a
0500 33        1759            rlc     a
0501 F590      1760            mov     _ADCsteeringRatio_sloc0_1_0,a
0503 6000      1761            jz      L023002?
0505 C3        1762            clr     c
0506 EE        1763            mov     a,r6
0507 9403      1764            subb    a,#0x03
0509 EF        1765            mov     a,r7
050A 6480      1766            xrl     a,#0x80
050C 9480      1767            subb    a,#0x80
050E 5000      1768            jnc     L023002?
0510           1769   ;        EFM8_JDY40_test.c:465: *ADCwheel1 = 0;
0510 8528E0    1770            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_3
0513 8529E1    1771            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_3 + 1)
0516 852AE2    1772            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_3 + 2)
0519 85E082    1773            mov     dpl,_ADCsteeringRatio_sloc1_1_0
051C 85E183    1774            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
051F 85E2F0    1775            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
0522 E4        1776            clr     a
0523 120000    1777            lcall   __gptrput
0526 A3        1778            inc     dptr
0527 E4        1779            clr     a
0528 120000    1780            lcall   __gptrput
052B           1781   ;        EFM8_JDY40_test.c:466: *ADCwheel2 = 0;
052B 85D8E0    1782            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_4
052E 85D9E1    1783            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_4 + 1)
0531 85DAE2    1784            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_4 + 2)
0534 85E082    1785            mov     dpl,_ADCsteeringRatio_sloc1_1_0
0537 85E183    1786            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
053A 85E2F0    1787            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
053D E4        1788            clr     a
053E 120000    1789            lcall   __gptrput
0541 A3        1790            inc     dptr
0542 E4        1791            clr     a
0543           1792   ;        EFM8_JDY40_test.c:467: return;
0543 020000    1793            ljmp    __gptrput
0546           1794   L023002?:
0546           1795   ;        EFM8_JDY40_test.c:471: steeringFactor = (float)centersteering / 508; // ranges from -1.0 (full left) to +1.0 (full right)
0546 C006      1796            push    ar6
0548 C007      1797            push    ar7
054A 7800      1798            mov     r0,#_ADCsteeringRatio_centersteering_1_143
054C 8682      1799            mov     dpl,@r0
054E 08        1800            inc     r0
054F 8683      1801            mov     dph,@r0
0551 C002      1802            push    ar2
0553 C003      1803            push    ar3
0555 120000    1804            lcall   ___sint2fs
0558 AE82      1805            mov     r6,dpl
055A AF83      1806            mov     r7,dph
055C ACF0      1807            mov     r4,b
055E FD        1808            mov     r5,a
055F C006      1809            push    ar6
0561 C007      1810            push    ar7
0563 E4        1811            clr     a
0564 C0E0      1812            push    acc
0566 C0E0      1813            push    acc
0568 74FE      1814            mov     a,#0xFE
056A C0E0      1815            push    acc
056C 7443      1816            mov     a,#0x43
056E C0E0      1817            push    acc
0570 8E82      1818            mov     dpl,r6
0572 8F83      1819            mov     dph,r7
0574 8CF0      1820            mov     b,r4
0576 ED        1821            mov     a,r5
0577 120000    1822            lcall   ___fsdiv
057A 7860      1823            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
057C A682      1824            mov     @r0,dpl
057E 08        1825            inc     r0
057F A683      1826            mov     @r0,dph
0581 08        1827            inc     r0
0582 A6F0      1828            mov     @r0,b
0584 08        1829            inc     r0
0585 F6        1830            mov     @r0,a
0586 E581      1831            mov     a,sp
0588 24FC      1832            add     a,#0xfc
058A F581      1833            mov     sp,a
058C           1834   ;        EFM8_JDY40_test.c:473: if ( steeringFactor > 1 ) steeringFactor = 1;
058C E4        1835            clr     a
058D C0E0      1836            push    acc
058F C0E0      1837            push    acc
0591 7480      1838            mov     a,#0x80
0593 C0E0      1839            push    acc
0595 743F      1840            mov     a,#0x3F
0597 C0E0      1841            push    acc
0599 7860      1842            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
059B 8682      1843            mov     dpl,@r0
059D 08        1844            inc     r0
059E 8683      1845            mov     dph,@r0
05A0 08        1846            inc     r0
05A1 86F0      1847            mov     b,@r0
05A3 08        1848            inc     r0
05A4 E6        1849            mov     a,@r0
05A5 120000    1850            lcall   ___fsgt
05A8 AC82      1851            mov     r4,dpl
05AA E581      1852            mov     a,sp
05AC 24FC      1853            add     a,#0xfc
05AE F581      1854            mov     sp,a
05B0 D007      1855            pop     ar7
05B2 D006      1856            pop     ar6
05B4 D003      1857            pop     ar3
05B6 D002      1858            pop     ar2
05B8 D007      1859            pop     ar7
05BA D006      1860            pop     ar6
05BC EC        1861            mov     a,r4
05BD 6000      1862            jz      L023005?
05BF 7860      1863            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
05C1 7600      1864            mov     @r0,#0x00
05C3 08        1865            inc     r0
05C4 7600      1866            mov     @r0,#0x00
05C6 08        1867            inc     r0
05C7 7680      1868            mov     @r0,#0x80
05C9 08        1869            inc     r0
05CA 763F      1870            mov     @r0,#0x3F
05CC           1871   L023005?:
05CC           1872   ;        EFM8_JDY40_test.c:476: delta = baseSpeed * steeringFactor;
05CC C006      1873            push    ar6
05CE C007      1874            push    ar7
05D0 8A82      1875            mov     dpl,r2
05D2 8B83      1876            mov     dph,r3
05D4 C002      1877            push    ar2
05D6 C003      1878            push    ar3
05D8 120000    1879            lcall   ___sint2fs
05DB AC82      1880            mov     r4,dpl
05DD AD83      1881            mov     r5,dph
05DF AEF0      1882            mov     r6,b
05E1 FF        1883            mov     r7,a
05E2 7860      1884            mov     r0,#_ADCsteeringRatio_steeringFactor_1_143
05E4 E6        1885            mov     a,@r0
05E5 C0E0      1886            push    acc
05E7 08        1887            inc     r0
05E8 E6        1888            mov     a,@r0
05E9 C0E0      1889            push    acc
05EB 08        1890            inc     r0
05EC E6        1891            mov     a,@r0
05ED C0E0      1892            push    acc
05EF 08        1893            inc     r0
05F0 E6        1894            mov     a,@r0
05F1 C0E0      1895            push    acc
05F3 8C82      1896            mov     dpl,r4
05F5 8D83      1897            mov     dph,r5
05F7 8EF0      1898            mov     b,r6
05F9 EF        1899            mov     a,r7
05FA 120000    1900            lcall   ___fsmul
05FD AC82      1901            mov     r4,dpl
05FF AD83      1902            mov     r5,dph
0601 AEF0      1903            mov     r6,b
0603 FF        1904            mov     r7,a
0604 E581      1905            mov     a,sp
0606 24FC      1906            add     a,#0xfc
0608 F581      1907            mov     sp,a
060A 8C82      1908            mov     dpl,r4
060C 8D83      1909            mov     dph,r5
060E 8EF0      1910            mov     b,r6
0610 EF        1911            mov     a,r7
0611 C006      1912            push    ar6
0613 C007      1913            push    ar7
0615 120000    1914            lcall   ___fs2sint
0618 AC82      1915            mov     r4,dpl
061A AD83      1916            mov     r5,dph
061C D007      1917            pop     ar7
061E D006      1918            pop     ar6
0620 D003      1919            pop     ar3
0622 D002      1920            pop     ar2
0624           1921   ;        EFM8_JDY40_test.c:478: wheel1Speed = baseSpeed + delta;
0624 EC        1922            mov     a,r4
0625 2A        1923            add     a,r2
0626 FE        1924            mov     r6,a
0627 ED        1925            mov     a,r5
0628 3B        1926            addc    a,r3
0629 FF        1927            mov     r7,a
062A 90C120    1928            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
062D EE        1929            mov     a,r6
062E F0        1930            movx    @dptr,a
062F A3        1931            inc     dptr
0630 EF        1932            mov     a,r7
0631 F0        1933            movx    @dptr,a
0632           1934   ;        EFM8_JDY40_test.c:479: wheel2Speed = baseSpeed - delta;
0632 78C0      1935            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
0634 EA        1936            mov     a,r2
0635 C3        1937            clr     c
0636 9C        1938            subb    a,r4
0637 F6        1939            mov     @r0,a
0638 EB        1940            mov     a,r3
0639 9D        1941            subb    a,r5
063A 08        1942            inc     r0
063B F6        1943            mov     @r0,a
063C           1944   ;        EFM8_JDY40_test.c:480: if (wheel1Speed > 507) wheel1Speed = 507;
063C C3        1945            clr     c
063D 74FB      1946            mov     a,#0xFB
063F 9E        1947            subb    a,r6
0640 7481      1948            mov     a,#(0x01 ^ 0x80)
0642 8FF0      1949            mov     b,r7
0644 63F080    1950            xrl     b,#0x80
0647 95F0      1951            subb    a,b
0649 D007      1952            pop     ar7
064B D006      1953            pop     ar6
064D 5000      1954            jnc     L023007?
064F 90C120    1955            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0652 74FB      1956            mov     a,#0xFB
0654 F0        1957            movx    @dptr,a
0655 A3        1958            inc     dptr
0656 7401      1959            mov     a,#0x01
0658 F0        1960            movx    @dptr,a
0659           1961   L023007?:
0659           1962   ;        EFM8_JDY40_test.c:481: if (wheel1Speed < 0) wheel1Speed = 0;
0659 90C120    1963            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
065C E0        1964            movx    a,@dptr
065D FA        1965            mov     r2,a
065E A3        1966            inc     dptr
065F E0        1967            movx    a,@dptr
0660 FB        1968            mov     r3,a
0661 30E7D0    1969            jnb     acc.7,L023009?
0664 90C120    1970            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0667 E4        1971            clr     a
0668 F0        1972            movx    @dptr,a
0669 A3        1973            inc     dptr
066A F0        1974            movx    @dptr,a
066B           1975   L023009?:
066B           1976   ;        EFM8_JDY40_test.c:483: if (wheel2Speed > 507) wheel2Speed = 507;
066B 78C0      1977            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
066D C3        1978            clr     c
066E 74FB      1979            mov     a,#0xFB
0670 96        1980            subb    a,@r0
0671 7481      1981            mov     a,#(0x01 ^ 0x80)
0673 08        1982            inc     r0
0674 86F0      1983            mov     b,@r0
0676 63F080    1984            xrl     b,#0x80
0679 95F0      1985            subb    a,b
067B 5000      1986            jnc     L023011?
067D 78C0      1987            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
067F 76FB      1988            mov     @r0,#0xFB
0681 08        1989            inc     r0
0682 7601      1990            mov     @r0,#0x01
0684           1991   L023011?:
0684           1992   ;        EFM8_JDY40_test.c:484: if (wheel2Speed < 0) wheel2Speed = 0;
0684 78C1      1993            mov     r0,#(_ADCsteeringRatio_wheel2Speed_1_143 + 1)
0686 E6        1994            mov     a,@r0
0687 30E750    1995            jnb     acc.7,L023013?
068A 78C0      1996            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
068C E4        1997            clr     a
068D F6        1998            mov     @r0,a
068E 08        1999            inc     r0
068F F6        2000            mov     @r0,a
0690           2001   L023013?:
0690           2002   ;        EFM8_JDY40_test.c:486: if ( baseSpeed < 3 && baseSteer > 3 ) 
0690 E590      2003            mov     a,_ADCsteeringRatio_sloc0_1_0
0692 7000      2004            jnz     L023047?
0694 020000    2005            ljmp    L023023?
0697           2006   L023047?:
0697 C3        2007            clr     c
0698 7403      2008            mov     a,#0x03
069A 9E        2009            subb    a,r6
069B E4        2010            clr     a
069C 6480      2011            xrl     a,#0x80
069E 8FF0      2012            mov     b,r7
06A0 63F080    2013            xrl     b,#0x80
06A3 95F0      2014            subb    a,b
06A5 5000      2015            jnc     L023023?
06A7           2016   ;        EFM8_JDY40_test.c:489: wheel1Speed = 507 + centersteering;
06A7 7800      2017            mov     r0,#_ADCsteeringRatio_centersteering_1_143
06A9 74FB      2018            mov     a,#0xFB
06AB 26        2019            add     a,@r0
06AC FA        2020            mov     r2,a
06AD 7401      2021            mov     a,#0x01
06AF 08        2022            inc     r0
06B0 36        2023            addc    a,@r0
06B1 FB        2024            mov     r3,a
06B2 90C120    2025            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06B5 EA        2026            mov     a,r2
06B6 F0        2027            movx    @dptr,a
06B7 A3        2028            inc     dptr
06B8 EB        2029            mov     a,r3
06B9 F0        2030            movx    @dptr,a
06BA           2031   ;        EFM8_JDY40_test.c:490: wheel2Speed = 507 - centersteering;      
06BA 7800      2032            mov     r0,#_ADCsteeringRatio_centersteering_1_143
06BC 79C0      2033            mov     r1,#_ADCsteeringRatio_wheel2Speed_1_143
06BE 74FB      2034            mov     a,#0xFB
06C0 C3        2035            clr     c
06C1 96        2036            subb    a,@r0
06C2 F7        2037            mov     @r1,a
06C3 7401      2038            mov     a,#0x01
06C5 08        2039            inc     r0
06C6 96        2040            subb    a,@r0
06C7 09        2041            inc     r1
06C8 F7        2042            mov     @r1,a
06C9           2043   ;        EFM8_JDY40_test.c:492: if (wheel1Speed > 507) wheel1Speed = 507;
06C9 C3        2044            clr     c
06CA 74FB      2045            mov     a,#0xFB
06CC 9A        2046            subb    a,r2
06CD 7481      2047            mov     a,#(0x01 ^ 0x80)
06CF 8BF0      2048            mov     b,r3
06D1 63F080    2049            xrl     b,#0x80
06D4 95F0      2050            subb    a,b
06D6 5000      2051            jnc     L023015?
06D8 90C120    2052            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06DB 74FB      2053            mov     a,#0xFB
06DD F0        2054            movx    @dptr,a
06DE A3        2055            inc     dptr
06DF 7401      2056            mov     a,#0x01
06E1 F0        2057            movx    @dptr,a
06E2           2058   L023015?:
06E2           2059   ;        EFM8_JDY40_test.c:493: if (wheel1Speed < 0) wheel1Speed = 0;
06E2 90C120    2060            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06E5 E0        2061            movx    a,@dptr
06E6 FA        2062            mov     r2,a
06E7 A3        2063            inc     dptr
06E8 E0        2064            movx    a,@dptr
06E9 FB        2065            mov     r3,a
06EA 30E750    2066            jnb     acc.7,L023017?
06ED 90C120    2067            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06F0 E4        2068            clr     a
06F1 F0        2069            movx    @dptr,a
06F2 A3        2070            inc     dptr
06F3 F0        2071            movx    @dptr,a
06F4           2072   L023017?:
06F4           2073   ;        EFM8_JDY40_test.c:495: if (wheel2Speed > 507) wheel2Speed = 507;
06F4 78C0      2074            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
06F6 C3        2075            clr     c
06F7 74FB      2076            mov     a,#0xFB
06F9 96        2077            subb    a,@r0
06FA 7481      2078            mov     a,#(0x01 ^ 0x80)
06FC 08        2079            inc     r0
06FD 86F0      2080            mov     b,@r0
06FF 63F080    2081            xrl     b,#0x80
0702 95F0      2082            subb    a,b
0704 5000      2083            jnc     L023019?
0706 78C0      2084            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
0708 76FB      2085            mov     @r0,#0xFB
070A 08        2086            inc     r0
070B 7601      2087            mov     @r0,#0x01
070D           2088   L023019?:
070D           2089   ;        EFM8_JDY40_test.c:496: if (wheel2Speed < 0) wheel2Speed = 0;
070D 78C1      2090            mov     r0,#(_ADCsteeringRatio_wheel2Speed_1_143 + 1)
070F E6        2091            mov     a,@r0
0710 30E7D0    2092            jnb     acc.7,L023023?
0713 78C0      2093            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
0715 E4        2094            clr     a
0716 F6        2095            mov     @r0,a
0717 08        2096            inc     r0
0718 F6        2097            mov     @r0,a
0719           2098   L023023?:
0719           2099   ;        EFM8_JDY40_test.c:498: *ADCwheel1 = (unsigned int)((wheel1Speed * 1023L) / 507L);
0719 8528E0    2100            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_3
071C 8529E1    2101            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_3 + 1)
071F 852AE2    2102            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_3 + 2)
0722 90C120    2103            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0725 E0        2104            movx    a,@dptr
0726 FD        2105            mov     r5,a
0727 A3        2106            inc     dptr
0728 E0        2107            movx    a,@dptr
0729 8D00      2108            mov     __mullong_PARM_2,r5
072B F501      2109            mov     (__mullong_PARM_2 + 1),a
072D 33        2110            rlc     a
072E 95E0      2111            subb    a,acc
0730 F502      2112            mov     (__mullong_PARM_2 + 2),a
0732 F503      2113            mov     (__mullong_PARM_2 + 3),a
0734 9003FF    2114            mov     dptr,#0x03FF
0737 E4        2115            clr     a
0738 F5F0      2116            mov     b,a
073A 120000    2117            lcall   __mullong
073D 7500FB    2118            mov     __divslong_PARM_2,#0xFB
0740 750101    2119            mov     (__divslong_PARM_2 + 1),#0x01
0743 750200    2120            mov     (__divslong_PARM_2 + 2),#0x00
0746 750300    2121            mov     (__divslong_PARM_2 + 3),#0x00
0749 120000    2122            lcall   __divslong
074C AA82      2123            mov     r2,dpl
074E AB83      2124            mov     r3,dph
0750 85E082    2125            mov     dpl,_ADCsteeringRatio_sloc1_1_0
0753 85E183    2126            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
0756 85E2F0    2127            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
0759 EA        2128            mov     a,r2
075A 120000    2129            lcall   __gptrput
075D A3        2130            inc     dptr
075E EB        2131            mov     a,r3
075F 120000    2132            lcall   __gptrput
0762           2133   ;        EFM8_JDY40_test.c:499: *ADCwheel2 = (unsigned int)((wheel2Speed * 1023L) / 507L);       
0762 85D8E0    2134            mov     _ADCsteeringRatio_sloc1_1_0,_ADCsteeringRatio_PARM_4
0765 85D9E1    2135            mov     (_ADCsteeringRatio_sloc1_1_0 + 1),(_ADCsteeringRatio_PARM_4 + 1)
0768 85DAE2    2136            mov     (_ADCsteeringRatio_sloc1_1_0 + 2),(_ADCsteeringRatio_PARM_4 + 2)
076B 78C0      2137            mov     r0,#_ADCsteeringRatio_wheel2Speed_1_143
076D 8600      2138            mov     __mullong_PARM_2,@r0
076F 08        2139            inc     r0
0770 8601      2140            mov     (__mullong_PARM_2 + 1),@r0
0772 E6        2141            mov     a,@r0
0773 33        2142            rlc     a
0774 95E0      2143            subb    a,acc
0776 F502      2144            mov     (__mullong_PARM_2 + 2),a
0778 F503      2145            mov     (__mullong_PARM_2 + 3),a
077A 9003FF    2146            mov     dptr,#0x03FF
077D E4        2147            clr     a
077E F5F0      2148            mov     b,a
0780 120000    2149            lcall   __mullong
0783 7500FB    2150            mov     __divslong_PARM_2,#0xFB
0786 750101    2151            mov     (__divslong_PARM_2 + 1),#0x01
0789 750200    2152            mov     (__divslong_PARM_2 + 2),#0x00
078C 750300    2153            mov     (__divslong_PARM_2 + 3),#0x00
078F 120000    2154            lcall   __divslong
0792 AA82      2155            mov     r2,dpl
0794 AB83      2156            mov     r3,dph
0796 85E082    2157            mov     dpl,_ADCsteeringRatio_sloc1_1_0
0799 85E183    2158            mov     dph,(_ADCsteeringRatio_sloc1_1_0 + 1)
079C 85E2F0    2159            mov     b,(_ADCsteeringRatio_sloc1_1_0 + 2)
079F EA        2160            mov     a,r2
07A0 120000    2161            lcall   __gptrput
07A3 A3        2162            inc     dptr
07A4 EB        2163            mov     a,r3
07A5 020000    2164            ljmp    __gptrput
07A8           2165   ;------------------------------------------------------------
07A8           2166   ;Allocation info for local variables in function 'GetPeriod'
07A8           2167   ;------------------------------------------------------------
07A8           2168   ;n                         Allocated to registers r2 r3 
07A8           2169   ;overflow_count            Allocated to registers r4 r5 
07A8           2170   ;i                         Allocated to registers r6 
07A8           2171   ;------------------------------------------------------------
07A8           2172   ;        EFM8_JDY40_test.c:503: unsigned long GetPeriod (int n)
07A8           2173   ;        -----------------------------------------
07A8           2174   ;         function GetPeriod
07A8           2175   ;        -----------------------------------------
07A8           2176   _GetPeriod:
07A8 AA82      2177            mov     r2,dpl
07AA AB83      2178            mov     r3,dph
07AC           2179   ;        EFM8_JDY40_test.c:508: TR0=0; // Stop Timer/Counter 0
07AC C28C      2180            clr     _TR0
07AE           2181   ;        EFM8_JDY40_test.c:509: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
07AE 5389F0    2182            anl     _TMOD,#0xF0
07B1           2183   ;        EFM8_JDY40_test.c:510: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
07B1 438901    2184            orl     _TMOD,#0x01
07B4           2185   ;        EFM8_JDY40_test.c:513: TR0=0;
07B4 C28C      2186            clr     _TR0
07B6           2187   ;        EFM8_JDY40_test.c:514: TL0=0; TH0=0; TF0=0; overflow_count=0;
07B6 758A00    2188            mov     _TL0,#0x00
07B9 758C00    2189            mov     _TH0,#0x00
07BC C28D      2190            clr     _TF0
07BE           2191   ;        EFM8_JDY40_test.c:515: TR0=1;
07BE D28C      2192            setb    _TR0
07C0           2193   ;        EFM8_JDY40_test.c:518: TR0=0;
07C0 C28C      2194            clr     _TR0
07C2           2195   ;        EFM8_JDY40_test.c:519: TL0=0; TH0=0; TF0=0; overflow_count=0;
07C2 758A00    2196            mov     _TL0,#0x00
07C5 758C00    2197            mov     _TH0,#0x00
07C8 C28D      2198            clr     _TF0
07CA           2199   ;        EFM8_JDY40_test.c:520: TR0=1;
07CA D28C      2200            setb    _TR0
07CC           2201   ;        EFM8_JDY40_test.c:521: while(PERIOD_PIN!=0) // Wait for the signal to be zero
07CC 7C00      2202            mov     r4,#0x00
07CE 7D00      2203            mov     r5,#0x00
07D0           2204   L024005?:
07D0 3086A0    2205            jnb     _P0_6,L024007?
07D3           2206   ;        EFM8_JDY40_test.c:523: if(TF0==1) // Did the 16-bit timer overflow?
07D3           2207   ;        EFM8_JDY40_test.c:525: TF0=0;
07D3 108DE0    2208            jbc     _TF0,L024050?
07D6 8000      2209            sjmp    L024005?
07D8           2210   L024050?:
07D8           2211   ;        EFM8_JDY40_test.c:526: overflow_count++;
07D8 0C        2212            inc     r4
07D9 BC0020    2213            cjne    r4,#0x00,L024051?
07DC 0D        2214            inc     r5
07DD           2215   L024051?:
07DD           2216   ;        EFM8_JDY40_test.c:527: if(overflow_count==10) // If it overflows too many times assume no signal is present
07DD BC0A60    2217            cjne    r4,#0x0A,L024005?
07E0 BD0060    2218            cjne    r5,#0x00,L024005?
07E3           2219   ;        EFM8_JDY40_test.c:529: TR0=0;
07E3 C28C      2220            clr     _TR0
07E5           2221   ;        EFM8_JDY40_test.c:530: return 0; // No signal
07E5 900000    2222            mov     dptr,#(0x00&0x00ff)
07E8 E4        2223            clr     a
07E9 F5F0      2224            mov     b,a
07EB 22        2225            ret
07EC           2226   L024007?:
07EC           2227   ;        EFM8_JDY40_test.c:536: TR0=0;
07EC C28C      2228            clr     _TR0
07EE           2229   ;        EFM8_JDY40_test.c:537: TL0=0; TH0=0; TF0=0; overflow_count=0;
07EE 758A00    2230            mov     _TL0,#0x00
07F1 758C00    2231            mov     _TH0,#0x00
07F4 C28D      2232            clr     _TF0
07F6           2233   ;        EFM8_JDY40_test.c:538: TR0=1;
07F6 D28C      2234            setb    _TR0
07F8           2235   ;        EFM8_JDY40_test.c:539: while(PERIOD_PIN!=1) // Wait for the signal to be one
07F8 7C00      2236            mov     r4,#0x00
07FA 7D00      2237            mov     r5,#0x00
07FC           2238   L024012?:
07FC 2086A0    2239            jb      _P0_6,L024014?
07FF           2240   ;        EFM8_JDY40_test.c:541: if(TF0==1) // Did the 16-bit timer overflow?
07FF           2241   ;        EFM8_JDY40_test.c:543: TF0=0;
07FF 108DE0    2242            jbc     _TF0,L024055?
0802 8000      2243            sjmp    L024012?
0804           2244   L024055?:
0804           2245   ;        EFM8_JDY40_test.c:544: overflow_count++;
0804 0C        2246            inc     r4
0805 BC0020    2247            cjne    r4,#0x00,L024056?
0808 0D        2248            inc     r5
0809           2249   L024056?:
0809           2250   ;        EFM8_JDY40_test.c:545: if(overflow_count==10) // If it overflows too many times assume no signal is present
0809 BC0A60    2251            cjne    r4,#0x0A,L024012?
080C BD0060    2252            cjne    r5,#0x00,L024012?
080F           2253   ;        EFM8_JDY40_test.c:547: TR0=0;
080F C28C      2254            clr     _TR0
0811           2255   ;        EFM8_JDY40_test.c:548: return 0; // No signal
0811 900000    2256            mov     dptr,#(0x00&0x00ff)
0814 E4        2257            clr     a
0815 F5F0      2258            mov     b,a
0817 22        2259            ret
0818           2260   L024014?:
0818           2261   ;        EFM8_JDY40_test.c:554: TR0=0;
0818 C28C      2262            clr     _TR0
081A           2263   ;        EFM8_JDY40_test.c:555: TL0=0; TH0=0; TF0=0; overflow_count=0;
081A 758A00    2264            mov     _TL0,#0x00
081D 758C00    2265            mov     _TH0,#0x00
0820 C28D      2266            clr     _TF0
0822 7C00      2267            mov     r4,#0x00
0824 7D00      2268            mov     r5,#0x00
0826           2269   ;        EFM8_JDY40_test.c:556: TR0=1; // Start the timer
0826 D28C      2270            setb    _TR0
0828           2271   ;        EFM8_JDY40_test.c:557: for(i=0; i<n; i++) // Measure the time of 'n' periods
0828 7E00      2272            mov     r6,#0x00
082A           2273   L024025?:
082A 8E07      2274            mov     ar7,r6
082C 7800      2275            mov     r0,#0x00
082E C3        2276            clr     c
082F EF        2277            mov     a,r7
0830 9A        2278            subb    a,r2
0831 E8        2279            mov     a,r0
0832 6480      2280            xrl     a,#0x80
0834 8BF0      2281            mov     b,r3
0836 63F080    2282            xrl     b,#0x80
0839 95F0      2283            subb    a,b
083B 5000      2284            jnc     L024028?
083D           2285   ;        EFM8_JDY40_test.c:559: while(PERIOD_PIN!=0) // Wait for the signal to be zero
083D 8C07      2286            mov     ar7,r4
083F 8D00      2287            mov     ar0,r5
0841           2288   L024017?:
0841 308620    2289            jnb     _P0_6,L024043?
0844           2290   ;        EFM8_JDY40_test.c:561: if(TF0==1) // Did the 16-bit timer overflow?
0844           2291   ;        EFM8_JDY40_test.c:563: TF0=0;
0844 108D60    2292            jbc     _TF0,L024061?
0847 8000      2293            sjmp    L024017?
0849           2294   L024061?:
0849           2295   ;        EFM8_JDY40_test.c:564: overflow_count++;
0849 0F        2296            inc     r7
084A BF00E0    2297            cjne    r7,#0x00,L024017?
084D 08        2298            inc     r0
084E           2299   ;        EFM8_JDY40_test.c:567: while(PERIOD_PIN!=1) // Wait for the signal to be one
084E 8000      2300            sjmp    L024017?
0850           2301   L024043?:
0850           2302   L024022?:
0850 2086E0    2303            jb      _P0_6,L024047?
0853           2304   ;        EFM8_JDY40_test.c:569: if(TF0==1) // Did the 16-bit timer overflow?
0853           2305   ;        EFM8_JDY40_test.c:571: TF0=0;
0853 108D20    2306            jbc     _TF0,L024063?
0856 8000      2307            sjmp    L024022?
0858           2308   L024063?:
0858           2309   ;        EFM8_JDY40_test.c:572: overflow_count++;
0858 0F        2310            inc     r7
0859 BF00A0    2311            cjne    r7,#0x00,L024022?
085C 08        2312            inc     r0
085D 8000      2313            sjmp    L024022?
085F           2314   L024047?:
085F 8F04      2315            mov     ar4,r7
0861 8805      2316            mov     ar5,r0
0863           2317   ;        EFM8_JDY40_test.c:557: for(i=0; i<n; i++) // Measure the time of 'n' periods
0863 0E        2318            inc     r6
0864 8000      2319            sjmp    L024025?
0866           2320   L024028?:
0866           2321   ;        EFM8_JDY40_test.c:576: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
0866 C28C      2322            clr     _TR0
0868           2323   ;        EFM8_JDY40_test.c:578: return (overflow_count*65536+TH0*256+TL0);
0868 8D03      2324            mov     ar3,r5
086A 8C02      2325            mov     ar2,r4
086C 7D00      2326            mov     r5,#0x00
086E 7C00      2327            mov     r4,#0x00
0870 AF8C      2328            mov     r7,_TH0
0872 7E00      2329            mov     r6,#0x00
0874 EF        2330            mov     a,r7
0875 33        2331            rlc     a
0876 95E0      2332            subb    a,acc
0878 F8        2333            mov     r0,a
0879 F9        2334            mov     r1,a
087A EE        2335            mov     a,r6
087B 2C        2336            add     a,r4
087C FC        2337            mov     r4,a
087D EF        2338            mov     a,r7
087E 3D        2339            addc    a,r5
087F FD        2340            mov     r5,a
0880 E8        2341            mov     a,r0
0881 3A        2342            addc    a,r2
0882 FA        2343            mov     r2,a
0883 E9        2344            mov     a,r1
0884 3B        2345            addc    a,r3
0885 FB        2346            mov     r3,a
0886 AE8A      2347            mov     r6,_TL0
0888 E4        2348            clr     a
0889 FF        2349            mov     r7,a
088A 33        2350            rlc     a
088B 95E0      2351            subb    a,acc
088D F8        2352            mov     r0,a
088E F9        2353            mov     r1,a
088F EE        2354            mov     a,r6
0890 2C        2355            add     a,r4
0891 FC        2356            mov     r4,a
0892 EF        2357            mov     a,r7
0893 3D        2358            addc    a,r5
0894 FD        2359            mov     r5,a
0895 E8        2360            mov     a,r0
0896 3A        2361            addc    a,r2
0897 FA        2362            mov     r2,a
0898 E9        2363            mov     a,r1
0899 3B        2364            addc    a,r3
089A 8C82      2365            mov     dpl,r4
089C 8D83      2366            mov     dph,r5
089E 8AF0      2367            mov     b,r2
08A0 22        2368            ret
08A1           2369   ;------------------------------------------------------------
08A1           2370   ;Allocation info for local variables in function 'eputs'
08A1           2371   ;------------------------------------------------------------
08A1           2372   ;String                    Allocated to registers r2 r3 r4 
08A1           2373   ;------------------------------------------------------------
08A1           2374   ;        EFM8_JDY40_test.c:581: void eputs(char *String)
08A1           2375   ;        -----------------------------------------
08A1           2376   ;         function eputs
08A1           2377   ;        -----------------------------------------
08A1           2378   _eputs:
08A1 AA82      2379            mov     r2,dpl
08A3 AB83      2380            mov     r3,dph
08A5 ACF0      2381            mov     r4,b
08A7           2382   ;        EFM8_JDY40_test.c:583: while(*String)
08A7           2383   L025001?:
08A7 8A82      2384            mov     dpl,r2
08A9 8B83      2385            mov     dph,r3
08AB 8CF0      2386            mov     b,r4
08AD 120000    2387            lcall   __gptrget
08B0 FD        2388            mov     r5,a
08B1 6000      2389            jz      L025004?
08B3           2390   ;        EFM8_JDY40_test.c:585: putchar(*String);
08B3 8D82      2391            mov     dpl,r5
08B5 C002      2392            push    ar2
08B7 C003      2393            push    ar3
08B9 C004      2394            push    ar4
08BB 120000    2395            lcall   _putchar
08BE D004      2396            pop     ar4
08C0 D003      2397            pop     ar3
08C2 D002      2398            pop     ar2
08C4           2399   ;        EFM8_JDY40_test.c:586: String++;
08C4 0A        2400            inc     r2
08C5 BA0060    2401            cjne    r2,#0x00,L025001?
08C8 0B        2402            inc     r3
08C9 8000      2403            sjmp    L025001?
08CB           2404   L025004?:
08CB 22        2405            ret
08CC           2406   ;------------------------------------------------------------
08CC           2407   ;Allocation info for local variables in function 'PrintNumber'
08CC           2408   ;------------------------------------------------------------
08CC           2409   ;Base                      Allocated with name '_PrintNumber_PARM_2'
08CC           2410   ;digits                    Allocated with name '_PrintNumber_PARM_3'
08CC           2411   ;val                       Allocated with name '_PrintNumber_val_1_162'
08CC           2412   ;j                         Allocated with name '_PrintNumber_j_1_163'
08CC           2413   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
08CC           2414   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
08CC           2415   ;buff                      Allocated with name '_PrintNumber_buff_1_163'
08CC           2416   ;------------------------------------------------------------
08CC           2417   ;        EFM8_JDY40_test.c:590: void PrintNumber(long int val, int Base, int digits)
08CC           2418   ;        -----------------------------------------
08CC           2419   ;         function PrintNumber
08CC           2420   ;        -----------------------------------------
08CC           2421   _PrintNumber:
08CC 858230    2422            mov     _PrintNumber_val_1_162,dpl
08CF 858331    2423            mov     (_PrintNumber_val_1_162 + 1),dph
08D2 85F032    2424            mov     (_PrintNumber_val_1_162 + 2),b
08D5 F533      2425            mov     (_PrintNumber_val_1_162 + 3),a
08D7           2426   ;        EFM8_JDY40_test.c:596: buff[NBITS]=0;
08D7 90C190    2427            mov     dptr,#(_PrintNumber_buff_1_163 + 0x0020)
08DA E4        2428            clr     a
08DB F0        2429            movx    @dptr,a
08DC           2430   ;        EFM8_JDY40_test.c:598: if(val<0)
08DC E533      2431            mov     a,(_PrintNumber_val_1_162 + 3)
08DE 30E720    2432            jnb     acc.7,L026012?
08E1           2433   ;        EFM8_JDY40_test.c:600: putchar('-');
08E1 75822D    2434            mov     dpl,#0x2D
08E4 120000    2435            lcall   _putchar
08E7           2436   ;        EFM8_JDY40_test.c:601: val*=-1;
08E7 C3        2437            clr     c
08E8 E4        2438            clr     a
08E9 9530      2439            subb    a,_PrintNumber_val_1_162
08EB F530      2440            mov     _PrintNumber_val_1_162,a
08ED E4        2441            clr     a
08EE 9531      2442            subb    a,(_PrintNumber_val_1_162 + 1)
08F0 F531      2443            mov     (_PrintNumber_val_1_162 + 1),a
08F2 E4        2444            clr     a
08F3 9532      2445            subb    a,(_PrintNumber_val_1_162 + 2)
08F5 F532      2446            mov     (_PrintNumber_val_1_162 + 2),a
08F7 E4        2447            clr     a
08F8 9533      2448            subb    a,(_PrintNumber_val_1_162 + 3)
08FA F533      2449            mov     (_PrintNumber_val_1_162 + 3),a
08FC           2450   ;        EFM8_JDY40_test.c:605: while ( (val>0) | (digits>0) )
08FC           2451   L026012?:
08FC 75801F    2452            mov     _PrintNumber_j_1_163,#0x1F
08FF E4        2453            clr     a
0900 F581      2454            mov     (_PrintNumber_j_1_163 + 1),a
0902 A838      2455            mov     r0,_PrintNumber_PARM_3
0904 A939      2456            mov     r1,(_PrintNumber_PARM_3 + 1)
0906           2457   L026005?:
0906 C3        2458            clr     c
0907 E4        2459            clr     a
0908 9530      2460            subb    a,_PrintNumber_val_1_162
090A E4        2461            clr     a
090B 9531      2462            subb    a,(_PrintNumber_val_1_162 + 1)
090D E4        2463            clr     a
090E 9532      2464            subb    a,(_PrintNumber_val_1_162 + 2)
0910 E4        2465            clr     a
0911 6480      2466            xrl     a,#0x80
0913 8533F0    2467            mov     b,(_PrintNumber_val_1_162 + 3)
0916 63F080    2468            xrl     b,#0x80
0919 95F0      2469            subb    a,b
091B E4        2470            clr     a
091C 33        2471            rlc     a
091D FE        2472            mov     r6,a
091E C3        2473            clr     c
091F E4        2474            clr     a
0920 98        2475            subb    a,r0
0921 E4        2476            clr     a
0922 6480      2477            xrl     a,#0x80
0924 89F0      2478            mov     b,r1
0926 63F080    2479            xrl     b,#0x80
0929 95F0      2480            subb    a,b
092B E4        2481            clr     a
092C 33        2482            rlc     a
092D FF        2483            mov     r7,a
092E 4E        2484            orl     a,r6
092F 7000      2485            jnz     L026016?
0931 020000    2486            ljmp    L026007?
0934           2487   L026016?:
0934           2488   ;        EFM8_JDY40_test.c:607: buff[j--]=HexDigit[val%Base];
0934 AE80      2489            mov     r6,_PrintNumber_j_1_163
0936 AF81      2490            mov     r7,(_PrintNumber_j_1_163 + 1)
0938 1580      2491            dec     _PrintNumber_j_1_163
093A 74FF      2492            mov     a,#0xff
093C B58020    2493            cjne    a,_PrintNumber_j_1_163,L026017?
093F 1581      2494            dec     (_PrintNumber_j_1_163 + 1)
0941           2495   L026017?:
0941 EE        2496            mov     a,r6
0942 2470      2497            add     a,#_PrintNumber_buff_1_163
0944 F5D0      2498            mov     _PrintNumber_sloc0_1_0,a
0946 EF        2499            mov     a,r7
0947 34C1      2500            addc    a,#(_PrintNumber_buff_1_163 >> 8)
0949 F5D1      2501            mov     (_PrintNumber_sloc0_1_0 + 1),a
094B 858820    2502            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
094E E589      2503            mov     a,(_PrintNumber_PARM_2 + 1)
0950 F521      2504            mov     (_PrintNumber_sloc1_1_0 + 1),a
0952 33        2505            rlc     a
0953 95E0      2506            subb    a,acc
0955 F522      2507            mov     (_PrintNumber_sloc1_1_0 + 2),a
0957 F523      2508            mov     (_PrintNumber_sloc1_1_0 + 3),a
0959 852000    2509            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
095C 852101    2510            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
095F 852202    2511            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
0962 852303    2512            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
0965 853082    2513            mov     dpl,_PrintNumber_val_1_162
0968 853183    2514            mov     dph,(_PrintNumber_val_1_162 + 1)
096B 8532F0    2515            mov     b,(_PrintNumber_val_1_162 + 2)
096E E533      2516            mov     a,(_PrintNumber_val_1_162 + 3)
0970 C000      2517            push    ar0
0972 C001      2518            push    ar1
0974 120000    2519            lcall   __modslong
0977 AE82      2520            mov     r6,dpl
0979 AF83      2521            mov     r7,dph
097B EE        2522            mov     a,r6
097C 24B0      2523            add     a,#_PrintNumber_HexDigit_1_163
097E F582      2524            mov     dpl,a
0980 EF        2525            mov     a,r7
0981 3411      2526            addc    a,#(_PrintNumber_HexDigit_1_163 >> 8)
0983 F583      2527            mov     dph,a
0985 E4        2528            clr     a
0986 93        2529            movc    a,@a+dptr
0987 85D082    2530            mov     dpl,_PrintNumber_sloc0_1_0
098A 85D183    2531            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
098D F0        2532            movx    @dptr,a
098E           2533   ;        EFM8_JDY40_test.c:608: val/=Base;
098E 852000    2534            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
0991 852101    2535            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
0994 852202    2536            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
0997 852303    2537            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
099A 853082    2538            mov     dpl,_PrintNumber_val_1_162
099D 853183    2539            mov     dph,(_PrintNumber_val_1_162 + 1)
09A0 8532F0    2540            mov     b,(_PrintNumber_val_1_162 + 2)
09A3 E533      2541            mov     a,(_PrintNumber_val_1_162 + 3)
09A5 120000    2542            lcall   __divslong
09A8 858230    2543            mov     _PrintNumber_val_1_162,dpl
09AB 858331    2544            mov     (_PrintNumber_val_1_162 + 1),dph
09AE 85F032    2545            mov     (_PrintNumber_val_1_162 + 2),b
09B1 F533      2546            mov     (_PrintNumber_val_1_162 + 3),a
09B3 D001      2547            pop     ar1
09B5 D000      2548            pop     ar0
09B7           2549   ;        EFM8_JDY40_test.c:609: if(digits!=0) digits--;
09B7 E8        2550            mov     a,r0
09B8 49        2551            orl     a,r1
09B9 7000      2552            jnz     L026018?
09BB 020000    2553            ljmp    L026005?
09BE           2554   L026018?:
09BE 18        2555            dec     r0
09BF B8FF30    2556            cjne    r0,#0xff,L026019?
09C2 19        2557            dec     r1
09C3           2558   L026019?:
09C3 020000    2559            ljmp    L026005?
09C6           2560   L026007?:
09C6           2561   ;        EFM8_JDY40_test.c:611: eputs(&buff[j+1]);
09C6 E580      2562            mov     a,_PrintNumber_j_1_163
09C8 04        2563            inc     a
09C9 2470      2564            add     a,#_PrintNumber_buff_1_163
09CB FA        2565            mov     r2,a
09CC E4        2566            clr     a
09CD 34C1      2567            addc    a,#(_PrintNumber_buff_1_163 >> 8)
09CF FB        2568            mov     r3,a
09D0 7C00      2569            mov     r4,#0x00
09D2 8A82      2570            mov     dpl,r2
09D4 8B83      2571            mov     dph,r3
09D6 8CF0      2572            mov     b,r4
09D8 020000    2573            ljmp    _eputs
09DB           2574   ;------------------------------------------------------------
09DB           2575   ;Allocation info for local variables in function 'GetFrequency'
09DB           2576   ;------------------------------------------------------------
09DB           2577   ;pin                       Allocated with name '_GetFrequency_PARM_2'
09DB           2578   ;c                         Allocated to registers r2 r3 r4 r5 
09DB           2579   ;f                         Allocated to registers r6 r7 r0 r1 
09DB           2580   ;------------------------------------------------------------
09DB           2581   ;        EFM8_JDY40_test.c:614: unsigned long GetFrequency (long int c, int pin)
09DB           2582   ;        -----------------------------------------
09DB           2583   ;         function GetFrequency
09DB           2584   ;        -----------------------------------------
09DB           2585   _GetFrequency:
09DB AA82      2586            mov     r2,dpl
09DD AB83      2587            mov     r3,dph
09DF ACF0      2588            mov     r4,b
09E1 FD        2589            mov     r5,a
09E2           2590   ;        EFM8_JDY40_test.c:616: long int f = 0;
09E2 7E00      2591            mov     r6,#0x00
09E4 7F00      2592            mov     r7,#0x00
09E6 7800      2593            mov     r0,#0x00
09E8 7900      2594            mov     r1,#0x00
09EA           2595   ;        EFM8_JDY40_test.c:618: if(c>0)
09EA C3        2596            clr     c
09EB E4        2597            clr     a
09EC 9A        2598            subb    a,r2
09ED E4        2599            clr     a
09EE 9B        2600            subb    a,r3
09EF E4        2601            clr     a
09F0 9C        2602            subb    a,r4
09F1 E4        2603            clr     a
09F2 6480      2604            xrl     a,#0x80
09F4 8DF0      2605            mov     b,r5
09F6 63F080    2606            xrl     b,#0x80
09F9 95F0      2607            subb    a,b
09FB 4000      2608            jc      L027006?
09FD 020000    2609            ljmp    L027002?
0A00           2610   L027006?:
0A00           2611   ;        EFM8_JDY40_test.c:620: f=(SYSCLK*200.0)/(c*12);
0A00 8A00      2612            mov     __mullong_PARM_2,r2
0A02 8B01      2613            mov     (__mullong_PARM_2 + 1),r3
0A04 8C02      2614            mov     (__mullong_PARM_2 + 2),r4
0A06 8D03      2615            mov     (__mullong_PARM_2 + 3),r5
0A08 90000C    2616            mov     dptr,#(0x0C&0x00ff)
0A0B E4        2617            clr     a
0A0C F5F0      2618            mov     b,a
0A0E 120000    2619            lcall   __mullong
0A11 120000    2620            lcall   ___slong2fs
0A14 AA82      2621            mov     r2,dpl
0A16 AB83      2622            mov     r3,dph
0A18 ACF0      2623            mov     r4,b
0A1A FD        2624            mov     r5,a
0A1B C002      2625            push    ar2
0A1D C003      2626            push    ar3
0A1F C004      2627            push    ar4
0A21 C005      2628            push    ar5
0A23 9093A4    2629            mov     dptr,#0x93A4
0A26 75F056    2630            mov     b,#0x56
0A29 7450      2631            mov     a,#0x50
0A2B 120000    2632            lcall   ___fsdiv
0A2E AA82      2633            mov     r2,dpl
0A30 AB83      2634            mov     r3,dph
0A32 ACF0      2635            mov     r4,b
0A34 FD        2636            mov     r5,a
0A35 E581      2637            mov     a,sp
0A37 24FC      2638            add     a,#0xfc
0A39 F581      2639            mov     sp,a
0A3B 8A82      2640            mov     dpl,r2
0A3D 8B83      2641            mov     dph,r3
0A3F 8CF0      2642            mov     b,r4
0A41 ED        2643            mov     a,r5
0A42 120000    2644            lcall   ___fs2slong
0A45 AE82      2645            mov     r6,dpl
0A47 AF83      2646            mov     r7,dph
0A49 A8F0      2647            mov     r0,b
0A4B F9        2648            mov     r1,a
0A4C           2649   ;        EFM8_JDY40_test.c:621: eputs(" f");
0A4C 90DE70    2650            mov     dptr,#__str_4
0A4F 75F080    2651            mov     b,#0x80
0A52 C006      2652            push    ar6
0A54 C007      2653            push    ar7
0A56 C000      2654            push    ar0
0A58 C001      2655            push    ar1
0A5A 120000    2656            lcall   _eputs
0A5D           2657   ;        EFM8_JDY40_test.c:622: PrintNumber(pin, 10, 1);
0A5D AAE8      2658            mov     r2,_GetFrequency_PARM_2
0A5F E5E9      2659            mov     a,(_GetFrequency_PARM_2 + 1)
0A61 FB        2660            mov     r3,a
0A62 33        2661            rlc     a
0A63 95E0      2662            subb    a,acc
0A65 FC        2663            mov     r4,a
0A66 FD        2664            mov     r5,a
0A67 75880A    2665            mov     _PrintNumber_PARM_2,#0x0A
0A6A E4        2666            clr     a
0A6B F589      2667            mov     (_PrintNumber_PARM_2 + 1),a
0A6D 753801    2668            mov     _PrintNumber_PARM_3,#0x01
0A70 E4        2669            clr     a
0A71 F539      2670            mov     (_PrintNumber_PARM_3 + 1),a
0A73 8A82      2671            mov     dpl,r2
0A75 8B83      2672            mov     dph,r3
0A77 8CF0      2673            mov     b,r4
0A79 ED        2674            mov     a,r5
0A7A 120000    2675            lcall   _PrintNumber
0A7D           2676   ;        EFM8_JDY40_test.c:623: eputs(" = ");
0A7D 90DEB0    2677            mov     dptr,#__str_5
0A80 75F080    2678            mov     b,#0x80
0A83 120000    2679            lcall   _eputs
0A86 D001      2680            pop     ar1
0A88 D000      2681            pop     ar0
0A8A D007      2682            pop     ar7
0A8C D006      2683            pop     ar6
0A8E           2684   ;        EFM8_JDY40_test.c:624: PrintNumber(f, 10, 7);
0A8E 75880A    2685            mov     _PrintNumber_PARM_2,#0x0A
0A91 E4        2686            clr     a
0A92 F589      2687            mov     (_PrintNumber_PARM_2 + 1),a
0A94 753807    2688            mov     _PrintNumber_PARM_3,#0x07
0A97 E4        2689            clr     a
0A98 F539      2690            mov     (_PrintNumber_PARM_3 + 1),a
0A9A 8E82      2691            mov     dpl,r6
0A9C 8F83      2692            mov     dph,r7
0A9E 88F0      2693            mov     b,r0
0AA0 E9        2694            mov     a,r1
0AA1 C006      2695            push    ar6
0AA3 C007      2696            push    ar7
0AA5 C000      2697            push    ar0
0AA7 C001      2698            push    ar1
0AA9 120000    2699            lcall   _PrintNumber
0AAC           2700   ;        EFM8_JDY40_test.c:625: eputs("Hz");
0AAC 90DEF0    2701            mov     dptr,#__str_6
0AAF 75F080    2702            mov     b,#0x80
0AB2 120000    2703            lcall   _eputs
0AB5 D001      2704            pop     ar1
0AB7 D000      2705            pop     ar0
0AB9 D007      2706            pop     ar7
0ABB D006      2707            pop     ar6
0ABD           2708   L027002?:
0ABD           2709   ;        EFM8_JDY40_test.c:633: return f;
0ABD 8E82      2710            mov     dpl,r6
0ABF 8F83      2711            mov     dph,r7
0AC1 88F0      2712            mov     b,r0
0AC3 E9        2713            mov     a,r1
0AC4 22        2714            ret
0AC5           2715   ;------------------------------------------------------------
0AC5           2716   ;Allocation info for local variables in function 'CoinDecider'
0AC5           2717   ;------------------------------------------------------------
0AC5           2718   ;freq                      Allocated to registers r2 r3 r4 r5 
0AC5           2719   ;------------------------------------------------------------
0AC5           2720   ;        EFM8_JDY40_test.c:636: int CoinDecider(long int freq)
0AC5           2721   ;        -----------------------------------------
0AC5           2722   ;         function CoinDecider
0AC5           2723   ;        -----------------------------------------
0AC5           2724   _CoinDecider:
0AC5 AA82      2725            mov     r2,dpl
0AC7 AB83      2726            mov     r3,dph
0AC9 ACF0      2727            mov     r4,b
0ACB FD        2728            mov     r5,a
0ACC           2729   ;        EFM8_JDY40_test.c:638: if(freq>=56300) // detects a coin
0ACC C3        2730            clr     c
0ACD EA        2731            mov     a,r2
0ACE 94EC      2732            subb    a,#0xEC
0AD0 EB        2733            mov     a,r3
0AD1 94DB      2734            subb    a,#0xDB
0AD3 EC        2735            mov     a,r4
0AD4 9400      2736            subb    a,#0x00
0AD6 ED        2737            mov     a,r5
0AD7 6480      2738            xrl     a,#0x80
0AD9 9480      2739            subb    a,#0x80
0ADB 5000      2740            jnc     L028018?
0ADD 020000    2741            ljmp    L028010?
0AE0           2742   L028018?:
0AE0           2743   ;        EFM8_JDY40_test.c:641: if((freq >= 56200) && (freq < 56400))
0AE0 C3        2744            clr     c
0AE1 EA        2745            mov     a,r2
0AE2 9488      2746            subb    a,#0x88
0AE4 EB        2747            mov     a,r3
0AE5 94DB      2748            subb    a,#0xDB
0AE7 EC        2749            mov     a,r4
0AE8 9400      2750            subb    a,#0x00
0AEA ED        2751            mov     a,r5
0AEB 6480      2752            xrl     a,#0x80
0AED 9480      2753            subb    a,#0x80
0AEF 4000      2754            jc      L028006?
0AF1 EA        2755            mov     a,r2
0AF2 9450      2756            subb    a,#0x50
0AF4 EB        2757            mov     a,r3
0AF5 94DC      2758            subb    a,#0xDC
0AF7 EC        2759            mov     a,r4
0AF8 9400      2760            subb    a,#0x00
0AFA ED        2761            mov     a,r5
0AFB 6480      2762            xrl     a,#0x80
0AFD 9480      2763            subb    a,#0x80
0AFF 5000      2764            jnc     L028006?
0B01           2765   ;        EFM8_JDY40_test.c:643: printf(" DIME");
0B01 74F0      2766            mov     a,#__str_7
0B03 C0E0      2767            push    acc
0B05 74DF      2768            mov     a,#(__str_7 >> 8)
0B07 C0E0      2769            push    acc
0B09 7480      2770            mov     a,#0x80
0B0B C0E0      2771            push    acc
0B0D 120000    2772            lcall   _printf
0B10 1581      2773            dec     sp
0B12 1581      2774            dec     sp
0B14 1581      2775            dec     sp
0B16 8000      2776            sjmp    L028007?
0B18           2777   L028006?:
0B18           2778   ;        EFM8_JDY40_test.c:647: else if ((freq >= 56400) && (freq < 56700))
0B18 C3        2779            clr     c
0B19 EA        2780            mov     a,r2
0B1A 9450      2781            subb    a,#0x50
0B1C EB        2782            mov     a,r3
0B1D 94DC      2783            subb    a,#0xDC
0B1F EC        2784            mov     a,r4
0B20 9400      2785            subb    a,#0x00
0B22 ED        2786            mov     a,r5
0B23 6480      2787            xrl     a,#0x80
0B25 9480      2788            subb    a,#0x80
0B27 4000      2789            jc      L028002?
0B29 EA        2790            mov     a,r2
0B2A 947C      2791            subb    a,#0x7C
0B2C EB        2792            mov     a,r3
0B2D 94DD      2793            subb    a,#0xDD
0B2F EC        2794            mov     a,r4
0B30 9400      2795            subb    a,#0x00
0B32 ED        2796            mov     a,r5
0B33 6480      2797            xrl     a,#0x80
0B35 9480      2798            subb    a,#0x80
0B37 5000      2799            jnc     L028002?
0B39           2800   ;        EFM8_JDY40_test.c:649: printf(" NICKEL");
0B39 74B0      2801            mov     a,#__str_8
0B3B C0E0      2802            push    acc
0B3D 74E0      2803            mov     a,#(__str_8 >> 8)
0B3F C0E0      2804            push    acc
0B41 7480      2805            mov     a,#0x80
0B43 C0E0      2806            push    acc
0B45 120000    2807            lcall   _printf
0B48 1581      2808            dec     sp
0B4A 1581      2809            dec     sp
0B4C 1581      2810            dec     sp
0B4E 8000      2811            sjmp    L028007?
0B50           2812   L028002?:
0B50           2813   ;        EFM8_JDY40_test.c:655: printf(" LOONIE");
0B50 74F0      2814            mov     a,#__str_9
0B52 C0E0      2815            push    acc
0B54 74E0      2816            mov     a,#(__str_9 >> 8)
0B56 C0E0      2817            push    acc
0B58 7480      2818            mov     a,#0x80
0B5A C0E0      2819            push    acc
0B5C 120000    2820            lcall   _printf
0B5F 1581      2821            dec     sp
0B61 1581      2822            dec     sp
0B63 1581      2823            dec     sp
0B65           2824   L028007?:
0B65           2825   ;        EFM8_JDY40_test.c:658: return 1;
0B65 900001    2826            mov     dptr,#0x0001
0B68           2827   ;        EFM8_JDY40_test.c:666: return 0;
0B68 22        2828            ret
0B69           2829   L028010?:
0B69 900000    2830            mov     dptr,#0x0000
0B6C 22        2831            ret
0B6D           2832   ;------------------------------------------------------------
0B6D           2833   ;Allocation info for local variables in function 'automaticmode'
0B6D           2834   ;------------------------------------------------------------
0B6D           2835   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0B6D           2836   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0B6D           2837   ;control                   Allocated to registers 
0B6D           2838   ;------------------------------------------------------------
0B6D           2839   ;        EFM8_JDY40_test.c:674: void automaticmode(float fowardper, float sideper)
0B6D           2840   ;        -----------------------------------------
0B6D           2841   ;         function automaticmode
0B6D           2842   ;        -----------------------------------------
0B6D           2843   _automaticmode:
0B6D AA82      2844            mov     r2,dpl
0B6F AB83      2845            mov     r3,dph
0B71 ACF0      2846            mov     r4,b
0B73 FD        2847            mov     r5,a
0B74           2848   ;        EFM8_JDY40_test.c:677: direction = 3;
0B74 757803    2849            mov     _direction,#0x03
0B77 E4        2850            clr     a
0B78 F579      2851            mov     (_direction + 1),a
0B7A           2852   ;        EFM8_JDY40_test.c:679: P3_7=1;  //wheel 1
0B7A D2B7      2853            setb    _P3_7
0B7C           2854   ;        EFM8_JDY40_test.c:680: P3_2=0;  // wheel 1 
0B7C C2B2      2855            clr     _P3_2
0B7E           2856   ;        EFM8_JDY40_test.c:681: P3_0=0; // wheel 2
0B7E C2B0      2857            clr     _P3_0
0B80           2858   ;        EFM8_JDY40_test.c:682: P2_5=1; // wheel 2
0B80 D2A5      2859            setb    _P2_5
0B82           2860   ;        EFM8_JDY40_test.c:685: if ( fowardper >= p_thresh)
0B82 74CD      2861            mov     a,#0xCD
0B84 C0E0      2862            push    acc
0B86 74CC      2863            mov     a,#0xCC
0B88 C0E0      2864            push    acc
0B8A C0E0      2865            push    acc
0B8C 743D      2866            mov     a,#0x3D
0B8E C0E0      2867            push    acc
0B90 8A82      2868            mov     dpl,r2
0B92 8B83      2869            mov     dph,r3
0B94 8CF0      2870            mov     b,r4
0B96 ED        2871            mov     a,r5
0B97 120000    2872            lcall   ___fslt
0B9A AA82      2873            mov     r2,dpl
0B9C E581      2874            mov     a,sp
0B9E 24FC      2875            add     a,#0xfc
0BA0 F581      2876            mov     sp,a
0BA2 EA        2877            mov     a,r2
0BA3 7000      2878            jnz     L029006?
0BA5           2879   ;        EFM8_JDY40_test.c:687: P3_7=0;  //wheel 1
0BA5 C2B7      2880            clr     _P3_7
0BA7           2881   ;        EFM8_JDY40_test.c:688: P3_2=1;  // wheel 1 
0BA7 D2B2      2882            setb    _P3_2
0BA9           2883   ;        EFM8_JDY40_test.c:689: P3_0=1; // wheel 2
0BA9 D2B0      2884            setb    _P3_0
0BAB           2885   ;        EFM8_JDY40_test.c:690: P2_5=0; // wheel 2
0BAB C2A5      2886            clr     _P2_5
0BAD           2887   ;        EFM8_JDY40_test.c:691: waitms(1500);
0BAD 9005DC    2888            mov     dptr,#0x05DC
0BB0 120000    2889            lcall   _waitms
0BB3           2890   ;        EFM8_JDY40_test.c:692: if ( peggingsidnatu == 0 )
0BB3 E538      2891            mov     a,_peggingsidnatu
0BB5 4539      2892            orl     a,(_peggingsidnatu + 1)
0BB7 7000      2893            jnz     L029002?
0BB9           2894   ;        EFM8_JDY40_test.c:694: P3_7=0;  //wheel 1
0BB9 C2B7      2895            clr     _P3_7
0BBB           2896   ;        EFM8_JDY40_test.c:695: P3_2=1;  // wheel 1 
0BBB D2B2      2897            setb    _P3_2
0BBD           2898   ;        EFM8_JDY40_test.c:696: P3_0=0; // wheel 2
0BBD C2B0      2899            clr     _P3_0
0BBF           2900   ;        EFM8_JDY40_test.c:697: P2_5=0; // wheel 2
0BBF C2A5      2901            clr     _P2_5
0BC1           2902   ;        EFM8_JDY40_test.c:698: waitms(1500);
0BC1 9005DC    2903            mov     dptr,#0x05DC
0BC4 120000    2904            lcall   _waitms
0BC7           2905   ;        EFM8_JDY40_test.c:699: peggingsidnatu = 1;
0BC7 753801    2906            mov     _peggingsidnatu,#0x01
0BCA E4        2907            clr     a
0BCB F539      2908            mov     (_peggingsidnatu + 1),a
0BCD           2909   ;        EFM8_JDY40_test.c:700: return;
0BCD 22        2910            ret
0BCE           2911   L029002?:
0BCE           2912   ;        EFM8_JDY40_test.c:703: if ( peggingsidnatu == 1 )
0BCE 7401      2913            mov     a,#0x01
0BD0 B538F0    2914            cjne    a,_peggingsidnatu,L029023?
0BD3 E4        2915            clr     a
0BD4 B539F0    2916            cjne    a,(_peggingsidnatu + 1),L029023?
0BD7 8000      2917            sjmp    L029024?
0BD9           2918   L029023?:
0BD9 8000      2919            sjmp    L029006?
0BDB           2920   L029024?:
0BDB           2921   ;        EFM8_JDY40_test.c:705: P3_7=0;  //wheel 1
0BDB C2B7      2922            clr     _P3_7
0BDD           2923   ;        EFM8_JDY40_test.c:706: P3_2=0;  // wheel 1 
0BDD C2B2      2924            clr     _P3_2
0BDF           2925   ;        EFM8_JDY40_test.c:707: P3_0=1; // wheel 2
0BDF D2B0      2926            setb    _P3_0
0BE1           2927   ;        EFM8_JDY40_test.c:708: P2_5=0; // wheel 2
0BE1 C2A5      2928            clr     _P2_5
0BE3           2929   ;        EFM8_JDY40_test.c:709: waitms(1500);
0BE3 9005DC    2930            mov     dptr,#0x05DC
0BE6 120000    2931            lcall   _waitms
0BE9           2932   ;        EFM8_JDY40_test.c:710: peggingsidnatu = 0;
0BE9 E4        2933            clr     a
0BEA F538      2934            mov     _peggingsidnatu,a
0BEC F539      2935            mov     (_peggingsidnatu + 1),a
0BEE           2936   ;        EFM8_JDY40_test.c:711: return;
0BEE 22        2937            ret
0BEF           2938   L029006?:
0BEF           2939   ;        EFM8_JDY40_test.c:716: if ( sideper >= p_thresh)
0BEF 74CD      2940            mov     a,#0xCD
0BF1 C0E0      2941            push    acc
0BF3 74CC      2942            mov     a,#0xCC
0BF5 C0E0      2943            push    acc
0BF7 C0E0      2944            push    acc
0BF9 743D      2945            mov     a,#0x3D
0BFB C0E0      2946            push    acc
0BFD 85F082    2947            mov     dpl,_automaticmode_PARM_2
0C00 85F183    2948            mov     dph,(_automaticmode_PARM_2 + 1)
0C03 85F2F0    2949            mov     b,(_automaticmode_PARM_2 + 2)
0C06 E5F3      2950            mov     a,(_automaticmode_PARM_2 + 3)
0C08 120000    2951            lcall   ___fslt
0C0B AA82      2952            mov     r2,dpl
0C0D E581      2953            mov     a,sp
0C0F 24FC      2954            add     a,#0xfc
0C11 F581      2955            mov     sp,a
0C13 EA        2956            mov     a,r2
0C14 7000      2957            jnz     L029013?
0C16           2958   ;        EFM8_JDY40_test.c:718: if ( peggingsidnatu == 0 )
0C16 E538      2959            mov     a,_peggingsidnatu
0C18 4539      2960            orl     a,(_peggingsidnatu + 1)
0C1A 7000      2961            jnz     L029008?
0C1C           2962   ;        EFM8_JDY40_test.c:720: P3_7=0;  //wheel 1
0C1C C2B7      2963            clr     _P3_7
0C1E           2964   ;        EFM8_JDY40_test.c:721: P3_2=1;  // wheel 1 
0C1E D2B2      2965            setb    _P3_2
0C20           2966   ;        EFM8_JDY40_test.c:722: P3_0=0; // wheel 2
0C20 C2B0      2967            clr     _P3_0
0C22           2968   ;        EFM8_JDY40_test.c:723: P2_5=0; // wheel 2
0C22 C2A5      2969            clr     _P2_5
0C24           2970   ;        EFM8_JDY40_test.c:724: waitms(1500);
0C24 9005DC    2971            mov     dptr,#0x05DC
0C27           2972   ;        EFM8_JDY40_test.c:726: return;
0C27 020000    2973            ljmp    _waitms
0C2A           2974   L029008?:
0C2A           2975   ;        EFM8_JDY40_test.c:729: if ( peggingsidnatu == 1 )
0C2A 7401      2976            mov     a,#0x01
0C2C B538F0    2977            cjne    a,_peggingsidnatu,L029027?
0C2F E4        2978            clr     a
0C30 B539F0    2979            cjne    a,(_peggingsidnatu + 1),L029027?
0C33 8000      2980            sjmp    L029028?
0C35           2981   L029027?:
0C35 22        2982            ret
0C36           2983   L029028?:
0C36           2984   ;        EFM8_JDY40_test.c:731: P3_7=0;  //wheel 1
0C36 C2B7      2985            clr     _P3_7
0C38           2986   ;        EFM8_JDY40_test.c:732: P3_2=0;  // wheel 1 
0C38 C2B2      2987            clr     _P3_2
0C3A           2988   ;        EFM8_JDY40_test.c:733: P3_0=1; // wheel 2
0C3A D2B0      2989            setb    _P3_0
0C3C           2990   ;        EFM8_JDY40_test.c:734: P2_5=0; // wheel 2
0C3C C2A5      2991            clr     _P2_5
0C3E           2992   ;        EFM8_JDY40_test.c:735: waitms(1500);
0C3E 9005DC    2993            mov     dptr,#0x05DC
0C41           2994   ;        EFM8_JDY40_test.c:737: return;
0C41 020000    2995            ljmp    _waitms
0C44           2996   L029013?:
0C44 22        2997            ret
0C45           2998   ;------------------------------------------------------------
0C45           2999   ;Allocation info for local variables in function 'main'
0C45           3000   ;------------------------------------------------------------
0C45           3001   ;timeout                   Allocated to registers 
0C45           3002   ;pulse_width               Allocated to registers 
0C45           3003   ;pulse_width1              Allocated to registers 
0C45           3004   ;speed                     Allocated with name '_main_speed_1_186'
0C45           3005   ;steering                  Allocated with name '_main_steering_1_186'
0C45           3006   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_186'
0C45           3007   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_186'
0C45           3008   ;count                     Allocated to registers r2 r3 r4 r5 
0C45           3009   ;f                         Allocated to registers r2 r3 r4 r5 
0C45           3010   ;coinPresent               Allocated to registers 
0C45           3011   ;v                         Allocated with name '_main_v_1_186'
0C45           3012   ;------------------------------------------------------------
0C45           3013   ;        EFM8_JDY40_test.c:745: void main (void)
0C45           3014   ;        -----------------------------------------
0C45           3015   ;         function main
0C45           3016   ;        -----------------------------------------
0C45           3017   _main:
0C45           3018   ;        EFM8_JDY40_test.c:765: waitms(500);
0C45 9001F4    3019            mov     dptr,#0x01F4
0C48 120000    3020            lcall   _waitms
0C4B           3021   ;        EFM8_JDY40_test.c:766: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0C4B 7470      3022            mov     a,#__str_10
0C4D C0E0      3023            push    acc
0C4F 74E3      3024            mov     a,#(__str_10 >> 8)
0C51 C0E0      3025            push    acc
0C53 7480      3026            mov     a,#0x80
0C55 C0E0      3027            push    acc
0C57 120000    3028            lcall   _printf
0C5A 1581      3029            dec     sp
0C5C 1581      3030            dec     sp
0C5E 1581      3031            dec     sp
0C60           3032   ;        EFM8_JDY40_test.c:767: UART1_Init(9600);
0C60 902580    3033            mov     dptr,#0x2580
0C63 E4        3034            clr     a
0C64 F5F0      3035            mov     b,a
0C66 120000    3036            lcall   _UART1_Init
0C69           3037   ;        EFM8_JDY40_test.c:769: ReceptionOff();
0C69 120000    3038            lcall   _ReceptionOff
0C6C           3039   ;        EFM8_JDY40_test.c:771: TIMER0_Init(); 
0C6C 120000    3040            lcall   _TIMER0_Init
0C6F           3041   ;        EFM8_JDY40_test.c:773: InitPinADC(2, 1); // Configure P2.1 as analog input
0C6F 756001    3042            mov     _InitPinADC_PARM_2,#0x01
0C72 758202    3043            mov     dpl,#0x02
0C75 120000    3044            lcall   _InitPinADC
0C78           3045   ;        EFM8_JDY40_test.c:774: InitPinADC(2, 3); // Configure P2.1 as analog input
0C78 756003    3046            mov     _InitPinADC_PARM_2,#0x03
0C7B 758202    3047            mov     dpl,#0x02
0C7E 120000    3048            lcall   _InitPinADC
0C81           3049   ;        EFM8_JDY40_test.c:775: InitADC();
0C81 120000    3050            lcall   _InitADC
0C84           3051   ;        EFM8_JDY40_test.c:778: SendATCommand("AT+VER\r\n");
0C84 90E3B0    3052            mov     dptr,#__str_11
0C87 75F080    3053            mov     b,#0x80
0C8A 120000    3054            lcall   _SendATCommand
0C8D           3055   ;        EFM8_JDY40_test.c:779: SendATCommand("AT+BAUD\r\n");
0C8D 90E3F0    3056            mov     dptr,#__str_12
0C90 75F080    3057            mov     b,#0x80
0C93 120000    3058            lcall   _SendATCommand
0C96           3059   ;        EFM8_JDY40_test.c:780: SendATCommand("AT+RFID\r\n");
0C96 90E430    3060            mov     dptr,#__str_13
0C99 75F080    3061            mov     b,#0x80
0C9C 120000    3062            lcall   _SendATCommand
0C9F           3063   ;        EFM8_JDY40_test.c:781: SendATCommand("AT+DVID\r\n");
0C9F 90E470    3064            mov     dptr,#__str_14
0CA2 75F080    3065            mov     b,#0x80
0CA5 120000    3066            lcall   _SendATCommand
0CA8           3067   ;        EFM8_JDY40_test.c:782: SendATCommand("AT+RFC120\r\n");
0CA8 90E4B0    3068            mov     dptr,#__str_15
0CAB 75F080    3069            mov     b,#0x80
0CAE 120000    3070            lcall   _SendATCommand
0CB1           3071   ;        EFM8_JDY40_test.c:783: SendATCommand("AT+POWE\r\n");
0CB1 90E4F0    3072            mov     dptr,#__str_16
0CB4 75F080    3073            mov     b,#0x80
0CB7 120000    3074            lcall   _SendATCommand
0CBA           3075   ;        EFM8_JDY40_test.c:784: SendATCommand("AT+CLSS\r\n");
0CBA 90E530    3076            mov     dptr,#__str_17
0CBD 75F080    3077            mov     b,#0x80
0CC0 120000    3078            lcall   _SendATCommand
0CC3           3079   ;        EFM8_JDY40_test.c:788: SendATCommand("AT+DVIDFFFF\r\n");  
0CC3 90E570    3080            mov     dptr,#__str_18
0CC6 75F080    3081            mov     b,#0x80
0CC9 120000    3082            lcall   _SendATCommand
0CCC           3083   ;        EFM8_JDY40_test.c:790: while(1)
0CCC           3084   L030018?:
0CCC           3085   ;        EFM8_JDY40_test.c:793: count = GetPeriod(200);
0CCC 9000C8    3086            mov     dptr,#0x00C8
0CCF 120000    3087            lcall   _GetPeriod
0CD2 AA82      3088            mov     r2,dpl
0CD4 AB83      3089            mov     r3,dph
0CD6 ACF0      3090            mov     r4,b
0CD8 FD        3091            mov     r5,a
0CD9           3092   ;        EFM8_JDY40_test.c:794: f = GetFrequency(count, 1);
0CD9 75E801    3093            mov     _GetFrequency_PARM_2,#0x01
0CDC E4        3094            clr     a
0CDD F5E9      3095            mov     (_GetFrequency_PARM_2 + 1),a
0CDF 8A82      3096            mov     dpl,r2
0CE1 8B83      3097            mov     dph,r3
0CE3 8CF0      3098            mov     b,r4
0CE5 ED        3099            mov     a,r5
0CE6 120000    3100            lcall   _GetFrequency
0CE9           3101   ;        EFM8_JDY40_test.c:795: coinPresent = CoinDecider(f); 
0CE9 AA82      3102            mov     r2,dpl
0CEB AB83      3103            mov     r3,dph
0CED ACF0      3104            mov     r4,b
0CEF FD        3105            mov     r5,a
0CF0 C002      3106            push    ar2
0CF2 C003      3107            push    ar3
0CF4 C004      3108            push    ar4
0CF6 C005      3109            push    ar5
0CF8 120000    3110            lcall   _CoinDecider
0CFB E582      3111            mov     a,dpl
0CFD 8583F0    3112            mov     b,dph
0D00 D005      3113            pop     ar5
0D02 D004      3114            pop     ar4
0D04 D003      3115            pop     ar3
0D06 D002      3116            pop     ar2
0D08           3117   ;        EFM8_JDY40_test.c:796: if(coinPresent)
0D08 45F0      3118            orl     a,b
0D0A 6000      3119            jz      L030002?
0D0C           3120   ;        EFM8_JDY40_test.c:798: sprintf(msg, "%ld", f-55000); // subtracted so that it sends a smaller value
0D0C EA        3121            mov     a,r2
0D0D 2428      3122            add     a,#0x28
0D0F FA        3123            mov     r2,a
0D10 EB        3124            mov     a,r3
0D11 3429      3125            addc    a,#0x29
0D13 FB        3126            mov     r3,a
0D14 EC        3127            mov     a,r4
0D15 34FF      3128            addc    a,#0xff
0D17 FC        3129            mov     r4,a
0D18 ED        3130            mov     a,r5
0D19 34FF      3131            addc    a,#0xff
0D1B FD        3132            mov     r5,a
0D1C C002      3133            push    ar2
0D1E C003      3134            push    ar3
0D20 C004      3135            push    ar4
0D22 C005      3136            push    ar5
0D24 7430      3137            mov     a,#__str_19
0D26 C0E0      3138            push    acc
0D28 74E6      3139            mov     a,#(__str_19 >> 8)
0D2A C0E0      3140            push    acc
0D2C 7480      3141            mov     a,#0x80
0D2E C0E0      3142            push    acc
0D30 7460      3143            mov     a,#_msg
0D32 C0E0      3144            push    acc
0D34 7419      3145            mov     a,#(_msg >> 8)
0D36 C0E0      3146            push    acc
0D38 7440      3147            mov     a,#0x40
0D3A C0E0      3148            push    acc
0D3C 120000    3149            lcall   _sprintf
0D3F E581      3150            mov     a,sp
0D41 24F6      3151            add     a,#0xf6
0D43 F581      3152            mov     sp,a
0D45           3153   ;        EFM8_JDY40_test.c:799: sendstr1(msg);
0D45 901960    3154            mov     dptr,#_msg
0D48 75F040    3155            mov     b,#0x40
0D4B 120000    3156            lcall   _sendstr1
0D4E           3157   L030002?:
0D4E           3158   ;        EFM8_JDY40_test.c:803: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0D4E 75820E    3159            mov     dpl,#0x0E
0D51 120000    3160            lcall   _Volts_at_Pin
0D54 AA82      3161            mov     r2,dpl
0D56 AB83      3162            mov     r3,dph
0D58 ACF0      3163            mov     r4,b
0D5A FD        3164            mov     r5,a
0D5B 8AA0      3165            mov     _main_v_1_186,r2
0D5D 8BA1      3166            mov     (_main_v_1_186 + 1),r3
0D5F 8CA2      3167            mov     (_main_v_1_186 + 2),r4
0D61 8DA3      3168            mov     (_main_v_1_186 + 3),r5
0D63           3169   ;        EFM8_JDY40_test.c:804: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0D63 758210    3170            mov     dpl,#0x10
0D66 120000    3171            lcall   _Volts_at_Pin
0D69 AA82      3172            mov     r2,dpl
0D6B AB83      3173            mov     r3,dph
0D6D ACF0      3174            mov     r4,b
0D6F FD        3175            mov     r5,a
0D70 8AA4      3176            mov     (_main_v_1_186 + 0x0004),r2
0D72 8BA5      3177            mov     ((_main_v_1_186 + 0x0004) + 1),r3
0D74 8CA6      3178            mov     ((_main_v_1_186 + 0x0004) + 2),r4
0D76 8DA7      3179            mov     ((_main_v_1_186 + 0x0004) + 3),r5
0D78           3180   ;        EFM8_JDY40_test.c:810: if(RXU1()) // Something has arrived
0D78 120000    3181            lcall   _RXU1
0D7B 4000      3182            jc      L030030?
0D7D 020000    3183            ljmp    L030016?
0D80           3184   L030030?:
0D80           3185   ;        EFM8_JDY40_test.c:813: getstr1(buff, sizeof(buff));
0D80 75B814    3186            mov     _getstr1_PARM_2,#0x14
0D83 9019A0    3187            mov     dptr,#_buff
0D86 75F040    3188            mov     b,#0x40
0D89 120000    3189            lcall   _getstr1
0D8C           3190   ;        EFM8_JDY40_test.c:814: if ( strcmp(buff, "A") == 0 )
0D8C 750070    3191            mov     _strcmp_PARM_2,#__str_20
0D8F 7501E7    3192            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
0D92 750280    3193            mov     (_strcmp_PARM_2 + 2),#0x80
0D95 9019A0    3194            mov     dptr,#_buff
0D98 75F040    3195            mov     b,#0x40
0D9B 120000    3196            lcall   _strcmp
0D9E E582      3197            mov     a,dpl
0DA0 8583F0    3198            mov     b,dph
0DA3 45F0      3199            orl     a,b
0DA5 6000      3200            jz      L030031?
0DA7 020000    3201            ljmp    L030011?
0DAA           3202   L030031?:
0DAA           3203   ;        EFM8_JDY40_test.c:816: waitms(500);
0DAA 9001F4    3204            mov     dptr,#0x01F4
0DAD 120000    3205            lcall   _waitms
0DB0           3206   ;        EFM8_JDY40_test.c:817: while(1)
0DB0           3207   L030008?:
0DB0           3208   ;        EFM8_JDY40_test.c:819: direction=3; 
0DB0 757803    3209            mov     _direction,#0x03
0DB3 E4        3210            clr     a
0DB4 F579      3211            mov     (_direction + 1),a
0DB6           3212   ;        EFM8_JDY40_test.c:821: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0DB6 75820E    3213            mov     dpl,#0x0E
0DB9 120000    3214            lcall   _Volts_at_Pin
0DBC AA82      3215            mov     r2,dpl
0DBE AB83      3216            mov     r3,dph
0DC0 ACF0      3217            mov     r4,b
0DC2 FD        3218            mov     r5,a
0DC3 8AA0      3219            mov     _main_v_1_186,r2
0DC5 8BA1      3220            mov     (_main_v_1_186 + 1),r3
0DC7 8CA2      3221            mov     (_main_v_1_186 + 2),r4
0DC9 8DA3      3222            mov     (_main_v_1_186 + 3),r5
0DCB           3223   ;        EFM8_JDY40_test.c:822: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0DCB 758210    3224            mov     dpl,#0x10
0DCE 120000    3225            lcall   _Volts_at_Pin
0DD1 AA82      3226            mov     r2,dpl
0DD3 AB83      3227            mov     r3,dph
0DD5 ACF0      3228            mov     r4,b
0DD7 FD        3229            mov     r5,a
0DD8 8AA4      3230            mov     (_main_v_1_186 + 0x0004),r2
0DDA 8BA5      3231            mov     ((_main_v_1_186 + 0x0004) + 1),r3
0DDC 8CA6      3232            mov     ((_main_v_1_186 + 0x0004) + 2),r4
0DDE 8DA7      3233            mov     ((_main_v_1_186 + 0x0004) + 3),r5
0DE0           3234   ;        EFM8_JDY40_test.c:823: automaticmode(v[0], v[1]);
0DE0 8AF0      3235            mov     _automaticmode_PARM_2,r2
0DE2 8BF1      3236            mov     (_automaticmode_PARM_2 + 1),r3
0DE4 8CF2      3237            mov     (_automaticmode_PARM_2 + 2),r4
0DE6 8DF3      3238            mov     (_automaticmode_PARM_2 + 3),r5
0DE8 85A082    3239            mov     dpl,_main_v_1_186
0DEB 85A183    3240            mov     dph,(_main_v_1_186 + 1)
0DEE 85A2F0    3241            mov     b,(_main_v_1_186 + 2)
0DF1 E5A3      3242            mov     a,(_main_v_1_186 + 3)
0DF3 120000    3243            lcall   _automaticmode
0DF6           3244   ;        EFM8_JDY40_test.c:824: printf("michelle and xinyi sitting in a tree\n\r");
0DF6 74B0      3245            mov     a,#__str_21
0DF8 C0E0      3246            push    acc
0DFA 74E8      3247            mov     a,#(__str_21 >> 8)
0DFC C0E0      3248            push    acc
0DFE 7480      3249            mov     a,#0x80
0E00 C0E0      3250            push    acc
0E02 120000    3251            lcall   _printf
0E05 1581      3252            dec     sp
0E07 1581      3253            dec     sp
0E09 1581      3254            dec     sp
0E0B           3255   ;        EFM8_JDY40_test.c:826: if(RXU1())
0E0B 120000    3256            lcall   _RXU1
0E0E 5000      3257            jnc     L030008?
0E10           3258   ;        EFM8_JDY40_test.c:828: getstr1(buff, sizeof(buff));
0E10 75B814    3259            mov     _getstr1_PARM_2,#0x14
0E13 9019A0    3260            mov     dptr,#_buff
0E16 75F040    3261            mov     b,#0x40
0E19 120000    3262            lcall   _getstr1
0E1C           3263   ;        EFM8_JDY40_test.c:829: if (strcmp(buff, "A") == 0 ) break;
0E1C 750070    3264            mov     _strcmp_PARM_2,#__str_20
0E1F 7501E7    3265            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
0E22 750280    3266            mov     (_strcmp_PARM_2 + 2),#0x80
0E25 9019A0    3267            mov     dptr,#_buff
0E28 75F040    3268            mov     b,#0x40
0E2B 120000    3269            lcall   _strcmp
0E2E E582      3270            mov     a,dpl
0E30 8583F0    3271            mov     b,dph
0E33 45F0      3272            orl     a,b
0E35 6000      3273            jz      L030033?
0E37 020000    3274            ljmp    L030008?
0E3A           3275   L030033?:
0E3A           3276   L030011?:
0E3A           3277   ;        EFM8_JDY40_test.c:837: sscanf(buff, "S%dT%d", &speed, &steering);
0E3A 74C0      3278            mov     a,#_main_steering_1_186
0E3C C0E0      3279            push    acc
0E3E 74BE      3280            mov     a,#(_main_steering_1_186 >> 8)
0E40 C0E0      3281            push    acc
0E42 7440      3282            mov     a,#0x40
0E44 C0E0      3283            push    acc
0E46 7470      3284            mov     a,#_main_speed_1_186
0E48 C0E0      3285            push    acc
0E4A 74BE      3286            mov     a,#(_main_speed_1_186 >> 8)
0E4C C0E0      3287            push    acc
0E4E 7440      3288            mov     a,#0x40
0E50 C0E0      3289            push    acc
0E52 7430      3290            mov     a,#__str_22
0E54 C0E0      3291            push    acc
0E56 74E9      3292            mov     a,#(__str_22 >> 8)
0E58 C0E0      3293            push    acc
0E5A 7480      3294            mov     a,#0x80
0E5C C0E0      3295            push    acc
0E5E 74A0      3296            mov     a,#_buff
0E60 C0E0      3297            push    acc
0E62 7419      3298            mov     a,#(_buff >> 8)
0E64 C0E0      3299            push    acc
0E66 7440      3300            mov     a,#0x40
0E68 C0E0      3301            push    acc
0E6A 120000    3302            lcall   _sscanf
0E6D E581      3303            mov     a,sp
0E6F 24F4      3304            add     a,#0xf4
0E71 F581      3305            mov     sp,a
0E73           3306   ;        EFM8_JDY40_test.c:839: if (speed < 503 )
0E73 C3        3307            clr     c
0E74 E570      3308            mov     a,_main_speed_1_186
0E76 94F7      3309            subb    a,#0xF7
0E78 E571      3310            mov     a,(_main_speed_1_186 + 1)
0E7A 6480      3311            xrl     a,#0x80
0E7C 9481      3312            subb    a,#0x81
0E7E 5000      3313            jnc     L030013?
0E80           3314   ;        EFM8_JDY40_test.c:841: P2_5 = 0;
0E80 C2A5      3315            clr     _P2_5
0E82           3316   ;        EFM8_JDY40_test.c:842: P3_7=0;
0E82 C2B7      3317            clr     _P3_7
0E84           3318   ;        EFM8_JDY40_test.c:843: direction = 1;
0E84 757801    3319            mov     _direction,#0x01
0E87 E4        3320            clr     a
0E88 F579      3321            mov     (_direction + 1),a
0E8A 8000      3322            sjmp    L030014?
0E8C           3323   L030013?:
0E8C           3324   ;        EFM8_JDY40_test.c:847: P3_2=0;
0E8C C2B2      3325            clr     _P3_2
0E8E           3326   ;        EFM8_JDY40_test.c:848: P3_0=0;
0E8E C2B0      3327            clr     _P3_0
0E90           3328   ;        EFM8_JDY40_test.c:849: direction = 0;
0E90 E4        3329            clr     a
0E91 F578      3330            mov     _direction,a
0E93 F579      3331            mov     (_direction + 1),a
0E95           3332   L030014?:
0E95           3333   ;        EFM8_JDY40_test.c:852: ADCsteeringRatio(speed, steering, &adcwheel1, &adcwheel2);
0E95 752810    3334            mov     _ADCsteeringRatio_PARM_3,#_main_adcwheel1_1_186
0E98 752900    3335            mov     (_ADCsteeringRatio_PARM_3 + 1),#0x00
0E9B 752A40    3336            mov     (_ADCsteeringRatio_PARM_3 + 2),#0x40
0E9E 75D860    3337            mov     _ADCsteeringRatio_PARM_4,#_main_adcwheel2_1_186
0EA1 75D900    3338            mov     (_ADCsteeringRatio_PARM_4 + 1),#0x00
0EA4 75DA40    3339            mov     (_ADCsteeringRatio_PARM_4 + 2),#0x40
0EA7 85C078    3340            mov     _ADCsteeringRatio_PARM_2,_main_steering_1_186
0EAA 85C179    3341            mov     (_ADCsteeringRatio_PARM_2 + 1),(_main_steering_1_186 + 1)
0EAD 857082    3342            mov     dpl,_main_speed_1_186
0EB0 857183    3343            mov     dph,(_main_speed_1_186 + 1)
0EB3 120000    3344            lcall   _ADCsteeringRatio
0EB6           3345   ;        EFM8_JDY40_test.c:854: pwm_duty4 = ADCtoPWM(adcwheel1);
0EB6 851082    3346            mov     dpl,_main_adcwheel1_1_186
0EB9 851183    3347            mov     dph,(_main_adcwheel1_1_186 + 1)
0EBC 120000    3348            lcall   _ADCtoPWM
0EBF 858238    3349            mov     _pwm_duty4,dpl
0EC2 858339    3350            mov     (_pwm_duty4 + 1),dph
0EC5           3351   ;        EFM8_JDY40_test.c:855: pwm_duty2 = ADCtoPWM(adcwheel2);
0EC5 856082    3352            mov     dpl,_main_adcwheel2_1_186
0EC8 856183    3353            mov     dph,(_main_adcwheel2_1_186 + 1)
0ECB 120000    3354            lcall   _ADCtoPWM
0ECE 8582B8    3355            mov     _pwm_duty2,dpl
0ED1 8583B9    3356            mov     (_pwm_duty2 + 1),dph
0ED4           3357   ;        EFM8_JDY40_test.c:857: printf("pwm_duty4 = %u pwm_duty3 = %u adcwheel1=%u adcwheel2=%u speed = %d steering = %d", pwm_duty4, pwm_duty2, adcwheel1, adcwheel2, speed, steering);
0ED4 C0C0      3358            push    _main_steering_1_186
0ED6 C0C1      3359            push    (_main_steering_1_186 + 1)
0ED8 C070      3360            push    _main_speed_1_186
0EDA C071      3361            push    (_main_speed_1_186 + 1)
0EDC C060      3362            push    _main_adcwheel2_1_186
0EDE C061      3363            push    (_main_adcwheel2_1_186 + 1)
0EE0 C010      3364            push    _main_adcwheel1_1_186
0EE2 C011      3365            push    (_main_adcwheel1_1_186 + 1)
0EE4 C0B8      3366            push    _pwm_duty2
0EE6 C0B9      3367            push    (_pwm_duty2 + 1)
0EE8 C038      3368            push    _pwm_duty4
0EEA C039      3369            push    (_pwm_duty4 + 1)
0EEC 7430      3370            mov     a,#__str_23
0EEE C0E0      3371            push    acc
0EF0 74EA      3372            mov     a,#(__str_23 >> 8)
0EF2 C0E0      3373            push    acc
0EF4 7480      3374            mov     a,#0x80
0EF6 C0E0      3375            push    acc
0EF8 120000    3376            lcall   _printf
0EFB E581      3377            mov     a,sp
0EFD 24F1      3378            add     a,#0xf1
0EFF F581      3379            mov     sp,a
0F01           3380   ;        EFM8_JDY40_test.c:859: waitms(5); // The radio seems to need this delay...
0F01 900005    3381            mov     dptr,#0x0005
0F04 120000    3382            lcall   _waitms
0F07           3383   L030016?:
0F07           3384   ;        EFM8_JDY40_test.c:863: eputs("\n");
0F07 90EA70    3385            mov     dptr,#__str_24
0F0A 75F080    3386            mov     b,#0x80
0F0D 120000    3387            lcall   _eputs
0F10 020000    3388            ljmp    L030018?
0F13           3389            rseg R_CSEG
0F13           3390   
0000           3391            rseg R_XINIT
0000           3392   
0000           3393            rseg R_CONST
0000           3394   __str_0:
0000 436F6D6D  3395            db 'Command: %s'
     616E643A
     202573
000B 00        3396            db 0x00
000C           3397   __str_1:
000C 52657370  3398            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        3399            db 0x0D
0019 0A        3400            db 0x0A
001A 00        3401            db 0x00
001B           3402   __str_2:
001B 41542B44  3403            db 'AT+DVID0000'
     56494430
     303030
0026 0D        3404            db 0x0D
0027 0A        3405            db 0x0A
0028 00        3406            db 0x00
0029           3407   _PrintNumber_HexDigit_1_163:
0029 30313233  3408            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0039 00        3409            db 0x00
003A           3410   __str_4:
003A 2066      3411            db ' f'
003C 00        3412            db 0x00
003D           3413   __str_5:
003D 203D20    3414            db ' = '
0040 00        3415            db 0x00
0041           3416   __str_6:
0041 487A      3417            db 'Hz'
0043 00        3418            db 0x00
0044           3419   __str_7:
0044 2044494D  3420            db ' DIME'
     45
0049 00        3421            db 0x00
004A           3422   __str_8:
004A 204E4943  3423            db ' NICKEL'
     4B454C
0051 00        3424            db 0x00
0052           3425   __str_9:
0052 204C4F4F  3426            db ' LOONIE'
     4E4945
0059 00        3427            db 0x00
005A           3428   __str_10:
005A 0D        3429            db 0x0D
005B 0A        3430            db 0x0A
005C 45464D38  3431            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0077 0D        3432            db 0x0D
0078 0A        3433            db 0x0A
0079 00        3434            db 0x00
007A           3435   __str_11:
007A 41542B56  3436            db 'AT+VER'
     4552
0080 0D        3437            db 0x0D
0081 0A        3438            db 0x0A
0082 00        3439            db 0x00
0083           3440   __str_12:
0083 41542B42  3441            db 'AT+BAUD'
     415544
008A 0D        3442            db 0x0D
008B 0A        3443            db 0x0A
008C 00        3444            db 0x00
008D           3445   __str_13:
008D 41542B52  3446            db 'AT+RFID'
     464944
0094 0D        3447            db 0x0D
0095 0A        3448            db 0x0A
0096 00        3449            db 0x00
0097           3450   __str_14:
0097 41542B44  3451            db 'AT+DVID'
     564944
009E 0D        3452            db 0x0D
009F 0A        3453            db 0x0A
00A0 00        3454            db 0x00
00A1           3455   __str_15:
00A1 41542B52  3456            db 'AT+RFC120'
     46433132
     30
00AA 0D        3457            db 0x0D
00AB 0A        3458            db 0x0A
00AC 00        3459            db 0x00
00AD           3460   __str_16:
00AD 41542B50  3461            db 'AT+POWE'
     4F5745
00B4 0D        3462            db 0x0D
00B5 0A        3463            db 0x0A
00B6 00        3464            db 0x00
00B7           3465   __str_17:
00B7 41542B43  3466            db 'AT+CLSS'
     4C5353
00BE 0D        3467            db 0x0D
00BF 0A        3468            db 0x0A
00C0 00        3469            db 0x00
00C1           3470   __str_18:
00C1 41542B44  3471            db 'AT+DVIDFFFF'
     56494446
     464646
00CC 0D        3472            db 0x0D
00CD 0A        3473            db 0x0A
00CE 00        3474            db 0x00
00CF           3475   __str_19:
00CF 256C64    3476            db '%ld'
00D2 00        3477            db 0x00
00D3           3478   __str_20:
00D3 41        3479            db 'A'
00D4 00        3480            db 0x00
00D5           3481   __str_21:
00D5 6D696368  3482            db 'michelle and xinyi sitting in a tree'
     656C6C65
     20616E64
     2078696E
     79692073
     69747469
     6E672069
     6E206120
     74726565
00F9 0A        3483            db 0x0A
00FA 0D        3484            db 0x0D
00FB 00        3485            db 0x00
00FC           3486   __str_22:
00FC 53256454  3487            db 'S%dT%d'
     2564
0102 00        3488            db 0x00
0103           3489   __str_23:
0103 70776D5F  3490            db 'pwm_duty4 = %u pwm_duty3 = %u adcwheel1=%u adcwheel2=%u spee'
     64757479
     34203D20
     25752070
     776D5F64
     75747933
     203D2025
     75206164
     63776865
     656C313D
     25752061
     64637768
     65656C32
     3D257520
     73706565
013F 64203D20  3491            db 'd = %d steering = %d'
     25642073
     74656572
     696E6720
     3D202564
0153 00        3492            db 0x00
0154           3493   __str_24:
0154 0A        3494            db 0x0A
0155 00        3495            db 0x00
0156           3496   
008E           3497            CSEG
008E           3498   
008E           3499   end
