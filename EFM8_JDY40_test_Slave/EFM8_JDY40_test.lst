0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 01:42:51 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_164
0000             28            public _customHappyMouth
0000             29            public _customMoney
0000             30            public _customSparkle
0000             31            public _customOpenMouth
0000             32            public _customEye
0000             33            public _customMouth
0000             34            public _main
0000             35            public _automaticmode
0000             36            public _servomotion
0000             37            public _LCD_4BIT
0000             38            public _WriteCommand
0000             39            public _WriteData
0000             40            public _LCD_byte
0000             41            public _LCD_pulse
0000             42            public _GetFrequency
0000             43            public _PrintNumber
0000             44            public _eputs
0000             45            public _GetPeriod
0000             46            public _Timer2_ISR
0000             47            public _Timer4_ISR
0000             48            public _Volts_at_Pin
0000             49            public _ADC_at_Pin
0000             50            public _InitPinADC
0000             51            public _InitADC
0000             52            public _TIMER0_Init
0000             53            public _ReceptionOff
0000             54            public _SendATCommand
0000             55            public _waitms_or_RI1
0000             56            public _RXU1
0000             57            public _getstr1
0000             58            public _getchar1_with_timeout
0000             59            public _getchar1
0000             60            public _sendstr1
0000             61            public _putchar1
0000             62            public _UART1_Init
0000             63            public _waitms
0000             64            public _Timer3us
0000             65            public _Timer5_ISR
0000             66            public __c51_external_startup
0000             67            public _msg
0000             68            public _buff
0000             69            public _automaticmode_PARM_3
0000             70            public _automaticmode_PARM_2
0000             71            public _PrintNumber_PARM_3
0000             72            public _PrintNumber_PARM_2
0000             73            public _getstr1_PARM_2
0000             74            public _overflow_count
0000             75            public _servo2
0000             76            public _servo1
0000             77            public _servo_counter
0000             78            public _direction
0000             79            public _pwm_duty2
0000             80            public _pwm_counter2
0000             81            public _pwm_duty4
0000             82            public _pwm_counter4
0000             83   ;--------------------------------------------------------
0000             84   ; Special Function Registers
0000             85   ;--------------------------------------------------------
0000             86   _ACC            DATA 0xe0
0000             87   _ADC0ASAH       DATA 0xb6
0000             88   _ADC0ASAL       DATA 0xb5
0000             89   _ADC0ASCF       DATA 0xa1
0000             90   _ADC0ASCT       DATA 0xc7
0000             91   _ADC0CF0        DATA 0xbc
0000             92   _ADC0CF1        DATA 0xb9
0000             93   _ADC0CF2        DATA 0xdf
0000             94   _ADC0CN0        DATA 0xe8
0000             95   _ADC0CN1        DATA 0xb2
0000             96   _ADC0CN2        DATA 0xb3
0000             97   _ADC0GTH        DATA 0xc4
0000             98   _ADC0GTL        DATA 0xc3
0000             99   _ADC0H          DATA 0xbe
0000            100   _ADC0L          DATA 0xbd
0000            101   _ADC0LTH        DATA 0xc6
0000            102   _ADC0LTL        DATA 0xc5
0000            103   _ADC0MX         DATA 0xbb
0000            104   _B              DATA 0xf0
0000            105   _CKCON0         DATA 0x8e
0000            106   _CKCON1         DATA 0xa6
0000            107   _CLEN0          DATA 0xc6
0000            108   _CLIE0          DATA 0xc7
0000            109   _CLIF0          DATA 0xe8
0000            110   _CLKSEL         DATA 0xa9
0000            111   _CLOUT0         DATA 0xd1
0000            112   _CLU0CF         DATA 0xb1
0000            113   _CLU0FN         DATA 0xaf
0000            114   _CLU0MX         DATA 0x84
0000            115   _CLU1CF         DATA 0xb3
0000            116   _CLU1FN         DATA 0xb2
0000            117   _CLU1MX         DATA 0x85
0000            118   _CLU2CF         DATA 0xb6
0000            119   _CLU2FN         DATA 0xb5
0000            120   _CLU2MX         DATA 0x91
0000            121   _CLU3CF         DATA 0xbf
0000            122   _CLU3FN         DATA 0xbe
0000            123   _CLU3MX         DATA 0xae
0000            124   _CMP0CN0        DATA 0x9b
0000            125   _CMP0CN1        DATA 0x99
0000            126   _CMP0MD         DATA 0x9d
0000            127   _CMP0MX         DATA 0x9f
0000            128   _CMP1CN0        DATA 0xbf
0000            129   _CMP1CN1        DATA 0xac
0000            130   _CMP1MD         DATA 0xab
0000            131   _CMP1MX         DATA 0xaa
0000            132   _CRC0CN0        DATA 0xce
0000            133   _CRC0CN1        DATA 0x86
0000            134   _CRC0CNT        DATA 0xd3
0000            135   _CRC0DAT        DATA 0xcb
0000            136   _CRC0FLIP       DATA 0xcf
0000            137   _CRC0IN         DATA 0xca
0000            138   _CRC0ST         DATA 0xd2
0000            139   _DAC0CF0        DATA 0x91
0000            140   _DAC0CF1        DATA 0x92
0000            141   _DAC0H          DATA 0x85
0000            142   _DAC0L          DATA 0x84
0000            143   _DAC1CF0        DATA 0x93
0000            144   _DAC1CF1        DATA 0x94
0000            145   _DAC1H          DATA 0x8a
0000            146   _DAC1L          DATA 0x89
0000            147   _DAC2CF0        DATA 0x95
0000            148   _DAC2CF1        DATA 0x96
0000            149   _DAC2H          DATA 0x8c
0000            150   _DAC2L          DATA 0x8b
0000            151   _DAC3CF0        DATA 0x9a
0000            152   _DAC3CF1        DATA 0x9c
0000            153   _DAC3H          DATA 0x8e
0000            154   _DAC3L          DATA 0x8d
0000            155   _DACGCF0        DATA 0x88
0000            156   _DACGCF1        DATA 0x98
0000            157   _DACGCF2        DATA 0xa2
0000            158   _DERIVID        DATA 0xad
0000            159   _DEVICEID       DATA 0xb5
0000            160   _DPH            DATA 0x83
0000            161   _DPL            DATA 0x82
0000            162   _EIE1           DATA 0xe6
0000            163   _EIE2           DATA 0xf3
0000            164   _EIP1           DATA 0xbb
0000            165   _EIP1H          DATA 0xee
0000            166   _EIP2           DATA 0xed
0000            167   _EIP2H          DATA 0xf6
0000            168   _EMI0CN         DATA 0xe7
0000            169   _FLKEY          DATA 0xb7
0000            170   _HFO0CAL        DATA 0xc7
0000            171   _HFO1CAL        DATA 0xd6
0000            172   _HFOCN          DATA 0xef
0000            173   _I2C0ADM        DATA 0xff
0000            174   _I2C0CN0        DATA 0xba
0000            175   _I2C0DIN        DATA 0xbc
0000            176   _I2C0DOUT       DATA 0xbb
0000            177   _I2C0FCN0       DATA 0xad
0000            178   _I2C0FCN1       DATA 0xab
0000            179   _I2C0FCT        DATA 0xf5
0000            180   _I2C0SLAD       DATA 0xbd
0000            181   _I2C0STAT       DATA 0xb9
0000            182   _IE             DATA 0xa8
0000            183   _IP             DATA 0xb8
0000            184   _IPH            DATA 0xf2
0000            185   _IT01CF         DATA 0xe4
0000            186   _LFO0CN         DATA 0xb1
0000            187   _P0             DATA 0x80
0000            188   _P0MASK         DATA 0xfe
0000            189   _P0MAT          DATA 0xfd
0000            190   _P0MDIN         DATA 0xf1
0000            191   _P0MDOUT        DATA 0xa4
0000            192   _P0SKIP         DATA 0xd4
0000            193   _P1             DATA 0x90
0000            194   _P1MASK         DATA 0xee
0000            195   _P1MAT          DATA 0xed
0000            196   _P1MDIN         DATA 0xf2
0000            197   _P1MDOUT        DATA 0xa5
0000            198   _P1SKIP         DATA 0xd5
0000            199   _P2             DATA 0xa0
0000            200   _P2MASK         DATA 0xfc
0000            201   _P2MAT          DATA 0xfb
0000            202   _P2MDIN         DATA 0xf3
0000            203   _P2MDOUT        DATA 0xa6
0000            204   _P2SKIP         DATA 0xcc
0000            205   _P3             DATA 0xb0
0000            206   _P3MDIN         DATA 0xf4
0000            207   _P3MDOUT        DATA 0x9c
0000            208   _PCA0CENT       DATA 0x9e
0000            209   _PCA0CLR        DATA 0x9c
0000            210   _PCA0CN0        DATA 0xd8
0000            211   _PCA0CPH0       DATA 0xfc
0000            212   _PCA0CPH1       DATA 0xea
0000            213   _PCA0CPH2       DATA 0xec
0000            214   _PCA0CPH3       DATA 0xf5
0000            215   _PCA0CPH4       DATA 0x85
0000            216   _PCA0CPH5       DATA 0xde
0000            217   _PCA0CPL0       DATA 0xfb
0000            218   _PCA0CPL1       DATA 0xe9
0000            219   _PCA0CPL2       DATA 0xeb
0000            220   _PCA0CPL3       DATA 0xf4
0000            221   _PCA0CPL4       DATA 0x84
0000            222   _PCA0CPL5       DATA 0xdd
0000            223   _PCA0CPM0       DATA 0xda
0000            224   _PCA0CPM1       DATA 0xdb
0000            225   _PCA0CPM2       DATA 0xdc
0000            226   _PCA0CPM3       DATA 0xae
0000            227   _PCA0CPM4       DATA 0xaf
0000            228   _PCA0CPM5       DATA 0xcc
0000            229   _PCA0H          DATA 0xfa
0000            230   _PCA0L          DATA 0xf9
0000            231   _PCA0MD         DATA 0xd9
0000            232   _PCA0POL        DATA 0x96
0000            233   _PCA0PWM        DATA 0xf7
0000            234   _PCON0          DATA 0x87
0000            235   _PCON1          DATA 0xcd
0000            236   _PFE0CN         DATA 0xc1
0000            237   _PRTDRV         DATA 0xf6
0000            238   _PSCTL          DATA 0x8f
0000            239   _PSTAT0         DATA 0xaa
0000            240   _PSW            DATA 0xd0
0000            241   _REF0CN         DATA 0xd1
0000            242   _REG0CN         DATA 0xc9
0000            243   _REVID          DATA 0xb6
0000            244   _RSTSRC         DATA 0xef
0000            245   _SBCON1         DATA 0x94
0000            246   _SBRLH1         DATA 0x96
0000            247   _SBRLL1         DATA 0x95
0000            248   _SBUF           DATA 0x99
0000            249   _SBUF0          DATA 0x99
0000            250   _SBUF1          DATA 0x92
0000            251   _SCON           DATA 0x98
0000            252   _SCON0          DATA 0x98
0000            253   _SCON1          DATA 0xc8
0000            254   _SFRPAGE        DATA 0xa7
0000            255   _SFRPGCN        DATA 0xbc
0000            256   _SFRSTACK       DATA 0xd7
0000            257   _SMB0ADM        DATA 0xd6
0000            258   _SMB0ADR        DATA 0xd7
0000            259   _SMB0CF         DATA 0xc1
0000            260   _SMB0CN0        DATA 0xc0
0000            261   _SMB0DAT        DATA 0xc2
0000            262   _SMB0FCN0       DATA 0xc3
0000            263   _SMB0FCN1       DATA 0xc4
0000            264   _SMB0FCT        DATA 0xef
0000            265   _SMB0RXLN       DATA 0xc5
0000            266   _SMB0TC         DATA 0xac
0000            267   _SMOD1          DATA 0x93
0000            268   _SP             DATA 0x81
0000            269   _SPI0CFG        DATA 0xa1
0000            270   _SPI0CKR        DATA 0xa2
0000            271   _SPI0CN0        DATA 0xf8
0000            272   _SPI0DAT        DATA 0xa3
0000            273   _SPI0FCN0       DATA 0x9a
0000            274   _SPI0FCN1       DATA 0x9b
0000            275   _SPI0FCT        DATA 0xf7
0000            276   _SPI0PCF        DATA 0xdf
0000            277   _TCON           DATA 0x88
0000            278   _TH0            DATA 0x8c
0000            279   _TH1            DATA 0x8d
0000            280   _TL0            DATA 0x8a
0000            281   _TL1            DATA 0x8b
0000            282   _TMOD           DATA 0x89
0000            283   _TMR2CN0        DATA 0xc8
0000            284   _TMR2CN1        DATA 0xfd
0000            285   _TMR2H          DATA 0xcf
0000            286   _TMR2L          DATA 0xce
0000            287   _TMR2RLH        DATA 0xcb
0000            288   _TMR2RLL        DATA 0xca
0000            289   _TMR3CN0        DATA 0x91
0000            290   _TMR3CN1        DATA 0xfe
0000            291   _TMR3H          DATA 0x95
0000            292   _TMR3L          DATA 0x94
0000            293   _TMR3RLH        DATA 0x93
0000            294   _TMR3RLL        DATA 0x92
0000            295   _TMR4CN0        DATA 0x98
0000            296   _TMR4CN1        DATA 0xff
0000            297   _TMR4H          DATA 0xa5
0000            298   _TMR4L          DATA 0xa4
0000            299   _TMR4RLH        DATA 0xa3
0000            300   _TMR4RLL        DATA 0xa2
0000            301   _TMR5CN0        DATA 0xc0
0000            302   _TMR5CN1        DATA 0xf1
0000            303   _TMR5H          DATA 0xd5
0000            304   _TMR5L          DATA 0xd4
0000            305   _TMR5RLH        DATA 0xd3
0000            306   _TMR5RLL        DATA 0xd2
0000            307   _UART0PCF       DATA 0xd9
0000            308   _UART1FCN0      DATA 0x9d
0000            309   _UART1FCN1      DATA 0xd8
0000            310   _UART1FCT       DATA 0xfa
0000            311   _UART1LIN       DATA 0x9e
0000            312   _UART1PCF       DATA 0xda
0000            313   _VDM0CN         DATA 0xff
0000            314   _WDTCN          DATA 0x97
0000            315   _XBR0           DATA 0xe1
0000            316   _XBR1           DATA 0xe2
0000            317   _XBR2           DATA 0xe3
0000            318   _XOSC0CN        DATA 0x86
0000            319   _DPTR           DATA 0x8382
0000            320   _TMR2RL         DATA 0xcbca
0000            321   _TMR3RL         DATA 0x9392
0000            322   _TMR4RL         DATA 0xa3a2
0000            323   _TMR5RL         DATA 0xd3d2
0000            324   _TMR0           DATA 0x8c8a
0000            325   _TMR1           DATA 0x8d8b
0000            326   _TMR2           DATA 0xcfce
0000            327   _TMR3           DATA 0x9594
0000            328   _TMR4           DATA 0xa5a4
0000            329   _TMR5           DATA 0xd5d4
0000            330   _SBRL1          DATA 0x9695
0000            331   _PCA0           DATA 0xfaf9
0000            332   _PCA0CP0        DATA 0xfcfb
0000            333   _PCA0CP1        DATA 0xeae9
0000            334   _PCA0CP2        DATA 0xeceb
0000            335   _PCA0CP3        DATA 0xf5f4
0000            336   _PCA0CP4        DATA 0x8584
0000            337   _PCA0CP5        DATA 0xdedd
0000            338   _ADC0ASA        DATA 0xb6b5
0000            339   _ADC0GT         DATA 0xc4c3
0000            340   _ADC0           DATA 0xbebd
0000            341   _ADC0LT         DATA 0xc6c5
0000            342   _DAC0           DATA 0x8584
0000            343   _DAC1           DATA 0x8a89
0000            344   _DAC2           DATA 0x8c8b
0000            345   _DAC3           DATA 0x8e8d
0000            346   ;--------------------------------------------------------
0000            347   ; special function bits
0000            348   ;--------------------------------------------------------
0000            349   _ACC_0          BIT 0xe0
0000            350   _ACC_1          BIT 0xe1
0000            351   _ACC_2          BIT 0xe2
0000            352   _ACC_3          BIT 0xe3
0000            353   _ACC_4          BIT 0xe4
0000            354   _ACC_5          BIT 0xe5
0000            355   _ACC_6          BIT 0xe6
0000            356   _ACC_7          BIT 0xe7
0000            357   _TEMPE          BIT 0xe8
0000            358   _ADGN0          BIT 0xe9
0000            359   _ADGN1          BIT 0xea
0000            360   _ADWINT         BIT 0xeb
0000            361   _ADBUSY         BIT 0xec
0000            362   _ADINT          BIT 0xed
0000            363   _IPOEN          BIT 0xee
0000            364   _ADEN           BIT 0xef
0000            365   _B_0            BIT 0xf0
0000            366   _B_1            BIT 0xf1
0000            367   _B_2            BIT 0xf2
0000            368   _B_3            BIT 0xf3
0000            369   _B_4            BIT 0xf4
0000            370   _B_5            BIT 0xf5
0000            371   _B_6            BIT 0xf6
0000            372   _B_7            BIT 0xf7
0000            373   _C0FIF          BIT 0xe8
0000            374   _C0RIF          BIT 0xe9
0000            375   _C1FIF          BIT 0xea
0000            376   _C1RIF          BIT 0xeb
0000            377   _C2FIF          BIT 0xec
0000            378   _C2RIF          BIT 0xed
0000            379   _C3FIF          BIT 0xee
0000            380   _C3RIF          BIT 0xef
0000            381   _D1SRC0         BIT 0x88
0000            382   _D1SRC1         BIT 0x89
0000            383   _D1AMEN         BIT 0x8a
0000            384   _D01REFSL       BIT 0x8b
0000            385   _D3SRC0         BIT 0x8c
0000            386   _D3SRC1         BIT 0x8d
0000            387   _D3AMEN         BIT 0x8e
0000            388   _D23REFSL       BIT 0x8f
0000            389   _D0UDIS         BIT 0x98
0000            390   _D1UDIS         BIT 0x99
0000            391   _D2UDIS         BIT 0x9a
0000            392   _D3UDIS         BIT 0x9b
0000            393   _EX0            BIT 0xa8
0000            394   _ET0            BIT 0xa9
0000            395   _EX1            BIT 0xaa
0000            396   _ET1            BIT 0xab
0000            397   _ES0            BIT 0xac
0000            398   _ET2            BIT 0xad
0000            399   _ESPI0          BIT 0xae
0000            400   _EA             BIT 0xaf
0000            401   _PX0            BIT 0xb8
0000            402   _PT0            BIT 0xb9
0000            403   _PX1            BIT 0xba
0000            404   _PT1            BIT 0xbb
0000            405   _PS0            BIT 0xbc
0000            406   _PT2            BIT 0xbd
0000            407   _PSPI0          BIT 0xbe
0000            408   _P0_0           BIT 0x80
0000            409   _P0_1           BIT 0x81
0000            410   _P0_2           BIT 0x82
0000            411   _P0_3           BIT 0x83
0000            412   _P0_4           BIT 0x84
0000            413   _P0_5           BIT 0x85
0000            414   _P0_6           BIT 0x86
0000            415   _P0_7           BIT 0x87
0000            416   _P1_0           BIT 0x90
0000            417   _P1_1           BIT 0x91
0000            418   _P1_2           BIT 0x92
0000            419   _P1_3           BIT 0x93
0000            420   _P1_4           BIT 0x94
0000            421   _P1_5           BIT 0x95
0000            422   _P1_6           BIT 0x96
0000            423   _P1_7           BIT 0x97
0000            424   _P2_0           BIT 0xa0
0000            425   _P2_1           BIT 0xa1
0000            426   _P2_2           BIT 0xa2
0000            427   _P2_3           BIT 0xa3
0000            428   _P2_4           BIT 0xa4
0000            429   _P2_5           BIT 0xa5
0000            430   _P2_6           BIT 0xa6
0000            431   _P3_0           BIT 0xb0
0000            432   _P3_1           BIT 0xb1
0000            433   _P3_2           BIT 0xb2
0000            434   _P3_3           BIT 0xb3
0000            435   _P3_4           BIT 0xb4
0000            436   _P3_7           BIT 0xb7
0000            437   _CCF0           BIT 0xd8
0000            438   _CCF1           BIT 0xd9
0000            439   _CCF2           BIT 0xda
0000            440   _CCF3           BIT 0xdb
0000            441   _CCF4           BIT 0xdc
0000            442   _CCF5           BIT 0xdd
0000            443   _CR             BIT 0xde
0000            444   _CF             BIT 0xdf
0000            445   _PARITY         BIT 0xd0
0000            446   _F1             BIT 0xd1
0000            447   _OV             BIT 0xd2
0000            448   _RS0            BIT 0xd3
0000            449   _RS1            BIT 0xd4
0000            450   _F0             BIT 0xd5
0000            451   _AC             BIT 0xd6
0000            452   _CY             BIT 0xd7
0000            453   _RI             BIT 0x98
0000            454   _TI             BIT 0x99
0000            455   _RB8            BIT 0x9a
0000            456   _TB8            BIT 0x9b
0000            457   _REN            BIT 0x9c
0000            458   _CE             BIT 0x9d
0000            459   _SMODE          BIT 0x9e
0000            460   _RI1            BIT 0xc8
0000            461   _TI1            BIT 0xc9
0000            462   _RBX1           BIT 0xca
0000            463   _TBX1           BIT 0xcb
0000            464   _REN1           BIT 0xcc
0000            465   _PERR1          BIT 0xcd
0000            466   _OVR1           BIT 0xce
0000            467   _SI             BIT 0xc0
0000            468   _ACK            BIT 0xc1
0000            469   _ARBLOST        BIT 0xc2
0000            470   _ACKRQ          BIT 0xc3
0000            471   _STO            BIT 0xc4
0000            472   _STA            BIT 0xc5
0000            473   _TXMODE         BIT 0xc6
0000            474   _MASTER         BIT 0xc7
0000            475   _SPIEN          BIT 0xf8
0000            476   _TXNF           BIT 0xf9
0000            477   _NSSMD0         BIT 0xfa
0000            478   _NSSMD1         BIT 0xfb
0000            479   _RXOVRN         BIT 0xfc
0000            480   _MODF           BIT 0xfd
0000            481   _WCOL           BIT 0xfe
0000            482   _SPIF           BIT 0xff
0000            483   _IT0            BIT 0x88
0000            484   _IE0            BIT 0x89
0000            485   _IT1            BIT 0x8a
0000            486   _IE1            BIT 0x8b
0000            487   _TR0            BIT 0x8c
0000            488   _TF0            BIT 0x8d
0000            489   _TR1            BIT 0x8e
0000            490   _TF1            BIT 0x8f
0000            491   _T2XCLK0        BIT 0xc8
0000            492   _T2XCLK1        BIT 0xc9
0000            493   _TR2            BIT 0xca
0000            494   _T2SPLIT        BIT 0xcb
0000            495   _TF2CEN         BIT 0xcc
0000            496   _TF2LEN         BIT 0xcd
0000            497   _TF2L           BIT 0xce
0000            498   _TF2H           BIT 0xcf
0000            499   _T4XCLK0        BIT 0x98
0000            500   _T4XCLK1        BIT 0x99
0000            501   _TR4            BIT 0x9a
0000            502   _T4SPLIT        BIT 0x9b
0000            503   _TF4CEN         BIT 0x9c
0000            504   _TF4LEN         BIT 0x9d
0000            505   _TF4L           BIT 0x9e
0000            506   _TF4H           BIT 0x9f
0000            507   _T5XCLK0        BIT 0xc0
0000            508   _T5XCLK1        BIT 0xc1
0000            509   _TR5            BIT 0xc2
0000            510   _T5SPLIT        BIT 0xc3
0000            511   _TF5CEN         BIT 0xc4
0000            512   _TF5LEN         BIT 0xc5
0000            513   _TF5L           BIT 0xc6
0000            514   _TF5H           BIT 0xc7
0000            515   _RIE            BIT 0xd8
0000            516   _RXTO0          BIT 0xd9
0000            517   _RXTO1          BIT 0xda
0000            518   _RFRQ           BIT 0xdb
0000            519   _TIE            BIT 0xdc
0000            520   _TXHOLD         BIT 0xdd
0000            521   _TXNF1          BIT 0xde
0000            522   _TFRQ           BIT 0xdf
0000            523   ;--------------------------------------------------------
0000            524   ; overlayable register banks
0000            525   ;--------------------------------------------------------
0000            526            rbank0 segment data overlay
0000            527   ;--------------------------------------------------------
0000            528   ; internal ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_DSEG
0000            531   _pwm_counter4:
0000            532            ds 2
0002            533   _pwm_duty4:
0002            534            ds 2
0004            535   _pwm_counter2:
0004            536            ds 2
0006            537   _pwm_duty2:
0006            538            ds 2
0008            539   _direction:
0008            540            ds 2
000A            541   _servo_counter:
000A            542            ds 2
000C            543   _servo1:
000C            544            ds 1
000D            545   _servo2:
000D            546            ds 1
000E            547   _overflow_count:
000E            548            ds 1
000F            549   _getstr1_PARM_2:
000F            550            ds 1
0010            551   _PrintNumber_PARM_2:
0010            552            ds 2
0012            553   _PrintNumber_PARM_3:
0012            554            ds 2
0014            555   _PrintNumber_val_1_163:
0014            556            ds 4
0018            557   _PrintNumber_j_1_164:
0018            558            ds 2
001A            559   _PrintNumber_sloc0_1_0:
001A            560            ds 2
001C            561   _PrintNumber_sloc1_1_0:
001C            562            ds 4
0020            563   _automaticmode_PARM_2:
0020            564            ds 4
0024            565   _automaticmode_PARM_3:
0024            566            ds 4
0028            567   _main_adcwheel1_1_198:
0028            568            ds 2
002A            569   _main_adcwheel2_1_198:
002A            570            ds 2
002C            571   _main_which_1_198:
002C            572            ds 2
002E            573   _main_f_1_198:
002E            574            ds 4
0032            575   _main_v_1_198:
0032            576            ds 8
003A            577   _main_sloc0_1_0:
003A            578            ds 4
003E            579   ;--------------------------------------------------------
003E            580   ; overlayable items in internal ram 
003E            581   ;--------------------------------------------------------
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585            rseg    R_OSEG
0000            586   _InitPinADC_PARM_2:
0000            587            ds 1
0001            588            rseg    R_OSEG
0001            589            rseg    R_OSEG
0001            590   ;--------------------------------------------------------
0001            591   ; indirectly addressable internal ram data
0001            592   ;--------------------------------------------------------
0000            593            rseg R_ISEG
0000            594   _buff:
0000            595            ds 20
0014            596   _msg:
0014            597            ds 20
0028            598   ;--------------------------------------------------------
0028            599   ; absolute internal ram data
0028            600   ;--------------------------------------------------------
0000            601            DSEG
0000            602   ;--------------------------------------------------------
0000            603   ; bit data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_BSEG
0000            606   ;--------------------------------------------------------
0000            607   ; paged external ram data
0000            608   ;--------------------------------------------------------
0000            609            rseg R_PSEG
0000            610   ;--------------------------------------------------------
0000            611   ; external ram data
0000            612   ;--------------------------------------------------------
0000            613            rseg R_XSEG
0000            614   _PrintNumber_buff_1_164:
0000            615            ds 33
0021            616   ;--------------------------------------------------------
0021            617   ; absolute external ram data
0021            618   ;--------------------------------------------------------
0000            619            XSEG
0000            620   ;--------------------------------------------------------
0000            621   ; external initialized ram data
0000            622   ;--------------------------------------------------------
0000            623            rseg R_IXSEG
0000            624            rseg R_HOME
0000            625            rseg R_GSINIT
0000            626            rseg R_CSEG
0000            627   ;--------------------------------------------------------
0000            628   ; Reset entry point and interrupt vectors
0000            629   ;--------------------------------------------------------
0000            630            CSEG at 0x0000
0000 020000     631            ljmp    _crt0
002B            632            CSEG at 0x002b
002B 020000     633            ljmp    _Timer2_ISR
008B            634            CSEG at 0x008b
008B 020000     635            ljmp    _Timer4_ISR
0093            636            CSEG at 0x0093
0093 020000     637            ljmp    _Timer5_ISR
0096            638   ;--------------------------------------------------------
0096            639   ; global & static initialisations
0096            640   ;--------------------------------------------------------
0000            641            rseg R_HOME
0000            642            rseg R_GSINIT
0000            643            rseg R_GSINIT
0000            644   ;--------------------------------------------------------
0000            645   ; data variables initialization
0000            646   ;--------------------------------------------------------
0000            647            rseg R_DINIT
0000            648   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         649            clr     a
0001 F518       650            mov     _pwm_counter4,a
0003 F519       651            mov     (_pwm_counter4 + 1),a
0005            652   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0?65535)
0005 75D8FF     653            mov     _pwm_duty4,#0xFF
0008 75D9FF     654            mov     (_pwm_duty4 + 1),#0xFF
000B            655   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         656            clr     a
000C F598       657            mov     _pwm_counter2,a
000E F599       658            mov     (_pwm_counter2 + 1),a
0010            659   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0?65535)
0010 7558FF     660            mov     _pwm_duty2,#0xFF
0013 7559FF     661            mov     (_pwm_duty2 + 1),#0xFF
0016            662   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         663            clr     a
0017 F518       664            mov     _direction,a
0019 F519       665            mov     (_direction + 1),a
001B            666   ;        EFM8_JDY40_test.c:41: volatile unsigned int servo_counter=0;
001B E4         667            clr     a
001C F5D8       668            mov     _servo_counter,a
001E F5D9       669            mov     (_servo_counter + 1),a
0020            670   ;        EFM8_JDY40_test.c:42: volatile unsigned char servo1=250, servo2=250;
0020 7598FA     671            mov     _servo1,#0xFA
0023            672   ;        EFM8_JDY40_test.c:42: /////////////////////////////LCD//////////////////////////
0023 7558FA     673            mov     _servo2,#0xFA
0026            674            ; The linker places a 'ret' at the end of segment R_DINIT.
0026            675   ;--------------------------------------------------------
0026            676   ; code
0026            677   ;--------------------------------------------------------
0000            678            rseg R_CSEG
0000            679   ;------------------------------------------------------------
0000            680   ;Allocation info for local variables in function '_c51_external_startup'
0000            681   ;------------------------------------------------------------
0000            682   ;------------------------------------------------------------
0000            683   ;        EFM8_JDY40_test.c:69: char _c51_external_startup (void)
0000            684   ;        -----------------------------------------
0000            685   ;         function _c51_external_startup
0000            686   ;        -----------------------------------------
0000            687   __c51_external_startup:
0000            688            using   0
0000            689   ;        EFM8_JDY40_test.c:72: SFRPAGE = 0x00;
0000 75A700     690            mov     _SFRPAGE,#0x00
0003            691   ;        EFM8_JDY40_test.c:73: WDTCN = 0xDE; //First key
0003 7597DE     692            mov     _WDTCN,#0xDE
0006            693   ;        EFM8_JDY40_test.c:74: WDTCN = 0xAD; //Second key
0006 7597AD     694            mov     _WDTCN,#0xAD
0009            695   ;        EFM8_JDY40_test.c:76: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     696            mov     _VDM0CN,#0x80
000C            697   ;        EFM8_JDY40_test.c:77: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     698            mov     _RSTSRC,#0x06
000F            699   ;        EFM8_JDY40_test.c:84: SFRPAGE = 0x10;
000F 75A710     700            mov     _SFRPAGE,#0x10
0012            701   ;        EFM8_JDY40_test.c:85: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     702            mov     _PFE0CN,#0x20
0015            703   ;        EFM8_JDY40_test.c:86: SFRPAGE = 0x00;
0015 75A700     704            mov     _SFRPAGE,#0x00
0018            705   ;        EFM8_JDY40_test.c:107: CLKSEL = 0x00;
0018 75A900     706            mov     _CLKSEL,#0x00
001B            707   ;        EFM8_JDY40_test.c:108: CLKSEL = 0x00;
001B 75A900     708            mov     _CLKSEL,#0x00
001E            709   ;        EFM8_JDY40_test.c:109: while ((CLKSEL & 0x80) == 0);
001E            710   L002001?:
001E E5A9       711            mov     a,_CLKSEL
0020 30E7A0     712            jnb     acc.7,L002001?
0023            713   ;        EFM8_JDY40_test.c:110: CLKSEL = 0x03;
0023 75A903     714            mov     _CLKSEL,#0x03
0026            715   ;        EFM8_JDY40_test.c:111: CLKSEL = 0x03;
0026 75A903     716            mov     _CLKSEL,#0x03
0029            717   ;        EFM8_JDY40_test.c:112: while ((CLKSEL & 0x80) == 0);
0029            718   L002004?:
0029 E5A9       719            mov     a,_CLKSEL
002B 30E720     720            jnb     acc.7,L002004?
002E            721   ;        EFM8_JDY40_test.c:117: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     722            orl     _P0MDOUT,#0x11
0031            723   ;        EFM8_JDY40_test.c:118: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     724            orl     _P2MDOUT,#0x01
0034            725   ;        EFM8_JDY40_test.c:119: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     726            mov     _XBR0,#0x01
0037            727   ;        EFM8_JDY40_test.c:120: XBR1     = 0X00;
0037 75E200     728            mov     _XBR1,#0x00
003A            729   ;        EFM8_JDY40_test.c:121: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     730            mov     _XBR2,#0x41
003D            731   ;        EFM8_JDY40_test.c:123: P3MDOUT |= 0b10000101;
003D 439C85     732            orl     _P3MDOUT,#0x85
0040            733   ;        EFM8_JDY40_test.c:124: XBR2     = 0x41; // existing line
0040 75E341     734            mov     _XBR2,#0x41
0043            735   ;        EFM8_JDY40_test.c:125: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     736            orl     _P3MDOUT,#0x85
0046            737   ;        EFM8_JDY40_test.c:131: SCON0 = 0x10;
0046 759810     738            mov     _SCON0,#0x10
0049            739   ;        EFM8_JDY40_test.c:132: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     740            mov     _TH1,#0xE6
004C            741   ;        EFM8_JDY40_test.c:133: TL1 = TH1;      // Init Timer1
004C 858D8B     742            mov     _TL1,_TH1
004F            743   ;        EFM8_JDY40_test.c:134: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     744            anl     _TMOD,#0x0F
0052            745   ;        EFM8_JDY40_test.c:135: TMOD |=  0x20;                       
0052 438920     746            orl     _TMOD,#0x20
0055            747   ;        EFM8_JDY40_test.c:136: TR1 = 1; // START Timer1
0055 D28E       748            setb    _TR1
0057            749   ;        EFM8_JDY40_test.c:137: TI = 1;  // Indicate TX0 ready
0057 D299       750            setb    _TI
0059            751   ;        EFM8_JDY40_test.c:141: SFRPAGE=0x10;
0059 75A710     752            mov     _SFRPAGE,#0x10
005C            753   ;        EFM8_JDY40_test.c:142: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     754            mov     _TMR4CN0,#0x00
005F            755   ;        EFM8_JDY40_test.c:143: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     756            orl     _CKCON1,#0x01
0062            757   ;        EFM8_JDY40_test.c:144: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     758            mov     _TMR4RL,#0xA8
0065 75A3FD     759            mov     (_TMR4RL >> 8),#0xFD
0068            760   ;        EFM8_JDY40_test.c:145: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     761            mov     _TMR4,#0xFF
006B 75A5FF     762            mov     (_TMR4 >> 8),#0xFF
006E            763   ;        EFM8_JDY40_test.c:146: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     764            orl     _EIE2,#0x04
0071            765   ;        EFM8_JDY40_test.c:147: TR4=1;
0071 D29A       766            setb    _TR4
0073            767   ;        EFM8_JDY40_test.c:148: EA=1;
0073 D2AF       768            setb    _EA
0075            769   ;        EFM8_JDY40_test.c:151: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     770            mov     _TMR2CN0,#0x00
0078            771   ;        EFM8_JDY40_test.c:152: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     772            orl     _CKCON0,#0x10
007B            773   ;        EFM8_JDY40_test.c:153: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     774            mov     _TMR2RL,#0xA8
007E 75CBFD     775            mov     (_TMR2RL >> 8),#0xFD
0081            776   ;        EFM8_JDY40_test.c:154: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     777            mov     _TMR2,#0xFF
0084 75CFFF     778            mov     (_TMR2 >> 8),#0xFF
0087            779   ;        EFM8_JDY40_test.c:155: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       780            setb    _ET2
0089            781   ;        EFM8_JDY40_test.c:156: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       782            setb    _TR2
008B            783   ;        EFM8_JDY40_test.c:157: SFRPAGE=0x00;
008B 75A700     784            mov     _SFRPAGE,#0x00
008E            785   ;        EFM8_JDY40_test.c:160: SFRPAGE=0x10;
008E 75A710     786            mov     _SFRPAGE,#0x10
0091            787   ;        EFM8_JDY40_test.c:161: TMR5CN0=0x00;
0091 75C000     788            mov     _TMR5CN0,#0x00
0094            789   ;        EFM8_JDY40_test.c:162: TMR5=0xffff;   // Set to reload immediately
0094 75D4FF     790            mov     _TMR5,#0xFF
0097 75D5FF     791            mov     (_TMR5 >> 8),#0xFF
009A            792   ;        EFM8_JDY40_test.c:163: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
009A 43F308     793            orl     _EIE2,#0x08
009D            794   ;        EFM8_JDY40_test.c:164: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
009D D2C2       795            setb    _TR5
009F            796   ;        EFM8_JDY40_test.c:166: EA=1;
009F D2AF       797            setb    _EA
00A1            798   ;        EFM8_JDY40_test.c:168: SFRPAGE=0x00;
00A1 75A700     799            mov     _SFRPAGE,#0x00
00A4            800   ;        EFM8_JDY40_test.c:171: return 0;
00A4 758200     801            mov     dpl,#0x00
00A7 22         802            ret
00A8            803   ;------------------------------------------------------------
00A8            804   ;Allocation info for local variables in function 'Timer5_ISR'
00A8            805   ;------------------------------------------------------------
00A8            806   ;------------------------------------------------------------
00A8            807   ;        EFM8_JDY40_test.c:174: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
00A8            808   ;        -----------------------------------------
00A8            809   ;         function Timer5_ISR
00A8            810   ;        -----------------------------------------
00A8            811   _Timer5_ISR:
00A8 C0E0       812            push    acc
00AA C002       813            push    ar2
00AC C003       814            push    ar3
00AE C0D0       815            push    psw
00B0 75D000     816            mov     psw,#0x00
00B3            817   ;        EFM8_JDY40_test.c:176: SFRPAGE=0x10;
00B3 75A710     818            mov     _SFRPAGE,#0x10
00B6            819   ;        EFM8_JDY40_test.c:177: TF5H = 0; // Clear Timer5 interrupt flag
00B6 C2C7       820            clr     _TF5H
00B8            821   ;        EFM8_JDY40_test.c:178: TMR5RL=(0x10000L-(SYSCLK/(12L*100000L)));
00B8 75D2C4     822            mov     _TMR5RL,#0xC4
00BB 75D3FF     823            mov     (_TMR5RL >> 8),#0xFF
00BE            824   ;        EFM8_JDY40_test.c:179: servo_counter++;
00BE 7401       825            mov     a,#0x01
00C0 25D8       826            add     a,_servo_counter
00C2 F5D8       827            mov     _servo_counter,a
00C4 E4         828            clr     a
00C5 35D9       829            addc    a,(_servo_counter + 1)
00C7 F5D9       830            mov     (_servo_counter + 1),a
00C9            831   ;        EFM8_JDY40_test.c:180: if(servo_counter==2000)
00C9 74D0       832            mov     a,#0xD0
00CB B5D8E0     833            cjne    a,_servo_counter,L003002?
00CE 7407       834            mov     a,#0x07
00D0 B5D9E0     835            cjne    a,(_servo_counter + 1),L003002?
00D3            836   ;        EFM8_JDY40_test.c:182: servo_counter=0;
00D3 E4         837            clr     a
00D4 F5D8       838            mov     _servo_counter,a
00D6 F5D9       839            mov     (_servo_counter + 1),a
00D8            840   L003002?:
00D8            841   ;        EFM8_JDY40_test.c:184: if(servo1>=servo_counter)
00D8 AA98       842            mov     r2,_servo1
00DA 7B00       843            mov     r3,#0x00
00DC C3         844            clr     c
00DD EA         845            mov     a,r2
00DE 95D8       846            subb    a,_servo_counter
00E0 EB         847            mov     a,r3
00E1 95D9       848            subb    a,(_servo_counter + 1)
00E3 4000       849            jc      L003004?
00E5            850   ;        EFM8_JDY40_test.c:186: SERVO1=1;
00E5 D293       851            setb    _P1_3
00E7 8000       852            sjmp    L003005?
00E9            853   L003004?:
00E9            854   ;        EFM8_JDY40_test.c:190: SERVO1=0;
00E9 C293       855            clr     _P1_3
00EB            856   L003005?:
00EB            857   ;        EFM8_JDY40_test.c:192: if(servo2>=servo_counter)
00EB AA58       858            mov     r2,_servo2
00ED 7B00       859            mov     r3,#0x00
00EF C3         860            clr     c
00F0 EA         861            mov     a,r2
00F1 95D8       862            subb    a,_servo_counter
00F3 EB         863            mov     a,r3
00F4 95D9       864            subb    a,(_servo_counter + 1)
00F6 4000       865            jc      L003007?
00F8            866   ;        EFM8_JDY40_test.c:194: SERVO2=1;
00F8 D294       867            setb    _P1_4
00FA 8000       868            sjmp    L003009?
00FC            869   L003007?:
00FC            870   ;        EFM8_JDY40_test.c:198: SERVO2=0;
00FC C294       871            clr     _P1_4
00FE            872   L003009?:
00FE D0D0       873            pop     psw
0100 D003       874            pop     ar3
0102 D002       875            pop     ar2
0104 D0E0       876            pop     acc
0106 32         877            reti
0107            878   ;        eliminated unneeded push/pop dpl
0107            879   ;        eliminated unneeded push/pop dph
0107            880   ;        eliminated unneeded push/pop b
0107            881   ;------------------------------------------------------------
0107            882   ;Allocation info for local variables in function 'Timer3us'
0107            883   ;------------------------------------------------------------
0107            884   ;us                        Allocated to registers r2 
0107            885   ;i                         Allocated to registers r3 
0107            886   ;------------------------------------------------------------
0107            887   ;        EFM8_JDY40_test.c:203: void Timer3us(unsigned char us)
0107            888   ;        -----------------------------------------
0107            889   ;         function Timer3us
0107            890   ;        -----------------------------------------
0107            891   _Timer3us:
0107 AA82       892            mov     r2,dpl
0109            893   ;        EFM8_JDY40_test.c:208: CKCON0|=0b_0100_0000;
0109 438E40     894            orl     _CKCON0,#0x40
010C            895   ;        EFM8_JDY40_test.c:210: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
010C 7592B8     896            mov     _TMR3RL,#0xB8
010F 7593FF     897            mov     (_TMR3RL >> 8),#0xFF
0112            898   ;        EFM8_JDY40_test.c:211: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0112 859294     899            mov     _TMR3,_TMR3RL
0115 859395     900            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0118            901   ;        EFM8_JDY40_test.c:213: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0118 759104     902            mov     _TMR3CN0,#0x04
011B            903   ;        EFM8_JDY40_test.c:214: for (i = 0; i < us; i++)       // Count <us> overflows
011B 7B00       904            mov     r3,#0x00
011D            905   L004004?:
011D C3         906            clr     c
011E EB         907            mov     a,r3
011F 9A         908            subb    a,r2
0120 5000       909            jnc     L004007?
0122            910   ;        EFM8_JDY40_test.c:216: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0122            911   L004001?:
0122 E591       912            mov     a,_TMR3CN0
0124 30E7A0     913            jnb     acc.7,L004001?
0127            914   ;        EFM8_JDY40_test.c:217: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0127 53917F     915            anl     _TMR3CN0,#0x7F
012A            916   ;        EFM8_JDY40_test.c:214: for (i = 0; i < us; i++)       // Count <us> overflows
012A 0B         917            inc     r3
012B 8000       918            sjmp    L004004?
012D            919   L004007?:
012D            920   ;        EFM8_JDY40_test.c:219: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
012D 759100     921            mov     _TMR3CN0,#0x00
0130 22         922            ret
0131            923   ;------------------------------------------------------------
0131            924   ;Allocation info for local variables in function 'waitms'
0131            925   ;------------------------------------------------------------
0131            926   ;ms                        Allocated to registers r2 r3 
0131            927   ;j                         Allocated to registers r4 r5 
0131            928   ;k                         Allocated to registers r6 
0131            929   ;------------------------------------------------------------
0131            930   ;        EFM8_JDY40_test.c:223: void waitms (unsigned int ms)
0131            931   ;        -----------------------------------------
0131            932   ;         function waitms
0131            933   ;        -----------------------------------------
0131            934   _waitms:
0131 AA82       935            mov     r2,dpl
0133 AB83       936            mov     r3,dph
0135            937   ;        EFM8_JDY40_test.c:227: for(j=0; j<ms; j++)
0135 7C00       938            mov     r4,#0x00
0137 7D00       939            mov     r5,#0x00
0139            940   L005005?:
0139 C3         941            clr     c
013A EC         942            mov     a,r4
013B 9A         943            subb    a,r2
013C ED         944            mov     a,r5
013D 9B         945            subb    a,r3
013E 5000       946            jnc     L005009?
0140            947   ;        EFM8_JDY40_test.c:228: for (k=0; k<4; k++) Timer3us(250);
0140 7E00       948            mov     r6,#0x00
0142            949   L005001?:
0142 BE04E0     950            cjne    r6,#0x04,L005018?
0145            951   L005018?:
0145 5000       952            jnc     L005007?
0147 7582FA     953            mov     dpl,#0xFA
014A C002       954            push    ar2
014C C003       955            push    ar3
014E C004       956            push    ar4
0150 C005       957            push    ar5
0152 C006       958            push    ar6
0154 120000     959            lcall   _Timer3us
0157 D006       960            pop     ar6
0159 D005       961            pop     ar5
015B D004       962            pop     ar4
015D D003       963            pop     ar3
015F D002       964            pop     ar2
0161 0E         965            inc     r6
0162 8000       966            sjmp    L005001?
0164            967   L005007?:
0164            968   ;        EFM8_JDY40_test.c:227: for(j=0; j<ms; j++)
0164 0C         969            inc     r4
0165 BC0020     970            cjne    r4,#0x00,L005005?
0168 0D         971            inc     r5
0169 8000       972            sjmp    L005005?
016B            973   L005009?:
016B 22         974            ret
016C            975   ;------------------------------------------------------------
016C            976   ;Allocation info for local variables in function 'UART1_Init'
016C            977   ;------------------------------------------------------------
016C            978   ;baudrate                  Allocated to registers r2 r3 r4 r5 
016C            979   ;------------------------------------------------------------
016C            980   ;        EFM8_JDY40_test.c:231: void UART1_Init (unsigned long baudrate)
016C            981   ;        -----------------------------------------
016C            982   ;         function UART1_Init
016C            983   ;        -----------------------------------------
016C            984   _UART1_Init:
016C AA82       985            mov     r2,dpl
016E AB83       986            mov     r3,dph
0170 ACF0       987            mov     r4,b
0172 FD         988            mov     r5,a
0173            989   ;        EFM8_JDY40_test.c:233: SFRPAGE = 0x20;
0173 75A720     990            mov     _SFRPAGE,#0x20
0176            991   ;        EFM8_JDY40_test.c:234: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0176 75930C     992            mov     _SMOD1,#0x0C
0179            993   ;        EFM8_JDY40_test.c:235: SCON1 = 0x10;
0179 75C810     994            mov     _SCON1,#0x10
017C            995   ;        EFM8_JDY40_test.c:236: SBCON1 =0x00;   // disable baud rate generator
017C 759400     996            mov     _SBCON1,#0x00
017F            997   ;        EFM8_JDY40_test.c:237: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
017F 8A00       998            mov     __divulong_PARM_2,r2
0181 8B01       999            mov     (__divulong_PARM_2 + 1),r3
0183 8C02      1000            mov     (__divulong_PARM_2 + 2),r4
0185 8D03      1001            mov     (__divulong_PARM_2 + 3),r5
0187 90A200    1002            mov     dptr,#0xA200
018A 75F04A    1003            mov     b,#0x4A
018D 7404      1004            mov     a,#0x04
018F 120000    1005            lcall   __divulong
0192 AA82      1006            mov     r2,dpl
0194 AB83      1007            mov     r3,dph
0196 ACF0      1008            mov     r4,b
0198 FD        1009            mov     r5,a
0199 750018    1010            mov     __divulong_PARM_2,#0x18
019C E4        1011            clr     a
019D F501      1012            mov     (__divulong_PARM_2 + 1),a
019F F502      1013            mov     (__divulong_PARM_2 + 2),a
01A1 F503      1014            mov     (__divulong_PARM_2 + 3),a
01A3 8A82      1015            mov     dpl,r2
01A5 8B83      1016            mov     dph,r3
01A7 8CF0      1017            mov     b,r4
01A9 ED        1018            mov     a,r5
01AA 120000    1019            lcall   __divulong
01AD AA82      1020            mov     r2,dpl
01AF AB83      1021            mov     r3,dph
01B1 ACF0      1022            mov     r4,b
01B3 FD        1023            mov     r5,a
01B4 E4        1024            clr     a
01B5 C3        1025            clr     c
01B6 9A        1026            subb    a,r2
01B7 FA        1027            mov     r2,a
01B8 E4        1028            clr     a
01B9 9B        1029            subb    a,r3
01BA FB        1030            mov     r3,a
01BB 7401      1031            mov     a,#0x01
01BD 9C        1032            subb    a,r4
01BE E4        1033            clr     a
01BF 9D        1034            subb    a,r5
01C0 8A95      1035            mov     _SBRL1,r2
01C2 8B96      1036            mov     (_SBRL1 >> 8),r3
01C4           1037   ;        EFM8_JDY40_test.c:238: TI1 = 1; // indicate ready for TX
01C4 D2C9      1038            setb    _TI1
01C6           1039   ;        EFM8_JDY40_test.c:239: SBCON1 |= 0x40;   // enable baud rate generator
01C6 439440    1040            orl     _SBCON1,#0x40
01C9           1041   ;        EFM8_JDY40_test.c:240: SFRPAGE = 0x00;
01C9 75A700    1042            mov     _SFRPAGE,#0x00
01CC 22        1043            ret
01CD           1044   ;------------------------------------------------------------
01CD           1045   ;Allocation info for local variables in function 'putchar1'
01CD           1046   ;------------------------------------------------------------
01CD           1047   ;c                         Allocated to registers r2 
01CD           1048   ;------------------------------------------------------------
01CD           1049   ;        EFM8_JDY40_test.c:243: void putchar1 (char c) 
01CD           1050   ;        -----------------------------------------
01CD           1051   ;         function putchar1
01CD           1052   ;        -----------------------------------------
01CD           1053   _putchar1:
01CD AA82      1054            mov     r2,dpl
01CF           1055   ;        EFM8_JDY40_test.c:245: SFRPAGE = 0x20;
01CF 75A720    1056            mov     _SFRPAGE,#0x20
01D2           1057   ;        EFM8_JDY40_test.c:246: while (!TI1);
01D2           1058   L007001?:
01D2           1059   ;        EFM8_JDY40_test.c:247: TI1=0;
01D2 10C970    1060            jbc     _TI1,L007008?
01D5 8000      1061            sjmp    L007001?
01D7           1062   L007008?:
01D7           1063   ;        EFM8_JDY40_test.c:248: SBUF1 = c;
01D7 8A92      1064            mov     _SBUF1,r2
01D9           1065   ;        EFM8_JDY40_test.c:249: SFRPAGE = 0x00;
01D9 75A700    1066            mov     _SFRPAGE,#0x00
01DC 22        1067            ret
01DD           1068   ;------------------------------------------------------------
01DD           1069   ;Allocation info for local variables in function 'sendstr1'
01DD           1070   ;------------------------------------------------------------
01DD           1071   ;s                         Allocated to registers r2 r3 r4 
01DD           1072   ;------------------------------------------------------------
01DD           1073   ;        EFM8_JDY40_test.c:252: void sendstr1 (char * s)
01DD           1074   ;        -----------------------------------------
01DD           1075   ;         function sendstr1
01DD           1076   ;        -----------------------------------------
01DD           1077   _sendstr1:
01DD AA82      1078            mov     r2,dpl
01DF AB83      1079            mov     r3,dph
01E1 ACF0      1080            mov     r4,b
01E3           1081   ;        EFM8_JDY40_test.c:254: while(*s)
01E3           1082   L008001?:
01E3 8A82      1083            mov     dpl,r2
01E5 8B83      1084            mov     dph,r3
01E7 8CF0      1085            mov     b,r4
01E9 120000    1086            lcall   __gptrget
01EC FD        1087            mov     r5,a
01ED 6000      1088            jz      L008004?
01EF           1089   ;        EFM8_JDY40_test.c:256: putchar1(*s);
01EF 8D82      1090            mov     dpl,r5
01F1 C002      1091            push    ar2
01F3 C003      1092            push    ar3
01F5 C004      1093            push    ar4
01F7 120000    1094            lcall   _putchar1
01FA D004      1095            pop     ar4
01FC D003      1096            pop     ar3
01FE D002      1097            pop     ar2
0200           1098   ;        EFM8_JDY40_test.c:257: s++;     
0200 0A        1099            inc     r2
0201 BA00B0    1100            cjne    r2,#0x00,L008001?
0204 0B        1101            inc     r3
0205 8000      1102            sjmp    L008001?
0207           1103   L008004?:
0207 22        1104            ret
0208           1105   ;------------------------------------------------------------
0208           1106   ;Allocation info for local variables in function 'getchar1'
0208           1107   ;------------------------------------------------------------
0208           1108   ;c                         Allocated to registers 
0208           1109   ;------------------------------------------------------------
0208           1110   ;        EFM8_JDY40_test.c:261: char getchar1 (void)
0208           1111   ;        -----------------------------------------
0208           1112   ;         function getchar1
0208           1113   ;        -----------------------------------------
0208           1114   _getchar1:
0208           1115   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
0208 75A720    1116            mov     _SFRPAGE,#0x20
020B           1117   ;        EFM8_JDY40_test.c:265: while (!RI1);
020B           1118   L009001?:
020B           1119   ;        EFM8_JDY40_test.c:266: RI1=0;
020B 10C8B0    1120            jbc     _RI1,L009008?
020E 8000      1121            sjmp    L009001?
0210           1122   L009008?:
0210           1123   ;        EFM8_JDY40_test.c:268: SCON1&=0b_0011_1111;
0210 53C83F    1124            anl     _SCON1,#0x3F
0213           1125   ;        EFM8_JDY40_test.c:269: c = SBUF1;
0213 859282    1126            mov     dpl,_SBUF1
0216           1127   ;        EFM8_JDY40_test.c:270: SFRPAGE = 0x00;
0216 75A700    1128            mov     _SFRPAGE,#0x00
0219           1129   ;        EFM8_JDY40_test.c:271: return (c);
0219 22        1130            ret
021A           1131   ;------------------------------------------------------------
021A           1132   ;Allocation info for local variables in function 'getchar1_with_timeout'
021A           1133   ;------------------------------------------------------------
021A           1134   ;c                         Allocated to registers 
021A           1135   ;timeout                   Allocated to registers r2 r3 
021A           1136   ;------------------------------------------------------------
021A           1137   ;        EFM8_JDY40_test.c:274: char getchar1_with_timeout (void)
021A           1138   ;        -----------------------------------------
021A           1139   ;         function getchar1_with_timeout
021A           1140   ;        -----------------------------------------
021A           1141   _getchar1_with_timeout:
021A           1142   ;        EFM8_JDY40_test.c:278: SFRPAGE = 0x20;
021A 75A720    1143            mov     _SFRPAGE,#0x20
021D           1144   ;        EFM8_JDY40_test.c:280: while (!RI1)
021D 7A00      1145            mov     r2,#0x00
021F 7B00      1146            mov     r3,#0x00
0221           1147   L010003?:
0221 20C830    1148            jb      _RI1,L010005?
0224           1149   ;        EFM8_JDY40_test.c:282: SFRPAGE = 0x00;
0224 75A700    1150            mov     _SFRPAGE,#0x00
0227           1151   ;        EFM8_JDY40_test.c:283: Timer3us(20);
0227 758214    1152            mov     dpl,#0x14
022A C002      1153            push    ar2
022C C003      1154            push    ar3
022E 120000    1155            lcall   _Timer3us
0231 D003      1156            pop     ar3
0233 D002      1157            pop     ar2
0235           1158   ;        EFM8_JDY40_test.c:284: SFRPAGE = 0x20;
0235 75A720    1159            mov     _SFRPAGE,#0x20
0238           1160   ;        EFM8_JDY40_test.c:285: timeout++;
0238 0A        1161            inc     r2
0239 BA0070    1162            cjne    r2,#0x00,L010012?
023C 0B        1163            inc     r3
023D           1164   L010012?:
023D           1165   ;        EFM8_JDY40_test.c:286: if(timeout==25000)
023D BAA8F0    1166            cjne    r2,#0xA8,L010003?
0240 BB61F0    1167            cjne    r3,#0x61,L010003?
0243           1168   ;        EFM8_JDY40_test.c:288: SFRPAGE = 0x00;
0243 75A700    1169            mov     _SFRPAGE,#0x00
0246           1170   ;        EFM8_JDY40_test.c:289: return ('\n'); // Timeout after half second
0246 75820A    1171            mov     dpl,#0x0A
0249 22        1172            ret
024A           1173   L010005?:
024A           1174   ;        EFM8_JDY40_test.c:292: RI1=0;
024A C2C8      1175            clr     _RI1
024C           1176   ;        EFM8_JDY40_test.c:294: SCON1&=0b_0011_1111;
024C 53C83F    1177            anl     _SCON1,#0x3F
024F           1178   ;        EFM8_JDY40_test.c:295: c = SBUF1;
024F 859282    1179            mov     dpl,_SBUF1
0252           1180   ;        EFM8_JDY40_test.c:296: SFRPAGE = 0x00;
0252 75A700    1181            mov     _SFRPAGE,#0x00
0255           1182   ;        EFM8_JDY40_test.c:297: return (c);
0255 22        1183            ret
0256           1184   ;------------------------------------------------------------
0256           1185   ;Allocation info for local variables in function 'getstr1'
0256           1186   ;------------------------------------------------------------
0256           1187   ;n                         Allocated with name '_getstr1_PARM_2'
0256           1188   ;s                         Allocated to registers r2 r3 r4 
0256           1189   ;c                         Allocated to registers r1 
0256           1190   ;cnt                       Allocated to registers r5 
0256           1191   ;------------------------------------------------------------
0256           1192   ;        EFM8_JDY40_test.c:300: void getstr1 (char * s, unsigned char n)
0256           1193   ;        -----------------------------------------
0256           1194   ;         function getstr1
0256           1195   ;        -----------------------------------------
0256           1196   _getstr1:
0256 AA82      1197            mov     r2,dpl
0258 AB83      1198            mov     r3,dph
025A ACF0      1199            mov     r4,b
025C           1200   ;        EFM8_JDY40_test.c:306: while(1)
025C 7D00      1201            mov     r5,#0x00
025E 8A06      1202            mov     ar6,r2
0260 8B07      1203            mov     ar7,r3
0262 8C00      1204            mov     ar0,r4
0264           1205   L011007?:
0264           1206   ;        EFM8_JDY40_test.c:308: c=getchar1_with_timeout();
0264 C002      1207            push    ar2
0266 C003      1208            push    ar3
0268 C004      1209            push    ar4
026A C005      1210            push    ar5
026C C006      1211            push    ar6
026E C007      1212            push    ar7
0270 C000      1213            push    ar0
0272 120000    1214            lcall   _getchar1_with_timeout
0275 A982      1215            mov     r1,dpl
0277 D000      1216            pop     ar0
0279 D007      1217            pop     ar7
027B D006      1218            pop     ar6
027D D005      1219            pop     ar5
027F D004      1220            pop     ar4
0281 D003      1221            pop     ar3
0283 D002      1222            pop     ar2
0285           1223   ;        EFM8_JDY40_test.c:309: if(c=='\n')
0285 B90AF0    1224            cjne    r1,#0x0A,L011002?
0288           1225   ;        EFM8_JDY40_test.c:311: *s=0;
0288 8A82      1226            mov     dpl,r2
028A 8B83      1227            mov     dph,r3
028C 8CF0      1228            mov     b,r4
028E E4        1229            clr     a
028F           1230   ;        EFM8_JDY40_test.c:312: return;
028F 020000    1231            ljmp    __gptrput
0292           1232   L011002?:
0292           1233   ;        EFM8_JDY40_test.c:315: if (cnt<n)
0292 C3        1234            clr     c
0293 ED        1235            mov     a,r5
0294 95D8      1236            subb    a,_getstr1_PARM_2
0296 5000      1237            jnc     L011004?
0298           1238   ;        EFM8_JDY40_test.c:317: cnt++;
0298 0D        1239            inc     r5
0299           1240   ;        EFM8_JDY40_test.c:318: *s=c;
0299 8E82      1241            mov     dpl,r6
029B 8F83      1242            mov     dph,r7
029D 88F0      1243            mov     b,r0
029F E9        1244            mov     a,r1
02A0 120000    1245            lcall   __gptrput
02A3 A3        1246            inc     dptr
02A4 AE82      1247            mov     r6,dpl
02A6 AF83      1248            mov     r7,dph
02A8           1249   ;        EFM8_JDY40_test.c:319: s++;
02A8 8E02      1250            mov     ar2,r6
02AA 8F03      1251            mov     ar3,r7
02AC 8804      1252            mov     ar4,r0
02AE 8000      1253            sjmp    L011007?
02B0           1254   L011004?:
02B0           1255   ;        EFM8_JDY40_test.c:323: *s=0;
02B0 8A82      1256            mov     dpl,r2
02B2 8B83      1257            mov     dph,r3
02B4 8CF0      1258            mov     b,r4
02B6 E4        1259            clr     a
02B7           1260   ;        EFM8_JDY40_test.c:324: return;
02B7 020000    1261            ljmp    __gptrput
02BA           1262   ;------------------------------------------------------------
02BA           1263   ;Allocation info for local variables in function 'RXU1'
02BA           1264   ;------------------------------------------------------------
02BA           1265   ;------------------------------------------------------------
02BA           1266   ;        EFM8_JDY40_test.c:330: bit RXU1 (void)
02BA           1267   ;        -----------------------------------------
02BA           1268   ;         function RXU1
02BA           1269   ;        -----------------------------------------
02BA           1270   _RXU1:
02BA           1271   ;        EFM8_JDY40_test.c:333: SFRPAGE = 0x20;
02BA 75A720    1272            mov     _SFRPAGE,#0x20
02BD           1273   ;        EFM8_JDY40_test.c:334: mybit=RI1;
02BD A2C8      1274            mov     c,_RI1
02BF           1275   ;        EFM8_JDY40_test.c:335: SFRPAGE = 0x00;
02BF 75A700    1276            mov     _SFRPAGE,#0x00
02C2           1277   ;        EFM8_JDY40_test.c:336: return mybit;
02C2 22        1278            ret
02C3           1279   ;------------------------------------------------------------
02C3           1280   ;Allocation info for local variables in function 'waitms_or_RI1'
02C3           1281   ;------------------------------------------------------------
02C3           1282   ;ms                        Allocated to registers r2 r3 
02C3           1283   ;j                         Allocated to registers r4 r5 
02C3           1284   ;k                         Allocated to registers r6 
02C3           1285   ;------------------------------------------------------------
02C3           1286   ;        EFM8_JDY40_test.c:339: void waitms_or_RI1 (unsigned int ms)
02C3           1287   ;        -----------------------------------------
02C3           1288   ;         function waitms_or_RI1
02C3           1289   ;        -----------------------------------------
02C3           1290   _waitms_or_RI1:
02C3 AA82      1291            mov     r2,dpl
02C5 AB83      1292            mov     r3,dph
02C7           1293   ;        EFM8_JDY40_test.c:343: for(j=0; j<ms; j++)
02C7 7C00      1294            mov     r4,#0x00
02C9 7D00      1295            mov     r5,#0x00
02CB           1296   L013007?:
02CB C3        1297            clr     c
02CC EC        1298            mov     a,r4
02CD 9A        1299            subb    a,r2
02CE ED        1300            mov     a,r5
02CF 9B        1301            subb    a,r3
02D0 5000      1302            jnc     L013011?
02D2           1303   ;        EFM8_JDY40_test.c:345: for (k=0; k<4; k++)
02D2 7E00      1304            mov     r6,#0x00
02D4           1305   L013003?:
02D4 BE0470    1306            cjne    r6,#0x04,L013019?
02D7           1307   L013019?:
02D7 5000      1308            jnc     L013009?
02D9           1309   ;        EFM8_JDY40_test.c:347: if(RXU1()) return;
02D9 C002      1310            push    ar2
02DB C003      1311            push    ar3
02DD C004      1312            push    ar4
02DF C005      1313            push    ar5
02E1 C006      1314            push    ar6
02E3 120000    1315            lcall   _RXU1
02E6 E4        1316            clr     a
02E7 33        1317            rlc     a
02E8 D006      1318            pop     ar6
02EA D005      1319            pop     ar5
02EC D004      1320            pop     ar4
02EE D003      1321            pop     ar3
02F0 D002      1322            pop     ar2
02F2 6000      1323            jz      L013002?
02F4 22        1324            ret
02F5           1325   L013002?:
02F5           1326   ;        EFM8_JDY40_test.c:348: Timer3us(250);
02F5 7582FA    1327            mov     dpl,#0xFA
02F8 C002      1328            push    ar2
02FA C003      1329            push    ar3
02FC C004      1330            push    ar4
02FE C005      1331            push    ar5
0300 C006      1332            push    ar6
0302 120000    1333            lcall   _Timer3us
0305 D006      1334            pop     ar6
0307 D005      1335            pop     ar5
0309 D004      1336            pop     ar4
030B D003      1337            pop     ar3
030D D002      1338            pop     ar2
030F           1339   ;        EFM8_JDY40_test.c:345: for (k=0; k<4; k++)
030F 0E        1340            inc     r6
0310 8000      1341            sjmp    L013003?
0312           1342   L013009?:
0312           1343   ;        EFM8_JDY40_test.c:343: for(j=0; j<ms; j++)
0312 0C        1344            inc     r4
0313 BC00B0    1345            cjne    r4,#0x00,L013007?
0316 0D        1346            inc     r5
0317 8000      1347            sjmp    L013007?
0319           1348   L013011?:
0319 22        1349            ret
031A           1350   ;------------------------------------------------------------
031A           1351   ;Allocation info for local variables in function 'SendATCommand'
031A           1352   ;------------------------------------------------------------
031A           1353   ;s                         Allocated to registers r2 r3 r4 
031A           1354   ;------------------------------------------------------------
031A           1355   ;        EFM8_JDY40_test.c:353: void SendATCommand (char * s)
031A           1356   ;        -----------------------------------------
031A           1357   ;         function SendATCommand
031A           1358   ;        -----------------------------------------
031A           1359   _SendATCommand:
031A AA82      1360            mov     r2,dpl
031C AB83      1361            mov     r3,dph
031E ACF0      1362            mov     r4,b
0320           1363   ;        EFM8_JDY40_test.c:355: printf("Command: %s", s);
0320 C002      1364            push    ar2
0322 C003      1365            push    ar3
0324 C004      1366            push    ar4
0326 C002      1367            push    ar2
0328 C003      1368            push    ar3
032A C004      1369            push    ar4
032C 7430      1370            mov     a,#__str_0
032E C0E0      1371            push    acc
0330 74CC      1372            mov     a,#(__str_0 >> 8)
0332 C0E0      1373            push    acc
0334 7480      1374            mov     a,#0x80
0336 C0E0      1375            push    acc
0338 120000    1376            lcall   _printf
033B E581      1377            mov     a,sp
033D 24FA      1378            add     a,#0xfa
033F F581      1379            mov     sp,a
0341           1380   ;        EFM8_JDY40_test.c:356: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0341 C2A0      1381            clr     _P2_0
0343           1382   ;        EFM8_JDY40_test.c:357: waitms(5);
0343 900005    1383            mov     dptr,#0x0005
0346 120000    1384            lcall   _waitms
0349 D004      1385            pop     ar4
034B D003      1386            pop     ar3
034D D002      1387            pop     ar2
034F           1388   ;        EFM8_JDY40_test.c:358: sendstr1(s);
034F 8A82      1389            mov     dpl,r2
0351 8B83      1390            mov     dph,r3
0353 8CF0      1391            mov     b,r4
0355 120000    1392            lcall   _sendstr1
0358           1393   ;        EFM8_JDY40_test.c:359: getstr1(buff, sizeof(buff)-1);
0358 75D813    1394            mov     _getstr1_PARM_2,#0x13
035B 904D58    1395            mov     dptr,#_buff
035E 75F040    1396            mov     b,#0x40
0361 120000    1397            lcall   _getstr1
0364           1398   ;        EFM8_JDY40_test.c:360: waitms(10);
0364 90000A    1399            mov     dptr,#0x000A
0367 120000    1400            lcall   _waitms
036A           1401   ;        EFM8_JDY40_test.c:361: P2_0=1; // 'set' pin to 1 is normal operation mode.
036A D2A0      1402            setb    _P2_0
036C           1403   ;        EFM8_JDY40_test.c:362: printf("Response: %s\r\n", buff);
036C 7458      1404            mov     a,#_buff
036E C0E0      1405            push    acc
0370 744D      1406            mov     a,#(_buff >> 8)
0372 C0E0      1407            push    acc
0374 7440      1408            mov     a,#0x40
0376 C0E0      1409            push    acc
0378 74F0      1410            mov     a,#__str_1
037A C0E0      1411            push    acc
037C 74CC      1412            mov     a,#(__str_1 >> 8)
037E C0E0      1413            push    acc
0380 7480      1414            mov     a,#0x80
0382 C0E0      1415            push    acc
0384 120000    1416            lcall   _printf
0387 E581      1417            mov     a,sp
0389 24FA      1418            add     a,#0xfa
038B F581      1419            mov     sp,a
038D 22        1420            ret
038E           1421   ;------------------------------------------------------------
038E           1422   ;Allocation info for local variables in function 'ReceptionOff'
038E           1423   ;------------------------------------------------------------
038E           1424   ;------------------------------------------------------------
038E           1425   ;        EFM8_JDY40_test.c:365: void ReceptionOff (void)
038E           1426   ;        -----------------------------------------
038E           1427   ;         function ReceptionOff
038E           1428   ;        -----------------------------------------
038E           1429   _ReceptionOff:
038E           1430   ;        EFM8_JDY40_test.c:367: P2_0=0; // 'set' pin to 0 is 'AT' mode.
038E C2A0      1431            clr     _P2_0
0390           1432   ;        EFM8_JDY40_test.c:368: waitms(10);
0390 90000A    1433            mov     dptr,#0x000A
0393 120000    1434            lcall   _waitms
0396           1435   ;        EFM8_JDY40_test.c:369: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0396 90CD30    1436            mov     dptr,#__str_2
0399 75F080    1437            mov     b,#0x80
039C 120000    1438            lcall   _sendstr1
039F           1439   ;        EFM8_JDY40_test.c:370: waitms(10);
039F 90000A    1440            mov     dptr,#0x000A
03A2 120000    1441            lcall   _waitms
03A5           1442   ;        EFM8_JDY40_test.c:372: SCON1&=0b_0011_1111;
03A5 53C83F    1443            anl     _SCON1,#0x3F
03A8           1444   ;        EFM8_JDY40_test.c:373: P2_0=1; // 'set' pin to 1 is normal operation mode.
03A8 D2A0      1445            setb    _P2_0
03AA 22        1446            ret
03AB           1447   ;------------------------------------------------------------
03AB           1448   ;Allocation info for local variables in function 'TIMER0_Init'
03AB           1449   ;------------------------------------------------------------
03AB           1450   ;------------------------------------------------------------
03AB           1451   ;        EFM8_JDY40_test.c:377: void TIMER0_Init(void)
03AB           1452   ;        -----------------------------------------
03AB           1453   ;         function TIMER0_Init
03AB           1454   ;        -----------------------------------------
03AB           1455   _TIMER0_Init:
03AB           1456   ;        EFM8_JDY40_test.c:379: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
03AB 5389F0    1457            anl     _TMOD,#0xF0
03AE           1458   ;        EFM8_JDY40_test.c:380: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
03AE 438901    1459            orl     _TMOD,#0x01
03B1           1460   ;        EFM8_JDY40_test.c:381: TR0=0; // Stop Timer/Counter 0
03B1 C28C      1461            clr     _TR0
03B3 22        1462            ret
03B4           1463   ;------------------------------------------------------------
03B4           1464   ;Allocation info for local variables in function 'InitADC'
03B4           1465   ;------------------------------------------------------------
03B4           1466   ;------------------------------------------------------------
03B4           1467   ;        EFM8_JDY40_test.c:385: void InitADC (void)
03B4           1468   ;        -----------------------------------------
03B4           1469   ;         function InitADC
03B4           1470   ;        -----------------------------------------
03B4           1471   _InitADC:
03B4           1472   ;        EFM8_JDY40_test.c:387: SFRPAGE = 0x00;
03B4 75A700    1473            mov     _SFRPAGE,#0x00
03B7           1474   ;        EFM8_JDY40_test.c:388: ADEN=0; // Disable ADC
03B7 C2EF      1475            clr     _ADEN
03B9           1476   ;        EFM8_JDY40_test.c:393: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03B9 75B280    1477            mov     _ADC0CN1,#0x80
03BC           1478   ;        EFM8_JDY40_test.c:397: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03BC 75BC20    1479            mov     _ADC0CF0,#0x20
03BF           1480   ;        EFM8_JDY40_test.c:401: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03BF 75B91E    1481            mov     _ADC0CF1,#0x1E
03C2           1482   ;        EFM8_JDY40_test.c:410: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03C2 75E800    1483            mov     _ADC0CN0,#0x00
03C5           1484   ;        EFM8_JDY40_test.c:415: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03C5 75DF3F    1485            mov     _ADC0CF2,#0x3F
03C8           1486   ;        EFM8_JDY40_test.c:419: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03C8 75B300    1487            mov     _ADC0CN2,#0x00
03CB           1488   ;        EFM8_JDY40_test.c:421: ADEN=1; // Enable ADC
03CB D2EF      1489            setb    _ADEN
03CD 22        1490            ret
03CE           1491   ;------------------------------------------------------------
03CE           1492   ;Allocation info for local variables in function 'InitPinADC'
03CE           1493   ;------------------------------------------------------------
03CE           1494   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
03CE           1495   ;portno                    Allocated to registers r2 
03CE           1496   ;mask                      Allocated to registers r3 
03CE           1497   ;------------------------------------------------------------
03CE           1498   ;        EFM8_JDY40_test.c:424: void InitPinADC (unsigned char portno, unsigned char pinno)
03CE           1499   ;        -----------------------------------------
03CE           1500   ;         function InitPinADC
03CE           1501   ;        -----------------------------------------
03CE           1502   _InitPinADC:
03CE AA82      1503            mov     r2,dpl
03D0           1504   ;        EFM8_JDY40_test.c:428: mask=1<<pinno;
03D0 8560F0    1505            mov     b,_InitPinADC_PARM_2
03D3 05F0      1506            inc     b
03D5 7401      1507            mov     a,#0x01
03D7 8000      1508            sjmp    L018013?
03D9           1509   L018011?:
03D9 25E0      1510            add     a,acc
03DB           1511   L018013?:
03DB D5F0B0    1512            djnz    b,L018011?
03DE FB        1513            mov     r3,a
03DF           1514   ;        EFM8_JDY40_test.c:430: SFRPAGE = 0x20;
03DF 75A720    1515            mov     _SFRPAGE,#0x20
03E2           1516   ;        EFM8_JDY40_test.c:431: switch (portno)
03E2 BA00F0    1517            cjne    r2,#0x00,L018014?
03E5 8000      1518            sjmp    L018001?
03E7           1519   L018014?:
03E7 BA0170    1520            cjne    r2,#0x01,L018015?
03EA 8000      1521            sjmp    L018002?
03EC           1522   L018015?:
03EC           1523   ;        EFM8_JDY40_test.c:433: case 0:
03EC BA02F0    1524            cjne    r2,#0x02,L018005?
03EF 8000      1525            sjmp    L018003?
03F1           1526   L018001?:
03F1           1527   ;        EFM8_JDY40_test.c:434: P0MDIN &= (~mask); // Set pin as analog input
03F1 EB        1528            mov     a,r3
03F2 F4        1529            cpl     a
03F3 FA        1530            mov     r2,a
03F4 52F1      1531            anl     _P0MDIN,a
03F6           1532   ;        EFM8_JDY40_test.c:435: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03F6 EB        1533            mov     a,r3
03F7 42D4      1534            orl     _P0SKIP,a
03F9           1535   ;        EFM8_JDY40_test.c:436: break;
03F9           1536   ;        EFM8_JDY40_test.c:437: case 1:
03F9 8000      1537            sjmp    L018005?
03FB           1538   L018002?:
03FB           1539   ;        EFM8_JDY40_test.c:438: P1MDIN &= (~mask); // Set pin as analog input
03FB EB        1540            mov     a,r3
03FC F4        1541            cpl     a
03FD FA        1542            mov     r2,a
03FE 52F2      1543            anl     _P1MDIN,a
0400           1544   ;        EFM8_JDY40_test.c:439: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0400 EB        1545            mov     a,r3
0401 42D5      1546            orl     _P1SKIP,a
0403           1547   ;        EFM8_JDY40_test.c:440: break;
0403           1548   ;        EFM8_JDY40_test.c:441: case 2:
0403 8000      1549            sjmp    L018005?
0405           1550   L018003?:
0405           1551   ;        EFM8_JDY40_test.c:442: P2MDIN &= (~mask); // Set pin as analog input
0405 EB        1552            mov     a,r3
0406 F4        1553            cpl     a
0407 FA        1554            mov     r2,a
0408 52F3      1555            anl     _P2MDIN,a
040A           1556   ;        EFM8_JDY40_test.c:443: P2SKIP |= mask; // Skip Crossbar decoding for this pin
040A EB        1557            mov     a,r3
040B 42CC      1558            orl     _P2SKIP,a
040D           1559   ;        EFM8_JDY40_test.c:447: }
040D           1560   L018005?:
040D           1561   ;        EFM8_JDY40_test.c:448: SFRPAGE = 0x00;
040D 75A700    1562            mov     _SFRPAGE,#0x00
0410 22        1563            ret
0411           1564   ;------------------------------------------------------------
0411           1565   ;Allocation info for local variables in function 'ADC_at_Pin'
0411           1566   ;------------------------------------------------------------
0411           1567   ;pin                       Allocated to registers 
0411           1568   ;------------------------------------------------------------
0411           1569   ;        EFM8_JDY40_test.c:451: unsigned int ADC_at_Pin(unsigned char pin)
0411           1570   ;        -----------------------------------------
0411           1571   ;         function ADC_at_Pin
0411           1572   ;        -----------------------------------------
0411           1573   _ADC_at_Pin:
0411 8582BB    1574            mov     _ADC0MX,dpl
0414           1575   ;        EFM8_JDY40_test.c:454: ADINT = 0;
0414 C2ED      1576            clr     _ADINT
0416           1577   ;        EFM8_JDY40_test.c:455: ADBUSY = 1;     // Convert voltage at the pin
0416 D2EC      1578            setb    _ADBUSY
0418           1579   ;        EFM8_JDY40_test.c:456: while (!ADINT); // Wait for conversion to complete
0418           1580   L019001?:
0418 30ED70    1581            jnb     _ADINT,L019001?
041B           1582   ;        EFM8_JDY40_test.c:457: return (ADC0);
041B 85BD82    1583            mov     dpl,_ADC0
041E 85BE83    1584            mov     dph,(_ADC0 >> 8)
0421 22        1585            ret
0422           1586   ;------------------------------------------------------------
0422           1587   ;Allocation info for local variables in function 'Volts_at_Pin'
0422           1588   ;------------------------------------------------------------
0422           1589   ;pin                       Allocated to registers r2 
0422           1590   ;------------------------------------------------------------
0422           1591   ;        EFM8_JDY40_test.c:460: float Volts_at_Pin(unsigned char pin)
0422           1592   ;        -----------------------------------------
0422           1593   ;         function Volts_at_Pin
0422           1594   ;        -----------------------------------------
0422           1595   _Volts_at_Pin:
0422           1596   ;        EFM8_JDY40_test.c:462: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0422 120000    1597            lcall   _ADC_at_Pin
0425 120000    1598            lcall   ___uint2fs
0428 AA82      1599            mov     r2,dpl
042A AB83      1600            mov     r3,dph
042C ACF0      1601            mov     r4,b
042E FD        1602            mov     r5,a
042F C002      1603            push    ar2
0431 C003      1604            push    ar3
0433 C004      1605            push    ar4
0435 C005      1606            push    ar5
0437 906C8B    1607            mov     dptr,#0x6C8B
043A 75F053    1608            mov     b,#0x53
043D 7440      1609            mov     a,#0x40
043F 120000    1610            lcall   ___fsmul
0442 AA82      1611            mov     r2,dpl
0444 AB83      1612            mov     r3,dph
0446 ACF0      1613            mov     r4,b
0448 FD        1614            mov     r5,a
0449 E581      1615            mov     a,sp
044B 24FC      1616            add     a,#0xfc
044D F581      1617            mov     sp,a
044F E4        1618            clr     a
0450 C0E0      1619            push    acc
0452 74FC      1620            mov     a,#0xFC
0454 C0E0      1621            push    acc
0456 747F      1622            mov     a,#0x7F
0458 C0E0      1623            push    acc
045A 7446      1624            mov     a,#0x46
045C C0E0      1625            push    acc
045E 8A82      1626            mov     dpl,r2
0460 8B83      1627            mov     dph,r3
0462 8CF0      1628            mov     b,r4
0464 ED        1629            mov     a,r5
0465 120000    1630            lcall   ___fsdiv
0468 AA82      1631            mov     r2,dpl
046A AB83      1632            mov     r3,dph
046C ACF0      1633            mov     r4,b
046E FD        1634            mov     r5,a
046F E581      1635            mov     a,sp
0471 24FC      1636            add     a,#0xfc
0473 F581      1637            mov     sp,a
0475 8A82      1638            mov     dpl,r2
0477 8B83      1639            mov     dph,r3
0479 8CF0      1640            mov     b,r4
047B ED        1641            mov     a,r5
047C 22        1642            ret
047D           1643   ;------------------------------------------------------------
047D           1644   ;Allocation info for local variables in function 'Timer4_ISR'
047D           1645   ;------------------------------------------------------------
047D           1646   ;------------------------------------------------------------
047D           1647   ;        EFM8_JDY40_test.c:466: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
047D           1648   ;        -----------------------------------------
047D           1649   ;         function Timer4_ISR
047D           1650   ;        -----------------------------------------
047D           1651   _Timer4_ISR:
047D C0E0      1652            push    acc
047F C0D0      1653            push    psw
0481 75D000    1654            mov     psw,#0x00
0484           1655   ;        EFM8_JDY40_test.c:468: SFRPAGE=0x10;
0484 75A710    1656            mov     _SFRPAGE,#0x10
0487           1657   ;        EFM8_JDY40_test.c:469: TF4H = 0; 
0487 C29F      1658            clr     _TF4H
0489           1659   ;        EFM8_JDY40_test.c:471: pwm_counter4 += 256; // counting steps
0489 851818    1660            mov     _pwm_counter4,_pwm_counter4
048C 7401      1661            mov     a,#0x01
048E 2519      1662            add     a,(_pwm_counter4 + 1)
0490 F519      1663            mov     (_pwm_counter4 + 1),a
0492           1664   ;        EFM8_JDY40_test.c:472: if ( direction == 1) {
0492 7401      1665            mov     a,#0x01
0494 B51870    1666            cjne    a,_direction,L021009?
0497 E4        1667            clr     a
0498 B51970    1668            cjne    a,(_direction + 1),L021009?
049B 8000      1669            sjmp    L021010?
049D           1670   L021009?:
049D 8000      1671            sjmp    L021002?
049F           1672   L021010?:
049F           1673   ;        EFM8_JDY40_test.c:473: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
049F C3        1674            clr     c
04A0 E518      1675            mov     a,_pwm_counter4
04A2 95D8      1676            subb    a,_pwm_duty4
04A4 E519      1677            mov     a,(_pwm_counter4 + 1)
04A6 95D9      1678            subb    a,(_pwm_duty4 + 1)
04A8 92B0      1679            mov     _P3_0,c
04AA           1680   L021002?:
04AA           1681   ;        EFM8_JDY40_test.c:475: if ( direction  == 0 ) {
04AA E518      1682            mov     a,_direction
04AC 4519      1683            orl     a,(_direction + 1)
04AE 7000      1684            jnz     L021004?
04B0           1685   ;        EFM8_JDY40_test.c:476: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
04B0 C3        1686            clr     c
04B1 E518      1687            mov     a,_pwm_counter4
04B3 95D8      1688            subb    a,_pwm_duty4
04B5 E519      1689            mov     a,(_pwm_counter4 + 1)
04B7 95D9      1690            subb    a,(_pwm_duty4 + 1)
04B9 92A5      1691            mov     _P2_5,c
04BB           1692   L021004?:
04BB           1693   ;        EFM8_JDY40_test.c:478: if ( direction == 3 ) 
04BB E518      1694            mov     a,_direction
04BD E519      1695            mov     a,(_direction + 1)
04BF D0D0      1696            pop     psw
04C1 D0E0      1697            pop     acc
04C3 32        1698            reti
04C4           1699   ;        eliminated unneeded push/pop dpl
04C4           1700   ;        eliminated unneeded push/pop dph
04C4           1701   ;        eliminated unneeded push/pop b
04C4           1702   ;------------------------------------------------------------
04C4           1703   ;Allocation info for local variables in function 'Timer2_ISR'
04C4           1704   ;------------------------------------------------------------
04C4           1705   ;------------------------------------------------------------
04C4           1706   ;        EFM8_JDY40_test.c:483: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
04C4           1707   ;        -----------------------------------------
04C4           1708   ;         function Timer2_ISR
04C4           1709   ;        -----------------------------------------
04C4           1710   _Timer2_ISR:
04C4 C0E0      1711            push    acc
04C6 C0D0      1712            push    psw
04C8 75D000    1713            mov     psw,#0x00
04CB           1714   ;        EFM8_JDY40_test.c:485: SFRPAGE=0x0;
04CB 75A700    1715            mov     _SFRPAGE,#0x00
04CE           1716   ;        EFM8_JDY40_test.c:486: TF2H = 0; // Clear Timer2 interrupt flag
04CE C2CF      1717            clr     _TF2H
04D0           1718   ;        EFM8_JDY40_test.c:487: pwm_counter2 += 256; // counting steps
04D0 859898    1719            mov     _pwm_counter2,_pwm_counter2
04D3 7401      1720            mov     a,#0x01
04D5 2599      1721            add     a,(_pwm_counter2 + 1)
04D7 F599      1722            mov     (_pwm_counter2 + 1),a
04D9           1723   ;        EFM8_JDY40_test.c:488: if ( direction == 1) {
04D9 7401      1724            mov     a,#0x01
04DB B51870    1725            cjne    a,_direction,L022009?
04DE E4        1726            clr     a
04DF B51970    1727            cjne    a,(_direction + 1),L022009?
04E2 8000      1728            sjmp    L022010?
04E4           1729   L022009?:
04E4 8000      1730            sjmp    L022002?
04E6           1731   L022010?:
04E6           1732   ;        EFM8_JDY40_test.c:489: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
04E6 C3        1733            clr     c
04E7 E598      1734            mov     a,_pwm_counter2
04E9 9558      1735            subb    a,_pwm_duty2
04EB E599      1736            mov     a,(_pwm_counter2 + 1)
04ED 9559      1737            subb    a,(_pwm_duty2 + 1)
04EF 92B2      1738            mov     _P3_2,c
04F1           1739   L022002?:
04F1           1740   ;        EFM8_JDY40_test.c:491: if (direction == 0 ){
04F1 E518      1741            mov     a,_direction
04F3 4519      1742            orl     a,(_direction + 1)
04F5 7000      1743            jnz     L022004?
04F7           1744   ;        EFM8_JDY40_test.c:492: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
04F7 C3        1745            clr     c
04F8 E598      1746            mov     a,_pwm_counter2
04FA 9558      1747            subb    a,_pwm_duty2
04FC E599      1748            mov     a,(_pwm_counter2 + 1)
04FE 9559      1749            subb    a,(_pwm_duty2 + 1)
0500 92B7      1750            mov     _P3_7,c
0502           1751   L022004?:
0502           1752   ;        EFM8_JDY40_test.c:494: if ( direction == 3 ) 
0502 E518      1753            mov     a,_direction
0504 E519      1754            mov     a,(_direction + 1)
0506 D0D0      1755            pop     psw
0508 D0E0      1756            pop     acc
050A 32        1757            reti
050B           1758   ;        eliminated unneeded push/pop dpl
050B           1759   ;        eliminated unneeded push/pop dph
050B           1760   ;        eliminated unneeded push/pop b
050B           1761   ;------------------------------------------------------------
050B           1762   ;Allocation info for local variables in function 'GetPeriod'
050B           1763   ;------------------------------------------------------------
050B           1764   ;n                         Allocated to registers r2 r3 
050B           1765   ;overflow_count            Allocated to registers r4 r5 
050B           1766   ;i                         Allocated to registers r6 
050B           1767   ;------------------------------------------------------------
050B           1768   ;        EFM8_JDY40_test.c:501: unsigned long GetPeriod (int n)
050B           1769   ;        -----------------------------------------
050B           1770   ;         function GetPeriod
050B           1771   ;        -----------------------------------------
050B           1772   _GetPeriod:
050B AA82      1773            mov     r2,dpl
050D AB83      1774            mov     r3,dph
050F           1775   ;        EFM8_JDY40_test.c:506: TR0=0; // Stop Timer/Counter 0
050F C28C      1776            clr     _TR0
0511           1777   ;        EFM8_JDY40_test.c:507: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0511 5389F0    1778            anl     _TMOD,#0xF0
0514           1779   ;        EFM8_JDY40_test.c:508: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0514 438901    1780            orl     _TMOD,#0x01
0517           1781   ;        EFM8_JDY40_test.c:511: TR0=0;
0517 C28C      1782            clr     _TR0
0519           1783   ;        EFM8_JDY40_test.c:512: TL0=0; TH0=0; TF0=0; overflow_count=0;
0519 758A00    1784            mov     _TL0,#0x00
051C 758C00    1785            mov     _TH0,#0x00
051F C28D      1786            clr     _TF0
0521           1787   ;        EFM8_JDY40_test.c:513: TR0=1;
0521 D28C      1788            setb    _TR0
0523           1789   ;        EFM8_JDY40_test.c:516: TR0=0;
0523 C28C      1790            clr     _TR0
0525           1791   ;        EFM8_JDY40_test.c:517: TL0=0; TH0=0; TF0=0; overflow_count=0;
0525 758A00    1792            mov     _TL0,#0x00
0528 758C00    1793            mov     _TH0,#0x00
052B C28D      1794            clr     _TF0
052D           1795   ;        EFM8_JDY40_test.c:518: TR0=1;
052D D28C      1796            setb    _TR0
052F           1797   ;        EFM8_JDY40_test.c:519: while(PERIOD_PIN!=0) // Wait for the signal to be zero
052F 7C00      1798            mov     r4,#0x00
0531 7D00      1799            mov     r5,#0x00
0533           1800   L023005?:
0533 3086B0    1801            jnb     _P0_6,L023007?
0536           1802   ;        EFM8_JDY40_test.c:521: if(TF0==1) // Did the 16-bit timer overflow?
0536           1803   ;        EFM8_JDY40_test.c:523: TF0=0;
0536 108DF0    1804            jbc     _TF0,L023050?
0539 8000      1805            sjmp    L023005?
053B           1806   L023050?:
053B           1807   ;        EFM8_JDY40_test.c:524: overflow_count++;
053B 0C        1808            inc     r4
053C BC0030    1809            cjne    r4,#0x00,L023051?
053F 0D        1810            inc     r5
0540           1811   L023051?:
0540           1812   ;        EFM8_JDY40_test.c:525: if(overflow_count==10) // If it overflows too many times assume no signal is present
0540 BC0A70    1813            cjne    r4,#0x0A,L023005?
0543 BD0070    1814            cjne    r5,#0x00,L023005?
0546           1815   ;        EFM8_JDY40_test.c:527: TR0=0;
0546 C28C      1816            clr     _TR0
0548           1817   ;        EFM8_JDY40_test.c:528: return 0; // No signal
0548 900000    1818            mov     dptr,#(0x00&0x00ff)
054B E4        1819            clr     a
054C F5F0      1820            mov     b,a
054E 22        1821            ret
054F           1822   L023007?:
054F           1823   ;        EFM8_JDY40_test.c:534: TR0=0;
054F C28C      1824            clr     _TR0
0551           1825   ;        EFM8_JDY40_test.c:535: TL0=0; TH0=0; TF0=0; overflow_count=0;
0551 758A00    1826            mov     _TL0,#0x00
0554 758C00    1827            mov     _TH0,#0x00
0557 C28D      1828            clr     _TF0
0559           1829   ;        EFM8_JDY40_test.c:536: TR0=1;
0559 D28C      1830            setb    _TR0
055B           1831   ;        EFM8_JDY40_test.c:537: while(PERIOD_PIN!=1) // Wait for the signal to be one
055B 7C00      1832            mov     r4,#0x00
055D 7D00      1833            mov     r5,#0x00
055F           1834   L023012?:
055F 2086B0    1835            jb      _P0_6,L023014?
0562           1836   ;        EFM8_JDY40_test.c:539: if(TF0==1) // Did the 16-bit timer overflow?
0562           1837   ;        EFM8_JDY40_test.c:541: TF0=0;
0562 108DF0    1838            jbc     _TF0,L023055?
0565 8000      1839            sjmp    L023012?
0567           1840   L023055?:
0567           1841   ;        EFM8_JDY40_test.c:542: overflow_count++;
0567 0C        1842            inc     r4
0568 BC0030    1843            cjne    r4,#0x00,L023056?
056B 0D        1844            inc     r5
056C           1845   L023056?:
056C           1846   ;        EFM8_JDY40_test.c:543: if(overflow_count==10) // If it overflows too many times assume no signal is present
056C BC0A70    1847            cjne    r4,#0x0A,L023012?
056F BD0070    1848            cjne    r5,#0x00,L023012?
0572           1849   ;        EFM8_JDY40_test.c:545: TR0=0;
0572 C28C      1850            clr     _TR0
0574           1851   ;        EFM8_JDY40_test.c:546: return 0; // No signal
0574 900000    1852            mov     dptr,#(0x00&0x00ff)
0577 E4        1853            clr     a
0578 F5F0      1854            mov     b,a
057A 22        1855            ret
057B           1856   L023014?:
057B           1857   ;        EFM8_JDY40_test.c:552: TR0=0;
057B C28C      1858            clr     _TR0
057D           1859   ;        EFM8_JDY40_test.c:553: TL0=0; TH0=0; TF0=0; overflow_count=0;
057D 758A00    1860            mov     _TL0,#0x00
0580 758C00    1861            mov     _TH0,#0x00
0583 C28D      1862            clr     _TF0
0585 7C00      1863            mov     r4,#0x00
0587 7D00      1864            mov     r5,#0x00
0589           1865   ;        EFM8_JDY40_test.c:554: TR0=1; // Start the timer
0589 D28C      1866            setb    _TR0
058B           1867   ;        EFM8_JDY40_test.c:555: for(i=0; i<n; i++) // Measure the time of 'n' periods
058B 7E00      1868            mov     r6,#0x00
058D           1869   L023025?:
058D 8E07      1870            mov     ar7,r6
058F 7800      1871            mov     r0,#0x00
0591 C3        1872            clr     c
0592 EF        1873            mov     a,r7
0593 9A        1874            subb    a,r2
0594 E8        1875            mov     a,r0
0595 6480      1876            xrl     a,#0x80
0597 8BF0      1877            mov     b,r3
0599 63F080    1878            xrl     b,#0x80
059C 95F0      1879            subb    a,b
059E 5000      1880            jnc     L023028?
05A0           1881   ;        EFM8_JDY40_test.c:557: while(PERIOD_PIN!=0) // Wait for the signal to be zero
05A0 8C07      1882            mov     ar7,r4
05A2 8D00      1883            mov     ar0,r5
05A4           1884   L023017?:
05A4 308630    1885            jnb     _P0_6,L023043?
05A7           1886   ;        EFM8_JDY40_test.c:559: if(TF0==1) // Did the 16-bit timer overflow?
05A7           1887   ;        EFM8_JDY40_test.c:561: TF0=0;
05A7 108D70    1888            jbc     _TF0,L023061?
05AA 8000      1889            sjmp    L023017?
05AC           1890   L023061?:
05AC           1891   ;        EFM8_JDY40_test.c:562: overflow_count++;
05AC 0F        1892            inc     r7
05AD BF00F0    1893            cjne    r7,#0x00,L023017?
05B0 08        1894            inc     r0
05B1           1895   ;        EFM8_JDY40_test.c:565: while(PERIOD_PIN!=1) // Wait for the signal to be one
05B1 8000      1896            sjmp    L023017?
05B3           1897   L023043?:
05B3           1898   L023022?:
05B3 2086F0    1899            jb      _P0_6,L023047?
05B6           1900   ;        EFM8_JDY40_test.c:567: if(TF0==1) // Did the 16-bit timer overflow?
05B6           1901   ;        EFM8_JDY40_test.c:569: TF0=0;
05B6 108D30    1902            jbc     _TF0,L023063?
05B9 8000      1903            sjmp    L023022?
05BB           1904   L023063?:
05BB           1905   ;        EFM8_JDY40_test.c:570: overflow_count++;
05BB 0F        1906            inc     r7
05BC BF00B0    1907            cjne    r7,#0x00,L023022?
05BF 08        1908            inc     r0
05C0 8000      1909            sjmp    L023022?
05C2           1910   L023047?:
05C2 8F04      1911            mov     ar4,r7
05C4 8805      1912            mov     ar5,r0
05C6           1913   ;        EFM8_JDY40_test.c:555: for(i=0; i<n; i++) // Measure the time of 'n' periods
05C6 0E        1914            inc     r6
05C7 8000      1915            sjmp    L023025?
05C9           1916   L023028?:
05C9           1917   ;        EFM8_JDY40_test.c:574: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
05C9 C28C      1918            clr     _TR0
05CB           1919   ;        EFM8_JDY40_test.c:576: return (overflow_count*65536+TH0*256+TL0);
05CB 8D03      1920            mov     ar3,r5
05CD 8C02      1921            mov     ar2,r4
05CF 7D00      1922            mov     r5,#0x00
05D1 7C00      1923            mov     r4,#0x00
05D3 AF8C      1924            mov     r7,_TH0
05D5 7E00      1925            mov     r6,#0x00
05D7 EF        1926            mov     a,r7
05D8 33        1927            rlc     a
05D9 95E0      1928            subb    a,acc
05DB F8        1929            mov     r0,a
05DC F9        1930            mov     r1,a
05DD EE        1931            mov     a,r6
05DE 2C        1932            add     a,r4
05DF FC        1933            mov     r4,a
05E0 EF        1934            mov     a,r7
05E1 3D        1935            addc    a,r5
05E2 FD        1936            mov     r5,a
05E3 E8        1937            mov     a,r0
05E4 3A        1938            addc    a,r2
05E5 FA        1939            mov     r2,a
05E6 E9        1940            mov     a,r1
05E7 3B        1941            addc    a,r3
05E8 FB        1942            mov     r3,a
05E9 AE8A      1943            mov     r6,_TL0
05EB E4        1944            clr     a
05EC FF        1945            mov     r7,a
05ED 33        1946            rlc     a
05EE 95E0      1947            subb    a,acc
05F0 F8        1948            mov     r0,a
05F1 F9        1949            mov     r1,a
05F2 EE        1950            mov     a,r6
05F3 2C        1951            add     a,r4
05F4 FC        1952            mov     r4,a
05F5 EF        1953            mov     a,r7
05F6 3D        1954            addc    a,r5
05F7 FD        1955            mov     r5,a
05F8 E8        1956            mov     a,r0
05F9 3A        1957            addc    a,r2
05FA FA        1958            mov     r2,a
05FB E9        1959            mov     a,r1
05FC 3B        1960            addc    a,r3
05FD 8C82      1961            mov     dpl,r4
05FF 8D83      1962            mov     dph,r5
0601 8AF0      1963            mov     b,r2
0603 22        1964            ret
0604           1965   ;------------------------------------------------------------
0604           1966   ;Allocation info for local variables in function 'eputs'
0604           1967   ;------------------------------------------------------------
0604           1968   ;String                    Allocated to registers r2 r3 r4 
0604           1969   ;------------------------------------------------------------
0604           1970   ;        EFM8_JDY40_test.c:579: void eputs(char *String)
0604           1971   ;        -----------------------------------------
0604           1972   ;         function eputs
0604           1973   ;        -----------------------------------------
0604           1974   _eputs:
0604 AA82      1975            mov     r2,dpl
0606 AB83      1976            mov     r3,dph
0608 ACF0      1977            mov     r4,b
060A           1978   ;        EFM8_JDY40_test.c:581: while(*String)
060A           1979   L024001?:
060A 8A82      1980            mov     dpl,r2
060C 8B83      1981            mov     dph,r3
060E 8CF0      1982            mov     b,r4
0610 120000    1983            lcall   __gptrget
0613 FD        1984            mov     r5,a
0614 6000      1985            jz      L024004?
0616           1986   ;        EFM8_JDY40_test.c:583: putchar(*String);
0616 8D82      1987            mov     dpl,r5
0618 C002      1988            push    ar2
061A C003      1989            push    ar3
061C C004      1990            push    ar4
061E 120000    1991            lcall   _putchar
0621 D004      1992            pop     ar4
0623 D003      1993            pop     ar3
0625 D002      1994            pop     ar2
0627           1995   ;        EFM8_JDY40_test.c:584: String++;
0627 0A        1996            inc     r2
0628 BA0070    1997            cjne    r2,#0x00,L024001?
062B 0B        1998            inc     r3
062C 8000      1999            sjmp    L024001?
062E           2000   L024004?:
062E 22        2001            ret
062F           2002   ;------------------------------------------------------------
062F           2003   ;Allocation info for local variables in function 'PrintNumber'
062F           2004   ;------------------------------------------------------------
062F           2005   ;Base                      Allocated with name '_PrintNumber_PARM_2'
062F           2006   ;digits                    Allocated with name '_PrintNumber_PARM_3'
062F           2007   ;val                       Allocated with name '_PrintNumber_val_1_163'
062F           2008   ;j                         Allocated with name '_PrintNumber_j_1_164'
062F           2009   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
062F           2010   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
062F           2011   ;buff                      Allocated with name '_PrintNumber_buff_1_164'
062F           2012   ;------------------------------------------------------------
062F           2013   ;        EFM8_JDY40_test.c:588: void PrintNumber(long int val, int Base, int digits)
062F           2014   ;        -----------------------------------------
062F           2015   ;         function PrintNumber
062F           2016   ;        -----------------------------------------
062F           2017   _PrintNumber:
062F 858228    2018            mov     _PrintNumber_val_1_163,dpl
0632 858329    2019            mov     (_PrintNumber_val_1_163 + 1),dph
0635 85F02A    2020            mov     (_PrintNumber_val_1_163 + 2),b
0638 F52B      2021            mov     (_PrintNumber_val_1_163 + 3),a
063A           2022   ;        EFM8_JDY40_test.c:594: buff[NBITS]=0;
063A 90C140    2023            mov     dptr,#(_PrintNumber_buff_1_164 + 0x0020)
063D E4        2024            clr     a
063E F0        2025            movx    @dptr,a
063F           2026   ;        EFM8_JDY40_test.c:596: if(val<0)
063F E52B      2027            mov     a,(_PrintNumber_val_1_163 + 3)
0641 30E730    2028            jnb     acc.7,L025012?
0644           2029   ;        EFM8_JDY40_test.c:598: putchar('-');
0644 75822D    2030            mov     dpl,#0x2D
0647 120000    2031            lcall   _putchar
064A           2032   ;        EFM8_JDY40_test.c:599: val*=-1;
064A C3        2033            clr     c
064B E4        2034            clr     a
064C 9528      2035            subb    a,_PrintNumber_val_1_163
064E F528      2036            mov     _PrintNumber_val_1_163,a
0650 E4        2037            clr     a
0651 9529      2038            subb    a,(_PrintNumber_val_1_163 + 1)
0653 F529      2039            mov     (_PrintNumber_val_1_163 + 1),a
0655 E4        2040            clr     a
0656 952A      2041            subb    a,(_PrintNumber_val_1_163 + 2)
0658 F52A      2042            mov     (_PrintNumber_val_1_163 + 2),a
065A E4        2043            clr     a
065B 952B      2044            subb    a,(_PrintNumber_val_1_163 + 3)
065D F52B      2045            mov     (_PrintNumber_val_1_163 + 3),a
065F           2046   ;        EFM8_JDY40_test.c:603: while ( (val>0) | (digits>0) )
065F           2047   L025012?:
065F 75781F    2048            mov     _PrintNumber_j_1_164,#0x1F
0662 E4        2049            clr     a
0663 F579      2050            mov     (_PrintNumber_j_1_164 + 1),a
0665 A848      2051            mov     r0,_PrintNumber_PARM_3
0667 A949      2052            mov     r1,(_PrintNumber_PARM_3 + 1)
0669           2053   L025005?:
0669 C3        2054            clr     c
066A E4        2055            clr     a
066B 9528      2056            subb    a,_PrintNumber_val_1_163
066D E4        2057            clr     a
066E 9529      2058            subb    a,(_PrintNumber_val_1_163 + 1)
0670 E4        2059            clr     a
0671 952A      2060            subb    a,(_PrintNumber_val_1_163 + 2)
0673 E4        2061            clr     a
0674 6480      2062            xrl     a,#0x80
0676 852BF0    2063            mov     b,(_PrintNumber_val_1_163 + 3)
0679 63F080    2064            xrl     b,#0x80
067C 95F0      2065            subb    a,b
067E E4        2066            clr     a
067F 33        2067            rlc     a
0680 FE        2068            mov     r6,a
0681 C3        2069            clr     c
0682 E4        2070            clr     a
0683 98        2071            subb    a,r0
0684 E4        2072            clr     a
0685 6480      2073            xrl     a,#0x80
0687 89F0      2074            mov     b,r1
0689 63F080    2075            xrl     b,#0x80
068C 95F0      2076            subb    a,b
068E E4        2077            clr     a
068F 33        2078            rlc     a
0690 FF        2079            mov     r7,a
0691 4E        2080            orl     a,r6
0692 7000      2081            jnz     L025016?
0694 020000    2082            ljmp    L025007?
0697           2083   L025016?:
0697           2084   ;        EFM8_JDY40_test.c:605: buff[j--]=HexDigit[val%Base];
0697 AE78      2085            mov     r6,_PrintNumber_j_1_164
0699 AF79      2086            mov     r7,(_PrintNumber_j_1_164 + 1)
069B 1578      2087            dec     _PrintNumber_j_1_164
069D 74FF      2088            mov     a,#0xff
069F B57830    2089            cjne    a,_PrintNumber_j_1_164,L025017?
06A2 1579      2090            dec     (_PrintNumber_j_1_164 + 1)
06A4           2091   L025017?:
06A4 EE        2092            mov     a,r6
06A5 2420      2093            add     a,#_PrintNumber_buff_1_164
06A7 F5C8      2094            mov     _PrintNumber_sloc0_1_0,a
06A9 EF        2095            mov     a,r7
06AA 34C1      2096            addc    a,#(_PrintNumber_buff_1_164 >> 8)
06AC F5C9      2097            mov     (_PrintNumber_sloc0_1_0 + 1),a
06AE 859818    2098            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
06B1 E599      2099            mov     a,(_PrintNumber_PARM_2 + 1)
06B3 F519      2100            mov     (_PrintNumber_sloc1_1_0 + 1),a
06B5 33        2101            rlc     a
06B6 95E0      2102            subb    a,acc
06B8 F51A      2103            mov     (_PrintNumber_sloc1_1_0 + 2),a
06BA F51B      2104            mov     (_PrintNumber_sloc1_1_0 + 3),a
06BC 851800    2105            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
06BF 851901    2106            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06C2 851A02    2107            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06C5 851B03    2108            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06C8 852882    2109            mov     dpl,_PrintNumber_val_1_163
06CB 852983    2110            mov     dph,(_PrintNumber_val_1_163 + 1)
06CE 852AF0    2111            mov     b,(_PrintNumber_val_1_163 + 2)
06D1 E52B      2112            mov     a,(_PrintNumber_val_1_163 + 3)
06D3 C000      2113            push    ar0
06D5 C001      2114            push    ar1
06D7 120000    2115            lcall   __modslong
06DA AE82      2116            mov     r6,dpl
06DC AF83      2117            mov     r7,dph
06DE EE        2118            mov     a,r6
06DF 24B0      2119            add     a,#_PrintNumber_HexDigit_1_164
06E1 F582      2120            mov     dpl,a
06E3 EF        2121            mov     a,r7
06E4 3411      2122            addc    a,#(_PrintNumber_HexDigit_1_164 >> 8)
06E6 F583      2123            mov     dph,a
06E8 E4        2124            clr     a
06E9 93        2125            movc    a,@a+dptr
06EA 85C882    2126            mov     dpl,_PrintNumber_sloc0_1_0
06ED 85C983    2127            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
06F0 F0        2128            movx    @dptr,a
06F1           2129   ;        EFM8_JDY40_test.c:606: val/=Base;
06F1 851800    2130            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
06F4 851901    2131            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06F7 851A02    2132            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06FA 851B03    2133            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06FD 852882    2134            mov     dpl,_PrintNumber_val_1_163
0700 852983    2135            mov     dph,(_PrintNumber_val_1_163 + 1)
0703 852AF0    2136            mov     b,(_PrintNumber_val_1_163 + 2)
0706 E52B      2137            mov     a,(_PrintNumber_val_1_163 + 3)
0708 120000    2138            lcall   __divslong
070B 858228    2139            mov     _PrintNumber_val_1_163,dpl
070E 858329    2140            mov     (_PrintNumber_val_1_163 + 1),dph
0711 85F02A    2141            mov     (_PrintNumber_val_1_163 + 2),b
0714 F52B      2142            mov     (_PrintNumber_val_1_163 + 3),a
0716 D001      2143            pop     ar1
0718 D000      2144            pop     ar0
071A           2145   ;        EFM8_JDY40_test.c:607: if(digits!=0) digits--;
071A E8        2146            mov     a,r0
071B 49        2147            orl     a,r1
071C 7000      2148            jnz     L025018?
071E 020000    2149            ljmp    L025005?
0721           2150   L025018?:
0721 18        2151            dec     r0
0722 B8FFD0    2152            cjne    r0,#0xff,L025019?
0725 19        2153            dec     r1
0726           2154   L025019?:
0726 020000    2155            ljmp    L025005?
0729           2156   L025007?:
0729           2157   ;        EFM8_JDY40_test.c:609: eputs(&buff[j+1]);
0729 E578      2158            mov     a,_PrintNumber_j_1_164
072B 04        2159            inc     a
072C 2420      2160            add     a,#_PrintNumber_buff_1_164
072E FA        2161            mov     r2,a
072F E4        2162            clr     a
0730 34C1      2163            addc    a,#(_PrintNumber_buff_1_164 >> 8)
0732 FB        2164            mov     r3,a
0733 7C00      2165            mov     r4,#0x00
0735 8A82      2166            mov     dpl,r2
0737 8B83      2167            mov     dph,r3
0739 8CF0      2168            mov     b,r4
073B 020000    2169            ljmp    _eputs
073E           2170   ;------------------------------------------------------------
073E           2171   ;Allocation info for local variables in function 'GetFrequency'
073E           2172   ;------------------------------------------------------------
073E           2173   ;c                         Allocated to registers r2 r3 r4 r5 
073E           2174   ;f                         Allocated to registers r6 r7 r0 r1 
073E           2175   ;------------------------------------------------------------
073E           2176   ;        EFM8_JDY40_test.c:612: unsigned long GetFrequency (long int c)
073E           2177   ;        -----------------------------------------
073E           2178   ;         function GetFrequency
073E           2179   ;        -----------------------------------------
073E           2180   _GetFrequency:
073E AA82      2181            mov     r2,dpl
0740 AB83      2182            mov     r3,dph
0742 ACF0      2183            mov     r4,b
0744 FD        2184            mov     r5,a
0745           2185   ;        EFM8_JDY40_test.c:614: long int f = 0;
0745 7E00      2186            mov     r6,#0x00
0747 7F00      2187            mov     r7,#0x00
0749 7800      2188            mov     r0,#0x00
074B 7900      2189            mov     r1,#0x00
074D           2190   ;        EFM8_JDY40_test.c:616: if(c>0)
074D C3        2191            clr     c
074E E4        2192            clr     a
074F 9A        2193            subb    a,r2
0750 E4        2194            clr     a
0751 9B        2195            subb    a,r3
0752 E4        2196            clr     a
0753 9C        2197            subb    a,r4
0754 E4        2198            clr     a
0755 6480      2199            xrl     a,#0x80
0757 8DF0      2200            mov     b,r5
0759 63F080    2201            xrl     b,#0x80
075C 95F0      2202            subb    a,b
075E 5000      2203            jnc     L026002?
0760           2204   ;        EFM8_JDY40_test.c:618: f=(SYSCLK*200.0)/(c*12);
0760 8A00      2205            mov     __mullong_PARM_2,r2
0762 8B01      2206            mov     (__mullong_PARM_2 + 1),r3
0764 8C02      2207            mov     (__mullong_PARM_2 + 2),r4
0766 8D03      2208            mov     (__mullong_PARM_2 + 3),r5
0768 90000C    2209            mov     dptr,#(0x0C&0x00ff)
076B E4        2210            clr     a
076C F5F0      2211            mov     b,a
076E 120000    2212            lcall   __mullong
0771 120000    2213            lcall   ___slong2fs
0774 AA82      2214            mov     r2,dpl
0776 AB83      2215            mov     r3,dph
0778 ACF0      2216            mov     r4,b
077A FD        2217            mov     r5,a
077B C002      2218            push    ar2
077D C003      2219            push    ar3
077F C004      2220            push    ar4
0781 C005      2221            push    ar5
0783 9093A4    2222            mov     dptr,#0x93A4
0786 75F056    2223            mov     b,#0x56
0789 7450      2224            mov     a,#0x50
078B 120000    2225            lcall   ___fsdiv
078E AA82      2226            mov     r2,dpl
0790 AB83      2227            mov     r3,dph
0792 ACF0      2228            mov     r4,b
0794 FD        2229            mov     r5,a
0795 E581      2230            mov     a,sp
0797 24FC      2231            add     a,#0xfc
0799 F581      2232            mov     sp,a
079B 8A82      2233            mov     dpl,r2
079D 8B83      2234            mov     dph,r3
079F 8CF0      2235            mov     b,r4
07A1 ED        2236            mov     a,r5
07A2 120000    2237            lcall   ___fs2slong
07A5 AE82      2238            mov     r6,dpl
07A7 AF83      2239            mov     r7,dph
07A9 A8F0      2240            mov     r0,b
07AB F9        2241            mov     r1,a
07AC 8000      2242            sjmp    L026003?
07AE           2243   L026002?:
07AE           2244   ;        EFM8_JDY40_test.c:628: eputs(" NO SIGNAL                     \r");
07AE 90DBA0    2245            mov     dptr,#__str_4
07B1 75F080    2246            mov     b,#0x80
07B4 C006      2247            push    ar6
07B6 C007      2248            push    ar7
07B8 C000      2249            push    ar0
07BA C001      2250            push    ar1
07BC 120000    2251            lcall   _eputs
07BF D001      2252            pop     ar1
07C1 D000      2253            pop     ar0
07C3 D007      2254            pop     ar7
07C5 D006      2255            pop     ar6
07C7           2256   L026003?:
07C7           2257   ;        EFM8_JDY40_test.c:631: return f;
07C7 8E82      2258            mov     dpl,r6
07C9 8F83      2259            mov     dph,r7
07CB 88F0      2260            mov     b,r0
07CD E9        2261            mov     a,r1
07CE 22        2262            ret
07CF           2263   ;------------------------------------------------------------
07CF           2264   ;Allocation info for local variables in function 'LCD_pulse'
07CF           2265   ;------------------------------------------------------------
07CF           2266   ;------------------------------------------------------------
07CF           2267   ;        EFM8_JDY40_test.c:635: void LCD_pulse (void)
07CF           2268   ;        -----------------------------------------
07CF           2269   ;         function LCD_pulse
07CF           2270   ;        -----------------------------------------
07CF           2271   _LCD_pulse:
07CF           2272   ;        EFM8_JDY40_test.c:637: LCD_E=1;
07CF D2A6      2273            setb    _P2_6
07D1           2274   ;        EFM8_JDY40_test.c:638: Timer3us(40);
07D1 758228    2275            mov     dpl,#0x28
07D4 120000    2276            lcall   _Timer3us
07D7           2277   ;        EFM8_JDY40_test.c:639: LCD_E=0;
07D7 C2A6      2278            clr     _P2_6
07D9 22        2279            ret
07DA           2280   ;------------------------------------------------------------
07DA           2281   ;Allocation info for local variables in function 'LCD_byte'
07DA           2282   ;------------------------------------------------------------
07DA           2283   ;x                         Allocated to registers r2 
07DA           2284   ;------------------------------------------------------------
07DA           2285   ;        EFM8_JDY40_test.c:642: void LCD_byte (unsigned char x)
07DA           2286   ;        -----------------------------------------
07DA           2287   ;         function LCD_byte
07DA           2288   ;        -----------------------------------------
07DA           2289   _LCD_byte:
07DA AA82      2290            mov     r2,dpl
07DC           2291   ;        EFM8_JDY40_test.c:645: ACC=x; //Send high nible
07DC 8AE0      2292            mov     _ACC,r2
07DE           2293   ;        EFM8_JDY40_test.c:646: LCD_D7=ACC_7;
07DE A2E7      2294            mov     c,_ACC_7
07E0 9287      2295            mov     _P0_7,c
07E2           2296   ;        EFM8_JDY40_test.c:647: LCD_D6=ACC_6;
07E2 A2E6      2297            mov     c,_ACC_6
07E4 9290      2298            mov     _P1_0,c
07E6           2299   ;        EFM8_JDY40_test.c:648: LCD_D5=ACC_5;
07E6 A2E5      2300            mov     c,_ACC_5
07E8 9291      2301            mov     _P1_1,c
07EA           2302   ;        EFM8_JDY40_test.c:649: LCD_D4=ACC_4;
07EA A2E4      2303            mov     c,_ACC_4
07EC 9292      2304            mov     _P1_2,c
07EE           2305   ;        EFM8_JDY40_test.c:650: LCD_pulse();
07EE C002      2306            push    ar2
07F0 120000    2307            lcall   _LCD_pulse
07F3           2308   ;        EFM8_JDY40_test.c:651: Timer3us(40);
07F3 758228    2309            mov     dpl,#0x28
07F6 120000    2310            lcall   _Timer3us
07F9 D002      2311            pop     ar2
07FB           2312   ;        EFM8_JDY40_test.c:652: ACC=x; //Send low nible
07FB 8AE0      2313            mov     _ACC,r2
07FD           2314   ;        EFM8_JDY40_test.c:653: LCD_D7=ACC_3;
07FD A2E3      2315            mov     c,_ACC_3
07FF 9287      2316            mov     _P0_7,c
0801           2317   ;        EFM8_JDY40_test.c:654: LCD_D6=ACC_2;
0801 A2E2      2318            mov     c,_ACC_2
0803 9290      2319            mov     _P1_0,c
0805           2320   ;        EFM8_JDY40_test.c:655: LCD_D5=ACC_1;
0805 A2E1      2321            mov     c,_ACC_1
0807 9291      2322            mov     _P1_1,c
0809           2323   ;        EFM8_JDY40_test.c:656: LCD_D4=ACC_0;
0809 A2E0      2324            mov     c,_ACC_0
080B 9292      2325            mov     _P1_2,c
080D           2326   ;        EFM8_JDY40_test.c:657: LCD_pulse();
080D 020000    2327            ljmp    _LCD_pulse
0810           2328   ;------------------------------------------------------------
0810           2329   ;Allocation info for local variables in function 'WriteData'
0810           2330   ;------------------------------------------------------------
0810           2331   ;x                         Allocated to registers r2 
0810           2332   ;------------------------------------------------------------
0810           2333   ;        EFM8_JDY40_test.c:660: void WriteData (unsigned char x)
0810           2334   ;        -----------------------------------------
0810           2335   ;         function WriteData
0810           2336   ;        -----------------------------------------
0810           2337   _WriteData:
0810 AA82      2338            mov     r2,dpl
0812           2339   ;        EFM8_JDY40_test.c:662: LCD_RS=1;
0812 D2A2      2340            setb    _P2_2
0814           2341   ;        EFM8_JDY40_test.c:663: LCD_byte(x);
0814 8A82      2342            mov     dpl,r2
0816 120000    2343            lcall   _LCD_byte
0819           2344   ;        EFM8_JDY40_test.c:664: waitms(2);
0819 900002    2345            mov     dptr,#0x0002
081C 020000    2346            ljmp    _waitms
081F           2347   ;------------------------------------------------------------
081F           2348   ;Allocation info for local variables in function 'WriteCommand'
081F           2349   ;------------------------------------------------------------
081F           2350   ;x                         Allocated to registers r2 
081F           2351   ;------------------------------------------------------------
081F           2352   ;        EFM8_JDY40_test.c:667: void WriteCommand (unsigned char x)
081F           2353   ;        -----------------------------------------
081F           2354   ;         function WriteCommand
081F           2355   ;        -----------------------------------------
081F           2356   _WriteCommand:
081F AA82      2357            mov     r2,dpl
0821           2358   ;        EFM8_JDY40_test.c:669: LCD_RS=0;
0821 C2A2      2359            clr     _P2_2
0823           2360   ;        EFM8_JDY40_test.c:670: LCD_byte(x);
0823 8A82      2361            mov     dpl,r2
0825 120000    2362            lcall   _LCD_byte
0828           2363   ;        EFM8_JDY40_test.c:671: waitms(5);
0828 900005    2364            mov     dptr,#0x0005
082B 020000    2365            ljmp    _waitms
082E           2366   ;------------------------------------------------------------
082E           2367   ;Allocation info for local variables in function 'LCD_4BIT'
082E           2368   ;------------------------------------------------------------
082E           2369   ;------------------------------------------------------------
082E           2370   ;        EFM8_JDY40_test.c:674: void LCD_4BIT (void)
082E           2371   ;        -----------------------------------------
082E           2372   ;         function LCD_4BIT
082E           2373   ;        -----------------------------------------
082E           2374   _LCD_4BIT:
082E           2375   ;        EFM8_JDY40_test.c:676: LCD_E=0; // Resting state of LCD's enable is zero
082E C2A6      2376            clr     _P2_6
0830           2377   ;        EFM8_JDY40_test.c:678: waitms(20);
0830 900014    2378            mov     dptr,#0x0014
0833 120000    2379            lcall   _waitms
0836           2380   ;        EFM8_JDY40_test.c:680: WriteCommand(0x33);
0836 758233    2381            mov     dpl,#0x33
0839 120000    2382            lcall   _WriteCommand
083C           2383   ;        EFM8_JDY40_test.c:681: WriteCommand(0x33);
083C 758233    2384            mov     dpl,#0x33
083F 120000    2385            lcall   _WriteCommand
0842           2386   ;        EFM8_JDY40_test.c:682: WriteCommand(0x32); // Change to 4-bit mode
0842 758232    2387            mov     dpl,#0x32
0845 120000    2388            lcall   _WriteCommand
0848           2389   ;        EFM8_JDY40_test.c:685: WriteCommand(0x28);
0848 758228    2390            mov     dpl,#0x28
084B 120000    2391            lcall   _WriteCommand
084E           2392   ;        EFM8_JDY40_test.c:686: WriteCommand(0x0c);
084E 75820C    2393            mov     dpl,#0x0C
0851 120000    2394            lcall   _WriteCommand
0854           2395   ;        EFM8_JDY40_test.c:687: WriteCommand(0x01); // Clear screen command (takes some time)
0854 758201    2396            mov     dpl,#0x01
0857 120000    2397            lcall   _WriteCommand
085A           2398   ;        EFM8_JDY40_test.c:688: waitms(20); // Wait for clear screen command to finsih.
085A 900014    2399            mov     dptr,#0x0014
085D 020000    2400            ljmp    _waitms
0860           2401   ;------------------------------------------------------------
0860           2402   ;Allocation info for local variables in function 'servomotion'
0860           2403   ;------------------------------------------------------------
0860           2404   ;j                         Allocated to registers r2 
0860           2405   ;i                         Allocated to registers r2 r3 
0860           2406   ;------------------------------------------------------------
0860           2407   ;        EFM8_JDY40_test.c:692: void servomotion(void)
0860           2408   ;        -----------------------------------------
0860           2409   ;         function servomotion
0860           2410   ;        -----------------------------------------
0860           2411   _servomotion:
0860           2412   ;        EFM8_JDY40_test.c:697: WriteCommand(0x40);  // Set CGRAM address
0860 758240    2413            mov     dpl,#0x40
0863 120000    2414            lcall   _WriteCommand
0866           2415   ;        EFM8_JDY40_test.c:698: for(i=0; i<8; i++) {
0866 7A00      2416            mov     r2,#0x00
0868 7B00      2417            mov     r3,#0x00
086A           2418   L032001?:
086A C3        2419            clr     c
086B EA        2420            mov     a,r2
086C 9408      2421            subb    a,#0x08
086E EB        2422            mov     a,r3
086F 6480      2423            xrl     a,#0x80
0871 9480      2424            subb    a,#0x80
0873 5000      2425            jnc     L032004?
0875           2426   ;        EFM8_JDY40_test.c:700: WriteData(customMouth[i]);
0875 EA        2427            mov     a,r2
0876 2450      2428            add     a,#_customMouth
0878 F582      2429            mov     dpl,a
087A EB        2430            mov     a,r3
087B 3413      2431            addc    a,#(_customMouth >> 8)
087D F583      2432            mov     dph,a
087F E4        2433            clr     a
0880 93        2434            movc    a,@a+dptr
0881 F582      2435            mov     dpl,a
0883 C002      2436            push    ar2
0885 C003      2437            push    ar3
0887 120000    2438            lcall   _WriteData
088A D003      2439            pop     ar3
088C D002      2440            pop     ar2
088E           2441   ;        EFM8_JDY40_test.c:698: for(i=0; i<8; i++) {
088E 0A        2442            inc     r2
088F BA00E0    2443            cjne    r2,#0x00,L032001?
0892 0B        2444            inc     r3
0893 8000      2445            sjmp    L032001?
0895           2446   L032004?:
0895           2447   ;        EFM8_JDY40_test.c:703: WriteCommand(0x48);
0895 758248    2448            mov     dpl,#0x48
0898 120000    2449            lcall   _WriteCommand
089B           2450   ;        EFM8_JDY40_test.c:704: for(i=0; i<8; i++) {
089B 7A00      2451            mov     r2,#0x00
089D 7B00      2452            mov     r3,#0x00
089F           2453   L032005?:
089F C3        2454            clr     c
08A0 EA        2455            mov     a,r2
08A1 9408      2456            subb    a,#0x08
08A3 EB        2457            mov     a,r3
08A4 6480      2458            xrl     a,#0x80
08A6 9480      2459            subb    a,#0x80
08A8 5000      2460            jnc     L032008?
08AA           2461   ;        EFM8_JDY40_test.c:706: WriteData(customEye[i]);
08AA EA        2462            mov     a,r2
08AB 2410      2463            add     a,#_customEye
08AD F582      2464            mov     dpl,a
08AF EB        2465            mov     a,r3
08B0 3413      2466            addc    a,#(_customEye >> 8)
08B2 F583      2467            mov     dph,a
08B4 E4        2468            clr     a
08B5 93        2469            movc    a,@a+dptr
08B6 F582      2470            mov     dpl,a
08B8 C002      2471            push    ar2
08BA C003      2472            push    ar3
08BC 120000    2473            lcall   _WriteData
08BF D003      2474            pop     ar3
08C1 D002      2475            pop     ar2
08C3           2476   ;        EFM8_JDY40_test.c:704: for(i=0; i<8; i++) {
08C3 0A        2477            inc     r2
08C4 BA0060    2478            cjne    r2,#0x00,L032005?
08C7 0B        2479            inc     r3
08C8 8000      2480            sjmp    L032005?
08CA           2481   L032008?:
08CA           2482   ;        EFM8_JDY40_test.c:709: WriteCommand(0x50);  // Set CGRAM address
08CA 758250    2483            mov     dpl,#0x50
08CD 120000    2484            lcall   _WriteCommand
08D0           2485   ;        EFM8_JDY40_test.c:710: for(i=0; i<8; i++) {
08D0 7A00      2486            mov     r2,#0x00
08D2 7B00      2487            mov     r3,#0x00
08D4           2488   L032009?:
08D4 C3        2489            clr     c
08D5 EA        2490            mov     a,r2
08D6 9408      2491            subb    a,#0x08
08D8 EB        2492            mov     a,r3
08D9 6480      2493            xrl     a,#0x80
08DB 9480      2494            subb    a,#0x80
08DD 5000      2495            jnc     L032012?
08DF           2496   ;        EFM8_JDY40_test.c:712: WriteData(customOpenMouth[i]);
08DF EA        2497            mov     a,r2
08E0 24D0      2498            add     a,#_customOpenMouth
08E2 F582      2499            mov     dpl,a
08E4 EB        2500            mov     a,r3
08E5 3412      2501            addc    a,#(_customOpenMouth >> 8)
08E7 F583      2502            mov     dph,a
08E9 E4        2503            clr     a
08EA 93        2504            movc    a,@a+dptr
08EB F582      2505            mov     dpl,a
08ED C002      2506            push    ar2
08EF C003      2507            push    ar3
08F1 120000    2508            lcall   _WriteData
08F4 D003      2509            pop     ar3
08F6 D002      2510            pop     ar2
08F8           2511   ;        EFM8_JDY40_test.c:710: for(i=0; i<8; i++) {
08F8 0A        2512            inc     r2
08F9 BA00E0    2513            cjne    r2,#0x00,L032009?
08FC 0B        2514            inc     r3
08FD 8000      2515            sjmp    L032009?
08FF           2516   L032012?:
08FF           2517   ;        EFM8_JDY40_test.c:715: WriteCommand(0x58);  // Set CGRAM address
08FF 758258    2518            mov     dpl,#0x58
0902 120000    2519            lcall   _WriteCommand
0905           2520   ;        EFM8_JDY40_test.c:716: for(i=0; i<8; i++) {
0905 7A00      2521            mov     r2,#0x00
0907 7B00      2522            mov     r3,#0x00
0909           2523   L032013?:
0909 C3        2524            clr     c
090A EA        2525            mov     a,r2
090B 9408      2526            subb    a,#0x08
090D EB        2527            mov     a,r3
090E 6480      2528            xrl     a,#0x80
0910 9480      2529            subb    a,#0x80
0912 5000      2530            jnc     L032016?
0914           2531   ;        EFM8_JDY40_test.c:718: WriteData(customSparkle[i]);
0914 EA        2532            mov     a,r2
0915 2480      2533            add     a,#_customSparkle
0917 F582      2534            mov     dpl,a
0919 EB        2535            mov     a,r3
091A 3412      2536            addc    a,#(_customSparkle >> 8)
091C F583      2537            mov     dph,a
091E E4        2538            clr     a
091F 93        2539            movc    a,@a+dptr
0920 F582      2540            mov     dpl,a
0922 C002      2541            push    ar2
0924 C003      2542            push    ar3
0926 120000    2543            lcall   _WriteData
0929 D003      2544            pop     ar3
092B D002      2545            pop     ar2
092D           2546   ;        EFM8_JDY40_test.c:716: for(i=0; i<8; i++) {
092D 0A        2547            inc     r2
092E BA0060    2548            cjne    r2,#0x00,L032013?
0931 0B        2549            inc     r3
0932 8000      2550            sjmp    L032013?
0934           2551   L032016?:
0934           2552   ;        EFM8_JDY40_test.c:721: WriteCommand(0x60);  // Set CGRAM address
0934 758260    2553            mov     dpl,#0x60
0937 120000    2554            lcall   _WriteCommand
093A           2555   ;        EFM8_JDY40_test.c:722: for(i=0; i<8; i++) {
093A 7A00      2556            mov     r2,#0x00
093C 7B00      2557            mov     r3,#0x00
093E           2558   L032017?:
093E C3        2559            clr     c
093F EA        2560            mov     a,r2
0940 9408      2561            subb    a,#0x08
0942 EB        2562            mov     a,r3
0943 6480      2563            xrl     a,#0x80
0945 9480      2564            subb    a,#0x80
0947 5000      2565            jnc     L032020?
0949           2566   ;        EFM8_JDY40_test.c:724: WriteData(customMoney[i]);
0949 EA        2567            mov     a,r2
094A 2440      2568            add     a,#_customMoney
094C F582      2569            mov     dpl,a
094E EB        2570            mov     a,r3
094F 3412      2571            addc    a,#(_customMoney >> 8)
0951 F583      2572            mov     dph,a
0953 E4        2573            clr     a
0954 93        2574            movc    a,@a+dptr
0955 F582      2575            mov     dpl,a
0957 C002      2576            push    ar2
0959 C003      2577            push    ar3
095B 120000    2578            lcall   _WriteData
095E D003      2579            pop     ar3
0960 D002      2580            pop     ar2
0962           2581   ;        EFM8_JDY40_test.c:722: for(i=0; i<8; i++) {
0962 0A        2582            inc     r2
0963 BA00E0    2583            cjne    r2,#0x00,L032017?
0966 0B        2584            inc     r3
0967 8000      2585            sjmp    L032017?
0969           2586   L032020?:
0969           2587   ;        EFM8_JDY40_test.c:727: WriteCommand(0x68);  // Set CGRAM address
0969 758268    2588            mov     dpl,#0x68
096C 120000    2589            lcall   _WriteCommand
096F           2590   ;        EFM8_JDY40_test.c:728: for(i=0; i<8; i++) {
096F 7A00      2591            mov     r2,#0x00
0971 7B00      2592            mov     r3,#0x00
0973           2593   L032021?:
0973 C3        2594            clr     c
0974 EA        2595            mov     a,r2
0975 9408      2596            subb    a,#0x08
0977 EB        2597            mov     a,r3
0978 6480      2598            xrl     a,#0x80
097A 9480      2599            subb    a,#0x80
097C 5000      2600            jnc     L032024?
097E           2601   ;        EFM8_JDY40_test.c:730: WriteData(customHappyMouth[i]);
097E EA        2602            mov     a,r2
097F 2400      2603            add     a,#_customHappyMouth
0981 F582      2604            mov     dpl,a
0983 EB        2605            mov     a,r3
0984 3412      2606            addc    a,#(_customHappyMouth >> 8)
0986 F583      2607            mov     dph,a
0988 E4        2608            clr     a
0989 93        2609            movc    a,@a+dptr
098A F582      2610            mov     dpl,a
098C C002      2611            push    ar2
098E C003      2612            push    ar3
0990 120000    2613            lcall   _WriteData
0993 D003      2614            pop     ar3
0995 D002      2615            pop     ar2
0997           2616   ;        EFM8_JDY40_test.c:728: for(i=0; i<8; i++) {
0997 0A        2617            inc     r2
0998 BA0060    2618            cjne    r2,#0x00,L032021?
099B 0B        2619            inc     r3
099C 8000      2620            sjmp    L032021?
099E           2621   L032024?:
099E           2622   ;        EFM8_JDY40_test.c:733: WriteCommand(0x83);
099E 758283    2623            mov     dpl,#0x83
09A1 120000    2624            lcall   _WriteCommand
09A4           2625   ;        EFM8_JDY40_test.c:734: WriteData(3);
09A4 758203    2626            mov     dpl,#0x03
09A7 120000    2627            lcall   _WriteData
09AA           2628   ;        EFM8_JDY40_test.c:736: WriteCommand(0x85);
09AA 758285    2629            mov     dpl,#0x85
09AD 120000    2630            lcall   _WriteCommand
09B0           2631   ;        EFM8_JDY40_test.c:737: WriteData(3);
09B0 758203    2632            mov     dpl,#0x03
09B3 120000    2633            lcall   _WriteData
09B6           2634   ;        EFM8_JDY40_test.c:739: WriteCommand(0xC4);
09B6 7582C4    2635            mov     dpl,#0xC4
09B9 120000    2636            lcall   _WriteCommand
09BC           2637   ;        EFM8_JDY40_test.c:740: WriteData(2);
09BC 758202    2638            mov     dpl,#0x02
09BF 120000    2639            lcall   _WriteData
09C2           2640   ;        EFM8_JDY40_test.c:742: waitms(500);
09C2 9001F4    2641            mov     dptr,#0x01F4
09C5 120000    2642            lcall   _waitms
09C8           2643   ;        EFM8_JDY40_test.c:743: servo1 = 150;
09C8 759896    2644            mov     _servo1,#0x96
09CB           2645   ;        EFM8_JDY40_test.c:744: waitms(100);
09CB 900064    2646            mov     dptr,#0x0064
09CE 120000    2647            lcall   _waitms
09D1           2648   ;        EFM8_JDY40_test.c:746: P1_5 = 1;        
09D1 D295      2649            setb    _P1_5
09D3           2650   ;        EFM8_JDY40_test.c:749: for(j=250; j>180; j-=5) 
09D3 7AFA      2651            mov     r2,#0xFA
09D5           2652   L032025?:
09D5 EA        2653            mov     a,r2
09D6 244B      2654            add     a,#0xff - 0xB4
09D8 5000      2655            jnc     L032028?
09DA           2656   ;        EFM8_JDY40_test.c:751: servo2 = j;
09DA 8A58      2657            mov     _servo2,r2
09DC           2658   ;        EFM8_JDY40_test.c:752: waitms(20);
09DC 900014    2659            mov     dptr,#0x0014
09DF C002      2660            push    ar2
09E1 120000    2661            lcall   _waitms
09E4 D002      2662            pop     ar2
09E6           2663   ;        EFM8_JDY40_test.c:749: for(j=250; j>180; j-=5) 
09E6 EA        2664            mov     a,r2
09E7 24FB      2665            add     a,#0xfb
09E9 FA        2666            mov     r2,a
09EA 8000      2667            sjmp    L032025?
09EC           2668   L032028?:
09EC           2669   ;        EFM8_JDY40_test.c:755: waitms(1000);
09EC 9003E8    2670            mov     dptr,#0x03E8
09EF 120000    2671            lcall   _waitms
09F2           2672   ;        EFM8_JDY40_test.c:758: for(j=150; j<250; j+=5) 
09F2 7A96      2673            mov     r2,#0x96
09F4           2674   L032029?:
09F4 BAFAA0    2675            cjne    r2,#0xFA,L032079?
09F7           2676   L032079?:
09F7 5000      2677            jnc     L032032?
09F9           2678   ;        EFM8_JDY40_test.c:760: servo1 = j;
09F9 8A98      2679            mov     _servo1,r2
09FB           2680   ;        EFM8_JDY40_test.c:761: waitms(20);
09FB 900014    2681            mov     dptr,#0x0014
09FE C002      2682            push    ar2
0A00 120000    2683            lcall   _waitms
0A03 D002      2684            pop     ar2
0A05           2685   ;        EFM8_JDY40_test.c:758: for(j=150; j<250; j+=5) 
0A05 7405      2686            mov     a,#0x05
0A07 2A        2687            add     a,r2
0A08 FA        2688            mov     r2,a
0A09 8000      2689            sjmp    L032029?
0A0B           2690   L032032?:
0A0B           2691   ;        EFM8_JDY40_test.c:764: waitms(1000);
0A0B 9003E8    2692            mov     dptr,#0x03E8
0A0E 120000    2693            lcall   _waitms
0A11           2694   ;        EFM8_JDY40_test.c:767: for(j=180; j > 90; j-=5){
0A11 7AB4      2695            mov     r2,#0xB4
0A13           2696   L032033?:
0A13 EA        2697            mov     a,r2
0A14 24A5      2698            add     a,#0xff - 0x5A
0A16 5000      2699            jnc     L032036?
0A18           2700   ;        EFM8_JDY40_test.c:768: servo2 = j;
0A18 8A58      2701            mov     _servo2,r2
0A1A           2702   ;        EFM8_JDY40_test.c:769: waitms(20);
0A1A 900014    2703            mov     dptr,#0x0014
0A1D C002      2704            push    ar2
0A1F 120000    2705            lcall   _waitms
0A22 D002      2706            pop     ar2
0A24           2707   ;        EFM8_JDY40_test.c:767: for(j=180; j > 90; j-=5){
0A24 EA        2708            mov     a,r2
0A25 24FB      2709            add     a,#0xfb
0A27 FA        2710            mov     r2,a
0A28 8000      2711            sjmp    L032033?
0A2A           2712   L032036?:
0A2A           2713   ;        EFM8_JDY40_test.c:774: P1_5 = 0;
0A2A C295      2714            clr     _P1_5
0A2C           2715   ;        EFM8_JDY40_test.c:776: waitms(150);
0A2C 900096    2716            mov     dptr,#0x0096
0A2F 120000    2717            lcall   _waitms
0A32           2718   ;        EFM8_JDY40_test.c:777: servo1 = 250;
0A32 7598FA    2719            mov     _servo1,#0xFA
0A35           2720   ;        EFM8_JDY40_test.c:778: servo2 = 250; 
0A35 7558FA    2721            mov     _servo2,#0xFA
0A38           2722   ;        EFM8_JDY40_test.c:779: EMAGNET=0;
0A38 C295      2723            clr     _P1_5
0A3A           2724   ;        EFM8_JDY40_test.c:781: WriteCommand(0x83);
0A3A 758283    2725            mov     dpl,#0x83
0A3D 120000    2726            lcall   _WriteCommand
0A40           2727   ;        EFM8_JDY40_test.c:782: WriteData(1);
0A40 758201    2728            mov     dpl,#0x01
0A43 120000    2729            lcall   _WriteData
0A46           2730   ;        EFM8_JDY40_test.c:784: WriteCommand(0x85);
0A46 758285    2731            mov     dpl,#0x85
0A49 120000    2732            lcall   _WriteCommand
0A4C           2733   ;        EFM8_JDY40_test.c:785: WriteData(1);
0A4C 758201    2734            mov     dpl,#0x01
0A4F 120000    2735            lcall   _WriteData
0A52           2736   ;        EFM8_JDY40_test.c:787: WriteCommand(0xC4);
0A52 7582C4    2737            mov     dpl,#0xC4
0A55 120000    2738            lcall   _WriteCommand
0A58           2739   ;        EFM8_JDY40_test.c:788: WriteData(0);
0A58 758200    2740            mov     dpl,#0x00
0A5B 020000    2741            ljmp    _WriteData
0A5E           2742   ;------------------------------------------------------------
0A5E           2743   ;Allocation info for local variables in function 'automaticmode'
0A5E           2744   ;------------------------------------------------------------
0A5E           2745   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0A5E           2746   ;freq                      Allocated with name '_automaticmode_PARM_3'
0A5E           2747   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0A5E           2748   ;control                   Allocated to registers 
0A5E           2749   ;------------------------------------------------------------
0A5E           2750   ;        EFM8_JDY40_test.c:796: void automaticmode(float fowardper, float sideper, float freq)
0A5E           2751   ;        -----------------------------------------
0A5E           2752   ;         function automaticmode
0A5E           2753   ;        -----------------------------------------
0A5E           2754   _automaticmode:
0A5E AA82      2755            mov     r2,dpl
0A60 AB83      2756            mov     r3,dph
0A62 ACF0      2757            mov     r4,b
0A64 FD        2758            mov     r5,a
0A65           2759   ;        EFM8_JDY40_test.c:799: direction = 3;
0A65 751803    2760            mov     _direction,#0x03
0A68 E4        2761            clr     a
0A69 F519      2762            mov     (_direction + 1),a
0A6B           2763   ;        EFM8_JDY40_test.c:801: P3_7=1;  //wheel 1
0A6B D2B7      2764            setb    _P3_7
0A6D           2765   ;        EFM8_JDY40_test.c:802: P3_2=0;  // wheel 1 
0A6D C2B2      2766            clr     _P3_2
0A6F           2767   ;        EFM8_JDY40_test.c:803: P3_0=0; // wheel 2
0A6F C2B0      2768            clr     _P3_0
0A71           2769   ;        EFM8_JDY40_test.c:804: P2_5=1; // wheel 2
0A71 D2A5      2770            setb    _P2_5
0A73           2771   ;        EFM8_JDY40_test.c:805: printf("%ld\n\r", freq);
0A73 C002      2772            push    ar2
0A75 C003      2773            push    ar3
0A77 C004      2774            push    ar4
0A79 C005      2775            push    ar5
0A7B C0A8      2776            push    _automaticmode_PARM_3
0A7D C0A9      2777            push    (_automaticmode_PARM_3 + 1)
0A7F C0AA      2778            push    (_automaticmode_PARM_3 + 2)
0A81 C0AB      2779            push    (_automaticmode_PARM_3 + 3)
0A83 74A0      2780            mov     a,#__str_5
0A85 C0E0      2781            push    acc
0A87 74E0      2782            mov     a,#(__str_5 >> 8)
0A89 C0E0      2783            push    acc
0A8B 7480      2784            mov     a,#0x80
0A8D C0E0      2785            push    acc
0A8F 120000    2786            lcall   _printf
0A92 E581      2787            mov     a,sp
0A94 24F9      2788            add     a,#0xf9
0A96 F581      2789            mov     sp,a
0A98           2790   ;        EFM8_JDY40_test.c:806: if ( freq >= 64100)  //100000    63750   65000
0A98 E4        2791            clr     a
0A99 C0E0      2792            push    acc
0A9B 7464      2793            mov     a,#0x64
0A9D C0E0      2794            push    acc
0A9F 747A      2795            mov     a,#0x7A
0AA1 C0E0      2796            push    acc
0AA3 7447      2797            mov     a,#0x47
0AA5 C0E0      2798            push    acc
0AA7 85A882    2799            mov     dpl,_automaticmode_PARM_3
0AAA 85A983    2800            mov     dph,(_automaticmode_PARM_3 + 1)
0AAD 85AAF0    2801            mov     b,(_automaticmode_PARM_3 + 2)
0AB0 E5AB      2802            mov     a,(_automaticmode_PARM_3 + 3)
0AB2 120000    2803            lcall   ___fslt
0AB5 AE82      2804            mov     r6,dpl
0AB7 E581      2805            mov     a,sp
0AB9 24FC      2806            add     a,#0xfc
0ABB F581      2807            mov     sp,a
0ABD D005      2808            pop     ar5
0ABF D004      2809            pop     ar4
0AC1 D003      2810            pop     ar3
0AC3 D002      2811            pop     ar2
0AC5 EE        2812            mov     a,r6
0AC6 7000      2813            jnz     L033002?
0AC8           2814   ;        EFM8_JDY40_test.c:808: P3_7=0;  //wheel 1
0AC8 C2B7      2815            clr     _P3_7
0ACA           2816   ;        EFM8_JDY40_test.c:809: P3_2=1;  // wheel 1 
0ACA D2B2      2817            setb    _P3_2
0ACC           2818   ;        EFM8_JDY40_test.c:810: P3_0=1; // wheel 2
0ACC D2B0      2819            setb    _P3_0
0ACE           2820   ;        EFM8_JDY40_test.c:811: P2_5=0; // wheel 2
0ACE C2A5      2821            clr     _P2_5
0AD0           2822   ;        EFM8_JDY40_test.c:812: waitms(150);
0AD0 900096    2823            mov     dptr,#0x0096
0AD3 C002      2824            push    ar2
0AD5 C003      2825            push    ar3
0AD7 C004      2826            push    ar4
0AD9 C005      2827            push    ar5
0ADB 120000    2828            lcall   _waitms
0ADE           2829   ;        EFM8_JDY40_test.c:813: P3_7=0;  //wheel 1
0ADE C2B7      2830            clr     _P3_7
0AE0           2831   ;        EFM8_JDY40_test.c:814: P3_2=0;  // wheel 1 
0AE0 C2B2      2832            clr     _P3_2
0AE2           2833   ;        EFM8_JDY40_test.c:815: P3_0=0; // wheel 2
0AE2 C2B0      2834            clr     _P3_0
0AE4           2835   ;        EFM8_JDY40_test.c:816: P2_5=0; // wheel 2
0AE4 C2A5      2836            clr     _P2_5
0AE6           2837   ;        EFM8_JDY40_test.c:817: servomotion();
0AE6 120000    2838            lcall   _servomotion
0AE9 D005      2839            pop     ar5
0AEB D004      2840            pop     ar4
0AED D003      2841            pop     ar3
0AEF D002      2842            pop     ar2
0AF1           2843   L033002?:
0AF1           2844   ;        EFM8_JDY40_test.c:821: if ( fowardper >= p_thresh)
0AF1 74CD      2845            mov     a,#0xCD
0AF3 C0E0      2846            push    acc
0AF5 74CC      2847            mov     a,#0xCC
0AF7 C0E0      2848            push    acc
0AF9 C0E0      2849            push    acc
0AFB 743D      2850            mov     a,#0x3D
0AFD C0E0      2851            push    acc
0AFF 8A82      2852            mov     dpl,r2
0B01 8B83      2853            mov     dph,r3
0B03 8CF0      2854            mov     b,r4
0B05 ED        2855            mov     a,r5
0B06 120000    2856            lcall   ___fslt
0B09 AA82      2857            mov     r2,dpl
0B0B E581      2858            mov     a,sp
0B0D 24FC      2859            add     a,#0xfc
0B0F F581      2860            mov     sp,a
0B11 EA        2861            mov     a,r2
0B12 7000      2862            jnz     L033004?
0B14           2863   ;        EFM8_JDY40_test.c:823: P3_7=0;  //wheel 1
0B14 C2B7      2864            clr     _P3_7
0B16           2865   ;        EFM8_JDY40_test.c:824: P3_2=1;  // wheel 1 
0B16 D2B2      2866            setb    _P3_2
0B18           2867   ;        EFM8_JDY40_test.c:825: P3_0=1; // wheel 2
0B18 D2B0      2868            setb    _P3_0
0B1A           2869   ;        EFM8_JDY40_test.c:826: P2_5=0; // wheel 2
0B1A C2A5      2870            clr     _P2_5
0B1C           2871   ;        EFM8_JDY40_test.c:827: waitms(300);
0B1C 90012C    2872            mov     dptr,#0x012C
0B1F 120000    2873            lcall   _waitms
0B22           2874   ;        EFM8_JDY40_test.c:828: P3_7=0;  //wheel 1
0B22 C2B7      2875            clr     _P3_7
0B24           2876   ;        EFM8_JDY40_test.c:829: P3_2=1;  // wheel 1 
0B24 D2B2      2877            setb    _P3_2
0B26           2878   ;        EFM8_JDY40_test.c:830: P3_0=0; // wheel 2
0B26 C2B0      2879            clr     _P3_0
0B28           2880   ;        EFM8_JDY40_test.c:831: P2_5=0; // wheel 2
0B28 C2A5      2881            clr     _P2_5
0B2A           2882   ;        EFM8_JDY40_test.c:832: waitms(750);
0B2A 9002EE    2883            mov     dptr,#0x02EE
0B2D           2884   ;        EFM8_JDY40_test.c:833: return;
0B2D 020000    2885            ljmp    _waitms
0B30           2886   L033004?:
0B30           2887   ;        EFM8_JDY40_test.c:838: if ( sideper >= p_thresh)
0B30 74CD      2888            mov     a,#0xCD
0B32 C0E0      2889            push    acc
0B34 74CC      2890            mov     a,#0xCC
0B36 C0E0      2891            push    acc
0B38 C0E0      2892            push    acc
0B3A 743D      2893            mov     a,#0x3D
0B3C C0E0      2894            push    acc
0B3E 85F882    2895            mov     dpl,_automaticmode_PARM_2
0B41 85F983    2896            mov     dph,(_automaticmode_PARM_2 + 1)
0B44 85FAF0    2897            mov     b,(_automaticmode_PARM_2 + 2)
0B47 E5FB      2898            mov     a,(_automaticmode_PARM_2 + 3)
0B49 120000    2899            lcall   ___fslt
0B4C AA82      2900            mov     r2,dpl
0B4E E581      2901            mov     a,sp
0B50 24FC      2902            add     a,#0xfc
0B52 F581      2903            mov     sp,a
0B54 EA        2904            mov     a,r2
0B55 7000      2905            jnz     L033007?
0B57           2906   ;        EFM8_JDY40_test.c:840: P3_7=0;  //wheel 1
0B57 C2B7      2907            clr     _P3_7
0B59           2908   ;        EFM8_JDY40_test.c:841: P3_2=1;  // wheel 1 
0B59 D2B2      2909            setb    _P3_2
0B5B           2910   ;        EFM8_JDY40_test.c:842: P3_0=0; // wheel 2
0B5B C2B0      2911            clr     _P3_0
0B5D           2912   ;        EFM8_JDY40_test.c:843: P2_5=0; // wheel 2
0B5D C2A5      2913            clr     _P2_5
0B5F           2914   ;        EFM8_JDY40_test.c:844: waitms(750);
0B5F 9002EE    2915            mov     dptr,#0x02EE
0B62           2916   ;        EFM8_JDY40_test.c:845: control = 1;
0B62 020000    2917            ljmp    _waitms
0B65           2918   L033007?:
0B65 22        2919            ret
0B66           2920   ;------------------------------------------------------------
0B66           2921   ;Allocation info for local variables in function 'main'
0B66           2922   ;------------------------------------------------------------
0B66           2923   ;timeout                   Allocated to registers 
0B66           2924   ;pulse_width               Allocated to registers 
0B66           2925   ;pulse_width1              Allocated to registers 
0B66           2926   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_198'
0B66           2927   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_198'
0B66           2928   ;which                     Allocated with name '_main_which_1_198'
0B66           2929   ;i                         Allocated to registers r2 r3 
0B66           2930   ;count                     Allocated to registers r2 r3 r4 r5 
0B66           2931   ;f                         Allocated with name '_main_f_1_198'
0B66           2932   ;v                         Allocated with name '_main_v_1_198'
0B66           2933   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0B66           2934   ;------------------------------------------------------------
0B66           2935   ;        EFM8_JDY40_test.c:852: void main (void)
0B66           2936   ;        -----------------------------------------
0B66           2937   ;         function main
0B66           2938   ;        -----------------------------------------
0B66           2939   _main:
0B66           2940   ;        EFM8_JDY40_test.c:871: waitms(500);
0B66 9001F4    2941            mov     dptr,#0x01F4
0B69 120000    2942            lcall   _waitms
0B6C           2943   ;        EFM8_JDY40_test.c:872: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0B6C 74E0      2944            mov     a,#__str_6
0B6E C0E0      2945            push    acc
0B70 74E1      2946            mov     a,#(__str_6 >> 8)
0B72 C0E0      2947            push    acc
0B74 7480      2948            mov     a,#0x80
0B76 C0E0      2949            push    acc
0B78 120000    2950            lcall   _printf
0B7B 1581      2951            dec     sp
0B7D 1581      2952            dec     sp
0B7F 1581      2953            dec     sp
0B81           2954   ;        EFM8_JDY40_test.c:873: UART1_Init(9600);
0B81 902580    2955            mov     dptr,#0x2580
0B84 E4        2956            clr     a
0B85 F5F0      2957            mov     b,a
0B87 120000    2958            lcall   _UART1_Init
0B8A           2959   ;        EFM8_JDY40_test.c:875: ReceptionOff();
0B8A 120000    2960            lcall   _ReceptionOff
0B8D           2961   ;        EFM8_JDY40_test.c:877: LCD_4BIT();
0B8D 120000    2962            lcall   _LCD_4BIT
0B90           2963   ;        EFM8_JDY40_test.c:879: TIMER0_Init(); 
0B90 120000    2964            lcall   _TIMER0_Init
0B93           2965   ;        EFM8_JDY40_test.c:881: InitPinADC(2, 1); // Configure P2.1 as analog input
0B93 756001    2966            mov     _InitPinADC_PARM_2,#0x01
0B96 758202    2967            mov     dpl,#0x02
0B99 120000    2968            lcall   _InitPinADC
0B9C           2969   ;        EFM8_JDY40_test.c:882: InitPinADC(2, 3); // Configure P2.1 as analog input
0B9C 756003    2970            mov     _InitPinADC_PARM_2,#0x03
0B9F 758202    2971            mov     dpl,#0x02
0BA2 120000    2972            lcall   _InitPinADC
0BA5           2973   ;        EFM8_JDY40_test.c:883: InitADC();
0BA5 120000    2974            lcall   _InitADC
0BA8           2975   ;        EFM8_JDY40_test.c:887: SendATCommand("AT+VER\r\n");
0BA8 90E220    2976            mov     dptr,#__str_7
0BAB 75F080    2977            mov     b,#0x80
0BAE 120000    2978            lcall   _SendATCommand
0BB1           2979   ;        EFM8_JDY40_test.c:888: SendATCommand("AT+BAUD\r\n");
0BB1 90E260    2980            mov     dptr,#__str_8
0BB4 75F080    2981            mov     b,#0x80
0BB7 120000    2982            lcall   _SendATCommand
0BBA           2983   ;        EFM8_JDY40_test.c:889: SendATCommand("AT+RFID\r\n");
0BBA 90E2A0    2984            mov     dptr,#__str_9
0BBD 75F080    2985            mov     b,#0x80
0BC0 120000    2986            lcall   _SendATCommand
0BC3           2987   ;        EFM8_JDY40_test.c:890: SendATCommand("AT+DVID\r\n");
0BC3 90E2E0    2988            mov     dptr,#__str_10
0BC6 75F080    2989            mov     b,#0x80
0BC9 120000    2990            lcall   _SendATCommand
0BCC           2991   ;        EFM8_JDY40_test.c:891: SendATCommand("AT+RFC120\r\n");
0BCC 90E320    2992            mov     dptr,#__str_11
0BCF 75F080    2993            mov     b,#0x80
0BD2 120000    2994            lcall   _SendATCommand
0BD5           2995   ;        EFM8_JDY40_test.c:892: SendATCommand("AT+POWE\r\n");
0BD5 90E360    2996            mov     dptr,#__str_12
0BD8 75F080    2997            mov     b,#0x80
0BDB 120000    2998            lcall   _SendATCommand
0BDE           2999   ;        EFM8_JDY40_test.c:893: SendATCommand("AT+CLSS\r\n");
0BDE 90E3A0    3000            mov     dptr,#__str_13
0BE1 75F080    3001            mov     b,#0x80
0BE4 120000    3002            lcall   _SendATCommand
0BE7           3003   ;        EFM8_JDY40_test.c:897: SendATCommand("AT+DVIDFFFF\r\n");  
0BE7 90E3E0    3004            mov     dptr,#__str_14
0BEA 75F080    3005            mov     b,#0x80
0BED 120000    3006            lcall   _SendATCommand
0BF0           3007   ;        EFM8_JDY40_test.c:899: WriteCommand(0x40);  // Set CGRAM address
0BF0 758240    3008            mov     dpl,#0x40
0BF3 120000    3009            lcall   _WriteCommand
0BF6           3010   ;        EFM8_JDY40_test.c:900: for(i=0; i<8; i++) {
0BF6 7A00      3011            mov     r2,#0x00
0BF8 7B00      3012            mov     r3,#0x00
0BFA           3013   L034028?:
0BFA C3        3014            clr     c
0BFB EA        3015            mov     a,r2
0BFC 9408      3016            subb    a,#0x08
0BFE EB        3017            mov     a,r3
0BFF 6480      3018            xrl     a,#0x80
0C01 9480      3019            subb    a,#0x80
0C03 5000      3020            jnc     L034031?
0C05           3021   ;        EFM8_JDY40_test.c:902: WriteData(customMouth[i]);
0C05 EA        3022            mov     a,r2
0C06 2450      3023            add     a,#_customMouth
0C08 F582      3024            mov     dpl,a
0C0A EB        3025            mov     a,r3
0C0B 3413      3026            addc    a,#(_customMouth >> 8)
0C0D F583      3027            mov     dph,a
0C0F E4        3028            clr     a
0C10 93        3029            movc    a,@a+dptr
0C11 F582      3030            mov     dpl,a
0C13 C002      3031            push    ar2
0C15 C003      3032            push    ar3
0C17 120000    3033            lcall   _WriteData
0C1A D003      3034            pop     ar3
0C1C D002      3035            pop     ar2
0C1E           3036   ;        EFM8_JDY40_test.c:900: for(i=0; i<8; i++) {
0C1E 0A        3037            inc     r2
0C1F BA0020    3038            cjne    r2,#0x00,L034028?
0C22 0B        3039            inc     r3
0C23 8000      3040            sjmp    L034028?
0C25           3041   L034031?:
0C25           3042   ;        EFM8_JDY40_test.c:905: WriteCommand(0x48);
0C25 758248    3043            mov     dpl,#0x48
0C28 120000    3044            lcall   _WriteCommand
0C2B           3045   ;        EFM8_JDY40_test.c:906: for(i=0; i<8; i++) {
0C2B 7A00      3046            mov     r2,#0x00
0C2D 7B00      3047            mov     r3,#0x00
0C2F           3048   L034032?:
0C2F C3        3049            clr     c
0C30 EA        3050            mov     a,r2
0C31 9408      3051            subb    a,#0x08
0C33 EB        3052            mov     a,r3
0C34 6480      3053            xrl     a,#0x80
0C36 9480      3054            subb    a,#0x80
0C38 5000      3055            jnc     L034035?
0C3A           3056   ;        EFM8_JDY40_test.c:908: WriteData(customEye[i]);
0C3A EA        3057            mov     a,r2
0C3B 2410      3058            add     a,#_customEye
0C3D F582      3059            mov     dpl,a
0C3F EB        3060            mov     a,r3
0C40 3413      3061            addc    a,#(_customEye >> 8)
0C42 F583      3062            mov     dph,a
0C44 E4        3063            clr     a
0C45 93        3064            movc    a,@a+dptr
0C46 F582      3065            mov     dpl,a
0C48 C002      3066            push    ar2
0C4A C003      3067            push    ar3
0C4C 120000    3068            lcall   _WriteData
0C4F D003      3069            pop     ar3
0C51 D002      3070            pop     ar2
0C53           3071   ;        EFM8_JDY40_test.c:906: for(i=0; i<8; i++) {
0C53 0A        3072            inc     r2
0C54 BA00A0    3073            cjne    r2,#0x00,L034032?
0C57 0B        3074            inc     r3
0C58 8000      3075            sjmp    L034032?
0C5A           3076   L034035?:
0C5A           3077   ;        EFM8_JDY40_test.c:911: WriteCommand(0x50);  // Set CGRAM address
0C5A 758250    3078            mov     dpl,#0x50
0C5D 120000    3079            lcall   _WriteCommand
0C60           3080   ;        EFM8_JDY40_test.c:912: for(i=0; i<8; i++) {
0C60 7A00      3081            mov     r2,#0x00
0C62 7B00      3082            mov     r3,#0x00
0C64           3083   L034036?:
0C64 C3        3084            clr     c
0C65 EA        3085            mov     a,r2
0C66 9408      3086            subb    a,#0x08
0C68 EB        3087            mov     a,r3
0C69 6480      3088            xrl     a,#0x80
0C6B 9480      3089            subb    a,#0x80
0C6D 5000      3090            jnc     L034039?
0C6F           3091   ;        EFM8_JDY40_test.c:914: WriteData(customOpenMouth[i]);
0C6F EA        3092            mov     a,r2
0C70 24D0      3093            add     a,#_customOpenMouth
0C72 F582      3094            mov     dpl,a
0C74 EB        3095            mov     a,r3
0C75 3412      3096            addc    a,#(_customOpenMouth >> 8)
0C77 F583      3097            mov     dph,a
0C79 E4        3098            clr     a
0C7A 93        3099            movc    a,@a+dptr
0C7B F582      3100            mov     dpl,a
0C7D C002      3101            push    ar2
0C7F C003      3102            push    ar3
0C81 120000    3103            lcall   _WriteData
0C84 D003      3104            pop     ar3
0C86 D002      3105            pop     ar2
0C88           3106   ;        EFM8_JDY40_test.c:912: for(i=0; i<8; i++) {
0C88 0A        3107            inc     r2
0C89 BA0020    3108            cjne    r2,#0x00,L034036?
0C8C 0B        3109            inc     r3
0C8D 8000      3110            sjmp    L034036?
0C8F           3111   L034039?:
0C8F           3112   ;        EFM8_JDY40_test.c:917: WriteCommand(0x58);  // Set CGRAM address
0C8F 758258    3113            mov     dpl,#0x58
0C92 120000    3114            lcall   _WriteCommand
0C95           3115   ;        EFM8_JDY40_test.c:918: for(i=0; i<8; i++) {
0C95 7A00      3116            mov     r2,#0x00
0C97 7B00      3117            mov     r3,#0x00
0C99           3118   L034040?:
0C99 C3        3119            clr     c
0C9A EA        3120            mov     a,r2
0C9B 9408      3121            subb    a,#0x08
0C9D EB        3122            mov     a,r3
0C9E 6480      3123            xrl     a,#0x80
0CA0 9480      3124            subb    a,#0x80
0CA2 5000      3125            jnc     L034043?
0CA4           3126   ;        EFM8_JDY40_test.c:920: WriteData(customSparkle[i]);
0CA4 EA        3127            mov     a,r2
0CA5 2480      3128            add     a,#_customSparkle
0CA7 F582      3129            mov     dpl,a
0CA9 EB        3130            mov     a,r3
0CAA 3412      3131            addc    a,#(_customSparkle >> 8)
0CAC F583      3132            mov     dph,a
0CAE E4        3133            clr     a
0CAF 93        3134            movc    a,@a+dptr
0CB0 F582      3135            mov     dpl,a
0CB2 C002      3136            push    ar2
0CB4 C003      3137            push    ar3
0CB6 120000    3138            lcall   _WriteData
0CB9 D003      3139            pop     ar3
0CBB D002      3140            pop     ar2
0CBD           3141   ;        EFM8_JDY40_test.c:918: for(i=0; i<8; i++) {
0CBD 0A        3142            inc     r2
0CBE BA00A0    3143            cjne    r2,#0x00,L034040?
0CC1 0B        3144            inc     r3
0CC2 8000      3145            sjmp    L034040?
0CC4           3146   L034043?:
0CC4           3147   ;        EFM8_JDY40_test.c:923: WriteCommand(0x60);  // Set CGRAM address
0CC4 758260    3148            mov     dpl,#0x60
0CC7 120000    3149            lcall   _WriteCommand
0CCA           3150   ;        EFM8_JDY40_test.c:924: for(i=0; i<8; i++) {
0CCA 7A00      3151            mov     r2,#0x00
0CCC 7B00      3152            mov     r3,#0x00
0CCE           3153   L034044?:
0CCE C3        3154            clr     c
0CCF EA        3155            mov     a,r2
0CD0 9408      3156            subb    a,#0x08
0CD2 EB        3157            mov     a,r3
0CD3 6480      3158            xrl     a,#0x80
0CD5 9480      3159            subb    a,#0x80
0CD7 5000      3160            jnc     L034047?
0CD9           3161   ;        EFM8_JDY40_test.c:926: WriteData(customMoney[i]);
0CD9 EA        3162            mov     a,r2
0CDA 2440      3163            add     a,#_customMoney
0CDC F582      3164            mov     dpl,a
0CDE EB        3165            mov     a,r3
0CDF 3412      3166            addc    a,#(_customMoney >> 8)
0CE1 F583      3167            mov     dph,a
0CE3 E4        3168            clr     a
0CE4 93        3169            movc    a,@a+dptr
0CE5 F582      3170            mov     dpl,a
0CE7 C002      3171            push    ar2
0CE9 C003      3172            push    ar3
0CEB 120000    3173            lcall   _WriteData
0CEE D003      3174            pop     ar3
0CF0 D002      3175            pop     ar2
0CF2           3176   ;        EFM8_JDY40_test.c:924: for(i=0; i<8; i++) {
0CF2 0A        3177            inc     r2
0CF3 BA0020    3178            cjne    r2,#0x00,L034044?
0CF6 0B        3179            inc     r3
0CF7 8000      3180            sjmp    L034044?
0CF9           3181   L034047?:
0CF9           3182   ;        EFM8_JDY40_test.c:929: WriteCommand(0x68);  // Set CGRAM address
0CF9 758268    3183            mov     dpl,#0x68
0CFC 120000    3184            lcall   _WriteCommand
0CFF           3185   ;        EFM8_JDY40_test.c:930: for(i=0; i<8; i++) {
0CFF 7A00      3186            mov     r2,#0x00
0D01 7B00      3187            mov     r3,#0x00
0D03           3188   L034048?:
0D03 C3        3189            clr     c
0D04 EA        3190            mov     a,r2
0D05 9408      3191            subb    a,#0x08
0D07 EB        3192            mov     a,r3
0D08 6480      3193            xrl     a,#0x80
0D0A 9480      3194            subb    a,#0x80
0D0C 5000      3195            jnc     L034051?
0D0E           3196   ;        EFM8_JDY40_test.c:932: WriteData(customHappyMouth[i]);
0D0E EA        3197            mov     a,r2
0D0F 2400      3198            add     a,#_customHappyMouth
0D11 F582      3199            mov     dpl,a
0D13 EB        3200            mov     a,r3
0D14 3412      3201            addc    a,#(_customHappyMouth >> 8)
0D16 F583      3202            mov     dph,a
0D18 E4        3203            clr     a
0D19 93        3204            movc    a,@a+dptr
0D1A F582      3205            mov     dpl,a
0D1C C002      3206            push    ar2
0D1E C003      3207            push    ar3
0D20 120000    3208            lcall   _WriteData
0D23 D003      3209            pop     ar3
0D25 D002      3210            pop     ar2
0D27           3211   ;        EFM8_JDY40_test.c:930: for(i=0; i<8; i++) {
0D27 0A        3212            inc     r2
0D28 BA00A0    3213            cjne    r2,#0x00,L034048?
0D2B 0B        3214            inc     r3
0D2C 8000      3215            sjmp    L034048?
0D2E           3216   L034051?:
0D2E           3217   ;        EFM8_JDY40_test.c:935: WriteCommand(0x83);
0D2E 758283    3218            mov     dpl,#0x83
0D31 120000    3219            lcall   _WriteCommand
0D34           3220   ;        EFM8_JDY40_test.c:936: WriteData(1);
0D34 758201    3221            mov     dpl,#0x01
0D37 120000    3222            lcall   _WriteData
0D3A           3223   ;        EFM8_JDY40_test.c:938: WriteCommand(0x85);
0D3A 758285    3224            mov     dpl,#0x85
0D3D 120000    3225            lcall   _WriteCommand
0D40           3226   ;        EFM8_JDY40_test.c:939: WriteData(1);
0D40 758201    3227            mov     dpl,#0x01
0D43 120000    3228            lcall   _WriteData
0D46           3229   ;        EFM8_JDY40_test.c:941: WriteCommand(0xC4);
0D46 7582C4    3230            mov     dpl,#0xC4
0D49 120000    3231            lcall   _WriteCommand
0D4C           3232   ;        EFM8_JDY40_test.c:942: WriteData(0);
0D4C 758200    3233            mov     dpl,#0x00
0D4F 120000    3234            lcall   _WriteData
0D52           3235   ;        EFM8_JDY40_test.c:944: P1_5 = 0;
0D52 C295      3236            clr     _P1_5
0D54           3237   ;        EFM8_JDY40_test.c:945: while(1)
0D54           3238   L034026?:
0D54           3239   ;        EFM8_JDY40_test.c:947: EMAGNET = 0;
0D54 C295      3240            clr     _P1_5
0D56           3241   ;        EFM8_JDY40_test.c:949: count = GetPeriod(200);
0D56 9000C8    3242            mov     dptr,#0x00C8
0D59 120000    3243            lcall   _GetPeriod
0D5C           3244   ;        EFM8_JDY40_test.c:950: f = GetFrequency(count);
0D5C 120000    3245            lcall   _GetFrequency
0D5F 858250    3246            mov     _main_f_1_198,dpl
0D62 858351    3247            mov     (_main_f_1_198 + 1),dph
0D65 85F052    3248            mov     (_main_f_1_198 + 2),b
0D68 F553      3249            mov     (_main_f_1_198 + 3),a
0D6A           3250   ;        EFM8_JDY40_test.c:952: sprintf(msg, "%05ld\n\r", f); // subtracted so that it sends a smaller value
0D6A C050      3251            push    _main_f_1_198
0D6C C051      3252            push    (_main_f_1_198 + 1)
0D6E C052      3253            push    (_main_f_1_198 + 2)
0D70 C053      3254            push    (_main_f_1_198 + 3)
0D72 7460      3255            mov     a,#__str_15
0D74 C0E0      3256            push    acc
0D76 74E7      3257            mov     a,#(__str_15 >> 8)
0D78 C0E0      3258            push    acc
0D7A 7480      3259            mov     a,#0x80
0D7C C0E0      3260            push    acc
0D7E 7418      3261            mov     a,#_msg
0D80 C0E0      3262            push    acc
0D82 744D      3263            mov     a,#(_msg >> 8)
0D84 C0E0      3264            push    acc
0D86 7440      3265            mov     a,#0x40
0D88 C0E0      3266            push    acc
0D8A 120000    3267            lcall   _sprintf
0D8D E581      3268            mov     a,sp
0D8F 24F6      3269            add     a,#0xf6
0D91 F581      3270            mov     sp,a
0D93           3271   ;        EFM8_JDY40_test.c:953: sendstr1(msg);
0D93 904D18    3272            mov     dptr,#_msg
0D96 75F040    3273            mov     b,#0x40
0D99 120000    3274            lcall   _sendstr1
0D9C           3275   ;        EFM8_JDY40_test.c:954: waitms(50);
0D9C 900032    3276            mov     dptr,#0x0032
0D9F 120000    3277            lcall   _waitms
0DA2           3278   ;        EFM8_JDY40_test.c:957: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0DA2 75820E    3279            mov     dpl,#0x0E
0DA5 120000    3280            lcall   _Volts_at_Pin
0DA8 8582D0    3281            mov     _main_sloc0_1_0,dpl
0DAB 8583D1    3282            mov     (_main_sloc0_1_0 + 1),dph
0DAE 85F0D2    3283            mov     (_main_sloc0_1_0 + 2),b
0DB1 F5D3      3284            mov     (_main_sloc0_1_0 + 3),a
0DB3 85D090    3285            mov     _main_v_1_198,_main_sloc0_1_0
0DB6 85D191    3286            mov     (_main_v_1_198 + 1),(_main_sloc0_1_0 + 1)
0DB9 85D292    3287            mov     (_main_v_1_198 + 2),(_main_sloc0_1_0 + 2)
0DBC 85D393    3288            mov     (_main_v_1_198 + 3),(_main_sloc0_1_0 + 3)
0DBF           3289   ;        EFM8_JDY40_test.c:958: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0DBF 758210    3290            mov     dpl,#0x10
0DC2 120000    3291            lcall   _Volts_at_Pin
0DC5 8582D0    3292            mov     _main_sloc0_1_0,dpl
0DC8 8583D1    3293            mov     (_main_sloc0_1_0 + 1),dph
0DCB 85F0D2    3294            mov     (_main_sloc0_1_0 + 2),b
0DCE F5D3      3295            mov     (_main_sloc0_1_0 + 3),a
0DD0 85D094    3296            mov     (_main_v_1_198 + 0x0004),_main_sloc0_1_0
0DD3 85D195    3297            mov     ((_main_v_1_198 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0DD6 85D296    3298            mov     ((_main_v_1_198 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0DD9 85D397    3299            mov     ((_main_v_1_198 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0DDC           3300   ;        EFM8_JDY40_test.c:961: if(RXU1()) // Something has arrived
0DDC 120000    3301            lcall   _RXU1
0DDF 4000      3302            jc      L034095?
0DE1 020000    3303            ljmp    L034026?
0DE4           3304   L034095?:
0DE4           3305   ;        EFM8_JDY40_test.c:964: getstr1(buff, sizeof(buff));
0DE4 75D814    3306            mov     _getstr1_PARM_2,#0x14
0DE7 904D58    3307            mov     dptr,#_buff
0DEA 75F040    3308            mov     b,#0x40
0DED 120000    3309            lcall   _getstr1
0DF0           3310   ;        EFM8_JDY40_test.c:965: if ( strcmp(buff, "A") == 0 )
0DF0 750060    3311            mov     _strcmp_PARM_2,#__str_16
0DF3 7501E8    3312            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
0DF6 750280    3313            mov     (_strcmp_PARM_2 + 2),#0x80
0DF9 904D58    3314            mov     dptr,#_buff
0DFC 75F040    3315            mov     b,#0x40
0DFF 120000    3316            lcall   _strcmp
0E02 E582      3317            mov     a,dpl
0E04 8583F0    3318            mov     b,dph
0E07 45F0      3319            orl     a,b
0E09 6000      3320            jz      L034096?
0E0B 020000    3321            ljmp    L034009?
0E0E           3322   L034096?:
0E0E           3323   ;        EFM8_JDY40_test.c:967: waitms(500);
0E0E 9001F4    3324            mov     dptr,#0x01F4
0E11 120000    3325            lcall   _waitms
0E14           3326   ;        EFM8_JDY40_test.c:968: while(1)
0E14           3327   L034006?:
0E14           3328   ;        EFM8_JDY40_test.c:970: waitms(5);
0E14 900005    3329            mov     dptr,#0x0005
0E17 120000    3330            lcall   _waitms
0E1A           3331   ;        EFM8_JDY40_test.c:971: direction=3; 
0E1A 751803    3332            mov     _direction,#0x03
0E1D E4        3333            clr     a
0E1E F519      3334            mov     (_direction + 1),a
0E20           3335   ;        EFM8_JDY40_test.c:974: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0E20 75820E    3336            mov     dpl,#0x0E
0E23 120000    3337            lcall   _Volts_at_Pin
0E26 8582D0    3338            mov     _main_sloc0_1_0,dpl
0E29 8583D1    3339            mov     (_main_sloc0_1_0 + 1),dph
0E2C 85F0D2    3340            mov     (_main_sloc0_1_0 + 2),b
0E2F F5D3      3341            mov     (_main_sloc0_1_0 + 3),a
0E31 85D090    3342            mov     _main_v_1_198,_main_sloc0_1_0
0E34 85D191    3343            mov     (_main_v_1_198 + 1),(_main_sloc0_1_0 + 1)
0E37 85D292    3344            mov     (_main_v_1_198 + 2),(_main_sloc0_1_0 + 2)
0E3A 85D393    3345            mov     (_main_v_1_198 + 3),(_main_sloc0_1_0 + 3)
0E3D           3346   ;        EFM8_JDY40_test.c:975: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0E3D 758210    3347            mov     dpl,#0x10
0E40 120000    3348            lcall   _Volts_at_Pin
0E43 8582D0    3349            mov     _main_sloc0_1_0,dpl
0E46 8583D1    3350            mov     (_main_sloc0_1_0 + 1),dph
0E49 85F0D2    3351            mov     (_main_sloc0_1_0 + 2),b
0E4C F5D3      3352            mov     (_main_sloc0_1_0 + 3),a
0E4E 85D094    3353            mov     (_main_v_1_198 + 0x0004),_main_sloc0_1_0
0E51 85D195    3354            mov     ((_main_v_1_198 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0E54 85D296    3355            mov     ((_main_v_1_198 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0E57 85D397    3356            mov     ((_main_v_1_198 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0E5A           3357   ;        EFM8_JDY40_test.c:976: count = GetPeriod(200);
0E5A 9000C8    3358            mov     dptr,#0x00C8
0E5D 120000    3359            lcall   _GetPeriod
0E60           3360   ;        EFM8_JDY40_test.c:977: f = GetFrequency(count);
0E60 120000    3361            lcall   _GetFrequency
0E63 858250    3362            mov     _main_f_1_198,dpl
0E66 858351    3363            mov     (_main_f_1_198 + 1),dph
0E69 85F052    3364            mov     (_main_f_1_198 + 2),b
0E6C F553      3365            mov     (_main_f_1_198 + 3),a
0E6E           3366   ;        EFM8_JDY40_test.c:978: automaticmode(v[0], v[1], f);
0E6E 8590D0    3367            mov     _main_sloc0_1_0,_main_v_1_198
0E71 8591D1    3368            mov     (_main_sloc0_1_0 + 1),(_main_v_1_198 + 1)
0E74 8592D2    3369            mov     (_main_sloc0_1_0 + 2),(_main_v_1_198 + 2)
0E77 8593D3    3370            mov     (_main_sloc0_1_0 + 3),(_main_v_1_198 + 3)
0E7A AE94      3371            mov     r6,(_main_v_1_198 + 0x0004)
0E7C AF95      3372            mov     r7,((_main_v_1_198 + 0x0004) + 1)
0E7E AA96      3373            mov     r2,((_main_v_1_198 + 0x0004) + 2)
0E80 AB97      3374            mov     r3,((_main_v_1_198 + 0x0004) + 3)
0E82 855082    3375            mov     dpl,_main_f_1_198
0E85 855183    3376            mov     dph,(_main_f_1_198 + 1)
0E88 8552F0    3377            mov     b,(_main_f_1_198 + 2)
0E8B E553      3378            mov     a,(_main_f_1_198 + 3)
0E8D C002      3379            push    ar2
0E8F C003      3380            push    ar3
0E91 C006      3381            push    ar6
0E93 C007      3382            push    ar7
0E95 120000    3383            lcall   ___slong2fs
0E98 8582A8    3384            mov     _automaticmode_PARM_3,dpl
0E9B 8583A9    3385            mov     (_automaticmode_PARM_3 + 1),dph
0E9E 85F0AA    3386            mov     (_automaticmode_PARM_3 + 2),b
0EA1 F5AB      3387            mov     (_automaticmode_PARM_3 + 3),a
0EA3 D007      3388            pop     ar7
0EA5 D006      3389            pop     ar6
0EA7 D003      3390            pop     ar3
0EA9 D002      3391            pop     ar2
0EAB 8EF8      3392            mov     _automaticmode_PARM_2,r6
0EAD 8FF9      3393            mov     (_automaticmode_PARM_2 + 1),r7
0EAF 8AFA      3394            mov     (_automaticmode_PARM_2 + 2),r2
0EB1 8BFB      3395            mov     (_automaticmode_PARM_2 + 3),r3
0EB3 85D082    3396            mov     dpl,_main_sloc0_1_0
0EB6 85D183    3397            mov     dph,(_main_sloc0_1_0 + 1)
0EB9 85D2F0    3398            mov     b,(_main_sloc0_1_0 + 2)
0EBC E5D3      3399            mov     a,(_main_sloc0_1_0 + 3)
0EBE 120000    3400            lcall   _automaticmode
0EC1           3401   ;        EFM8_JDY40_test.c:980: if(RXU1())
0EC1 120000    3402            lcall   _RXU1
0EC4 4000      3403            jc      L034097?
0EC6 020000    3404            ljmp    L034006?
0EC9           3405   L034097?:
0EC9           3406   ;        EFM8_JDY40_test.c:982: printf("hello");
0EC9 74E0      3407            mov     a,#__str_17
0ECB C0E0      3408            push    acc
0ECD 74E9      3409            mov     a,#(__str_17 >> 8)
0ECF C0E0      3410            push    acc
0ED1 7480      3411            mov     a,#0x80
0ED3 C0E0      3412            push    acc
0ED5 120000    3413            lcall   _printf
0ED8 1581      3414            dec     sp
0EDA 1581      3415            dec     sp
0EDC 1581      3416            dec     sp
0EDE           3417   ;        EFM8_JDY40_test.c:983: getstr1(buff, sizeof(buff));
0EDE 75D814    3418            mov     _getstr1_PARM_2,#0x14
0EE1 904D58    3419            mov     dptr,#_buff
0EE4 75F040    3420            mov     b,#0x40
0EE7 120000    3421            lcall   _getstr1
0EEA           3422   ;        EFM8_JDY40_test.c:984: if (strcmp(buff, "A") == 0 ) break;
0EEA 750060    3423            mov     _strcmp_PARM_2,#__str_16
0EED 7501E8    3424            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
0EF0 750280    3425            mov     (_strcmp_PARM_2 + 2),#0x80
0EF3 904D58    3426            mov     dptr,#_buff
0EF6 75F040    3427            mov     b,#0x40
0EF9 120000    3428            lcall   _strcmp
0EFC E582      3429            mov     a,dpl
0EFE 8583F0    3430            mov     b,dph
0F01 45F0      3431            orl     a,b
0F03 6000      3432            jz      L034098?
0F05 020000    3433            ljmp    L034006?
0F08           3434   L034098?:
0F08           3435   L034009?:
0F08           3436   ;        EFM8_JDY40_test.c:992: if ( strcmp(buff, "S") == 0 )    
0F08 750060    3437            mov     _strcmp_PARM_2,#__str_18
0F0B 7501EA    3438            mov     (_strcmp_PARM_2 + 1),#(__str_18 >> 8)
0F0E 750280    3439            mov     (_strcmp_PARM_2 + 2),#0x80
0F11 904D58    3440            mov     dptr,#_buff
0F14 75F040    3441            mov     b,#0x40
0F17 120000    3442            lcall   _strcmp
0F1A E582      3443            mov     a,dpl
0F1C 8583F0    3444            mov     b,dph
0F1F 45F0      3445            orl     a,b
0F21 7000      3446            jnz     L034011?
0F23           3447   ;        EFM8_JDY40_test.c:994: servomotion();
0F23 120000    3448            lcall   _servomotion
0F26           3449   ;        EFM8_JDY40_test.c:995: printf("this should be the motor function");
0F26 74E0      3450            mov     a,#__str_19
0F28 C0E0      3451            push    acc
0F2A 74EA      3452            mov     a,#(__str_19 >> 8)
0F2C C0E0      3453            push    acc
0F2E 7480      3454            mov     a,#0x80
0F30 C0E0      3455            push    acc
0F32 120000    3456            lcall   _printf
0F35 1581      3457            dec     sp
0F37 1581      3458            dec     sp
0F39 1581      3459            dec     sp
0F3B           3460   ;        EFM8_JDY40_test.c:996: waitms(500);
0F3B 9001F4    3461            mov     dptr,#0x01F4
0F3E 120000    3462            lcall   _waitms
0F41           3463   L034011?:
0F41           3464   ;        EFM8_JDY40_test.c:1000: sscanf(buff, "K%uW%uG%d\n", &adcwheel1, &adcwheel2, &which);
0F41 7410      3465            mov     a,#_main_which_1_198
0F43 C0E0      3466            push    acc
0F45 74C0      3467            mov     a,#(_main_which_1_198 >> 8)
0F47 C0E0      3468            push    acc
0F49 7440      3469            mov     a,#0x40
0F4B C0E0      3470            push    acc
0F4D 74B8      3471            mov     a,#_main_adcwheel2_1_198
0F4F C0E0      3472            push    acc
0F51 74BF      3473            mov     a,#(_main_adcwheel2_1_198 >> 8)
0F53 C0E0      3474            push    acc
0F55 7440      3475            mov     a,#0x40
0F57 C0E0      3476            push    acc
0F59 7468      3477            mov     a,#_main_adcwheel1_1_198
0F5B C0E0      3478            push    acc
0F5D 74BF      3479            mov     a,#(_main_adcwheel1_1_198 >> 8)
0F5F C0E0      3480            push    acc
0F61 7440      3481            mov     a,#0x40
0F63 C0E0      3482            push    acc
0F65 7420      3483            mov     a,#__str_20
0F67 C0E0      3484            push    acc
0F69 74EB      3485            mov     a,#(__str_20 >> 8)
0F6B C0E0      3486            push    acc
0F6D 7480      3487            mov     a,#0x80
0F6F C0E0      3488            push    acc
0F71 7458      3489            mov     a,#_buff
0F73 C0E0      3490            push    acc
0F75 744D      3491            mov     a,#(_buff >> 8)
0F77 C0E0      3492            push    acc
0F79 7440      3493            mov     a,#0x40
0F7B C0E0      3494            push    acc
0F7D 120000    3495            lcall   _sscanf
0F80 E581      3496            mov     a,sp
0F82 24F1      3497            add     a,#0xf1
0F84 F581      3498            mov     sp,a
0F86           3499   ;        EFM8_JDY40_test.c:1001: if (which == 0 )
0F86 E510      3500            mov     a,_main_which_1_198
0F88 4511      3501            orl     a,(_main_which_1_198 + 1)
0F8A 7000      3502            jnz     L034013?
0F8C           3503   ;        EFM8_JDY40_test.c:1003: P2_5 = 0;
0F8C C2A5      3504            clr     _P2_5
0F8E           3505   ;        EFM8_JDY40_test.c:1004: P3_7=0;
0F8E C2B7      3506            clr     _P3_7
0F90           3507   ;        EFM8_JDY40_test.c:1005: direction = 1;
0F90 751801    3508            mov     _direction,#0x01
0F93 E4        3509            clr     a
0F94 F519      3510            mov     (_direction + 1),a
0F96 8000      3511            sjmp    L034014?
0F98           3512   L034013?:
0F98           3513   ;        EFM8_JDY40_test.c:1009: P3_2=0;
0F98 C2B2      3514            clr     _P3_2
0F9A           3515   ;        EFM8_JDY40_test.c:1010: P3_0=0;
0F9A C2B0      3516            clr     _P3_0
0F9C           3517   ;        EFM8_JDY40_test.c:1011: direction = 0;
0F9C E4        3518            clr     a
0F9D F518      3519            mov     _direction,a
0F9F F519      3520            mov     (_direction + 1),a
0FA1           3521   L034014?:
0FA1           3522   ;        EFM8_JDY40_test.c:1015: pwm_duty4 = adcwheel2;
0FA1 85B8D8    3523            mov     _pwm_duty4,_main_adcwheel2_1_198
0FA4 85B9D9    3524            mov     (_pwm_duty4 + 1),(_main_adcwheel2_1_198 + 1)
0FA7           3525   ;        EFM8_JDY40_test.c:1016: if ( adcwheel1 == 5535 ) adcwheel1 = 65535;
0FA7 749F      3526            mov     a,#0x9F
0FA9 B56820    3527            cjne    a,_main_adcwheel1_1_198,L034016?
0FAC 7415      3528            mov     a,#0x15
0FAE B56920    3529            cjne    a,(_main_adcwheel1_1_198 + 1),L034016?
0FB1 7568FF    3530            mov     _main_adcwheel1_1_198,#0xFF
0FB4 7569FF    3531            mov     (_main_adcwheel1_1_198 + 1),#0xFF
0FB7           3532   L034016?:
0FB7           3533   ;        EFM8_JDY40_test.c:1017: if ( adcwheel1 == 5086 ) adcwheel1 = 65535;
0FB7 74DE      3534            mov     a,#0xDE
0FB9 B56860    3535            cjne    a,_main_adcwheel1_1_198,L034018?
0FBC 7413      3536            mov     a,#0x13
0FBE B56960    3537            cjne    a,(_main_adcwheel1_1_198 + 1),L034018?
0FC1 7568FF    3538            mov     _main_adcwheel1_1_198,#0xFF
0FC4 7569FF    3539            mov     (_main_adcwheel1_1_198 + 1),#0xFF
0FC7           3540   L034018?:
0FC7           3541   ;        EFM8_JDY40_test.c:1018: if ( adcwheel1 == 535 ) adcwheel1 = 65535;
0FC7 7417      3542            mov     a,#0x17
0FC9 B568A0    3543            cjne    a,_main_adcwheel1_1_198,L034020?
0FCC 7402      3544            mov     a,#0x02
0FCE B569A0    3545            cjne    a,(_main_adcwheel1_1_198 + 1),L034020?
0FD1 7568FF    3546            mov     _main_adcwheel1_1_198,#0xFF
0FD4 7569FF    3547            mov     (_main_adcwheel1_1_198 + 1),#0xFF
0FD7           3548   L034020?:
0FD7           3549   ;        EFM8_JDY40_test.c:1019: if ( adcwheel1 == 86 ) adcwheel1 = 65535;
0FD7 7456      3550            mov     a,#0x56
0FD9 B568E0    3551            cjne    a,_main_adcwheel1_1_198,L034107?
0FDC E4        3552            clr     a
0FDD B569E0    3553            cjne    a,(_main_adcwheel1_1_198 + 1),L034107?
0FE0 8000      3554            sjmp    L034108?
0FE2           3555   L034107?:
0FE2 8000      3556            sjmp    L034022?
0FE4           3557   L034108?:
0FE4 7568FF    3558            mov     _main_adcwheel1_1_198,#0xFF
0FE7 7569FF    3559            mov     (_main_adcwheel1_1_198 + 1),#0xFF
0FEA           3560   L034022?:
0FEA           3561   ;        EFM8_JDY40_test.c:1020: pwm_duty2 = adcwheel1;
0FEA 856858    3562            mov     _pwm_duty2,_main_adcwheel1_1_198
0FED 856959    3563            mov     (_pwm_duty2 + 1),(_main_adcwheel1_1_198 + 1)
0FF0           3564   ;        EFM8_JDY40_test.c:1023: waitms(5); // The radio seems to need this delay...
0FF0 900005    3565            mov     dptr,#0x0005
0FF3 120000    3566            lcall   _waitms
0FF6 020000    3567            ljmp    L034026?
0FF9           3568            rseg R_CSEG
0FF9           3569   
0000           3570            rseg R_XINIT
0000           3571   
0000           3572            rseg R_CONST
0000           3573   _customMouth:
0000 0E        3574            db 0x0e         ; 14
0001 04        3575            db 0x04         ; 4
0002 00        3576            db 0x00         ; 0
0003 00        3577            db 0x00         ; 0
0004 11        3578            db 0x11         ; 17
0005 15        3579            db 0x15         ; 21
0006 0A        3580            db 0x0a         ; 10
0007 00        3581            db 0x00         ; 0
0008           3582   _customEye:
0008 00        3583            db 0x00         ; 0
0009 0E        3584            db 0x0e         ; 14
000A 19        3585            db 0x19         ; 25
000B 19        3586            db 0x19         ; 25
000C 1F        3587            db 0x1f         ; 31
000D 17        3588            db 0x17         ; 23
000E 0E        3589            db 0x0e         ; 14
000F 00        3590            db 0x00         ; 0
0010           3591   _customOpenMouth:
0010 0E        3592            db 0x0e         ; 14
0011 04        3593            db 0x04         ; 4
0012 00        3594            db 0x00         ; 0
0013 0E        3595            db 0x0e         ; 14
0014 11        3596            db 0x11         ; 17
0015 11        3597            db 0x11         ; 17
0016 0E        3598            db 0x0e         ; 14
0017 00        3599            db 0x00         ; 0
0018           3600   _customSparkle:
0018 04        3601            db 0x04         ; 4
0019 04        3602            db 0x04         ; 4
001A 0A        3603            db 0x0a         ; 10
001B 11        3604            db 0x11         ; 17
001C 0A        3605            db 0x0a         ; 10
001D 04        3606            db 0x04         ; 4
001E 04        3607            db 0x04         ; 4
001F 00        3608            db 0x00         ; 0
0020           3609   _customMoney:
0020 04        3610            db 0x04         ; 4
0021 0E        3611            db 0x0e         ; 14
0022 15        3612            db 0x15         ; 21
0023 14        3613            db 0x14         ; 20
0024 0E        3614            db 0x0e         ; 14
0025 05        3615            db 0x05         ; 5
0026 15        3616            db 0x15         ; 21
0027 0E        3617            db 0x0e         ; 14
0028           3618   _customHappyMouth:
0028 0E        3619            db 0x0e         ; 14
0029 04        3620            db 0x04         ; 4
002A 00        3621            db 0x00         ; 0
002B 15        3622            db 0x15         ; 21
002C 0A        3623            db 0x0a         ; 10
002D 0A        3624            db 0x0a         ; 10
002E 0E        3625            db 0x0e         ; 14
002F 00        3626            db 0x00         ; 0
0030           3627   __str_0:
0030 436F6D6D  3628            db 'Command: %s'
     616E643A
     202573
003B 00        3629            db 0x00
003C           3630   __str_1:
003C 52657370  3631            db 'Response: %s'
     6F6E7365
     3A202573
0048 0D        3632            db 0x0D
0049 0A        3633            db 0x0A
004A 00        3634            db 0x00
004B           3635   __str_2:
004B 41542B44  3636            db 'AT+DVID0000'
     56494430
     303030
0056 0D        3637            db 0x0D
0057 0A        3638            db 0x0A
0058 00        3639            db 0x00
0059           3640   _PrintNumber_HexDigit_1_164:
0059 30313233  3641            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0069 00        3642            db 0x00
006A           3643   __str_4:
006A 204E4F20  3644            db ' NO SIGNAL                     '
     5349474E
     414C2020
     20202020
     20202020
     20202020
     20202020
     202020
0089 0D        3645            db 0x0D
008A 00        3646            db 0x00
008B           3647   __str_5:
008B 256C64    3648            db '%ld'
008E 0A        3649            db 0x0A
008F 0D        3650            db 0x0D
0090 00        3651            db 0x00
0091           3652   __str_6:
0091 0D        3653            db 0x0D
0092 0A        3654            db 0x0A
0093 45464D38  3655            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00AE 0D        3656            db 0x0D
00AF 0A        3657            db 0x0A
00B0 00        3658            db 0x00
00B1           3659   __str_7:
00B1 41542B56  3660            db 'AT+VER'
     4552
00B7 0D        3661            db 0x0D
00B8 0A        3662            db 0x0A
00B9 00        3663            db 0x00
00BA           3664   __str_8:
00BA 41542B42  3665            db 'AT+BAUD'
     415544
00C1 0D        3666            db 0x0D
00C2 0A        3667            db 0x0A
00C3 00        3668            db 0x00
00C4           3669   __str_9:
00C4 41542B52  3670            db 'AT+RFID'
     464944
00CB 0D        3671            db 0x0D
00CC 0A        3672            db 0x0A
00CD 00        3673            db 0x00
00CE           3674   __str_10:
00CE 41542B44  3675            db 'AT+DVID'
     564944
00D5 0D        3676            db 0x0D
00D6 0A        3677            db 0x0A
00D7 00        3678            db 0x00
00D8           3679   __str_11:
00D8 41542B52  3680            db 'AT+RFC120'
     46433132
     30
00E1 0D        3681            db 0x0D
00E2 0A        3682            db 0x0A
00E3 00        3683            db 0x00
00E4           3684   __str_12:
00E4 41542B50  3685            db 'AT+POWE'
     4F5745
00EB 0D        3686            db 0x0D
00EC 0A        3687            db 0x0A
00ED 00        3688            db 0x00
00EE           3689   __str_13:
00EE 41542B43  3690            db 'AT+CLSS'
     4C5353
00F5 0D        3691            db 0x0D
00F6 0A        3692            db 0x0A
00F7 00        3693            db 0x00
00F8           3694   __str_14:
00F8 41542B44  3695            db 'AT+DVIDFFFF'
     56494446
     464646
0103 0D        3696            db 0x0D
0104 0A        3697            db 0x0A
0105 00        3698            db 0x00
0106           3699   __str_15:
0106 2530356C  3700            db '%05ld'
     64
010B 0A        3701            db 0x0A
010C 0D        3702            db 0x0D
010D 00        3703            db 0x00
010E           3704   __str_16:
010E 41        3705            db 'A'
010F 00        3706            db 0x00
0110           3707   __str_17:
0110 68656C6C  3708            db 'hello'
     6F
0115 00        3709            db 0x00
0116           3710   __str_18:
0116 53        3711            db 'S'
0117 00        3712            db 0x00
0118           3713   __str_19:
0118 74686973  3714            db 'this should be the motor function'
     2073686F
     756C6420
     62652074
     6865206D
     6F746F72
     2066756E
     6374696F
     6E
0139 00        3715            db 0x00
013A           3716   __str_20:
013A 4B257557  3717            db 'K%uW%uG%d'
     25754725
     64
0143 0A        3718            db 0x0A
0144 00        3719            db 0x00
0145           3720   
0096           3721            CSEG
0096           3722   
0096           3723   end
