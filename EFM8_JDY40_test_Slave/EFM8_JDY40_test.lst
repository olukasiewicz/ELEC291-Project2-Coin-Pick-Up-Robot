0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 05:21:02 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_164
0000             28            public _customHappyMouth
0000             29            public _customMoney
0000             30            public _customSparkle
0000             31            public _customOpenMouth
0000             32            public _customEye
0000             33            public _customMouth
0000             34            public _main
0000             35            public _automaticmode
0000             36            public _servomotion
0000             37            public _LCD_4BIT
0000             38            public _WriteCommand
0000             39            public _WriteData
0000             40            public _LCD_byte
0000             41            public _LCD_pulse
0000             42            public _GetFrequency
0000             43            public _PrintNumber
0000             44            public _eputs
0000             45            public _GetPeriod
0000             46            public _Timer2_ISR
0000             47            public _Timer4_ISR
0000             48            public _Volts_at_Pin
0000             49            public _ADC_at_Pin
0000             50            public _InitPinADC
0000             51            public _InitADC
0000             52            public _TIMER0_Init
0000             53            public _ReceptionOff
0000             54            public _SendATCommand
0000             55            public _waitms_or_RI1
0000             56            public _RXU1
0000             57            public _getstr1
0000             58            public _getchar1_with_timeout
0000             59            public _getchar1
0000             60            public _sendstr1
0000             61            public _putchar1
0000             62            public _UART1_Init
0000             63            public _waitms
0000             64            public _Timer3us
0000             65            public _Timer5_ISR
0000             66            public __c51_external_startup
0000             67            public _msg
0000             68            public _buff
0000             69            public _automaticmode_PARM_3
0000             70            public _automaticmode_PARM_2
0000             71            public _PrintNumber_PARM_3
0000             72            public _PrintNumber_PARM_2
0000             73            public _getstr1_PARM_2
0000             74            public _overflow_count
0000             75            public _cointcount
0000             76            public _servo2
0000             77            public _servo1
0000             78            public _servo_counter
0000             79            public _direction
0000             80            public _pwm_duty2
0000             81            public _pwm_counter2
0000             82            public _pwm_duty4
0000             83            public _pwm_counter4
0000             84   ;--------------------------------------------------------
0000             85   ; Special Function Registers
0000             86   ;--------------------------------------------------------
0000             87   _ACC            DATA 0xe0
0000             88   _ADC0ASAH       DATA 0xb6
0000             89   _ADC0ASAL       DATA 0xb5
0000             90   _ADC0ASCF       DATA 0xa1
0000             91   _ADC0ASCT       DATA 0xc7
0000             92   _ADC0CF0        DATA 0xbc
0000             93   _ADC0CF1        DATA 0xb9
0000             94   _ADC0CF2        DATA 0xdf
0000             95   _ADC0CN0        DATA 0xe8
0000             96   _ADC0CN1        DATA 0xb2
0000             97   _ADC0CN2        DATA 0xb3
0000             98   _ADC0GTH        DATA 0xc4
0000             99   _ADC0GTL        DATA 0xc3
0000            100   _ADC0H          DATA 0xbe
0000            101   _ADC0L          DATA 0xbd
0000            102   _ADC0LTH        DATA 0xc6
0000            103   _ADC0LTL        DATA 0xc5
0000            104   _ADC0MX         DATA 0xbb
0000            105   _B              DATA 0xf0
0000            106   _CKCON0         DATA 0x8e
0000            107   _CKCON1         DATA 0xa6
0000            108   _CLEN0          DATA 0xc6
0000            109   _CLIE0          DATA 0xc7
0000            110   _CLIF0          DATA 0xe8
0000            111   _CLKSEL         DATA 0xa9
0000            112   _CLOUT0         DATA 0xd1
0000            113   _CLU0CF         DATA 0xb1
0000            114   _CLU0FN         DATA 0xaf
0000            115   _CLU0MX         DATA 0x84
0000            116   _CLU1CF         DATA 0xb3
0000            117   _CLU1FN         DATA 0xb2
0000            118   _CLU1MX         DATA 0x85
0000            119   _CLU2CF         DATA 0xb6
0000            120   _CLU2FN         DATA 0xb5
0000            121   _CLU2MX         DATA 0x91
0000            122   _CLU3CF         DATA 0xbf
0000            123   _CLU3FN         DATA 0xbe
0000            124   _CLU3MX         DATA 0xae
0000            125   _CMP0CN0        DATA 0x9b
0000            126   _CMP0CN1        DATA 0x99
0000            127   _CMP0MD         DATA 0x9d
0000            128   _CMP0MX         DATA 0x9f
0000            129   _CMP1CN0        DATA 0xbf
0000            130   _CMP1CN1        DATA 0xac
0000            131   _CMP1MD         DATA 0xab
0000            132   _CMP1MX         DATA 0xaa
0000            133   _CRC0CN0        DATA 0xce
0000            134   _CRC0CN1        DATA 0x86
0000            135   _CRC0CNT        DATA 0xd3
0000            136   _CRC0DAT        DATA 0xcb
0000            137   _CRC0FLIP       DATA 0xcf
0000            138   _CRC0IN         DATA 0xca
0000            139   _CRC0ST         DATA 0xd2
0000            140   _DAC0CF0        DATA 0x91
0000            141   _DAC0CF1        DATA 0x92
0000            142   _DAC0H          DATA 0x85
0000            143   _DAC0L          DATA 0x84
0000            144   _DAC1CF0        DATA 0x93
0000            145   _DAC1CF1        DATA 0x94
0000            146   _DAC1H          DATA 0x8a
0000            147   _DAC1L          DATA 0x89
0000            148   _DAC2CF0        DATA 0x95
0000            149   _DAC2CF1        DATA 0x96
0000            150   _DAC2H          DATA 0x8c
0000            151   _DAC2L          DATA 0x8b
0000            152   _DAC3CF0        DATA 0x9a
0000            153   _DAC3CF1        DATA 0x9c
0000            154   _DAC3H          DATA 0x8e
0000            155   _DAC3L          DATA 0x8d
0000            156   _DACGCF0        DATA 0x88
0000            157   _DACGCF1        DATA 0x98
0000            158   _DACGCF2        DATA 0xa2
0000            159   _DERIVID        DATA 0xad
0000            160   _DEVICEID       DATA 0xb5
0000            161   _DPH            DATA 0x83
0000            162   _DPL            DATA 0x82
0000            163   _EIE1           DATA 0xe6
0000            164   _EIE2           DATA 0xf3
0000            165   _EIP1           DATA 0xbb
0000            166   _EIP1H          DATA 0xee
0000            167   _EIP2           DATA 0xed
0000            168   _EIP2H          DATA 0xf6
0000            169   _EMI0CN         DATA 0xe7
0000            170   _FLKEY          DATA 0xb7
0000            171   _HFO0CAL        DATA 0xc7
0000            172   _HFO1CAL        DATA 0xd6
0000            173   _HFOCN          DATA 0xef
0000            174   _I2C0ADM        DATA 0xff
0000            175   _I2C0CN0        DATA 0xba
0000            176   _I2C0DIN        DATA 0xbc
0000            177   _I2C0DOUT       DATA 0xbb
0000            178   _I2C0FCN0       DATA 0xad
0000            179   _I2C0FCN1       DATA 0xab
0000            180   _I2C0FCT        DATA 0xf5
0000            181   _I2C0SLAD       DATA 0xbd
0000            182   _I2C0STAT       DATA 0xb9
0000            183   _IE             DATA 0xa8
0000            184   _IP             DATA 0xb8
0000            185   _IPH            DATA 0xf2
0000            186   _IT01CF         DATA 0xe4
0000            187   _LFO0CN         DATA 0xb1
0000            188   _P0             DATA 0x80
0000            189   _P0MASK         DATA 0xfe
0000            190   _P0MAT          DATA 0xfd
0000            191   _P0MDIN         DATA 0xf1
0000            192   _P0MDOUT        DATA 0xa4
0000            193   _P0SKIP         DATA 0xd4
0000            194   _P1             DATA 0x90
0000            195   _P1MASK         DATA 0xee
0000            196   _P1MAT          DATA 0xed
0000            197   _P1MDIN         DATA 0xf2
0000            198   _P1MDOUT        DATA 0xa5
0000            199   _P1SKIP         DATA 0xd5
0000            200   _P2             DATA 0xa0
0000            201   _P2MASK         DATA 0xfc
0000            202   _P2MAT          DATA 0xfb
0000            203   _P2MDIN         DATA 0xf3
0000            204   _P2MDOUT        DATA 0xa6
0000            205   _P2SKIP         DATA 0xcc
0000            206   _P3             DATA 0xb0
0000            207   _P3MDIN         DATA 0xf4
0000            208   _P3MDOUT        DATA 0x9c
0000            209   _PCA0CENT       DATA 0x9e
0000            210   _PCA0CLR        DATA 0x9c
0000            211   _PCA0CN0        DATA 0xd8
0000            212   _PCA0CPH0       DATA 0xfc
0000            213   _PCA0CPH1       DATA 0xea
0000            214   _PCA0CPH2       DATA 0xec
0000            215   _PCA0CPH3       DATA 0xf5
0000            216   _PCA0CPH4       DATA 0x85
0000            217   _PCA0CPH5       DATA 0xde
0000            218   _PCA0CPL0       DATA 0xfb
0000            219   _PCA0CPL1       DATA 0xe9
0000            220   _PCA0CPL2       DATA 0xeb
0000            221   _PCA0CPL3       DATA 0xf4
0000            222   _PCA0CPL4       DATA 0x84
0000            223   _PCA0CPL5       DATA 0xdd
0000            224   _PCA0CPM0       DATA 0xda
0000            225   _PCA0CPM1       DATA 0xdb
0000            226   _PCA0CPM2       DATA 0xdc
0000            227   _PCA0CPM3       DATA 0xae
0000            228   _PCA0CPM4       DATA 0xaf
0000            229   _PCA0CPM5       DATA 0xcc
0000            230   _PCA0H          DATA 0xfa
0000            231   _PCA0L          DATA 0xf9
0000            232   _PCA0MD         DATA 0xd9
0000            233   _PCA0POL        DATA 0x96
0000            234   _PCA0PWM        DATA 0xf7
0000            235   _PCON0          DATA 0x87
0000            236   _PCON1          DATA 0xcd
0000            237   _PFE0CN         DATA 0xc1
0000            238   _PRTDRV         DATA 0xf6
0000            239   _PSCTL          DATA 0x8f
0000            240   _PSTAT0         DATA 0xaa
0000            241   _PSW            DATA 0xd0
0000            242   _REF0CN         DATA 0xd1
0000            243   _REG0CN         DATA 0xc9
0000            244   _REVID          DATA 0xb6
0000            245   _RSTSRC         DATA 0xef
0000            246   _SBCON1         DATA 0x94
0000            247   _SBRLH1         DATA 0x96
0000            248   _SBRLL1         DATA 0x95
0000            249   _SBUF           DATA 0x99
0000            250   _SBUF0          DATA 0x99
0000            251   _SBUF1          DATA 0x92
0000            252   _SCON           DATA 0x98
0000            253   _SCON0          DATA 0x98
0000            254   _SCON1          DATA 0xc8
0000            255   _SFRPAGE        DATA 0xa7
0000            256   _SFRPGCN        DATA 0xbc
0000            257   _SFRSTACK       DATA 0xd7
0000            258   _SMB0ADM        DATA 0xd6
0000            259   _SMB0ADR        DATA 0xd7
0000            260   _SMB0CF         DATA 0xc1
0000            261   _SMB0CN0        DATA 0xc0
0000            262   _SMB0DAT        DATA 0xc2
0000            263   _SMB0FCN0       DATA 0xc3
0000            264   _SMB0FCN1       DATA 0xc4
0000            265   _SMB0FCT        DATA 0xef
0000            266   _SMB0RXLN       DATA 0xc5
0000            267   _SMB0TC         DATA 0xac
0000            268   _SMOD1          DATA 0x93
0000            269   _SP             DATA 0x81
0000            270   _SPI0CFG        DATA 0xa1
0000            271   _SPI0CKR        DATA 0xa2
0000            272   _SPI0CN0        DATA 0xf8
0000            273   _SPI0DAT        DATA 0xa3
0000            274   _SPI0FCN0       DATA 0x9a
0000            275   _SPI0FCN1       DATA 0x9b
0000            276   _SPI0FCT        DATA 0xf7
0000            277   _SPI0PCF        DATA 0xdf
0000            278   _TCON           DATA 0x88
0000            279   _TH0            DATA 0x8c
0000            280   _TH1            DATA 0x8d
0000            281   _TL0            DATA 0x8a
0000            282   _TL1            DATA 0x8b
0000            283   _TMOD           DATA 0x89
0000            284   _TMR2CN0        DATA 0xc8
0000            285   _TMR2CN1        DATA 0xfd
0000            286   _TMR2H          DATA 0xcf
0000            287   _TMR2L          DATA 0xce
0000            288   _TMR2RLH        DATA 0xcb
0000            289   _TMR2RLL        DATA 0xca
0000            290   _TMR3CN0        DATA 0x91
0000            291   _TMR3CN1        DATA 0xfe
0000            292   _TMR3H          DATA 0x95
0000            293   _TMR3L          DATA 0x94
0000            294   _TMR3RLH        DATA 0x93
0000            295   _TMR3RLL        DATA 0x92
0000            296   _TMR4CN0        DATA 0x98
0000            297   _TMR4CN1        DATA 0xff
0000            298   _TMR4H          DATA 0xa5
0000            299   _TMR4L          DATA 0xa4
0000            300   _TMR4RLH        DATA 0xa3
0000            301   _TMR4RLL        DATA 0xa2
0000            302   _TMR5CN0        DATA 0xc0
0000            303   _TMR5CN1        DATA 0xf1
0000            304   _TMR5H          DATA 0xd5
0000            305   _TMR5L          DATA 0xd4
0000            306   _TMR5RLH        DATA 0xd3
0000            307   _TMR5RLL        DATA 0xd2
0000            308   _UART0PCF       DATA 0xd9
0000            309   _UART1FCN0      DATA 0x9d
0000            310   _UART1FCN1      DATA 0xd8
0000            311   _UART1FCT       DATA 0xfa
0000            312   _UART1LIN       DATA 0x9e
0000            313   _UART1PCF       DATA 0xda
0000            314   _VDM0CN         DATA 0xff
0000            315   _WDTCN          DATA 0x97
0000            316   _XBR0           DATA 0xe1
0000            317   _XBR1           DATA 0xe2
0000            318   _XBR2           DATA 0xe3
0000            319   _XOSC0CN        DATA 0x86
0000            320   _DPTR           DATA 0x8382
0000            321   _TMR2RL         DATA 0xcbca
0000            322   _TMR3RL         DATA 0x9392
0000            323   _TMR4RL         DATA 0xa3a2
0000            324   _TMR5RL         DATA 0xd3d2
0000            325   _TMR0           DATA 0x8c8a
0000            326   _TMR1           DATA 0x8d8b
0000            327   _TMR2           DATA 0xcfce
0000            328   _TMR3           DATA 0x9594
0000            329   _TMR4           DATA 0xa5a4
0000            330   _TMR5           DATA 0xd5d4
0000            331   _SBRL1          DATA 0x9695
0000            332   _PCA0           DATA 0xfaf9
0000            333   _PCA0CP0        DATA 0xfcfb
0000            334   _PCA0CP1        DATA 0xeae9
0000            335   _PCA0CP2        DATA 0xeceb
0000            336   _PCA0CP3        DATA 0xf5f4
0000            337   _PCA0CP4        DATA 0x8584
0000            338   _PCA0CP5        DATA 0xdedd
0000            339   _ADC0ASA        DATA 0xb6b5
0000            340   _ADC0GT         DATA 0xc4c3
0000            341   _ADC0           DATA 0xbebd
0000            342   _ADC0LT         DATA 0xc6c5
0000            343   _DAC0           DATA 0x8584
0000            344   _DAC1           DATA 0x8a89
0000            345   _DAC2           DATA 0x8c8b
0000            346   _DAC3           DATA 0x8e8d
0000            347   ;--------------------------------------------------------
0000            348   ; special function bits
0000            349   ;--------------------------------------------------------
0000            350   _ACC_0          BIT 0xe0
0000            351   _ACC_1          BIT 0xe1
0000            352   _ACC_2          BIT 0xe2
0000            353   _ACC_3          BIT 0xe3
0000            354   _ACC_4          BIT 0xe4
0000            355   _ACC_5          BIT 0xe5
0000            356   _ACC_6          BIT 0xe6
0000            357   _ACC_7          BIT 0xe7
0000            358   _TEMPE          BIT 0xe8
0000            359   _ADGN0          BIT 0xe9
0000            360   _ADGN1          BIT 0xea
0000            361   _ADWINT         BIT 0xeb
0000            362   _ADBUSY         BIT 0xec
0000            363   _ADINT          BIT 0xed
0000            364   _IPOEN          BIT 0xee
0000            365   _ADEN           BIT 0xef
0000            366   _B_0            BIT 0xf0
0000            367   _B_1            BIT 0xf1
0000            368   _B_2            BIT 0xf2
0000            369   _B_3            BIT 0xf3
0000            370   _B_4            BIT 0xf4
0000            371   _B_5            BIT 0xf5
0000            372   _B_6            BIT 0xf6
0000            373   _B_7            BIT 0xf7
0000            374   _C0FIF          BIT 0xe8
0000            375   _C0RIF          BIT 0xe9
0000            376   _C1FIF          BIT 0xea
0000            377   _C1RIF          BIT 0xeb
0000            378   _C2FIF          BIT 0xec
0000            379   _C2RIF          BIT 0xed
0000            380   _C3FIF          BIT 0xee
0000            381   _C3RIF          BIT 0xef
0000            382   _D1SRC0         BIT 0x88
0000            383   _D1SRC1         BIT 0x89
0000            384   _D1AMEN         BIT 0x8a
0000            385   _D01REFSL       BIT 0x8b
0000            386   _D3SRC0         BIT 0x8c
0000            387   _D3SRC1         BIT 0x8d
0000            388   _D3AMEN         BIT 0x8e
0000            389   _D23REFSL       BIT 0x8f
0000            390   _D0UDIS         BIT 0x98
0000            391   _D1UDIS         BIT 0x99
0000            392   _D2UDIS         BIT 0x9a
0000            393   _D3UDIS         BIT 0x9b
0000            394   _EX0            BIT 0xa8
0000            395   _ET0            BIT 0xa9
0000            396   _EX1            BIT 0xaa
0000            397   _ET1            BIT 0xab
0000            398   _ES0            BIT 0xac
0000            399   _ET2            BIT 0xad
0000            400   _ESPI0          BIT 0xae
0000            401   _EA             BIT 0xaf
0000            402   _PX0            BIT 0xb8
0000            403   _PT0            BIT 0xb9
0000            404   _PX1            BIT 0xba
0000            405   _PT1            BIT 0xbb
0000            406   _PS0            BIT 0xbc
0000            407   _PT2            BIT 0xbd
0000            408   _PSPI0          BIT 0xbe
0000            409   _P0_0           BIT 0x80
0000            410   _P0_1           BIT 0x81
0000            411   _P0_2           BIT 0x82
0000            412   _P0_3           BIT 0x83
0000            413   _P0_4           BIT 0x84
0000            414   _P0_5           BIT 0x85
0000            415   _P0_6           BIT 0x86
0000            416   _P0_7           BIT 0x87
0000            417   _P1_0           BIT 0x90
0000            418   _P1_1           BIT 0x91
0000            419   _P1_2           BIT 0x92
0000            420   _P1_3           BIT 0x93
0000            421   _P1_4           BIT 0x94
0000            422   _P1_5           BIT 0x95
0000            423   _P1_6           BIT 0x96
0000            424   _P1_7           BIT 0x97
0000            425   _P2_0           BIT 0xa0
0000            426   _P2_1           BIT 0xa1
0000            427   _P2_2           BIT 0xa2
0000            428   _P2_3           BIT 0xa3
0000            429   _P2_4           BIT 0xa4
0000            430   _P2_5           BIT 0xa5
0000            431   _P2_6           BIT 0xa6
0000            432   _P3_0           BIT 0xb0
0000            433   _P3_1           BIT 0xb1
0000            434   _P3_2           BIT 0xb2
0000            435   _P3_3           BIT 0xb3
0000            436   _P3_4           BIT 0xb4
0000            437   _P3_7           BIT 0xb7
0000            438   _CCF0           BIT 0xd8
0000            439   _CCF1           BIT 0xd9
0000            440   _CCF2           BIT 0xda
0000            441   _CCF3           BIT 0xdb
0000            442   _CCF4           BIT 0xdc
0000            443   _CCF5           BIT 0xdd
0000            444   _CR             BIT 0xde
0000            445   _CF             BIT 0xdf
0000            446   _PARITY         BIT 0xd0
0000            447   _F1             BIT 0xd1
0000            448   _OV             BIT 0xd2
0000            449   _RS0            BIT 0xd3
0000            450   _RS1            BIT 0xd4
0000            451   _F0             BIT 0xd5
0000            452   _AC             BIT 0xd6
0000            453   _CY             BIT 0xd7
0000            454   _RI             BIT 0x98
0000            455   _TI             BIT 0x99
0000            456   _RB8            BIT 0x9a
0000            457   _TB8            BIT 0x9b
0000            458   _REN            BIT 0x9c
0000            459   _CE             BIT 0x9d
0000            460   _SMODE          BIT 0x9e
0000            461   _RI1            BIT 0xc8
0000            462   _TI1            BIT 0xc9
0000            463   _RBX1           BIT 0xca
0000            464   _TBX1           BIT 0xcb
0000            465   _REN1           BIT 0xcc
0000            466   _PERR1          BIT 0xcd
0000            467   _OVR1           BIT 0xce
0000            468   _SI             BIT 0xc0
0000            469   _ACK            BIT 0xc1
0000            470   _ARBLOST        BIT 0xc2
0000            471   _ACKRQ          BIT 0xc3
0000            472   _STO            BIT 0xc4
0000            473   _STA            BIT 0xc5
0000            474   _TXMODE         BIT 0xc6
0000            475   _MASTER         BIT 0xc7
0000            476   _SPIEN          BIT 0xf8
0000            477   _TXNF           BIT 0xf9
0000            478   _NSSMD0         BIT 0xfa
0000            479   _NSSMD1         BIT 0xfb
0000            480   _RXOVRN         BIT 0xfc
0000            481   _MODF           BIT 0xfd
0000            482   _WCOL           BIT 0xfe
0000            483   _SPIF           BIT 0xff
0000            484   _IT0            BIT 0x88
0000            485   _IE0            BIT 0x89
0000            486   _IT1            BIT 0x8a
0000            487   _IE1            BIT 0x8b
0000            488   _TR0            BIT 0x8c
0000            489   _TF0            BIT 0x8d
0000            490   _TR1            BIT 0x8e
0000            491   _TF1            BIT 0x8f
0000            492   _T2XCLK0        BIT 0xc8
0000            493   _T2XCLK1        BIT 0xc9
0000            494   _TR2            BIT 0xca
0000            495   _T2SPLIT        BIT 0xcb
0000            496   _TF2CEN         BIT 0xcc
0000            497   _TF2LEN         BIT 0xcd
0000            498   _TF2L           BIT 0xce
0000            499   _TF2H           BIT 0xcf
0000            500   _T4XCLK0        BIT 0x98
0000            501   _T4XCLK1        BIT 0x99
0000            502   _TR4            BIT 0x9a
0000            503   _T4SPLIT        BIT 0x9b
0000            504   _TF4CEN         BIT 0x9c
0000            505   _TF4LEN         BIT 0x9d
0000            506   _TF4L           BIT 0x9e
0000            507   _TF4H           BIT 0x9f
0000            508   _T5XCLK0        BIT 0xc0
0000            509   _T5XCLK1        BIT 0xc1
0000            510   _TR5            BIT 0xc2
0000            511   _T5SPLIT        BIT 0xc3
0000            512   _TF5CEN         BIT 0xc4
0000            513   _TF5LEN         BIT 0xc5
0000            514   _TF5L           BIT 0xc6
0000            515   _TF5H           BIT 0xc7
0000            516   _RIE            BIT 0xd8
0000            517   _RXTO0          BIT 0xd9
0000            518   _RXTO1          BIT 0xda
0000            519   _RFRQ           BIT 0xdb
0000            520   _TIE            BIT 0xdc
0000            521   _TXHOLD         BIT 0xdd
0000            522   _TXNF1          BIT 0xde
0000            523   _TFRQ           BIT 0xdf
0000            524   ;--------------------------------------------------------
0000            525   ; overlayable register banks
0000            526   ;--------------------------------------------------------
0000            527            rbank0 segment data overlay
0000            528   ;--------------------------------------------------------
0000            529   ; internal ram data
0000            530   ;--------------------------------------------------------
0000            531            rseg R_DSEG
0000            532   _pwm_counter4:
0000            533            ds 2
0002            534   _pwm_duty4:
0002            535            ds 2
0004            536   _pwm_counter2:
0004            537            ds 2
0006            538   _pwm_duty2:
0006            539            ds 2
0008            540   _direction:
0008            541            ds 2
000A            542   _servo_counter:
000A            543            ds 2
000C            544   _servo1:
000C            545            ds 1
000D            546   _servo2:
000D            547            ds 1
000E            548   _cointcount:
000E            549            ds 2
0010            550   _overflow_count:
0010            551            ds 1
0011            552   _getstr1_PARM_2:
0011            553            ds 1
0012            554   _PrintNumber_PARM_2:
0012            555            ds 2
0014            556   _PrintNumber_PARM_3:
0014            557            ds 2
0016            558   _PrintNumber_val_1_163:
0016            559            ds 4
001A            560   _PrintNumber_j_1_164:
001A            561            ds 2
001C            562   _PrintNumber_sloc0_1_0:
001C            563            ds 2
001E            564   _PrintNumber_sloc1_1_0:
001E            565            ds 4
0022            566   _automaticmode_PARM_2:
0022            567            ds 4
0026            568   _automaticmode_PARM_3:
0026            569            ds 4
002A            570   _main_adcwheel1_1_199:
002A            571            ds 2
002C            572   _main_adcwheel2_1_199:
002C            573            ds 2
002E            574   _main_which_1_199:
002E            575            ds 2
0030            576   _main_f_1_199:
0030            577            ds 4
0034            578   _main_v_1_199:
0034            579            ds 8
003C            580   _main_sloc0_1_0:
003C            581            ds 4
0040            582   ;--------------------------------------------------------
0040            583   ; overlayable items in internal ram 
0040            584   ;--------------------------------------------------------
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589   _InitPinADC_PARM_2:
0000            590            ds 1
0001            591            rseg    R_OSEG
0001            592            rseg    R_OSEG
0001            593   ;--------------------------------------------------------
0001            594   ; indirectly addressable internal ram data
0001            595   ;--------------------------------------------------------
0000            596            rseg R_ISEG
0000            597   _buff:
0000            598            ds 20
0014            599   _msg:
0014            600            ds 20
0028            601   ;--------------------------------------------------------
0028            602   ; absolute internal ram data
0028            603   ;--------------------------------------------------------
0000            604            DSEG
0000            605   ;--------------------------------------------------------
0000            606   ; bit data
0000            607   ;--------------------------------------------------------
0000            608            rseg R_BSEG
0000            609   ;--------------------------------------------------------
0000            610   ; paged external ram data
0000            611   ;--------------------------------------------------------
0000            612            rseg R_PSEG
0000            613   ;--------------------------------------------------------
0000            614   ; external ram data
0000            615   ;--------------------------------------------------------
0000            616            rseg R_XSEG
0000            617   _PrintNumber_buff_1_164:
0000            618            ds 33
0021            619   ;--------------------------------------------------------
0021            620   ; absolute external ram data
0021            621   ;--------------------------------------------------------
0000            622            XSEG
0000            623   ;--------------------------------------------------------
0000            624   ; external initialized ram data
0000            625   ;--------------------------------------------------------
0000            626            rseg R_IXSEG
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_CSEG
0000            630   ;--------------------------------------------------------
0000            631   ; Reset entry point and interrupt vectors
0000            632   ;--------------------------------------------------------
0000            633            CSEG at 0x0000
0000 020000     634            ljmp    _crt0
002B            635            CSEG at 0x002b
002B 020000     636            ljmp    _Timer2_ISR
008B            637            CSEG at 0x008b
008B 020000     638            ljmp    _Timer4_ISR
0093            639            CSEG at 0x0093
0093 020000     640            ljmp    _Timer5_ISR
0096            641   ;--------------------------------------------------------
0096            642   ; global & static initialisations
0096            643   ;--------------------------------------------------------
0000            644            rseg R_HOME
0000            645            rseg R_GSINIT
0000            646            rseg R_GSINIT
0000            647   ;--------------------------------------------------------
0000            648   ; data variables initialization
0000            649   ;--------------------------------------------------------
0000            650            rseg R_DINIT
0000            651   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         652            clr     a
0001 F558       653            mov     _pwm_counter4,a
0003 F559       654            mov     (_pwm_counter4 + 1),a
0005            655   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0?65535)
0005 7518FF     656            mov     _pwm_duty4,#0xFF
0008 7519FF     657            mov     (_pwm_duty4 + 1),#0xFF
000B            658   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         659            clr     a
000C F5D8       660            mov     _pwm_counter2,a
000E F5D9       661            mov     (_pwm_counter2 + 1),a
0010            662   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0?65535)
0010 7598FF     663            mov     _pwm_duty2,#0xFF
0013 7599FF     664            mov     (_pwm_duty2 + 1),#0xFF
0016            665   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         666            clr     a
0017 F558       667            mov     _direction,a
0019 F559       668            mov     (_direction + 1),a
001B            669   ;        EFM8_JDY40_test.c:41: volatile unsigned int servo_counter=0;
001B E4         670            clr     a
001C F518       671            mov     _servo_counter,a
001E F519       672            mov     (_servo_counter + 1),a
0020            673   ;        EFM8_JDY40_test.c:42: volatile unsigned char servo1=250, servo2=250;
0020 75D8FA     674            mov     _servo1,#0xFA
0023            675   ;        EFM8_JDY40_test.c:42: volatile unsigned int cointcount =0;
0023 7598FA     676            mov     _servo2,#0xFA
0026            677   ;        EFM8_JDY40_test.c:43: /////////////////////////////LCD//////////////////////////
0026 E4         678            clr     a
0027 F558       679            mov     _cointcount,a
0029 F559       680            mov     (_cointcount + 1),a
002B            681            ; The linker places a 'ret' at the end of segment R_DINIT.
002B            682   ;--------------------------------------------------------
002B            683   ; code
002B            684   ;--------------------------------------------------------
0000            685            rseg R_CSEG
0000            686   ;------------------------------------------------------------
0000            687   ;Allocation info for local variables in function '_c51_external_startup'
0000            688   ;------------------------------------------------------------
0000            689   ;------------------------------------------------------------
0000            690   ;        EFM8_JDY40_test.c:70: char _c51_external_startup (void)
0000            691   ;        -----------------------------------------
0000            692   ;         function _c51_external_startup
0000            693   ;        -----------------------------------------
0000            694   __c51_external_startup:
0000            695            using   0
0000            696   ;        EFM8_JDY40_test.c:73: SFRPAGE = 0x00;
0000 75A700     697            mov     _SFRPAGE,#0x00
0003            698   ;        EFM8_JDY40_test.c:74: WDTCN = 0xDE; //First key
0003 7597DE     699            mov     _WDTCN,#0xDE
0006            700   ;        EFM8_JDY40_test.c:75: WDTCN = 0xAD; //Second key
0006 7597AD     701            mov     _WDTCN,#0xAD
0009            702   ;        EFM8_JDY40_test.c:77: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     703            mov     _VDM0CN,#0x80
000C            704   ;        EFM8_JDY40_test.c:78: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     705            mov     _RSTSRC,#0x06
000F            706   ;        EFM8_JDY40_test.c:85: SFRPAGE = 0x10;
000F 75A710     707            mov     _SFRPAGE,#0x10
0012            708   ;        EFM8_JDY40_test.c:86: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     709            mov     _PFE0CN,#0x20
0015            710   ;        EFM8_JDY40_test.c:87: SFRPAGE = 0x00;
0015 75A700     711            mov     _SFRPAGE,#0x00
0018            712   ;        EFM8_JDY40_test.c:108: CLKSEL = 0x00;
0018 75A900     713            mov     _CLKSEL,#0x00
001B            714   ;        EFM8_JDY40_test.c:109: CLKSEL = 0x00;
001B 75A900     715            mov     _CLKSEL,#0x00
001E            716   ;        EFM8_JDY40_test.c:110: while ((CLKSEL & 0x80) == 0);
001E            717   L002001?:
001E E5A9       718            mov     a,_CLKSEL
0020 30E7D8     719            jnb     acc.7,L002001?
0023            720   ;        EFM8_JDY40_test.c:111: CLKSEL = 0x03;
0023 75A903     721            mov     _CLKSEL,#0x03
0026            722   ;        EFM8_JDY40_test.c:112: CLKSEL = 0x03;
0026 75A903     723            mov     _CLKSEL,#0x03
0029            724   ;        EFM8_JDY40_test.c:113: while ((CLKSEL & 0x80) == 0);
0029            725   L002004?:
0029 E5A9       726            mov     a,_CLKSEL
002B 30E758     727            jnb     acc.7,L002004?
002E            728   ;        EFM8_JDY40_test.c:118: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     729            orl     _P0MDOUT,#0x11
0031            730   ;        EFM8_JDY40_test.c:119: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     731            orl     _P2MDOUT,#0x01
0034            732   ;        EFM8_JDY40_test.c:120: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     733            mov     _XBR0,#0x01
0037            734   ;        EFM8_JDY40_test.c:121: XBR1     = 0X00;
0037 75E200     735            mov     _XBR1,#0x00
003A            736   ;        EFM8_JDY40_test.c:122: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     737            mov     _XBR2,#0x41
003D            738   ;        EFM8_JDY40_test.c:124: P3MDOUT |= 0b10000101;
003D 439C85     739            orl     _P3MDOUT,#0x85
0040            740   ;        EFM8_JDY40_test.c:125: XBR2     = 0x41; // existing line
0040 75E341     741            mov     _XBR2,#0x41
0043            742   ;        EFM8_JDY40_test.c:126: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     743            orl     _P3MDOUT,#0x85
0046            744   ;        EFM8_JDY40_test.c:132: SCON0 = 0x10;
0046 759810     745            mov     _SCON0,#0x10
0049            746   ;        EFM8_JDY40_test.c:133: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     747            mov     _TH1,#0xE6
004C            748   ;        EFM8_JDY40_test.c:134: TL1 = TH1;      // Init Timer1
004C 858D8B     749            mov     _TL1,_TH1
004F            750   ;        EFM8_JDY40_test.c:135: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     751            anl     _TMOD,#0x0F
0052            752   ;        EFM8_JDY40_test.c:136: TMOD |=  0x20;                       
0052 438920     753            orl     _TMOD,#0x20
0055            754   ;        EFM8_JDY40_test.c:137: TR1 = 1; // START Timer1
0055 D28E       755            setb    _TR1
0057            756   ;        EFM8_JDY40_test.c:138: TI = 1;  // Indicate TX0 ready
0057 D299       757            setb    _TI
0059            758   ;        EFM8_JDY40_test.c:142: SFRPAGE=0x10;
0059 75A710     759            mov     _SFRPAGE,#0x10
005C            760   ;        EFM8_JDY40_test.c:143: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     761            mov     _TMR4CN0,#0x00
005F            762   ;        EFM8_JDY40_test.c:144: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     763            orl     _CKCON1,#0x01
0062            764   ;        EFM8_JDY40_test.c:145: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     765            mov     _TMR4RL,#0xA8
0065 75A3FD     766            mov     (_TMR4RL >> 8),#0xFD
0068            767   ;        EFM8_JDY40_test.c:146: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     768            mov     _TMR4,#0xFF
006B 75A5FF     769            mov     (_TMR4 >> 8),#0xFF
006E            770   ;        EFM8_JDY40_test.c:147: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     771            orl     _EIE2,#0x04
0071            772   ;        EFM8_JDY40_test.c:148: TR4=1;
0071 D29A       773            setb    _TR4
0073            774   ;        EFM8_JDY40_test.c:149: EA=1;
0073 D2AF       775            setb    _EA
0075            776   ;        EFM8_JDY40_test.c:152: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     777            mov     _TMR2CN0,#0x00
0078            778   ;        EFM8_JDY40_test.c:153: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     779            orl     _CKCON0,#0x10
007B            780   ;        EFM8_JDY40_test.c:154: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     781            mov     _TMR2RL,#0xA8
007E 75CBFD     782            mov     (_TMR2RL >> 8),#0xFD
0081            783   ;        EFM8_JDY40_test.c:155: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     784            mov     _TMR2,#0xFF
0084 75CFFF     785            mov     (_TMR2 >> 8),#0xFF
0087            786   ;        EFM8_JDY40_test.c:156: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       787            setb    _ET2
0089            788   ;        EFM8_JDY40_test.c:157: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       789            setb    _TR2
008B            790   ;        EFM8_JDY40_test.c:158: SFRPAGE=0x00;
008B 75A700     791            mov     _SFRPAGE,#0x00
008E            792   ;        EFM8_JDY40_test.c:161: SFRPAGE=0x10;
008E 75A710     793            mov     _SFRPAGE,#0x10
0091            794   ;        EFM8_JDY40_test.c:162: TMR5CN0=0x00;
0091 75C000     795            mov     _TMR5CN0,#0x00
0094            796   ;        EFM8_JDY40_test.c:163: TMR5=0xffff;   // Set to reload immediately
0094 75D4FF     797            mov     _TMR5,#0xFF
0097 75D5FF     798            mov     (_TMR5 >> 8),#0xFF
009A            799   ;        EFM8_JDY40_test.c:164: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
009A 43F308     800            orl     _EIE2,#0x08
009D            801   ;        EFM8_JDY40_test.c:165: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
009D D2C2       802            setb    _TR5
009F            803   ;        EFM8_JDY40_test.c:167: EA=1;
009F D2AF       804            setb    _EA
00A1            805   ;        EFM8_JDY40_test.c:169: SFRPAGE=0x00;
00A1 75A700     806            mov     _SFRPAGE,#0x00
00A4            807   ;        EFM8_JDY40_test.c:172: return 0;
00A4 758200     808            mov     dpl,#0x00
00A7 22         809            ret
00A8            810   ;------------------------------------------------------------
00A8            811   ;Allocation info for local variables in function 'Timer5_ISR'
00A8            812   ;------------------------------------------------------------
00A8            813   ;------------------------------------------------------------
00A8            814   ;        EFM8_JDY40_test.c:175: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
00A8            815   ;        -----------------------------------------
00A8            816   ;         function Timer5_ISR
00A8            817   ;        -----------------------------------------
00A8            818   _Timer5_ISR:
00A8 C0E0       819            push    acc
00AA C002       820            push    ar2
00AC C003       821            push    ar3
00AE C0D0       822            push    psw
00B0 75D000     823            mov     psw,#0x00
00B3            824   ;        EFM8_JDY40_test.c:177: SFRPAGE=0x10;
00B3 75A710     825            mov     _SFRPAGE,#0x10
00B6            826   ;        EFM8_JDY40_test.c:178: TF5H = 0; // Clear Timer5 interrupt flag
00B6 C2C7       827            clr     _TF5H
00B8            828   ;        EFM8_JDY40_test.c:179: TMR5RL=(0x10000L-(SYSCLK/(12L*100000L)));
00B8 75D2C4     829            mov     _TMR5RL,#0xC4
00BB 75D3FF     830            mov     (_TMR5RL >> 8),#0xFF
00BE            831   ;        EFM8_JDY40_test.c:180: servo_counter++;
00BE 7401       832            mov     a,#0x01
00C0 2518       833            add     a,_servo_counter
00C2 F518       834            mov     _servo_counter,a
00C4 E4         835            clr     a
00C5 3519       836            addc    a,(_servo_counter + 1)
00C7 F519       837            mov     (_servo_counter + 1),a
00C9            838   ;        EFM8_JDY40_test.c:181: if(servo_counter==2000)
00C9 74D0       839            mov     a,#0xD0
00CB B51818     840            cjne    a,_servo_counter,L003002?
00CE 7407       841            mov     a,#0x07
00D0 B51918     842            cjne    a,(_servo_counter + 1),L003002?
00D3            843   ;        EFM8_JDY40_test.c:183: servo_counter=0;
00D3 E4         844            clr     a
00D4 F518       845            mov     _servo_counter,a
00D6 F519       846            mov     (_servo_counter + 1),a
00D8            847   L003002?:
00D8            848   ;        EFM8_JDY40_test.c:185: if(servo1>=servo_counter)
00D8 AAD8       849            mov     r2,_servo1
00DA 7B00       850            mov     r3,#0x00
00DC C3         851            clr     c
00DD EA         852            mov     a,r2
00DE 9518       853            subb    a,_servo_counter
00E0 EB         854            mov     a,r3
00E1 9519       855            subb    a,(_servo_counter + 1)
00E3 4000       856            jc      L003004?
00E5            857   ;        EFM8_JDY40_test.c:187: SERVO1=1;
00E5 D293       858            setb    _P1_3
00E7 8000       859            sjmp    L003005?
00E9            860   L003004?:
00E9            861   ;        EFM8_JDY40_test.c:191: SERVO1=0;
00E9 C293       862            clr     _P1_3
00EB            863   L003005?:
00EB            864   ;        EFM8_JDY40_test.c:193: if(servo2>=servo_counter)
00EB AA98       865            mov     r2,_servo2
00ED 7B00       866            mov     r3,#0x00
00EF C3         867            clr     c
00F0 EA         868            mov     a,r2
00F1 9518       869            subb    a,_servo_counter
00F3 EB         870            mov     a,r3
00F4 9519       871            subb    a,(_servo_counter + 1)
00F6 4000       872            jc      L003007?
00F8            873   ;        EFM8_JDY40_test.c:195: SERVO2=1;
00F8 D294       874            setb    _P1_4
00FA 8000       875            sjmp    L003009?
00FC            876   L003007?:
00FC            877   ;        EFM8_JDY40_test.c:199: SERVO2=0;
00FC C294       878            clr     _P1_4
00FE            879   L003009?:
00FE D0D0       880            pop     psw
0100 D003       881            pop     ar3
0102 D002       882            pop     ar2
0104 D0E0       883            pop     acc
0106 32         884            reti
0107            885   ;        eliminated unneeded push/pop dpl
0107            886   ;        eliminated unneeded push/pop dph
0107            887   ;        eliminated unneeded push/pop b
0107            888   ;------------------------------------------------------------
0107            889   ;Allocation info for local variables in function 'Timer3us'
0107            890   ;------------------------------------------------------------
0107            891   ;us                        Allocated to registers r2 
0107            892   ;i                         Allocated to registers r3 
0107            893   ;------------------------------------------------------------
0107            894   ;        EFM8_JDY40_test.c:204: void Timer3us(unsigned char us)
0107            895   ;        -----------------------------------------
0107            896   ;         function Timer3us
0107            897   ;        -----------------------------------------
0107            898   _Timer3us:
0107 AA82       899            mov     r2,dpl
0109            900   ;        EFM8_JDY40_test.c:209: CKCON0|=0b_0100_0000;
0109 438E40     901            orl     _CKCON0,#0x40
010C            902   ;        EFM8_JDY40_test.c:211: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
010C 7592B8     903            mov     _TMR3RL,#0xB8
010F 7593FF     904            mov     (_TMR3RL >> 8),#0xFF
0112            905   ;        EFM8_JDY40_test.c:212: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0112 859294     906            mov     _TMR3,_TMR3RL
0115 859395     907            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0118            908   ;        EFM8_JDY40_test.c:214: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0118 759104     909            mov     _TMR3CN0,#0x04
011B            910   ;        EFM8_JDY40_test.c:215: for (i = 0; i < us; i++)       // Count <us> overflows
011B 7B00       911            mov     r3,#0x00
011D            912   L004004?:
011D C3         913            clr     c
011E EB         914            mov     a,r3
011F 9A         915            subb    a,r2
0120 5000       916            jnc     L004007?
0122            917   ;        EFM8_JDY40_test.c:217: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0122            918   L004001?:
0122 E591       919            mov     a,_TMR3CN0
0124 30E7D8     920            jnb     acc.7,L004001?
0127            921   ;        EFM8_JDY40_test.c:218: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0127 53917F     922            anl     _TMR3CN0,#0x7F
012A            923   ;        EFM8_JDY40_test.c:215: for (i = 0; i < us; i++)       // Count <us> overflows
012A 0B         924            inc     r3
012B 8000       925            sjmp    L004004?
012D            926   L004007?:
012D            927   ;        EFM8_JDY40_test.c:220: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
012D 759100     928            mov     _TMR3CN0,#0x00
0130 22         929            ret
0131            930   ;------------------------------------------------------------
0131            931   ;Allocation info for local variables in function 'waitms'
0131            932   ;------------------------------------------------------------
0131            933   ;ms                        Allocated to registers r2 r3 
0131            934   ;j                         Allocated to registers r4 r5 
0131            935   ;k                         Allocated to registers r6 
0131            936   ;------------------------------------------------------------
0131            937   ;        EFM8_JDY40_test.c:224: void waitms (unsigned int ms)
0131            938   ;        -----------------------------------------
0131            939   ;         function waitms
0131            940   ;        -----------------------------------------
0131            941   _waitms:
0131 AA82       942            mov     r2,dpl
0133 AB83       943            mov     r3,dph
0135            944   ;        EFM8_JDY40_test.c:228: for(j=0; j<ms; j++)
0135 7C00       945            mov     r4,#0x00
0137 7D00       946            mov     r5,#0x00
0139            947   L005005?:
0139 C3         948            clr     c
013A EC         949            mov     a,r4
013B 9A         950            subb    a,r2
013C ED         951            mov     a,r5
013D 9B         952            subb    a,r3
013E 5000       953            jnc     L005009?
0140            954   ;        EFM8_JDY40_test.c:229: for (k=0; k<4; k++) Timer3us(250);
0140 7E00       955            mov     r6,#0x00
0142            956   L005001?:
0142 BE0418     957            cjne    r6,#0x04,L005018?
0145            958   L005018?:
0145 5000       959            jnc     L005007?
0147 7582FA     960            mov     dpl,#0xFA
014A C002       961            push    ar2
014C C003       962            push    ar3
014E C004       963            push    ar4
0150 C005       964            push    ar5
0152 C006       965            push    ar6
0154 120000     966            lcall   _Timer3us
0157 D006       967            pop     ar6
0159 D005       968            pop     ar5
015B D004       969            pop     ar4
015D D003       970            pop     ar3
015F D002       971            pop     ar2
0161 0E         972            inc     r6
0162 8000       973            sjmp    L005001?
0164            974   L005007?:
0164            975   ;        EFM8_JDY40_test.c:228: for(j=0; j<ms; j++)
0164 0C         976            inc     r4
0165 BC0058     977            cjne    r4,#0x00,L005005?
0168 0D         978            inc     r5
0169 8000       979            sjmp    L005005?
016B            980   L005009?:
016B 22         981            ret
016C            982   ;------------------------------------------------------------
016C            983   ;Allocation info for local variables in function 'UART1_Init'
016C            984   ;------------------------------------------------------------
016C            985   ;baudrate                  Allocated to registers r2 r3 r4 r5 
016C            986   ;------------------------------------------------------------
016C            987   ;        EFM8_JDY40_test.c:232: void UART1_Init (unsigned long baudrate)
016C            988   ;        -----------------------------------------
016C            989   ;         function UART1_Init
016C            990   ;        -----------------------------------------
016C            991   _UART1_Init:
016C AA82       992            mov     r2,dpl
016E AB83       993            mov     r3,dph
0170 ACF0       994            mov     r4,b
0172 FD         995            mov     r5,a
0173            996   ;        EFM8_JDY40_test.c:234: SFRPAGE = 0x20;
0173 75A720     997            mov     _SFRPAGE,#0x20
0176            998   ;        EFM8_JDY40_test.c:235: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0176 75930C     999            mov     _SMOD1,#0x0C
0179           1000   ;        EFM8_JDY40_test.c:236: SCON1 = 0x10;
0179 75C810    1001            mov     _SCON1,#0x10
017C           1002   ;        EFM8_JDY40_test.c:237: SBCON1 =0x00;   // disable baud rate generator
017C 759400    1003            mov     _SBCON1,#0x00
017F           1004   ;        EFM8_JDY40_test.c:238: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
017F 8A00      1005            mov     __divulong_PARM_2,r2
0181 8B01      1006            mov     (__divulong_PARM_2 + 1),r3
0183 8C02      1007            mov     (__divulong_PARM_2 + 2),r4
0185 8D03      1008            mov     (__divulong_PARM_2 + 3),r5
0187 90A200    1009            mov     dptr,#0xA200
018A 75F04A    1010            mov     b,#0x4A
018D 7404      1011            mov     a,#0x04
018F 120000    1012            lcall   __divulong
0192 AA82      1013            mov     r2,dpl
0194 AB83      1014            mov     r3,dph
0196 ACF0      1015            mov     r4,b
0198 FD        1016            mov     r5,a
0199 750018    1017            mov     __divulong_PARM_2,#0x18
019C E4        1018            clr     a
019D F501      1019            mov     (__divulong_PARM_2 + 1),a
019F F502      1020            mov     (__divulong_PARM_2 + 2),a
01A1 F503      1021            mov     (__divulong_PARM_2 + 3),a
01A3 8A82      1022            mov     dpl,r2
01A5 8B83      1023            mov     dph,r3
01A7 8CF0      1024            mov     b,r4
01A9 ED        1025            mov     a,r5
01AA 120000    1026            lcall   __divulong
01AD AA82      1027            mov     r2,dpl
01AF AB83      1028            mov     r3,dph
01B1 ACF0      1029            mov     r4,b
01B3 FD        1030            mov     r5,a
01B4 E4        1031            clr     a
01B5 C3        1032            clr     c
01B6 9A        1033            subb    a,r2
01B7 FA        1034            mov     r2,a
01B8 E4        1035            clr     a
01B9 9B        1036            subb    a,r3
01BA FB        1037            mov     r3,a
01BB 7401      1038            mov     a,#0x01
01BD 9C        1039            subb    a,r4
01BE E4        1040            clr     a
01BF 9D        1041            subb    a,r5
01C0 8A95      1042            mov     _SBRL1,r2
01C2 8B96      1043            mov     (_SBRL1 >> 8),r3
01C4           1044   ;        EFM8_JDY40_test.c:239: TI1 = 1; // indicate ready for TX
01C4 D2C9      1045            setb    _TI1
01C6           1046   ;        EFM8_JDY40_test.c:240: SBCON1 |= 0x40;   // enable baud rate generator
01C6 439440    1047            orl     _SBCON1,#0x40
01C9           1048   ;        EFM8_JDY40_test.c:241: SFRPAGE = 0x00;
01C9 75A700    1049            mov     _SFRPAGE,#0x00
01CC 22        1050            ret
01CD           1051   ;------------------------------------------------------------
01CD           1052   ;Allocation info for local variables in function 'putchar1'
01CD           1053   ;------------------------------------------------------------
01CD           1054   ;c                         Allocated to registers r2 
01CD           1055   ;------------------------------------------------------------
01CD           1056   ;        EFM8_JDY40_test.c:244: void putchar1 (char c) 
01CD           1057   ;        -----------------------------------------
01CD           1058   ;         function putchar1
01CD           1059   ;        -----------------------------------------
01CD           1060   _putchar1:
01CD AA82      1061            mov     r2,dpl
01CF           1062   ;        EFM8_JDY40_test.c:246: SFRPAGE = 0x20;
01CF 75A720    1063            mov     _SFRPAGE,#0x20
01D2           1064   ;        EFM8_JDY40_test.c:247: while (!TI1);
01D2           1065   L007001?:
01D2           1066   ;        EFM8_JDY40_test.c:248: TI1=0;
01D2 10C9A8    1067            jbc     _TI1,L007008?
01D5 8000      1068            sjmp    L007001?
01D7           1069   L007008?:
01D7           1070   ;        EFM8_JDY40_test.c:249: SBUF1 = c;
01D7 8A92      1071            mov     _SBUF1,r2
01D9           1072   ;        EFM8_JDY40_test.c:250: SFRPAGE = 0x00;
01D9 75A700    1073            mov     _SFRPAGE,#0x00
01DC 22        1074            ret
01DD           1075   ;------------------------------------------------------------
01DD           1076   ;Allocation info for local variables in function 'sendstr1'
01DD           1077   ;------------------------------------------------------------
01DD           1078   ;s                         Allocated to registers r2 r3 r4 
01DD           1079   ;------------------------------------------------------------
01DD           1080   ;        EFM8_JDY40_test.c:253: void sendstr1 (char * s)
01DD           1081   ;        -----------------------------------------
01DD           1082   ;         function sendstr1
01DD           1083   ;        -----------------------------------------
01DD           1084   _sendstr1:
01DD AA82      1085            mov     r2,dpl
01DF AB83      1086            mov     r3,dph
01E1 ACF0      1087            mov     r4,b
01E3           1088   ;        EFM8_JDY40_test.c:255: while(*s)
01E3           1089   L008001?:
01E3 8A82      1090            mov     dpl,r2
01E5 8B83      1091            mov     dph,r3
01E7 8CF0      1092            mov     b,r4
01E9 120000    1093            lcall   __gptrget
01EC FD        1094            mov     r5,a
01ED 6000      1095            jz      L008004?
01EF           1096   ;        EFM8_JDY40_test.c:257: putchar1(*s);
01EF 8D82      1097            mov     dpl,r5
01F1 C002      1098            push    ar2
01F3 C003      1099            push    ar3
01F5 C004      1100            push    ar4
01F7 120000    1101            lcall   _putchar1
01FA D004      1102            pop     ar4
01FC D003      1103            pop     ar3
01FE D002      1104            pop     ar2
0200           1105   ;        EFM8_JDY40_test.c:258: s++;     
0200 0A        1106            inc     r2
0201 BA00E8    1107            cjne    r2,#0x00,L008001?
0204 0B        1108            inc     r3
0205 8000      1109            sjmp    L008001?
0207           1110   L008004?:
0207 22        1111            ret
0208           1112   ;------------------------------------------------------------
0208           1113   ;Allocation info for local variables in function 'getchar1'
0208           1114   ;------------------------------------------------------------
0208           1115   ;c                         Allocated to registers 
0208           1116   ;------------------------------------------------------------
0208           1117   ;        EFM8_JDY40_test.c:262: char getchar1 (void)
0208           1118   ;        -----------------------------------------
0208           1119   ;         function getchar1
0208           1120   ;        -----------------------------------------
0208           1121   _getchar1:
0208           1122   ;        EFM8_JDY40_test.c:265: SFRPAGE = 0x20;
0208 75A720    1123            mov     _SFRPAGE,#0x20
020B           1124   ;        EFM8_JDY40_test.c:266: while (!RI1);
020B           1125   L009001?:
020B           1126   ;        EFM8_JDY40_test.c:267: RI1=0;
020B 10C8E8    1127            jbc     _RI1,L009008?
020E 8000      1128            sjmp    L009001?
0210           1129   L009008?:
0210           1130   ;        EFM8_JDY40_test.c:269: SCON1&=0b_0011_1111;
0210 53C83F    1131            anl     _SCON1,#0x3F
0213           1132   ;        EFM8_JDY40_test.c:270: c = SBUF1;
0213 859282    1133            mov     dpl,_SBUF1
0216           1134   ;        EFM8_JDY40_test.c:271: SFRPAGE = 0x00;
0216 75A700    1135            mov     _SFRPAGE,#0x00
0219           1136   ;        EFM8_JDY40_test.c:272: return (c);
0219 22        1137            ret
021A           1138   ;------------------------------------------------------------
021A           1139   ;Allocation info for local variables in function 'getchar1_with_timeout'
021A           1140   ;------------------------------------------------------------
021A           1141   ;c                         Allocated to registers 
021A           1142   ;timeout                   Allocated to registers r2 r3 
021A           1143   ;------------------------------------------------------------
021A           1144   ;        EFM8_JDY40_test.c:275: char getchar1_with_timeout (void)
021A           1145   ;        -----------------------------------------
021A           1146   ;         function getchar1_with_timeout
021A           1147   ;        -----------------------------------------
021A           1148   _getchar1_with_timeout:
021A           1149   ;        EFM8_JDY40_test.c:279: SFRPAGE = 0x20;
021A 75A720    1150            mov     _SFRPAGE,#0x20
021D           1151   ;        EFM8_JDY40_test.c:281: while (!RI1)
021D 7A00      1152            mov     r2,#0x00
021F 7B00      1153            mov     r3,#0x00
0221           1154   L010003?:
0221 20C868    1155            jb      _RI1,L010005?
0224           1156   ;        EFM8_JDY40_test.c:283: SFRPAGE = 0x00;
0224 75A700    1157            mov     _SFRPAGE,#0x00
0227           1158   ;        EFM8_JDY40_test.c:284: Timer3us(20);
0227 758214    1159            mov     dpl,#0x14
022A C002      1160            push    ar2
022C C003      1161            push    ar3
022E 120000    1162            lcall   _Timer3us
0231 D003      1163            pop     ar3
0233 D002      1164            pop     ar2
0235           1165   ;        EFM8_JDY40_test.c:285: SFRPAGE = 0x20;
0235 75A720    1166            mov     _SFRPAGE,#0x20
0238           1167   ;        EFM8_JDY40_test.c:286: timeout++;
0238 0A        1168            inc     r2
0239 BA00A8    1169            cjne    r2,#0x00,L010012?
023C 0B        1170            inc     r3
023D           1171   L010012?:
023D           1172   ;        EFM8_JDY40_test.c:287: if(timeout==25000)
023D BAA828    1173            cjne    r2,#0xA8,L010003?
0240 BB6128    1174            cjne    r3,#0x61,L010003?
0243           1175   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
0243 75A700    1176            mov     _SFRPAGE,#0x00
0246           1177   ;        EFM8_JDY40_test.c:290: return ('\n'); // Timeout after half second
0246 75820A    1178            mov     dpl,#0x0A
0249 22        1179            ret
024A           1180   L010005?:
024A           1181   ;        EFM8_JDY40_test.c:293: RI1=0;
024A C2C8      1182            clr     _RI1
024C           1183   ;        EFM8_JDY40_test.c:295: SCON1&=0b_0011_1111;
024C 53C83F    1184            anl     _SCON1,#0x3F
024F           1185   ;        EFM8_JDY40_test.c:296: c = SBUF1;
024F 859282    1186            mov     dpl,_SBUF1
0252           1187   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x00;
0252 75A700    1188            mov     _SFRPAGE,#0x00
0255           1189   ;        EFM8_JDY40_test.c:298: return (c);
0255 22        1190            ret
0256           1191   ;------------------------------------------------------------
0256           1192   ;Allocation info for local variables in function 'getstr1'
0256           1193   ;------------------------------------------------------------
0256           1194   ;n                         Allocated with name '_getstr1_PARM_2'
0256           1195   ;s                         Allocated to registers r2 r3 r4 
0256           1196   ;c                         Allocated to registers r1 
0256           1197   ;cnt                       Allocated to registers r5 
0256           1198   ;------------------------------------------------------------
0256           1199   ;        EFM8_JDY40_test.c:301: void getstr1 (char * s, unsigned char n)
0256           1200   ;        -----------------------------------------
0256           1201   ;         function getstr1
0256           1202   ;        -----------------------------------------
0256           1203   _getstr1:
0256 AA82      1204            mov     r2,dpl
0258 AB83      1205            mov     r3,dph
025A ACF0      1206            mov     r4,b
025C           1207   ;        EFM8_JDY40_test.c:307: while(1)
025C 7D00      1208            mov     r5,#0x00
025E 8A06      1209            mov     ar6,r2
0260 8B07      1210            mov     ar7,r3
0262 8C00      1211            mov     ar0,r4
0264           1212   L011007?:
0264           1213   ;        EFM8_JDY40_test.c:309: c=getchar1_with_timeout();
0264 C002      1214            push    ar2
0266 C003      1215            push    ar3
0268 C004      1216            push    ar4
026A C005      1217            push    ar5
026C C006      1218            push    ar6
026E C007      1219            push    ar7
0270 C000      1220            push    ar0
0272 120000    1221            lcall   _getchar1_with_timeout
0275 A982      1222            mov     r1,dpl
0277 D000      1223            pop     ar0
0279 D007      1224            pop     ar7
027B D006      1225            pop     ar6
027D D005      1226            pop     ar5
027F D004      1227            pop     ar4
0281 D003      1228            pop     ar3
0283 D002      1229            pop     ar2
0285           1230   ;        EFM8_JDY40_test.c:310: if(c=='\n')
0285 B90A28    1231            cjne    r1,#0x0A,L011002?
0288           1232   ;        EFM8_JDY40_test.c:312: *s=0;
0288 8A82      1233            mov     dpl,r2
028A 8B83      1234            mov     dph,r3
028C 8CF0      1235            mov     b,r4
028E E4        1236            clr     a
028F           1237   ;        EFM8_JDY40_test.c:313: return;
028F 020000    1238            ljmp    __gptrput
0292           1239   L011002?:
0292           1240   ;        EFM8_JDY40_test.c:316: if (cnt<n)
0292 C3        1241            clr     c
0293 ED        1242            mov     a,r5
0294 95D8      1243            subb    a,_getstr1_PARM_2
0296 5000      1244            jnc     L011004?
0298           1245   ;        EFM8_JDY40_test.c:318: cnt++;
0298 0D        1246            inc     r5
0299           1247   ;        EFM8_JDY40_test.c:319: *s=c;
0299 8E82      1248            mov     dpl,r6
029B 8F83      1249            mov     dph,r7
029D 88F0      1250            mov     b,r0
029F E9        1251            mov     a,r1
02A0 120000    1252            lcall   __gptrput
02A3 A3        1253            inc     dptr
02A4 AE82      1254            mov     r6,dpl
02A6 AF83      1255            mov     r7,dph
02A8           1256   ;        EFM8_JDY40_test.c:320: s++;
02A8 8E02      1257            mov     ar2,r6
02AA 8F03      1258            mov     ar3,r7
02AC 8804      1259            mov     ar4,r0
02AE 8000      1260            sjmp    L011007?
02B0           1261   L011004?:
02B0           1262   ;        EFM8_JDY40_test.c:324: *s=0;
02B0 8A82      1263            mov     dpl,r2
02B2 8B83      1264            mov     dph,r3
02B4 8CF0      1265            mov     b,r4
02B6 E4        1266            clr     a
02B7           1267   ;        EFM8_JDY40_test.c:325: return;
02B7 020000    1268            ljmp    __gptrput
02BA           1269   ;------------------------------------------------------------
02BA           1270   ;Allocation info for local variables in function 'RXU1'
02BA           1271   ;------------------------------------------------------------
02BA           1272   ;------------------------------------------------------------
02BA           1273   ;        EFM8_JDY40_test.c:331: bit RXU1 (void)
02BA           1274   ;        -----------------------------------------
02BA           1275   ;         function RXU1
02BA           1276   ;        -----------------------------------------
02BA           1277   _RXU1:
02BA           1278   ;        EFM8_JDY40_test.c:334: SFRPAGE = 0x20;
02BA 75A720    1279            mov     _SFRPAGE,#0x20
02BD           1280   ;        EFM8_JDY40_test.c:335: mybit=RI1;
02BD A2C8      1281            mov     c,_RI1
02BF           1282   ;        EFM8_JDY40_test.c:336: SFRPAGE = 0x00;
02BF 75A700    1283            mov     _SFRPAGE,#0x00
02C2           1284   ;        EFM8_JDY40_test.c:337: return mybit;
02C2 22        1285            ret
02C3           1286   ;------------------------------------------------------------
02C3           1287   ;Allocation info for local variables in function 'waitms_or_RI1'
02C3           1288   ;------------------------------------------------------------
02C3           1289   ;ms                        Allocated to registers r2 r3 
02C3           1290   ;j                         Allocated to registers r4 r5 
02C3           1291   ;k                         Allocated to registers r6 
02C3           1292   ;------------------------------------------------------------
02C3           1293   ;        EFM8_JDY40_test.c:340: void waitms_or_RI1 (unsigned int ms)
02C3           1294   ;        -----------------------------------------
02C3           1295   ;         function waitms_or_RI1
02C3           1296   ;        -----------------------------------------
02C3           1297   _waitms_or_RI1:
02C3 AA82      1298            mov     r2,dpl
02C5 AB83      1299            mov     r3,dph
02C7           1300   ;        EFM8_JDY40_test.c:344: for(j=0; j<ms; j++)
02C7 7C00      1301            mov     r4,#0x00
02C9 7D00      1302            mov     r5,#0x00
02CB           1303   L013007?:
02CB C3        1304            clr     c
02CC EC        1305            mov     a,r4
02CD 9A        1306            subb    a,r2
02CE ED        1307            mov     a,r5
02CF 9B        1308            subb    a,r3
02D0 5000      1309            jnc     L013011?
02D2           1310   ;        EFM8_JDY40_test.c:346: for (k=0; k<4; k++)
02D2 7E00      1311            mov     r6,#0x00
02D4           1312   L013003?:
02D4 BE04A8    1313            cjne    r6,#0x04,L013019?
02D7           1314   L013019?:
02D7 5000      1315            jnc     L013009?
02D9           1316   ;        EFM8_JDY40_test.c:348: if(RXU1()) return;
02D9 C002      1317            push    ar2
02DB C003      1318            push    ar3
02DD C004      1319            push    ar4
02DF C005      1320            push    ar5
02E1 C006      1321            push    ar6
02E3 120000    1322            lcall   _RXU1
02E6 E4        1323            clr     a
02E7 33        1324            rlc     a
02E8 D006      1325            pop     ar6
02EA D005      1326            pop     ar5
02EC D004      1327            pop     ar4
02EE D003      1328            pop     ar3
02F0 D002      1329            pop     ar2
02F2 6000      1330            jz      L013002?
02F4 22        1331            ret
02F5           1332   L013002?:
02F5           1333   ;        EFM8_JDY40_test.c:349: Timer3us(250);
02F5 7582FA    1334            mov     dpl,#0xFA
02F8 C002      1335            push    ar2
02FA C003      1336            push    ar3
02FC C004      1337            push    ar4
02FE C005      1338            push    ar5
0300 C006      1339            push    ar6
0302 120000    1340            lcall   _Timer3us
0305 D006      1341            pop     ar6
0307 D005      1342            pop     ar5
0309 D004      1343            pop     ar4
030B D003      1344            pop     ar3
030D D002      1345            pop     ar2
030F           1346   ;        EFM8_JDY40_test.c:346: for (k=0; k<4; k++)
030F 0E        1347            inc     r6
0310 8000      1348            sjmp    L013003?
0312           1349   L013009?:
0312           1350   ;        EFM8_JDY40_test.c:344: for(j=0; j<ms; j++)
0312 0C        1351            inc     r4
0313 BC00E8    1352            cjne    r4,#0x00,L013007?
0316 0D        1353            inc     r5
0317 8000      1354            sjmp    L013007?
0319           1355   L013011?:
0319 22        1356            ret
031A           1357   ;------------------------------------------------------------
031A           1358   ;Allocation info for local variables in function 'SendATCommand'
031A           1359   ;------------------------------------------------------------
031A           1360   ;s                         Allocated to registers r2 r3 r4 
031A           1361   ;------------------------------------------------------------
031A           1362   ;        EFM8_JDY40_test.c:354: void SendATCommand (char * s)
031A           1363   ;        -----------------------------------------
031A           1364   ;         function SendATCommand
031A           1365   ;        -----------------------------------------
031A           1366   _SendATCommand:
031A AA82      1367            mov     r2,dpl
031C AB83      1368            mov     r3,dph
031E ACF0      1369            mov     r4,b
0320           1370   ;        EFM8_JDY40_test.c:356: printf("Command: %s", s);
0320 C002      1371            push    ar2
0322 C003      1372            push    ar3
0324 C004      1373            push    ar4
0326 C002      1374            push    ar2
0328 C003      1375            push    ar3
032A C004      1376            push    ar4
032C 7468      1377            mov     a,#__str_0
032E C0E0      1378            push    acc
0330 74CC      1379            mov     a,#(__str_0 >> 8)
0332 C0E0      1380            push    acc
0334 7480      1381            mov     a,#0x80
0336 C0E0      1382            push    acc
0338 120000    1383            lcall   _printf
033B E581      1384            mov     a,sp
033D 24FA      1385            add     a,#0xfa
033F F581      1386            mov     sp,a
0341           1387   ;        EFM8_JDY40_test.c:357: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0341 C2A0      1388            clr     _P2_0
0343           1389   ;        EFM8_JDY40_test.c:358: waitms(5);
0343 900005    1390            mov     dptr,#0x0005
0346 120000    1391            lcall   _waitms
0349 D004      1392            pop     ar4
034B D003      1393            pop     ar3
034D D002      1394            pop     ar2
034F           1395   ;        EFM8_JDY40_test.c:359: sendstr1(s);
034F 8A82      1396            mov     dpl,r2
0351 8B83      1397            mov     dph,r3
0353 8CF0      1398            mov     b,r4
0355 120000    1399            lcall   _sendstr1
0358           1400   ;        EFM8_JDY40_test.c:360: getstr1(buff, sizeof(buff)-1);
0358 75D813    1401            mov     _getstr1_PARM_2,#0x13
035B 904D58    1402            mov     dptr,#_buff
035E 75F040    1403            mov     b,#0x40
0361 120000    1404            lcall   _getstr1
0364           1405   ;        EFM8_JDY40_test.c:361: waitms(10);
0364 90000A    1406            mov     dptr,#0x000A
0367 120000    1407            lcall   _waitms
036A           1408   ;        EFM8_JDY40_test.c:362: P2_0=1; // 'set' pin to 1 is normal operation mode.
036A D2A0      1409            setb    _P2_0
036C           1410   ;        EFM8_JDY40_test.c:363: printf("Response: %s\r\n", buff);
036C 7458      1411            mov     a,#_buff
036E C0E0      1412            push    acc
0370 744D      1413            mov     a,#(_buff >> 8)
0372 C0E0      1414            push    acc
0374 7440      1415            mov     a,#0x40
0376 C0E0      1416            push    acc
0378 7428      1417            mov     a,#__str_1
037A C0E0      1418            push    acc
037C 74CD      1419            mov     a,#(__str_1 >> 8)
037E C0E0      1420            push    acc
0380 7480      1421            mov     a,#0x80
0382 C0E0      1422            push    acc
0384 120000    1423            lcall   _printf
0387 E581      1424            mov     a,sp
0389 24FA      1425            add     a,#0xfa
038B F581      1426            mov     sp,a
038D 22        1427            ret
038E           1428   ;------------------------------------------------------------
038E           1429   ;Allocation info for local variables in function 'ReceptionOff'
038E           1430   ;------------------------------------------------------------
038E           1431   ;------------------------------------------------------------
038E           1432   ;        EFM8_JDY40_test.c:366: void ReceptionOff (void)
038E           1433   ;        -----------------------------------------
038E           1434   ;         function ReceptionOff
038E           1435   ;        -----------------------------------------
038E           1436   _ReceptionOff:
038E           1437   ;        EFM8_JDY40_test.c:368: P2_0=0; // 'set' pin to 0 is 'AT' mode.
038E C2A0      1438            clr     _P2_0
0390           1439   ;        EFM8_JDY40_test.c:369: waitms(10);
0390 90000A    1440            mov     dptr,#0x000A
0393 120000    1441            lcall   _waitms
0396           1442   ;        EFM8_JDY40_test.c:370: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0396 90CD68    1443            mov     dptr,#__str_2
0399 75F080    1444            mov     b,#0x80
039C 120000    1445            lcall   _sendstr1
039F           1446   ;        EFM8_JDY40_test.c:371: waitms(10);
039F 90000A    1447            mov     dptr,#0x000A
03A2 120000    1448            lcall   _waitms
03A5           1449   ;        EFM8_JDY40_test.c:373: SCON1&=0b_0011_1111;
03A5 53C83F    1450            anl     _SCON1,#0x3F
03A8           1451   ;        EFM8_JDY40_test.c:374: P2_0=1; // 'set' pin to 1 is normal operation mode.
03A8 D2A0      1452            setb    _P2_0
03AA 22        1453            ret
03AB           1454   ;------------------------------------------------------------
03AB           1455   ;Allocation info for local variables in function 'TIMER0_Init'
03AB           1456   ;------------------------------------------------------------
03AB           1457   ;------------------------------------------------------------
03AB           1458   ;        EFM8_JDY40_test.c:378: void TIMER0_Init(void)
03AB           1459   ;        -----------------------------------------
03AB           1460   ;         function TIMER0_Init
03AB           1461   ;        -----------------------------------------
03AB           1462   _TIMER0_Init:
03AB           1463   ;        EFM8_JDY40_test.c:380: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
03AB 5389F0    1464            anl     _TMOD,#0xF0
03AE           1465   ;        EFM8_JDY40_test.c:381: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
03AE 438901    1466            orl     _TMOD,#0x01
03B1           1467   ;        EFM8_JDY40_test.c:382: TR0=0; // Stop Timer/Counter 0
03B1 C28C      1468            clr     _TR0
03B3 22        1469            ret
03B4           1470   ;------------------------------------------------------------
03B4           1471   ;Allocation info for local variables in function 'InitADC'
03B4           1472   ;------------------------------------------------------------
03B4           1473   ;------------------------------------------------------------
03B4           1474   ;        EFM8_JDY40_test.c:386: void InitADC (void)
03B4           1475   ;        -----------------------------------------
03B4           1476   ;         function InitADC
03B4           1477   ;        -----------------------------------------
03B4           1478   _InitADC:
03B4           1479   ;        EFM8_JDY40_test.c:388: SFRPAGE = 0x00;
03B4 75A700    1480            mov     _SFRPAGE,#0x00
03B7           1481   ;        EFM8_JDY40_test.c:389: ADEN=0; // Disable ADC
03B7 C2EF      1482            clr     _ADEN
03B9           1483   ;        EFM8_JDY40_test.c:394: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03B9 75B280    1484            mov     _ADC0CN1,#0x80
03BC           1485   ;        EFM8_JDY40_test.c:398: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03BC 75BC20    1486            mov     _ADC0CF0,#0x20
03BF           1487   ;        EFM8_JDY40_test.c:402: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03BF 75B91E    1488            mov     _ADC0CF1,#0x1E
03C2           1489   ;        EFM8_JDY40_test.c:411: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03C2 75E800    1490            mov     _ADC0CN0,#0x00
03C5           1491   ;        EFM8_JDY40_test.c:416: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03C5 75DF3F    1492            mov     _ADC0CF2,#0x3F
03C8           1493   ;        EFM8_JDY40_test.c:420: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03C8 75B300    1494            mov     _ADC0CN2,#0x00
03CB           1495   ;        EFM8_JDY40_test.c:422: ADEN=1; // Enable ADC
03CB D2EF      1496            setb    _ADEN
03CD 22        1497            ret
03CE           1498   ;------------------------------------------------------------
03CE           1499   ;Allocation info for local variables in function 'InitPinADC'
03CE           1500   ;------------------------------------------------------------
03CE           1501   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
03CE           1502   ;portno                    Allocated to registers r2 
03CE           1503   ;mask                      Allocated to registers r3 
03CE           1504   ;------------------------------------------------------------
03CE           1505   ;        EFM8_JDY40_test.c:425: void InitPinADC (unsigned char portno, unsigned char pinno)
03CE           1506   ;        -----------------------------------------
03CE           1507   ;         function InitPinADC
03CE           1508   ;        -----------------------------------------
03CE           1509   _InitPinADC:
03CE AA82      1510            mov     r2,dpl
03D0           1511   ;        EFM8_JDY40_test.c:429: mask=1<<pinno;
03D0 8560F0    1512            mov     b,_InitPinADC_PARM_2
03D3 05F0      1513            inc     b
03D5 7401      1514            mov     a,#0x01
03D7 8000      1515            sjmp    L018013?
03D9           1516   L018011?:
03D9 25E0      1517            add     a,acc
03DB           1518   L018013?:
03DB D5F0E8    1519            djnz    b,L018011?
03DE FB        1520            mov     r3,a
03DF           1521   ;        EFM8_JDY40_test.c:431: SFRPAGE = 0x20;
03DF 75A720    1522            mov     _SFRPAGE,#0x20
03E2           1523   ;        EFM8_JDY40_test.c:432: switch (portno)
03E2 BA0028    1524            cjne    r2,#0x00,L018014?
03E5 8000      1525            sjmp    L018001?
03E7           1526   L018014?:
03E7 BA01A8    1527            cjne    r2,#0x01,L018015?
03EA 8000      1528            sjmp    L018002?
03EC           1529   L018015?:
03EC           1530   ;        EFM8_JDY40_test.c:434: case 0:
03EC BA0228    1531            cjne    r2,#0x02,L018005?
03EF 8000      1532            sjmp    L018003?
03F1           1533   L018001?:
03F1           1534   ;        EFM8_JDY40_test.c:435: P0MDIN &= (~mask); // Set pin as analog input
03F1 EB        1535            mov     a,r3
03F2 F4        1536            cpl     a
03F3 FA        1537            mov     r2,a
03F4 52F1      1538            anl     _P0MDIN,a
03F6           1539   ;        EFM8_JDY40_test.c:436: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03F6 EB        1540            mov     a,r3
03F7 42D4      1541            orl     _P0SKIP,a
03F9           1542   ;        EFM8_JDY40_test.c:437: break;
03F9           1543   ;        EFM8_JDY40_test.c:438: case 1:
03F9 8000      1544            sjmp    L018005?
03FB           1545   L018002?:
03FB           1546   ;        EFM8_JDY40_test.c:439: P1MDIN &= (~mask); // Set pin as analog input
03FB EB        1547            mov     a,r3
03FC F4        1548            cpl     a
03FD FA        1549            mov     r2,a
03FE 52F2      1550            anl     _P1MDIN,a
0400           1551   ;        EFM8_JDY40_test.c:440: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0400 EB        1552            mov     a,r3
0401 42D5      1553            orl     _P1SKIP,a
0403           1554   ;        EFM8_JDY40_test.c:441: break;
0403           1555   ;        EFM8_JDY40_test.c:442: case 2:
0403 8000      1556            sjmp    L018005?
0405           1557   L018003?:
0405           1558   ;        EFM8_JDY40_test.c:443: P2MDIN &= (~mask); // Set pin as analog input
0405 EB        1559            mov     a,r3
0406 F4        1560            cpl     a
0407 FA        1561            mov     r2,a
0408 52F3      1562            anl     _P2MDIN,a
040A           1563   ;        EFM8_JDY40_test.c:444: P2SKIP |= mask; // Skip Crossbar decoding for this pin
040A EB        1564            mov     a,r3
040B 42CC      1565            orl     _P2SKIP,a
040D           1566   ;        EFM8_JDY40_test.c:448: }
040D           1567   L018005?:
040D           1568   ;        EFM8_JDY40_test.c:449: SFRPAGE = 0x00;
040D 75A700    1569            mov     _SFRPAGE,#0x00
0410 22        1570            ret
0411           1571   ;------------------------------------------------------------
0411           1572   ;Allocation info for local variables in function 'ADC_at_Pin'
0411           1573   ;------------------------------------------------------------
0411           1574   ;pin                       Allocated to registers 
0411           1575   ;------------------------------------------------------------
0411           1576   ;        EFM8_JDY40_test.c:452: unsigned int ADC_at_Pin(unsigned char pin)
0411           1577   ;        -----------------------------------------
0411           1578   ;         function ADC_at_Pin
0411           1579   ;        -----------------------------------------
0411           1580   _ADC_at_Pin:
0411 8582BB    1581            mov     _ADC0MX,dpl
0414           1582   ;        EFM8_JDY40_test.c:455: ADINT = 0;
0414 C2ED      1583            clr     _ADINT
0416           1584   ;        EFM8_JDY40_test.c:456: ADBUSY = 1;     // Convert voltage at the pin
0416 D2EC      1585            setb    _ADBUSY
0418           1586   ;        EFM8_JDY40_test.c:457: while (!ADINT); // Wait for conversion to complete
0418           1587   L019001?:
0418 30EDA8    1588            jnb     _ADINT,L019001?
041B           1589   ;        EFM8_JDY40_test.c:458: return (ADC0);
041B 85BD82    1590            mov     dpl,_ADC0
041E 85BE83    1591            mov     dph,(_ADC0 >> 8)
0421 22        1592            ret
0422           1593   ;------------------------------------------------------------
0422           1594   ;Allocation info for local variables in function 'Volts_at_Pin'
0422           1595   ;------------------------------------------------------------
0422           1596   ;pin                       Allocated to registers r2 
0422           1597   ;------------------------------------------------------------
0422           1598   ;        EFM8_JDY40_test.c:461: float Volts_at_Pin(unsigned char pin)
0422           1599   ;        -----------------------------------------
0422           1600   ;         function Volts_at_Pin
0422           1601   ;        -----------------------------------------
0422           1602   _Volts_at_Pin:
0422           1603   ;        EFM8_JDY40_test.c:463: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0422 120000    1604            lcall   _ADC_at_Pin
0425 120000    1605            lcall   ___uint2fs
0428 AA82      1606            mov     r2,dpl
042A AB83      1607            mov     r3,dph
042C ACF0      1608            mov     r4,b
042E FD        1609            mov     r5,a
042F C002      1610            push    ar2
0431 C003      1611            push    ar3
0433 C004      1612            push    ar4
0435 C005      1613            push    ar5
0437 906C8B    1614            mov     dptr,#0x6C8B
043A 75F053    1615            mov     b,#0x53
043D 7440      1616            mov     a,#0x40
043F 120000    1617            lcall   ___fsmul
0442 AA82      1618            mov     r2,dpl
0444 AB83      1619            mov     r3,dph
0446 ACF0      1620            mov     r4,b
0448 FD        1621            mov     r5,a
0449 E581      1622            mov     a,sp
044B 24FC      1623            add     a,#0xfc
044D F581      1624            mov     sp,a
044F E4        1625            clr     a
0450 C0E0      1626            push    acc
0452 74FC      1627            mov     a,#0xFC
0454 C0E0      1628            push    acc
0456 747F      1629            mov     a,#0x7F
0458 C0E0      1630            push    acc
045A 7446      1631            mov     a,#0x46
045C C0E0      1632            push    acc
045E 8A82      1633            mov     dpl,r2
0460 8B83      1634            mov     dph,r3
0462 8CF0      1635            mov     b,r4
0464 ED        1636            mov     a,r5
0465 120000    1637            lcall   ___fsdiv
0468 AA82      1638            mov     r2,dpl
046A AB83      1639            mov     r3,dph
046C ACF0      1640            mov     r4,b
046E FD        1641            mov     r5,a
046F E581      1642            mov     a,sp
0471 24FC      1643            add     a,#0xfc
0473 F581      1644            mov     sp,a
0475 8A82      1645            mov     dpl,r2
0477 8B83      1646            mov     dph,r3
0479 8CF0      1647            mov     b,r4
047B ED        1648            mov     a,r5
047C 22        1649            ret
047D           1650   ;------------------------------------------------------------
047D           1651   ;Allocation info for local variables in function 'Timer4_ISR'
047D           1652   ;------------------------------------------------------------
047D           1653   ;------------------------------------------------------------
047D           1654   ;        EFM8_JDY40_test.c:467: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
047D           1655   ;        -----------------------------------------
047D           1656   ;         function Timer4_ISR
047D           1657   ;        -----------------------------------------
047D           1658   _Timer4_ISR:
047D C0E0      1659            push    acc
047F C0D0      1660            push    psw
0481 75D000    1661            mov     psw,#0x00
0484           1662   ;        EFM8_JDY40_test.c:469: SFRPAGE=0x10;
0484 75A710    1663            mov     _SFRPAGE,#0x10
0487           1664   ;        EFM8_JDY40_test.c:470: TF4H = 0; 
0487 C29F      1665            clr     _TF4H
0489           1666   ;        EFM8_JDY40_test.c:472: pwm_counter4 += 256; // counting steps
0489 855858    1667            mov     _pwm_counter4,_pwm_counter4
048C 7401      1668            mov     a,#0x01
048E 2559      1669            add     a,(_pwm_counter4 + 1)
0490 F559      1670            mov     (_pwm_counter4 + 1),a
0492           1671   ;        EFM8_JDY40_test.c:473: if ( direction == 1) {
0492 7401      1672            mov     a,#0x01
0494 B558A8    1673            cjne    a,_direction,L021009?
0497 E4        1674            clr     a
0498 B559A8    1675            cjne    a,(_direction + 1),L021009?
049B 8000      1676            sjmp    L021010?
049D           1677   L021009?:
049D 8000      1678            sjmp    L021002?
049F           1679   L021010?:
049F           1680   ;        EFM8_JDY40_test.c:474: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
049F C3        1681            clr     c
04A0 E558      1682            mov     a,_pwm_counter4
04A2 9518      1683            subb    a,_pwm_duty4
04A4 E559      1684            mov     a,(_pwm_counter4 + 1)
04A6 9519      1685            subb    a,(_pwm_duty4 + 1)
04A8 92B0      1686            mov     _P3_0,c
04AA           1687   L021002?:
04AA           1688   ;        EFM8_JDY40_test.c:476: if ( direction  == 0 ) {
04AA E558      1689            mov     a,_direction
04AC 4559      1690            orl     a,(_direction + 1)
04AE 7000      1691            jnz     L021004?
04B0           1692   ;        EFM8_JDY40_test.c:477: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
04B0 C3        1693            clr     c
04B1 E558      1694            mov     a,_pwm_counter4
04B3 9518      1695            subb    a,_pwm_duty4
04B5 E559      1696            mov     a,(_pwm_counter4 + 1)
04B7 9519      1697            subb    a,(_pwm_duty4 + 1)
04B9 92A5      1698            mov     _P2_5,c
04BB           1699   L021004?:
04BB           1700   ;        EFM8_JDY40_test.c:479: if ( direction == 3 ) 
04BB E558      1701            mov     a,_direction
04BD E559      1702            mov     a,(_direction + 1)
04BF D0D0      1703            pop     psw
04C1 D0E0      1704            pop     acc
04C3 32        1705            reti
04C4           1706   ;        eliminated unneeded push/pop dpl
04C4           1707   ;        eliminated unneeded push/pop dph
04C4           1708   ;        eliminated unneeded push/pop b
04C4           1709   ;------------------------------------------------------------
04C4           1710   ;Allocation info for local variables in function 'Timer2_ISR'
04C4           1711   ;------------------------------------------------------------
04C4           1712   ;------------------------------------------------------------
04C4           1713   ;        EFM8_JDY40_test.c:484: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
04C4           1714   ;        -----------------------------------------
04C4           1715   ;         function Timer2_ISR
04C4           1716   ;        -----------------------------------------
04C4           1717   _Timer2_ISR:
04C4 C0E0      1718            push    acc
04C6 C0D0      1719            push    psw
04C8 75D000    1720            mov     psw,#0x00
04CB           1721   ;        EFM8_JDY40_test.c:486: SFRPAGE=0x0;
04CB 75A700    1722            mov     _SFRPAGE,#0x00
04CE           1723   ;        EFM8_JDY40_test.c:487: TF2H = 0; // Clear Timer2 interrupt flag
04CE C2CF      1724            clr     _TF2H
04D0           1725   ;        EFM8_JDY40_test.c:488: pwm_counter2 += 256; // counting steps
04D0 85D8D8    1726            mov     _pwm_counter2,_pwm_counter2
04D3 7401      1727            mov     a,#0x01
04D5 25D9      1728            add     a,(_pwm_counter2 + 1)
04D7 F5D9      1729            mov     (_pwm_counter2 + 1),a
04D9           1730   ;        EFM8_JDY40_test.c:489: if ( direction == 1) {
04D9 7401      1731            mov     a,#0x01
04DB B558A8    1732            cjne    a,_direction,L022009?
04DE E4        1733            clr     a
04DF B559A8    1734            cjne    a,(_direction + 1),L022009?
04E2 8000      1735            sjmp    L022010?
04E4           1736   L022009?:
04E4 8000      1737            sjmp    L022002?
04E6           1738   L022010?:
04E6           1739   ;        EFM8_JDY40_test.c:490: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
04E6 C3        1740            clr     c
04E7 E5D8      1741            mov     a,_pwm_counter2
04E9 9598      1742            subb    a,_pwm_duty2
04EB E5D9      1743            mov     a,(_pwm_counter2 + 1)
04ED 9599      1744            subb    a,(_pwm_duty2 + 1)
04EF 92B2      1745            mov     _P3_2,c
04F1           1746   L022002?:
04F1           1747   ;        EFM8_JDY40_test.c:492: if (direction == 0 ){
04F1 E558      1748            mov     a,_direction
04F3 4559      1749            orl     a,(_direction + 1)
04F5 7000      1750            jnz     L022004?
04F7           1751   ;        EFM8_JDY40_test.c:493: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
04F7 C3        1752            clr     c
04F8 E5D8      1753            mov     a,_pwm_counter2
04FA 9598      1754            subb    a,_pwm_duty2
04FC E5D9      1755            mov     a,(_pwm_counter2 + 1)
04FE 9599      1756            subb    a,(_pwm_duty2 + 1)
0500 92B7      1757            mov     _P3_7,c
0502           1758   L022004?:
0502           1759   ;        EFM8_JDY40_test.c:495: if ( direction == 3 ) 
0502 E558      1760            mov     a,_direction
0504 E559      1761            mov     a,(_direction + 1)
0506 D0D0      1762            pop     psw
0508 D0E0      1763            pop     acc
050A 32        1764            reti
050B           1765   ;        eliminated unneeded push/pop dpl
050B           1766   ;        eliminated unneeded push/pop dph
050B           1767   ;        eliminated unneeded push/pop b
050B           1768   ;------------------------------------------------------------
050B           1769   ;Allocation info for local variables in function 'GetPeriod'
050B           1770   ;------------------------------------------------------------
050B           1771   ;n                         Allocated to registers r2 r3 
050B           1772   ;overflow_count            Allocated to registers r4 r5 
050B           1773   ;i                         Allocated to registers r6 
050B           1774   ;------------------------------------------------------------
050B           1775   ;        EFM8_JDY40_test.c:502: unsigned long GetPeriod (int n)
050B           1776   ;        -----------------------------------------
050B           1777   ;         function GetPeriod
050B           1778   ;        -----------------------------------------
050B           1779   _GetPeriod:
050B AA82      1780            mov     r2,dpl
050D AB83      1781            mov     r3,dph
050F           1782   ;        EFM8_JDY40_test.c:507: TR0=0; // Stop Timer/Counter 0
050F C28C      1783            clr     _TR0
0511           1784   ;        EFM8_JDY40_test.c:508: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0511 5389F0    1785            anl     _TMOD,#0xF0
0514           1786   ;        EFM8_JDY40_test.c:509: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0514 438901    1787            orl     _TMOD,#0x01
0517           1788   ;        EFM8_JDY40_test.c:512: TR0=0;
0517 C28C      1789            clr     _TR0
0519           1790   ;        EFM8_JDY40_test.c:513: TL0=0; TH0=0; TF0=0; overflow_count=0;
0519 758A00    1791            mov     _TL0,#0x00
051C 758C00    1792            mov     _TH0,#0x00
051F C28D      1793            clr     _TF0
0521           1794   ;        EFM8_JDY40_test.c:514: TR0=1;
0521 D28C      1795            setb    _TR0
0523           1796   ;        EFM8_JDY40_test.c:517: TR0=0;
0523 C28C      1797            clr     _TR0
0525           1798   ;        EFM8_JDY40_test.c:518: TL0=0; TH0=0; TF0=0; overflow_count=0;
0525 758A00    1799            mov     _TL0,#0x00
0528 758C00    1800            mov     _TH0,#0x00
052B C28D      1801            clr     _TF0
052D           1802   ;        EFM8_JDY40_test.c:519: TR0=1;
052D D28C      1803            setb    _TR0
052F           1804   ;        EFM8_JDY40_test.c:520: while(PERIOD_PIN!=0) // Wait for the signal to be zero
052F 7C00      1805            mov     r4,#0x00
0531 7D00      1806            mov     r5,#0x00
0533           1807   L023005?:
0533 3086E8    1808            jnb     _P0_6,L023007?
0536           1809   ;        EFM8_JDY40_test.c:522: if(TF0==1) // Did the 16-bit timer overflow?
0536           1810   ;        EFM8_JDY40_test.c:524: TF0=0;
0536 108D28    1811            jbc     _TF0,L023050?
0539 8000      1812            sjmp    L023005?
053B           1813   L023050?:
053B           1814   ;        EFM8_JDY40_test.c:525: overflow_count++;
053B 0C        1815            inc     r4
053C BC0068    1816            cjne    r4,#0x00,L023051?
053F 0D        1817            inc     r5
0540           1818   L023051?:
0540           1819   ;        EFM8_JDY40_test.c:526: if(overflow_count==10) // If it overflows too many times assume no signal is present
0540 BC0AA8    1820            cjne    r4,#0x0A,L023005?
0543 BD00A8    1821            cjne    r5,#0x00,L023005?
0546           1822   ;        EFM8_JDY40_test.c:528: TR0=0;
0546 C28C      1823            clr     _TR0
0548           1824   ;        EFM8_JDY40_test.c:529: return 0; // No signal
0548 900000    1825            mov     dptr,#(0x00&0x00ff)
054B E4        1826            clr     a
054C F5F0      1827            mov     b,a
054E 22        1828            ret
054F           1829   L023007?:
054F           1830   ;        EFM8_JDY40_test.c:535: TR0=0;
054F C28C      1831            clr     _TR0
0551           1832   ;        EFM8_JDY40_test.c:536: TL0=0; TH0=0; TF0=0; overflow_count=0;
0551 758A00    1833            mov     _TL0,#0x00
0554 758C00    1834            mov     _TH0,#0x00
0557 C28D      1835            clr     _TF0
0559           1836   ;        EFM8_JDY40_test.c:537: TR0=1;
0559 D28C      1837            setb    _TR0
055B           1838   ;        EFM8_JDY40_test.c:538: while(PERIOD_PIN!=1) // Wait for the signal to be one
055B 7C00      1839            mov     r4,#0x00
055D 7D00      1840            mov     r5,#0x00
055F           1841   L023012?:
055F 2086E8    1842            jb      _P0_6,L023014?
0562           1843   ;        EFM8_JDY40_test.c:540: if(TF0==1) // Did the 16-bit timer overflow?
0562           1844   ;        EFM8_JDY40_test.c:542: TF0=0;
0562 108D28    1845            jbc     _TF0,L023055?
0565 8000      1846            sjmp    L023012?
0567           1847   L023055?:
0567           1848   ;        EFM8_JDY40_test.c:543: overflow_count++;
0567 0C        1849            inc     r4
0568 BC0068    1850            cjne    r4,#0x00,L023056?
056B 0D        1851            inc     r5
056C           1852   L023056?:
056C           1853   ;        EFM8_JDY40_test.c:544: if(overflow_count==10) // If it overflows too many times assume no signal is present
056C BC0AA8    1854            cjne    r4,#0x0A,L023012?
056F BD00A8    1855            cjne    r5,#0x00,L023012?
0572           1856   ;        EFM8_JDY40_test.c:546: TR0=0;
0572 C28C      1857            clr     _TR0
0574           1858   ;        EFM8_JDY40_test.c:547: return 0; // No signal
0574 900000    1859            mov     dptr,#(0x00&0x00ff)
0577 E4        1860            clr     a
0578 F5F0      1861            mov     b,a
057A 22        1862            ret
057B           1863   L023014?:
057B           1864   ;        EFM8_JDY40_test.c:553: TR0=0;
057B C28C      1865            clr     _TR0
057D           1866   ;        EFM8_JDY40_test.c:554: TL0=0; TH0=0; TF0=0; overflow_count=0;
057D 758A00    1867            mov     _TL0,#0x00
0580 758C00    1868            mov     _TH0,#0x00
0583 C28D      1869            clr     _TF0
0585 7C00      1870            mov     r4,#0x00
0587 7D00      1871            mov     r5,#0x00
0589           1872   ;        EFM8_JDY40_test.c:555: TR0=1; // Start the timer
0589 D28C      1873            setb    _TR0
058B           1874   ;        EFM8_JDY40_test.c:556: for(i=0; i<n; i++) // Measure the time of 'n' periods
058B 7E00      1875            mov     r6,#0x00
058D           1876   L023025?:
058D 8E07      1877            mov     ar7,r6
058F 7800      1878            mov     r0,#0x00
0591 C3        1879            clr     c
0592 EF        1880            mov     a,r7
0593 9A        1881            subb    a,r2
0594 E8        1882            mov     a,r0
0595 6480      1883            xrl     a,#0x80
0597 8BF0      1884            mov     b,r3
0599 63F080    1885            xrl     b,#0x80
059C 95F0      1886            subb    a,b
059E 5000      1887            jnc     L023028?
05A0           1888   ;        EFM8_JDY40_test.c:558: while(PERIOD_PIN!=0) // Wait for the signal to be zero
05A0 8C07      1889            mov     ar7,r4
05A2 8D00      1890            mov     ar0,r5
05A4           1891   L023017?:
05A4 308668    1892            jnb     _P0_6,L023043?
05A7           1893   ;        EFM8_JDY40_test.c:560: if(TF0==1) // Did the 16-bit timer overflow?
05A7           1894   ;        EFM8_JDY40_test.c:562: TF0=0;
05A7 108DA8    1895            jbc     _TF0,L023061?
05AA 8000      1896            sjmp    L023017?
05AC           1897   L023061?:
05AC           1898   ;        EFM8_JDY40_test.c:563: overflow_count++;
05AC 0F        1899            inc     r7
05AD BF0028    1900            cjne    r7,#0x00,L023017?
05B0 08        1901            inc     r0
05B1           1902   ;        EFM8_JDY40_test.c:566: while(PERIOD_PIN!=1) // Wait for the signal to be one
05B1 8000      1903            sjmp    L023017?
05B3           1904   L023043?:
05B3           1905   L023022?:
05B3 208628    1906            jb      _P0_6,L023047?
05B6           1907   ;        EFM8_JDY40_test.c:568: if(TF0==1) // Did the 16-bit timer overflow?
05B6           1908   ;        EFM8_JDY40_test.c:570: TF0=0;
05B6 108D68    1909            jbc     _TF0,L023063?
05B9 8000      1910            sjmp    L023022?
05BB           1911   L023063?:
05BB           1912   ;        EFM8_JDY40_test.c:571: overflow_count++;
05BB 0F        1913            inc     r7
05BC BF00E8    1914            cjne    r7,#0x00,L023022?
05BF 08        1915            inc     r0
05C0 8000      1916            sjmp    L023022?
05C2           1917   L023047?:
05C2 8F04      1918            mov     ar4,r7
05C4 8805      1919            mov     ar5,r0
05C6           1920   ;        EFM8_JDY40_test.c:556: for(i=0; i<n; i++) // Measure the time of 'n' periods
05C6 0E        1921            inc     r6
05C7 8000      1922            sjmp    L023025?
05C9           1923   L023028?:
05C9           1924   ;        EFM8_JDY40_test.c:575: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
05C9 C28C      1925            clr     _TR0
05CB           1926   ;        EFM8_JDY40_test.c:577: return (overflow_count*65536+TH0*256+TL0);
05CB 8D03      1927            mov     ar3,r5
05CD 8C02      1928            mov     ar2,r4
05CF 7D00      1929            mov     r5,#0x00
05D1 7C00      1930            mov     r4,#0x00
05D3 AF8C      1931            mov     r7,_TH0
05D5 7E00      1932            mov     r6,#0x00
05D7 EF        1933            mov     a,r7
05D8 33        1934            rlc     a
05D9 95E0      1935            subb    a,acc
05DB F8        1936            mov     r0,a
05DC F9        1937            mov     r1,a
05DD EE        1938            mov     a,r6
05DE 2C        1939            add     a,r4
05DF FC        1940            mov     r4,a
05E0 EF        1941            mov     a,r7
05E1 3D        1942            addc    a,r5
05E2 FD        1943            mov     r5,a
05E3 E8        1944            mov     a,r0
05E4 3A        1945            addc    a,r2
05E5 FA        1946            mov     r2,a
05E6 E9        1947            mov     a,r1
05E7 3B        1948            addc    a,r3
05E8 FB        1949            mov     r3,a
05E9 AE8A      1950            mov     r6,_TL0
05EB E4        1951            clr     a
05EC FF        1952            mov     r7,a
05ED 33        1953            rlc     a
05EE 95E0      1954            subb    a,acc
05F0 F8        1955            mov     r0,a
05F1 F9        1956            mov     r1,a
05F2 EE        1957            mov     a,r6
05F3 2C        1958            add     a,r4
05F4 FC        1959            mov     r4,a
05F5 EF        1960            mov     a,r7
05F6 3D        1961            addc    a,r5
05F7 FD        1962            mov     r5,a
05F8 E8        1963            mov     a,r0
05F9 3A        1964            addc    a,r2
05FA FA        1965            mov     r2,a
05FB E9        1966            mov     a,r1
05FC 3B        1967            addc    a,r3
05FD 8C82      1968            mov     dpl,r4
05FF 8D83      1969            mov     dph,r5
0601 8AF0      1970            mov     b,r2
0603 22        1971            ret
0604           1972   ;------------------------------------------------------------
0604           1973   ;Allocation info for local variables in function 'eputs'
0604           1974   ;------------------------------------------------------------
0604           1975   ;String                    Allocated to registers r2 r3 r4 
0604           1976   ;------------------------------------------------------------
0604           1977   ;        EFM8_JDY40_test.c:580: void eputs(char *String)
0604           1978   ;        -----------------------------------------
0604           1979   ;         function eputs
0604           1980   ;        -----------------------------------------
0604           1981   _eputs:
0604 AA82      1982            mov     r2,dpl
0606 AB83      1983            mov     r3,dph
0608 ACF0      1984            mov     r4,b
060A           1985   ;        EFM8_JDY40_test.c:582: while(*String)
060A           1986   L024001?:
060A 8A82      1987            mov     dpl,r2
060C 8B83      1988            mov     dph,r3
060E 8CF0      1989            mov     b,r4
0610 120000    1990            lcall   __gptrget
0613 FD        1991            mov     r5,a
0614 6000      1992            jz      L024004?
0616           1993   ;        EFM8_JDY40_test.c:584: putchar(*String);
0616 8D82      1994            mov     dpl,r5
0618 C002      1995            push    ar2
061A C003      1996            push    ar3
061C C004      1997            push    ar4
061E 120000    1998            lcall   _putchar
0621 D004      1999            pop     ar4
0623 D003      2000            pop     ar3
0625 D002      2001            pop     ar2
0627           2002   ;        EFM8_JDY40_test.c:585: String++;
0627 0A        2003            inc     r2
0628 BA00A8    2004            cjne    r2,#0x00,L024001?
062B 0B        2005            inc     r3
062C 8000      2006            sjmp    L024001?
062E           2007   L024004?:
062E 22        2008            ret
062F           2009   ;------------------------------------------------------------
062F           2010   ;Allocation info for local variables in function 'PrintNumber'
062F           2011   ;------------------------------------------------------------
062F           2012   ;Base                      Allocated with name '_PrintNumber_PARM_2'
062F           2013   ;digits                    Allocated with name '_PrintNumber_PARM_3'
062F           2014   ;val                       Allocated with name '_PrintNumber_val_1_163'
062F           2015   ;j                         Allocated with name '_PrintNumber_j_1_164'
062F           2016   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
062F           2017   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
062F           2018   ;buff                      Allocated with name '_PrintNumber_buff_1_164'
062F           2019   ;------------------------------------------------------------
062F           2020   ;        EFM8_JDY40_test.c:589: void PrintNumber(long int val, int Base, int digits)
062F           2021   ;        -----------------------------------------
062F           2022   ;         function PrintNumber
062F           2023   ;        -----------------------------------------
062F           2024   _PrintNumber:
062F 858268    2025            mov     _PrintNumber_val_1_163,dpl
0632 858369    2026            mov     (_PrintNumber_val_1_163 + 1),dph
0635 85F06A    2027            mov     (_PrintNumber_val_1_163 + 2),b
0638 F56B      2028            mov     (_PrintNumber_val_1_163 + 3),a
063A           2029   ;        EFM8_JDY40_test.c:595: buff[NBITS]=0;
063A 90C178    2030            mov     dptr,#(_PrintNumber_buff_1_164 + 0x0020)
063D E4        2031            clr     a
063E F0        2032            movx    @dptr,a
063F           2033   ;        EFM8_JDY40_test.c:597: if(val<0)
063F E56B      2034            mov     a,(_PrintNumber_val_1_163 + 3)
0641 30E768    2035            jnb     acc.7,L025012?
0644           2036   ;        EFM8_JDY40_test.c:599: putchar('-');
0644 75822D    2037            mov     dpl,#0x2D
0647 120000    2038            lcall   _putchar
064A           2039   ;        EFM8_JDY40_test.c:600: val*=-1;
064A C3        2040            clr     c
064B E4        2041            clr     a
064C 9568      2042            subb    a,_PrintNumber_val_1_163
064E F568      2043            mov     _PrintNumber_val_1_163,a
0650 E4        2044            clr     a
0651 9569      2045            subb    a,(_PrintNumber_val_1_163 + 1)
0653 F569      2046            mov     (_PrintNumber_val_1_163 + 1),a
0655 E4        2047            clr     a
0656 956A      2048            subb    a,(_PrintNumber_val_1_163 + 2)
0658 F56A      2049            mov     (_PrintNumber_val_1_163 + 2),a
065A E4        2050            clr     a
065B 956B      2051            subb    a,(_PrintNumber_val_1_163 + 3)
065D F56B      2052            mov     (_PrintNumber_val_1_163 + 3),a
065F           2053   ;        EFM8_JDY40_test.c:604: while ( (val>0) | (digits>0) )
065F           2054   L025012?:
065F 75B81F    2055            mov     _PrintNumber_j_1_164,#0x1F
0662 E4        2056            clr     a
0663 F5B9      2057            mov     (_PrintNumber_j_1_164 + 1),a
0665 A848      2058            mov     r0,_PrintNumber_PARM_3
0667 A949      2059            mov     r1,(_PrintNumber_PARM_3 + 1)
0669           2060   L025005?:
0669 C3        2061            clr     c
066A E4        2062            clr     a
066B 9568      2063            subb    a,_PrintNumber_val_1_163
066D E4        2064            clr     a
066E 9569      2065            subb    a,(_PrintNumber_val_1_163 + 1)
0670 E4        2066            clr     a
0671 956A      2067            subb    a,(_PrintNumber_val_1_163 + 2)
0673 E4        2068            clr     a
0674 6480      2069            xrl     a,#0x80
0676 856BF0    2070            mov     b,(_PrintNumber_val_1_163 + 3)
0679 63F080    2071            xrl     b,#0x80
067C 95F0      2072            subb    a,b
067E E4        2073            clr     a
067F 33        2074            rlc     a
0680 FE        2075            mov     r6,a
0681 C3        2076            clr     c
0682 E4        2077            clr     a
0683 98        2078            subb    a,r0
0684 E4        2079            clr     a
0685 6480      2080            xrl     a,#0x80
0687 89F0      2081            mov     b,r1
0689 63F080    2082            xrl     b,#0x80
068C 95F0      2083            subb    a,b
068E E4        2084            clr     a
068F 33        2085            rlc     a
0690 FF        2086            mov     r7,a
0691 4E        2087            orl     a,r6
0692 7000      2088            jnz     L025016?
0694 020000    2089            ljmp    L025007?
0697           2090   L025016?:
0697           2091   ;        EFM8_JDY40_test.c:606: buff[j--]=HexDigit[val%Base];
0697 AEB8      2092            mov     r6,_PrintNumber_j_1_164
0699 AFB9      2093            mov     r7,(_PrintNumber_j_1_164 + 1)
069B 15B8      2094            dec     _PrintNumber_j_1_164
069D 74FF      2095            mov     a,#0xff
069F B5B868    2096            cjne    a,_PrintNumber_j_1_164,L025017?
06A2 15B9      2097            dec     (_PrintNumber_j_1_164 + 1)
06A4           2098   L025017?:
06A4 EE        2099            mov     a,r6
06A5 2458      2100            add     a,#_PrintNumber_buff_1_164
06A7 F508      2101            mov     _PrintNumber_sloc0_1_0,a
06A9 EF        2102            mov     a,r7
06AA 34C1      2103            addc    a,#(_PrintNumber_buff_1_164 >> 8)
06AC F509      2104            mov     (_PrintNumber_sloc0_1_0 + 1),a
06AE 859858    2105            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
06B1 E599      2106            mov     a,(_PrintNumber_PARM_2 + 1)
06B3 F559      2107            mov     (_PrintNumber_sloc1_1_0 + 1),a
06B5 33        2108            rlc     a
06B6 95E0      2109            subb    a,acc
06B8 F55A      2110            mov     (_PrintNumber_sloc1_1_0 + 2),a
06BA F55B      2111            mov     (_PrintNumber_sloc1_1_0 + 3),a
06BC 855800    2112            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
06BF 855901    2113            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06C2 855A02    2114            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06C5 855B03    2115            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06C8 856882    2116            mov     dpl,_PrintNumber_val_1_163
06CB 856983    2117            mov     dph,(_PrintNumber_val_1_163 + 1)
06CE 856AF0    2118            mov     b,(_PrintNumber_val_1_163 + 2)
06D1 E56B      2119            mov     a,(_PrintNumber_val_1_163 + 3)
06D3 C000      2120            push    ar0
06D5 C001      2121            push    ar1
06D7 120000    2122            lcall   __modslong
06DA AE82      2123            mov     r6,dpl
06DC AF83      2124            mov     r7,dph
06DE EE        2125            mov     a,r6
06DF 24B0      2126            add     a,#_PrintNumber_HexDigit_1_164
06E1 F582      2127            mov     dpl,a
06E3 EF        2128            mov     a,r7
06E4 3411      2129            addc    a,#(_PrintNumber_HexDigit_1_164 >> 8)
06E6 F583      2130            mov     dph,a
06E8 E4        2131            clr     a
06E9 93        2132            movc    a,@a+dptr
06EA 850882    2133            mov     dpl,_PrintNumber_sloc0_1_0
06ED 850983    2134            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
06F0 F0        2135            movx    @dptr,a
06F1           2136   ;        EFM8_JDY40_test.c:607: val/=Base;
06F1 855800    2137            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
06F4 855901    2138            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06F7 855A02    2139            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06FA 855B03    2140            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06FD 856882    2141            mov     dpl,_PrintNumber_val_1_163
0700 856983    2142            mov     dph,(_PrintNumber_val_1_163 + 1)
0703 856AF0    2143            mov     b,(_PrintNumber_val_1_163 + 2)
0706 E56B      2144            mov     a,(_PrintNumber_val_1_163 + 3)
0708 120000    2145            lcall   __divslong
070B 858268    2146            mov     _PrintNumber_val_1_163,dpl
070E 858369    2147            mov     (_PrintNumber_val_1_163 + 1),dph
0711 85F06A    2148            mov     (_PrintNumber_val_1_163 + 2),b
0714 F56B      2149            mov     (_PrintNumber_val_1_163 + 3),a
0716 D001      2150            pop     ar1
0718 D000      2151            pop     ar0
071A           2152   ;        EFM8_JDY40_test.c:608: if(digits!=0) digits--;
071A E8        2153            mov     a,r0
071B 49        2154            orl     a,r1
071C 7000      2155            jnz     L025018?
071E 020000    2156            ljmp    L025005?
0721           2157   L025018?:
0721 18        2158            dec     r0
0722 B8FF08    2159            cjne    r0,#0xff,L025019?
0725 19        2160            dec     r1
0726           2161   L025019?:
0726 020000    2162            ljmp    L025005?
0729           2163   L025007?:
0729           2164   ;        EFM8_JDY40_test.c:610: eputs(&buff[j+1]);
0729 E5B8      2165            mov     a,_PrintNumber_j_1_164
072B 04        2166            inc     a
072C 2458      2167            add     a,#_PrintNumber_buff_1_164
072E FA        2168            mov     r2,a
072F E4        2169            clr     a
0730 34C1      2170            addc    a,#(_PrintNumber_buff_1_164 >> 8)
0732 FB        2171            mov     r3,a
0733 7C00      2172            mov     r4,#0x00
0735 8A82      2173            mov     dpl,r2
0737 8B83      2174            mov     dph,r3
0739 8CF0      2175            mov     b,r4
073B 020000    2176            ljmp    _eputs
073E           2177   ;------------------------------------------------------------
073E           2178   ;Allocation info for local variables in function 'GetFrequency'
073E           2179   ;------------------------------------------------------------
073E           2180   ;c                         Allocated to registers r2 r3 r4 r5 
073E           2181   ;f                         Allocated to registers r6 r7 r0 r1 
073E           2182   ;------------------------------------------------------------
073E           2183   ;        EFM8_JDY40_test.c:613: unsigned long GetFrequency (long int c)
073E           2184   ;        -----------------------------------------
073E           2185   ;         function GetFrequency
073E           2186   ;        -----------------------------------------
073E           2187   _GetFrequency:
073E AA82      2188            mov     r2,dpl
0740 AB83      2189            mov     r3,dph
0742 ACF0      2190            mov     r4,b
0744 FD        2191            mov     r5,a
0745           2192   ;        EFM8_JDY40_test.c:615: long int f = 0;
0745 7E00      2193            mov     r6,#0x00
0747 7F00      2194            mov     r7,#0x00
0749 7800      2195            mov     r0,#0x00
074B 7900      2196            mov     r1,#0x00
074D           2197   ;        EFM8_JDY40_test.c:617: if(c>0)
074D C3        2198            clr     c
074E E4        2199            clr     a
074F 9A        2200            subb    a,r2
0750 E4        2201            clr     a
0751 9B        2202            subb    a,r3
0752 E4        2203            clr     a
0753 9C        2204            subb    a,r4
0754 E4        2205            clr     a
0755 6480      2206            xrl     a,#0x80
0757 8DF0      2207            mov     b,r5
0759 63F080    2208            xrl     b,#0x80
075C 95F0      2209            subb    a,b
075E 5000      2210            jnc     L026002?
0760           2211   ;        EFM8_JDY40_test.c:619: f=(SYSCLK*200.0)/(c*12);
0760 8A00      2212            mov     __mullong_PARM_2,r2
0762 8B01      2213            mov     (__mullong_PARM_2 + 1),r3
0764 8C02      2214            mov     (__mullong_PARM_2 + 2),r4
0766 8D03      2215            mov     (__mullong_PARM_2 + 3),r5
0768 90000C    2216            mov     dptr,#(0x0C&0x00ff)
076B E4        2217            clr     a
076C F5F0      2218            mov     b,a
076E 120000    2219            lcall   __mullong
0771 120000    2220            lcall   ___slong2fs
0774 AA82      2221            mov     r2,dpl
0776 AB83      2222            mov     r3,dph
0778 ACF0      2223            mov     r4,b
077A FD        2224            mov     r5,a
077B C002      2225            push    ar2
077D C003      2226            push    ar3
077F C004      2227            push    ar4
0781 C005      2228            push    ar5
0783 9093A4    2229            mov     dptr,#0x93A4
0786 75F056    2230            mov     b,#0x56
0789 7450      2231            mov     a,#0x50
078B 120000    2232            lcall   ___fsdiv
078E AA82      2233            mov     r2,dpl
0790 AB83      2234            mov     r3,dph
0792 ACF0      2235            mov     r4,b
0794 FD        2236            mov     r5,a
0795 E581      2237            mov     a,sp
0797 24FC      2238            add     a,#0xfc
0799 F581      2239            mov     sp,a
079B 8A82      2240            mov     dpl,r2
079D 8B83      2241            mov     dph,r3
079F 8CF0      2242            mov     b,r4
07A1 ED        2243            mov     a,r5
07A2 120000    2244            lcall   ___fs2slong
07A5 AE82      2245            mov     r6,dpl
07A7 AF83      2246            mov     r7,dph
07A9 A8F0      2247            mov     r0,b
07AB F9        2248            mov     r1,a
07AC 8000      2249            sjmp    L026003?
07AE           2250   L026002?:
07AE           2251   ;        EFM8_JDY40_test.c:629: eputs(" NO SIGNAL                     \r");
07AE 90DBD8    2252            mov     dptr,#__str_4
07B1 75F080    2253            mov     b,#0x80
07B4 C006      2254            push    ar6
07B6 C007      2255            push    ar7
07B8 C000      2256            push    ar0
07BA C001      2257            push    ar1
07BC 120000    2258            lcall   _eputs
07BF D001      2259            pop     ar1
07C1 D000      2260            pop     ar0
07C3 D007      2261            pop     ar7
07C5 D006      2262            pop     ar6
07C7           2263   L026003?:
07C7           2264   ;        EFM8_JDY40_test.c:632: return f;
07C7 8E82      2265            mov     dpl,r6
07C9 8F83      2266            mov     dph,r7
07CB 88F0      2267            mov     b,r0
07CD E9        2268            mov     a,r1
07CE 22        2269            ret
07CF           2270   ;------------------------------------------------------------
07CF           2271   ;Allocation info for local variables in function 'LCD_pulse'
07CF           2272   ;------------------------------------------------------------
07CF           2273   ;------------------------------------------------------------
07CF           2274   ;        EFM8_JDY40_test.c:636: void LCD_pulse (void)
07CF           2275   ;        -----------------------------------------
07CF           2276   ;         function LCD_pulse
07CF           2277   ;        -----------------------------------------
07CF           2278   _LCD_pulse:
07CF           2279   ;        EFM8_JDY40_test.c:638: LCD_E=1;
07CF D2A6      2280            setb    _P2_6
07D1           2281   ;        EFM8_JDY40_test.c:639: Timer3us(40);
07D1 758228    2282            mov     dpl,#0x28
07D4 120000    2283            lcall   _Timer3us
07D7           2284   ;        EFM8_JDY40_test.c:640: LCD_E=0;
07D7 C2A6      2285            clr     _P2_6
07D9 22        2286            ret
07DA           2287   ;------------------------------------------------------------
07DA           2288   ;Allocation info for local variables in function 'LCD_byte'
07DA           2289   ;------------------------------------------------------------
07DA           2290   ;x                         Allocated to registers r2 
07DA           2291   ;------------------------------------------------------------
07DA           2292   ;        EFM8_JDY40_test.c:643: void LCD_byte (unsigned char x)
07DA           2293   ;        -----------------------------------------
07DA           2294   ;         function LCD_byte
07DA           2295   ;        -----------------------------------------
07DA           2296   _LCD_byte:
07DA AA82      2297            mov     r2,dpl
07DC           2298   ;        EFM8_JDY40_test.c:646: ACC=x; //Send high nible
07DC 8AE0      2299            mov     _ACC,r2
07DE           2300   ;        EFM8_JDY40_test.c:647: LCD_D7=ACC_7;
07DE A2E7      2301            mov     c,_ACC_7
07E0 9287      2302            mov     _P0_7,c
07E2           2303   ;        EFM8_JDY40_test.c:648: LCD_D6=ACC_6;
07E2 A2E6      2304            mov     c,_ACC_6
07E4 9290      2305            mov     _P1_0,c
07E6           2306   ;        EFM8_JDY40_test.c:649: LCD_D5=ACC_5;
07E6 A2E5      2307            mov     c,_ACC_5
07E8 9291      2308            mov     _P1_1,c
07EA           2309   ;        EFM8_JDY40_test.c:650: LCD_D4=ACC_4;
07EA A2E4      2310            mov     c,_ACC_4
07EC 9292      2311            mov     _P1_2,c
07EE           2312   ;        EFM8_JDY40_test.c:651: LCD_pulse();
07EE C002      2313            push    ar2
07F0 120000    2314            lcall   _LCD_pulse
07F3           2315   ;        EFM8_JDY40_test.c:652: Timer3us(40);
07F3 758228    2316            mov     dpl,#0x28
07F6 120000    2317            lcall   _Timer3us
07F9 D002      2318            pop     ar2
07FB           2319   ;        EFM8_JDY40_test.c:653: ACC=x; //Send low nible
07FB 8AE0      2320            mov     _ACC,r2
07FD           2321   ;        EFM8_JDY40_test.c:654: LCD_D7=ACC_3;
07FD A2E3      2322            mov     c,_ACC_3
07FF 9287      2323            mov     _P0_7,c
0801           2324   ;        EFM8_JDY40_test.c:655: LCD_D6=ACC_2;
0801 A2E2      2325            mov     c,_ACC_2
0803 9290      2326            mov     _P1_0,c
0805           2327   ;        EFM8_JDY40_test.c:656: LCD_D5=ACC_1;
0805 A2E1      2328            mov     c,_ACC_1
0807 9291      2329            mov     _P1_1,c
0809           2330   ;        EFM8_JDY40_test.c:657: LCD_D4=ACC_0;
0809 A2E0      2331            mov     c,_ACC_0
080B 9292      2332            mov     _P1_2,c
080D           2333   ;        EFM8_JDY40_test.c:658: LCD_pulse();
080D 020000    2334            ljmp    _LCD_pulse
0810           2335   ;------------------------------------------------------------
0810           2336   ;Allocation info for local variables in function 'WriteData'
0810           2337   ;------------------------------------------------------------
0810           2338   ;x                         Allocated to registers r2 
0810           2339   ;------------------------------------------------------------
0810           2340   ;        EFM8_JDY40_test.c:661: void WriteData (unsigned char x)
0810           2341   ;        -----------------------------------------
0810           2342   ;         function WriteData
0810           2343   ;        -----------------------------------------
0810           2344   _WriteData:
0810 AA82      2345            mov     r2,dpl
0812           2346   ;        EFM8_JDY40_test.c:663: LCD_RS=1;
0812 D2A2      2347            setb    _P2_2
0814           2348   ;        EFM8_JDY40_test.c:664: LCD_byte(x);
0814 8A82      2349            mov     dpl,r2
0816 120000    2350            lcall   _LCD_byte
0819           2351   ;        EFM8_JDY40_test.c:665: waitms(2);
0819 900002    2352            mov     dptr,#0x0002
081C 020000    2353            ljmp    _waitms
081F           2354   ;------------------------------------------------------------
081F           2355   ;Allocation info for local variables in function 'WriteCommand'
081F           2356   ;------------------------------------------------------------
081F           2357   ;x                         Allocated to registers r2 
081F           2358   ;------------------------------------------------------------
081F           2359   ;        EFM8_JDY40_test.c:668: void WriteCommand (unsigned char x)
081F           2360   ;        -----------------------------------------
081F           2361   ;         function WriteCommand
081F           2362   ;        -----------------------------------------
081F           2363   _WriteCommand:
081F AA82      2364            mov     r2,dpl
0821           2365   ;        EFM8_JDY40_test.c:670: LCD_RS=0;
0821 C2A2      2366            clr     _P2_2
0823           2367   ;        EFM8_JDY40_test.c:671: LCD_byte(x);
0823 8A82      2368            mov     dpl,r2
0825 120000    2369            lcall   _LCD_byte
0828           2370   ;        EFM8_JDY40_test.c:672: waitms(5);
0828 900005    2371            mov     dptr,#0x0005
082B 020000    2372            ljmp    _waitms
082E           2373   ;------------------------------------------------------------
082E           2374   ;Allocation info for local variables in function 'LCD_4BIT'
082E           2375   ;------------------------------------------------------------
082E           2376   ;------------------------------------------------------------
082E           2377   ;        EFM8_JDY40_test.c:675: void LCD_4BIT (void)
082E           2378   ;        -----------------------------------------
082E           2379   ;         function LCD_4BIT
082E           2380   ;        -----------------------------------------
082E           2381   _LCD_4BIT:
082E           2382   ;        EFM8_JDY40_test.c:677: LCD_E=0; // Resting state of LCD's enable is zero
082E C2A6      2383            clr     _P2_6
0830           2384   ;        EFM8_JDY40_test.c:679: waitms(20);
0830 900014    2385            mov     dptr,#0x0014
0833 120000    2386            lcall   _waitms
0836           2387   ;        EFM8_JDY40_test.c:681: WriteCommand(0x33);
0836 758233    2388            mov     dpl,#0x33
0839 120000    2389            lcall   _WriteCommand
083C           2390   ;        EFM8_JDY40_test.c:682: WriteCommand(0x33);
083C 758233    2391            mov     dpl,#0x33
083F 120000    2392            lcall   _WriteCommand
0842           2393   ;        EFM8_JDY40_test.c:683: WriteCommand(0x32); // Change to 4-bit mode
0842 758232    2394            mov     dpl,#0x32
0845 120000    2395            lcall   _WriteCommand
0848           2396   ;        EFM8_JDY40_test.c:686: WriteCommand(0x28);
0848 758228    2397            mov     dpl,#0x28
084B 120000    2398            lcall   _WriteCommand
084E           2399   ;        EFM8_JDY40_test.c:687: WriteCommand(0x0c);
084E 75820C    2400            mov     dpl,#0x0C
0851 120000    2401            lcall   _WriteCommand
0854           2402   ;        EFM8_JDY40_test.c:688: WriteCommand(0x01); // Clear screen command (takes some time)
0854 758201    2403            mov     dpl,#0x01
0857 120000    2404            lcall   _WriteCommand
085A           2405   ;        EFM8_JDY40_test.c:689: waitms(20); // Wait for clear screen command to finsih.
085A 900014    2406            mov     dptr,#0x0014
085D 020000    2407            ljmp    _waitms
0860           2408   ;------------------------------------------------------------
0860           2409   ;Allocation info for local variables in function 'servomotion'
0860           2410   ;------------------------------------------------------------
0860           2411   ;j                         Allocated to registers r2 
0860           2412   ;i                         Allocated to registers r2 r3 
0860           2413   ;------------------------------------------------------------
0860           2414   ;        EFM8_JDY40_test.c:693: void servomotion(void)
0860           2415   ;        -----------------------------------------
0860           2416   ;         function servomotion
0860           2417   ;        -----------------------------------------
0860           2418   _servomotion:
0860           2419   ;        EFM8_JDY40_test.c:698: WriteCommand(0x40);  // Set CGRAM address
0860 758240    2420            mov     dpl,#0x40
0863 120000    2421            lcall   _WriteCommand
0866           2422   ;        EFM8_JDY40_test.c:699: for(i=0; i<8; i++) {
0866 7A00      2423            mov     r2,#0x00
0868 7B00      2424            mov     r3,#0x00
086A           2425   L032003?:
086A C3        2426            clr     c
086B EA        2427            mov     a,r2
086C 9408      2428            subb    a,#0x08
086E EB        2429            mov     a,r3
086F 6480      2430            xrl     a,#0x80
0871 9480      2431            subb    a,#0x80
0873 5000      2432            jnc     L032006?
0875           2433   ;        EFM8_JDY40_test.c:701: WriteData(customMouth[i]);
0875 EA        2434            mov     a,r2
0876 2450      2435            add     a,#_customMouth
0878 F582      2436            mov     dpl,a
087A EB        2437            mov     a,r3
087B 3413      2438            addc    a,#(_customMouth >> 8)
087D F583      2439            mov     dph,a
087F E4        2440            clr     a
0880 93        2441            movc    a,@a+dptr
0881 F582      2442            mov     dpl,a
0883 C002      2443            push    ar2
0885 C003      2444            push    ar3
0887 120000    2445            lcall   _WriteData
088A D003      2446            pop     ar3
088C D002      2447            pop     ar2
088E           2448   ;        EFM8_JDY40_test.c:699: for(i=0; i<8; i++) {
088E 0A        2449            inc     r2
088F BA0018    2450            cjne    r2,#0x00,L032003?
0892 0B        2451            inc     r3
0893 8000      2452            sjmp    L032003?
0895           2453   L032006?:
0895           2454   ;        EFM8_JDY40_test.c:704: WriteCommand(0x48);
0895 758248    2455            mov     dpl,#0x48
0898 120000    2456            lcall   _WriteCommand
089B           2457   ;        EFM8_JDY40_test.c:705: for(i=0; i<8; i++) {
089B 7A00      2458            mov     r2,#0x00
089D 7B00      2459            mov     r3,#0x00
089F           2460   L032007?:
089F C3        2461            clr     c
08A0 EA        2462            mov     a,r2
08A1 9408      2463            subb    a,#0x08
08A3 EB        2464            mov     a,r3
08A4 6480      2465            xrl     a,#0x80
08A6 9480      2466            subb    a,#0x80
08A8 5000      2467            jnc     L032010?
08AA           2468   ;        EFM8_JDY40_test.c:707: WriteData(customEye[i]);
08AA EA        2469            mov     a,r2
08AB 2410      2470            add     a,#_customEye
08AD F582      2471            mov     dpl,a
08AF EB        2472            mov     a,r3
08B0 3413      2473            addc    a,#(_customEye >> 8)
08B2 F583      2474            mov     dph,a
08B4 E4        2475            clr     a
08B5 93        2476            movc    a,@a+dptr
08B6 F582      2477            mov     dpl,a
08B8 C002      2478            push    ar2
08BA C003      2479            push    ar3
08BC 120000    2480            lcall   _WriteData
08BF D003      2481            pop     ar3
08C1 D002      2482            pop     ar2
08C3           2483   ;        EFM8_JDY40_test.c:705: for(i=0; i<8; i++) {
08C3 0A        2484            inc     r2
08C4 BA0098    2485            cjne    r2,#0x00,L032007?
08C7 0B        2486            inc     r3
08C8 8000      2487            sjmp    L032007?
08CA           2488   L032010?:
08CA           2489   ;        EFM8_JDY40_test.c:710: WriteCommand(0x50);  // Set CGRAM address
08CA 758250    2490            mov     dpl,#0x50
08CD 120000    2491            lcall   _WriteCommand
08D0           2492   ;        EFM8_JDY40_test.c:711: for(i=0; i<8; i++) {
08D0 7A00      2493            mov     r2,#0x00
08D2 7B00      2494            mov     r3,#0x00
08D4           2495   L032011?:
08D4 C3        2496            clr     c
08D5 EA        2497            mov     a,r2
08D6 9408      2498            subb    a,#0x08
08D8 EB        2499            mov     a,r3
08D9 6480      2500            xrl     a,#0x80
08DB 9480      2501            subb    a,#0x80
08DD 5000      2502            jnc     L032014?
08DF           2503   ;        EFM8_JDY40_test.c:713: WriteData(customOpenMouth[i]);
08DF EA        2504            mov     a,r2
08E0 24D0      2505            add     a,#_customOpenMouth
08E2 F582      2506            mov     dpl,a
08E4 EB        2507            mov     a,r3
08E5 3412      2508            addc    a,#(_customOpenMouth >> 8)
08E7 F583      2509            mov     dph,a
08E9 E4        2510            clr     a
08EA 93        2511            movc    a,@a+dptr
08EB F582      2512            mov     dpl,a
08ED C002      2513            push    ar2
08EF C003      2514            push    ar3
08F1 120000    2515            lcall   _WriteData
08F4 D003      2516            pop     ar3
08F6 D002      2517            pop     ar2
08F8           2518   ;        EFM8_JDY40_test.c:711: for(i=0; i<8; i++) {
08F8 0A        2519            inc     r2
08F9 BA0018    2520            cjne    r2,#0x00,L032011?
08FC 0B        2521            inc     r3
08FD 8000      2522            sjmp    L032011?
08FF           2523   L032014?:
08FF           2524   ;        EFM8_JDY40_test.c:716: WriteCommand(0x58);  // Set CGRAM address
08FF 758258    2525            mov     dpl,#0x58
0902 120000    2526            lcall   _WriteCommand
0905           2527   ;        EFM8_JDY40_test.c:717: for(i=0; i<8; i++) {
0905 7A00      2528            mov     r2,#0x00
0907 7B00      2529            mov     r3,#0x00
0909           2530   L032015?:
0909 C3        2531            clr     c
090A EA        2532            mov     a,r2
090B 9408      2533            subb    a,#0x08
090D EB        2534            mov     a,r3
090E 6480      2535            xrl     a,#0x80
0910 9480      2536            subb    a,#0x80
0912 5000      2537            jnc     L032018?
0914           2538   ;        EFM8_JDY40_test.c:719: WriteData(customSparkle[i]);
0914 EA        2539            mov     a,r2
0915 2480      2540            add     a,#_customSparkle
0917 F582      2541            mov     dpl,a
0919 EB        2542            mov     a,r3
091A 3412      2543            addc    a,#(_customSparkle >> 8)
091C F583      2544            mov     dph,a
091E E4        2545            clr     a
091F 93        2546            movc    a,@a+dptr
0920 F582      2547            mov     dpl,a
0922 C002      2548            push    ar2
0924 C003      2549            push    ar3
0926 120000    2550            lcall   _WriteData
0929 D003      2551            pop     ar3
092B D002      2552            pop     ar2
092D           2553   ;        EFM8_JDY40_test.c:717: for(i=0; i<8; i++) {
092D 0A        2554            inc     r2
092E BA0098    2555            cjne    r2,#0x00,L032015?
0931 0B        2556            inc     r3
0932 8000      2557            sjmp    L032015?
0934           2558   L032018?:
0934           2559   ;        EFM8_JDY40_test.c:722: WriteCommand(0x60);  // Set CGRAM address
0934 758260    2560            mov     dpl,#0x60
0937 120000    2561            lcall   _WriteCommand
093A           2562   ;        EFM8_JDY40_test.c:723: for(i=0; i<8; i++) {
093A 7A00      2563            mov     r2,#0x00
093C 7B00      2564            mov     r3,#0x00
093E           2565   L032019?:
093E C3        2566            clr     c
093F EA        2567            mov     a,r2
0940 9408      2568            subb    a,#0x08
0942 EB        2569            mov     a,r3
0943 6480      2570            xrl     a,#0x80
0945 9480      2571            subb    a,#0x80
0947 5000      2572            jnc     L032022?
0949           2573   ;        EFM8_JDY40_test.c:725: WriteData(customMoney[i]);
0949 EA        2574            mov     a,r2
094A 2440      2575            add     a,#_customMoney
094C F582      2576            mov     dpl,a
094E EB        2577            mov     a,r3
094F 3412      2578            addc    a,#(_customMoney >> 8)
0951 F583      2579            mov     dph,a
0953 E4        2580            clr     a
0954 93        2581            movc    a,@a+dptr
0955 F582      2582            mov     dpl,a
0957 C002      2583            push    ar2
0959 C003      2584            push    ar3
095B 120000    2585            lcall   _WriteData
095E D003      2586            pop     ar3
0960 D002      2587            pop     ar2
0962           2588   ;        EFM8_JDY40_test.c:723: for(i=0; i<8; i++) {
0962 0A        2589            inc     r2
0963 BA0018    2590            cjne    r2,#0x00,L032019?
0966 0B        2591            inc     r3
0967 8000      2592            sjmp    L032019?
0969           2593   L032022?:
0969           2594   ;        EFM8_JDY40_test.c:728: WriteCommand(0x68);  // Set CGRAM address
0969 758268    2595            mov     dpl,#0x68
096C 120000    2596            lcall   _WriteCommand
096F           2597   ;        EFM8_JDY40_test.c:729: for(i=0; i<8; i++) {
096F 7A00      2598            mov     r2,#0x00
0971 7B00      2599            mov     r3,#0x00
0973           2600   L032023?:
0973 C3        2601            clr     c
0974 EA        2602            mov     a,r2
0975 9408      2603            subb    a,#0x08
0977 EB        2604            mov     a,r3
0978 6480      2605            xrl     a,#0x80
097A 9480      2606            subb    a,#0x80
097C 5000      2607            jnc     L032026?
097E           2608   ;        EFM8_JDY40_test.c:731: WriteData(customHappyMouth[i]);
097E EA        2609            mov     a,r2
097F 2400      2610            add     a,#_customHappyMouth
0981 F582      2611            mov     dpl,a
0983 EB        2612            mov     a,r3
0984 3412      2613            addc    a,#(_customHappyMouth >> 8)
0986 F583      2614            mov     dph,a
0988 E4        2615            clr     a
0989 93        2616            movc    a,@a+dptr
098A F582      2617            mov     dpl,a
098C C002      2618            push    ar2
098E C003      2619            push    ar3
0990 120000    2620            lcall   _WriteData
0993 D003      2621            pop     ar3
0995 D002      2622            pop     ar2
0997           2623   ;        EFM8_JDY40_test.c:729: for(i=0; i<8; i++) {
0997 0A        2624            inc     r2
0998 BA0098    2625            cjne    r2,#0x00,L032023?
099B 0B        2626            inc     r3
099C 8000      2627            sjmp    L032023?
099E           2628   L032026?:
099E           2629   ;        EFM8_JDY40_test.c:734: WriteCommand(0x87);
099E 758287    2630            mov     dpl,#0x87
09A1 120000    2631            lcall   _WriteCommand
09A4           2632   ;        EFM8_JDY40_test.c:735: WriteData(3);
09A4 758203    2633            mov     dpl,#0x03
09A7 120000    2634            lcall   _WriteData
09AA           2635   ;        EFM8_JDY40_test.c:737: WriteCommand(0x89);
09AA 758289    2636            mov     dpl,#0x89
09AD 120000    2637            lcall   _WriteCommand
09B0           2638   ;        EFM8_JDY40_test.c:738: WriteData(3);
09B0 758203    2639            mov     dpl,#0x03
09B3 120000    2640            lcall   _WriteData
09B6           2641   ;        EFM8_JDY40_test.c:740: WriteCommand(0xC9);
09B6 7582C9    2642            mov     dpl,#0xC9
09B9 120000    2643            lcall   _WriteCommand
09BC           2644   ;        EFM8_JDY40_test.c:741: WriteData(2);
09BC 758202    2645            mov     dpl,#0x02
09BF 120000    2646            lcall   _WriteData
09C2           2647   ;        EFM8_JDY40_test.c:743: waitms(500);
09C2 9001F4    2648            mov     dptr,#0x01F4
09C5 120000    2649            lcall   _waitms
09C8           2650   ;        EFM8_JDY40_test.c:744: servo1 = 150;
09C8 75D896    2651            mov     _servo1,#0x96
09CB           2652   ;        EFM8_JDY40_test.c:745: waitms(100);
09CB 900064    2653            mov     dptr,#0x0064
09CE 120000    2654            lcall   _waitms
09D1           2655   ;        EFM8_JDY40_test.c:747: P1_5 = 1;        
09D1 D295      2656            setb    _P1_5
09D3           2657   ;        EFM8_JDY40_test.c:750: for(j=250; j>180; j-=5) 
09D3 7AFA      2658            mov     r2,#0xFA
09D5           2659   L032027?:
09D5 EA        2660            mov     a,r2
09D6 244B      2661            add     a,#0xff - 0xB4
09D8 5000      2662            jnc     L032030?
09DA           2663   ;        EFM8_JDY40_test.c:752: servo2 = j;
09DA 8A98      2664            mov     _servo2,r2
09DC           2665   ;        EFM8_JDY40_test.c:753: waitms(20);
09DC 900014    2666            mov     dptr,#0x0014
09DF C002      2667            push    ar2
09E1 120000    2668            lcall   _waitms
09E4 D002      2669            pop     ar2
09E6           2670   ;        EFM8_JDY40_test.c:750: for(j=250; j>180; j-=5) 
09E6 EA        2671            mov     a,r2
09E7 24FB      2672            add     a,#0xfb
09E9 FA        2673            mov     r2,a
09EA 8000      2674            sjmp    L032027?
09EC           2675   L032030?:
09EC           2676   ;        EFM8_JDY40_test.c:756: waitms(1000);
09EC 9003E8    2677            mov     dptr,#0x03E8
09EF 120000    2678            lcall   _waitms
09F2           2679   ;        EFM8_JDY40_test.c:759: for(j=150; j<250; j+=5) 
09F2 7A96      2680            mov     r2,#0x96
09F4           2681   L032031?:
09F4 BAFAD8    2682            cjne    r2,#0xFA,L032082?
09F7           2683   L032082?:
09F7 5000      2684            jnc     L032034?
09F9           2685   ;        EFM8_JDY40_test.c:761: servo1 = j;
09F9 8AD8      2686            mov     _servo1,r2
09FB           2687   ;        EFM8_JDY40_test.c:762: waitms(20);
09FB 900014    2688            mov     dptr,#0x0014
09FE C002      2689            push    ar2
0A00 120000    2690            lcall   _waitms
0A03 D002      2691            pop     ar2
0A05           2692   ;        EFM8_JDY40_test.c:759: for(j=150; j<250; j+=5) 
0A05 7405      2693            mov     a,#0x05
0A07 2A        2694            add     a,r2
0A08 FA        2695            mov     r2,a
0A09 8000      2696            sjmp    L032031?
0A0B           2697   L032034?:
0A0B           2698   ;        EFM8_JDY40_test.c:765: waitms(1000);
0A0B 9003E8    2699            mov     dptr,#0x03E8
0A0E 120000    2700            lcall   _waitms
0A11           2701   ;        EFM8_JDY40_test.c:768: for(j=180; j > 90; j-=5){
0A11 7AB4      2702            mov     r2,#0xB4
0A13           2703   L032035?:
0A13 EA        2704            mov     a,r2
0A14 24A5      2705            add     a,#0xff - 0x5A
0A16 5000      2706            jnc     L032038?
0A18           2707   ;        EFM8_JDY40_test.c:769: servo2 = j;
0A18 8A98      2708            mov     _servo2,r2
0A1A           2709   ;        EFM8_JDY40_test.c:770: waitms(20);
0A1A 900014    2710            mov     dptr,#0x0014
0A1D C002      2711            push    ar2
0A1F 120000    2712            lcall   _waitms
0A22 D002      2713            pop     ar2
0A24           2714   ;        EFM8_JDY40_test.c:768: for(j=180; j > 90; j-=5){
0A24 EA        2715            mov     a,r2
0A25 24FB      2716            add     a,#0xfb
0A27 FA        2717            mov     r2,a
0A28 8000      2718            sjmp    L032035?
0A2A           2719   L032038?:
0A2A           2720   ;        EFM8_JDY40_test.c:775: P1_5 = 0;
0A2A C295      2721            clr     _P1_5
0A2C           2722   ;        EFM8_JDY40_test.c:777: waitms(150);
0A2C 900096    2723            mov     dptr,#0x0096
0A2F 120000    2724            lcall   _waitms
0A32           2725   ;        EFM8_JDY40_test.c:778: servo1 = 250;
0A32 75D8FA    2726            mov     _servo1,#0xFA
0A35           2727   ;        EFM8_JDY40_test.c:779: servo2 = 250; 
0A35 7598FA    2728            mov     _servo2,#0xFA
0A38           2729   ;        EFM8_JDY40_test.c:780: EMAGNET=0;
0A38 C295      2730            clr     _P1_5
0A3A           2731   ;        EFM8_JDY40_test.c:782: if ( cointcount >= 20 ) {
0A3A C3        2732            clr     c
0A3B E558      2733            mov     a,_cointcount
0A3D 9414      2734            subb    a,#0x14
0A3F E559      2735            mov     a,(_cointcount + 1)
0A41 9400      2736            subb    a,#0x00
0A43 4000      2737            jc      L032002?
0A45           2738   ;        EFM8_JDY40_test.c:783: direction = 1;
0A45 755801    2739            mov     _direction,#0x01
0A48 E4        2740            clr     a
0A49 F559      2741            mov     (_direction + 1),a
0A4B           2742   ;        EFM8_JDY40_test.c:784: P3_7=0;  //wheel 1
0A4B C2B7      2743            clr     _P3_7
0A4D           2744   ;        EFM8_JDY40_test.c:785: P3_2=1;  // wheel 1 
0A4D D2B2      2745            setb    _P3_2
0A4F           2746   ;        EFM8_JDY40_test.c:786: P3_0=1; // wheel 2
0A4F D2B0      2747            setb    _P3_0
0A51           2748   ;        EFM8_JDY40_test.c:787: P2_5=0; // wheel 2
0A51 C2A5      2749            clr     _P2_5
0A53           2750   ;        EFM8_JDY40_test.c:788: cointcount=0;
0A53 E4        2751            clr     a
0A54 F558      2752            mov     _cointcount,a
0A56 F559      2753            mov     (_cointcount + 1),a
0A58           2754   L032002?:
0A58           2755   ;        EFM8_JDY40_test.c:793: WriteCommand(0x87);
0A58 758287    2756            mov     dpl,#0x87
0A5B 120000    2757            lcall   _WriteCommand
0A5E           2758   ;        EFM8_JDY40_test.c:794: WriteData(1);
0A5E 758201    2759            mov     dpl,#0x01
0A61 120000    2760            lcall   _WriteData
0A64           2761   ;        EFM8_JDY40_test.c:796: WriteCommand(0x88);
0A64 758288    2762            mov     dpl,#0x88
0A67 120000    2763            lcall   _WriteCommand
0A6A           2764   ;        EFM8_JDY40_test.c:797: WriteData(1);
0A6A 758201    2765            mov     dpl,#0x01
0A6D 120000    2766            lcall   _WriteData
0A70           2767   ;        EFM8_JDY40_test.c:799: WriteCommand(0xC9);
0A70 7582C9    2768            mov     dpl,#0xC9
0A73 120000    2769            lcall   _WriteCommand
0A76           2770   ;        EFM8_JDY40_test.c:800: WriteData(0);
0A76 758200    2771            mov     dpl,#0x00
0A79 020000    2772            ljmp    _WriteData
0A7C           2773   ;------------------------------------------------------------
0A7C           2774   ;Allocation info for local variables in function 'automaticmode'
0A7C           2775   ;------------------------------------------------------------
0A7C           2776   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0A7C           2777   ;freq                      Allocated with name '_automaticmode_PARM_3'
0A7C           2778   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0A7C           2779   ;control                   Allocated to registers 
0A7C           2780   ;------------------------------------------------------------
0A7C           2781   ;        EFM8_JDY40_test.c:808: void automaticmode(float fowardper, float sideper, long int freq)
0A7C           2782   ;        -----------------------------------------
0A7C           2783   ;         function automaticmode
0A7C           2784   ;        -----------------------------------------
0A7C           2785   _automaticmode:
0A7C AA82      2786            mov     r2,dpl
0A7E AB83      2787            mov     r3,dph
0A80 ACF0      2788            mov     r4,b
0A82 FD        2789            mov     r5,a
0A83           2790   ;        EFM8_JDY40_test.c:811: direction = 3;
0A83 755803    2791            mov     _direction,#0x03
0A86 E4        2792            clr     a
0A87 F559      2793            mov     (_direction + 1),a
0A89           2794   ;        EFM8_JDY40_test.c:812: sprintf(msg, "%05ld\n\r", freq); // subtracted so that it sends a smaller value
0A89 C002      2795            push    ar2
0A8B C003      2796            push    ar3
0A8D C004      2797            push    ar4
0A8F C005      2798            push    ar5
0A91 C0A8      2799            push    _automaticmode_PARM_3
0A93 C0A9      2800            push    (_automaticmode_PARM_3 + 1)
0A95 C0AA      2801            push    (_automaticmode_PARM_3 + 2)
0A97 C0AB      2802            push    (_automaticmode_PARM_3 + 3)
0A99 7418      2803            mov     a,#__str_5
0A9B C0E0      2804            push    acc
0A9D 74E1      2805            mov     a,#(__str_5 >> 8)
0A9F C0E0      2806            push    acc
0AA1 7480      2807            mov     a,#0x80
0AA3 C0E0      2808            push    acc
0AA5 7418      2809            mov     a,#_msg
0AA7 C0E0      2810            push    acc
0AA9 744D      2811            mov     a,#(_msg >> 8)
0AAB C0E0      2812            push    acc
0AAD 7440      2813            mov     a,#0x40
0AAF C0E0      2814            push    acc
0AB1 120000    2815            lcall   _sprintf
0AB4 E581      2816            mov     a,sp
0AB6 24F6      2817            add     a,#0xf6
0AB8 F581      2818            mov     sp,a
0ABA           2819   ;        EFM8_JDY40_test.c:813: sendstr1(msg);
0ABA 904D18    2820            mov     dptr,#_msg
0ABD 75F040    2821            mov     b,#0x40
0AC0 120000    2822            lcall   _sendstr1
0AC3           2823   ;        EFM8_JDY40_test.c:814: waitms(50);
0AC3 900032    2824            mov     dptr,#0x0032
0AC6 120000    2825            lcall   _waitms
0AC9 D005      2826            pop     ar5
0ACB D004      2827            pop     ar4
0ACD D003      2828            pop     ar3
0ACF D002      2829            pop     ar2
0AD1           2830   ;        EFM8_JDY40_test.c:816: P3_7=1;  //wheel 1
0AD1 D2B7      2831            setb    _P3_7
0AD3           2832   ;        EFM8_JDY40_test.c:817: P3_2=0;  // wheel 1 
0AD3 C2B2      2833            clr     _P3_2
0AD5           2834   ;        EFM8_JDY40_test.c:818: P3_0=0; // wheel 2
0AD5 C2B0      2835            clr     _P3_0
0AD7           2836   ;        EFM8_JDY40_test.c:819: P2_5=1; // wheel 2
0AD7 D2A5      2837            setb    _P2_5
0AD9           2838   ;        EFM8_JDY40_test.c:820: if ( freq >= 64050)  //100000    63750   65000
0AD9 C3        2839            clr     c
0ADA E5A8      2840            mov     a,_automaticmode_PARM_3
0ADC 9432      2841            subb    a,#0x32
0ADE E5A9      2842            mov     a,(_automaticmode_PARM_3 + 1)
0AE0 94FA      2843            subb    a,#0xFA
0AE2 E5AA      2844            mov     a,(_automaticmode_PARM_3 + 2)
0AE4 9400      2845            subb    a,#0x00
0AE6 E5AB      2846            mov     a,(_automaticmode_PARM_3 + 3)
0AE8 6480      2847            xrl     a,#0x80
0AEA 9480      2848            subb    a,#0x80
0AEC 4000      2849            jc      L033002?
0AEE           2850   ;        EFM8_JDY40_test.c:822: P3_7=0;  //wheel 1
0AEE C2B7      2851            clr     _P3_7
0AF0           2852   ;        EFM8_JDY40_test.c:823: P3_2=1;  // wheel 1 
0AF0 D2B2      2853            setb    _P3_2
0AF2           2854   ;        EFM8_JDY40_test.c:824: P3_0=1; // wheel 2
0AF2 D2B0      2855            setb    _P3_0
0AF4           2856   ;        EFM8_JDY40_test.c:825: P2_5=0; // wheel 2
0AF4 C2A5      2857            clr     _P2_5
0AF6           2858   ;        EFM8_JDY40_test.c:826: waitms(150);
0AF6 900096    2859            mov     dptr,#0x0096
0AF9 C002      2860            push    ar2
0AFB C003      2861            push    ar3
0AFD C004      2862            push    ar4
0AFF C005      2863            push    ar5
0B01 120000    2864            lcall   _waitms
0B04           2865   ;        EFM8_JDY40_test.c:827: P3_7=0;  //wheel 1
0B04 C2B7      2866            clr     _P3_7
0B06           2867   ;        EFM8_JDY40_test.c:828: P3_2=0;  // wheel 1 
0B06 C2B2      2868            clr     _P3_2
0B08           2869   ;        EFM8_JDY40_test.c:829: P3_0=0; // wheel 2
0B08 C2B0      2870            clr     _P3_0
0B0A           2871   ;        EFM8_JDY40_test.c:830: P2_5=0; // wheel 2
0B0A C2A5      2872            clr     _P2_5
0B0C           2873   ;        EFM8_JDY40_test.c:831: servomotion();
0B0C 120000    2874            lcall   _servomotion
0B0F D005      2875            pop     ar5
0B11 D004      2876            pop     ar4
0B13 D003      2877            pop     ar3
0B15 D002      2878            pop     ar2
0B17           2879   ;        EFM8_JDY40_test.c:832: cointcount++;
0B17 7401      2880            mov     a,#0x01
0B19 2558      2881            add     a,_cointcount
0B1B F558      2882            mov     _cointcount,a
0B1D E4        2883            clr     a
0B1E 3559      2884            addc    a,(_cointcount + 1)
0B20 F559      2885            mov     (_cointcount + 1),a
0B22           2886   L033002?:
0B22           2887   ;        EFM8_JDY40_test.c:836: if ( fowardper >= p_thresh)
0B22 74CD      2888            mov     a,#0xCD
0B24 C0E0      2889            push    acc
0B26 74CC      2890            mov     a,#0xCC
0B28 C0E0      2891            push    acc
0B2A C0E0      2892            push    acc
0B2C 743D      2893            mov     a,#0x3D
0B2E C0E0      2894            push    acc
0B30 8A82      2895            mov     dpl,r2
0B32 8B83      2896            mov     dph,r3
0B34 8CF0      2897            mov     b,r4
0B36 ED        2898            mov     a,r5
0B37 120000    2899            lcall   ___fslt
0B3A AA82      2900            mov     r2,dpl
0B3C E581      2901            mov     a,sp
0B3E 24FC      2902            add     a,#0xfc
0B40 F581      2903            mov     sp,a
0B42 EA        2904            mov     a,r2
0B43 7000      2905            jnz     L033004?
0B45           2906   ;        EFM8_JDY40_test.c:838: P3_7=0;  //wheel 1
0B45 C2B7      2907            clr     _P3_7
0B47           2908   ;        EFM8_JDY40_test.c:839: P3_2=1;  // wheel 1 
0B47 D2B2      2909            setb    _P3_2
0B49           2910   ;        EFM8_JDY40_test.c:840: P3_0=1; // wheel 2
0B49 D2B0      2911            setb    _P3_0
0B4B           2912   ;        EFM8_JDY40_test.c:841: P2_5=0; // wheel 2
0B4B C2A5      2913            clr     _P2_5
0B4D           2914   ;        EFM8_JDY40_test.c:842: waitms(300);
0B4D 90012C    2915            mov     dptr,#0x012C
0B50 120000    2916            lcall   _waitms
0B53           2917   ;        EFM8_JDY40_test.c:843: P3_7=0;  //wheel 1
0B53 C2B7      2918            clr     _P3_7
0B55           2919   ;        EFM8_JDY40_test.c:844: P3_2=1;  // wheel 1 
0B55 D2B2      2920            setb    _P3_2
0B57           2921   ;        EFM8_JDY40_test.c:845: P3_0=0; // wheel 2
0B57 C2B0      2922            clr     _P3_0
0B59           2923   ;        EFM8_JDY40_test.c:846: P2_5=0; // wheel 2
0B59 C2A5      2924            clr     _P2_5
0B5B           2925   ;        EFM8_JDY40_test.c:847: waitms(750);
0B5B 9002EE    2926            mov     dptr,#0x02EE
0B5E           2927   ;        EFM8_JDY40_test.c:848: return;
0B5E 020000    2928            ljmp    _waitms
0B61           2929   L033004?:
0B61           2930   ;        EFM8_JDY40_test.c:853: if ( sideper >= p_thresh)
0B61 74CD      2931            mov     a,#0xCD
0B63 C0E0      2932            push    acc
0B65 74CC      2933            mov     a,#0xCC
0B67 C0E0      2934            push    acc
0B69 C0E0      2935            push    acc
0B6B 743D      2936            mov     a,#0x3D
0B6D C0E0      2937            push    acc
0B6F 85F882    2938            mov     dpl,_automaticmode_PARM_2
0B72 85F983    2939            mov     dph,(_automaticmode_PARM_2 + 1)
0B75 85FAF0    2940            mov     b,(_automaticmode_PARM_2 + 2)
0B78 E5FB      2941            mov     a,(_automaticmode_PARM_2 + 3)
0B7A 120000    2942            lcall   ___fslt
0B7D AA82      2943            mov     r2,dpl
0B7F E581      2944            mov     a,sp
0B81 24FC      2945            add     a,#0xfc
0B83 F581      2946            mov     sp,a
0B85 EA        2947            mov     a,r2
0B86 7000      2948            jnz     L033007?
0B88           2949   ;        EFM8_JDY40_test.c:855: P3_7=0;  //wheel 1
0B88 C2B7      2950            clr     _P3_7
0B8A           2951   ;        EFM8_JDY40_test.c:856: P3_2=1;  // wheel 1 
0B8A D2B2      2952            setb    _P3_2
0B8C           2953   ;        EFM8_JDY40_test.c:857: P3_0=0; // wheel 2
0B8C C2B0      2954            clr     _P3_0
0B8E           2955   ;        EFM8_JDY40_test.c:858: P2_5=0; // wheel 2
0B8E C2A5      2956            clr     _P2_5
0B90           2957   ;        EFM8_JDY40_test.c:859: waitms(750);
0B90 9002EE    2958            mov     dptr,#0x02EE
0B93           2959   ;        EFM8_JDY40_test.c:860: control = 1;
0B93 020000    2960            ljmp    _waitms
0B96           2961   L033007?:
0B96 22        2962            ret
0B97           2963   ;------------------------------------------------------------
0B97           2964   ;Allocation info for local variables in function 'main'
0B97           2965   ;------------------------------------------------------------
0B97           2966   ;timeout                   Allocated to registers 
0B97           2967   ;pulse_width               Allocated to registers 
0B97           2968   ;pulse_width1              Allocated to registers 
0B97           2969   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_199'
0B97           2970   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_199'
0B97           2971   ;which                     Allocated with name '_main_which_1_199'
0B97           2972   ;i                         Allocated to registers r2 r3 
0B97           2973   ;count                     Allocated to registers r2 r3 r4 r5 
0B97           2974   ;f                         Allocated with name '_main_f_1_199'
0B97           2975   ;v                         Allocated with name '_main_v_1_199'
0B97           2976   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0B97           2977   ;------------------------------------------------------------
0B97           2978   ;        EFM8_JDY40_test.c:867: void main (void)
0B97           2979   ;        -----------------------------------------
0B97           2980   ;         function main
0B97           2981   ;        -----------------------------------------
0B97           2982   _main:
0B97           2983   ;        EFM8_JDY40_test.c:886: waitms(500);
0B97 9001F4    2984            mov     dptr,#0x01F4
0B9A 120000    2985            lcall   _waitms
0B9D           2986   ;        EFM8_JDY40_test.c:887: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0B9D 7498      2987            mov     a,#__str_6
0B9F C0E0      2988            push    acc
0BA1 74E2      2989            mov     a,#(__str_6 >> 8)
0BA3 C0E0      2990            push    acc
0BA5 7480      2991            mov     a,#0x80
0BA7 C0E0      2992            push    acc
0BA9 120000    2993            lcall   _printf
0BAC 1581      2994            dec     sp
0BAE 1581      2995            dec     sp
0BB0 1581      2996            dec     sp
0BB2           2997   ;        EFM8_JDY40_test.c:888: UART1_Init(9600);
0BB2 902580    2998            mov     dptr,#0x2580
0BB5 E4        2999            clr     a
0BB6 F5F0      3000            mov     b,a
0BB8 120000    3001            lcall   _UART1_Init
0BBB           3002   ;        EFM8_JDY40_test.c:890: ReceptionOff();
0BBB 120000    3003            lcall   _ReceptionOff
0BBE           3004   ;        EFM8_JDY40_test.c:892: LCD_4BIT();
0BBE 120000    3005            lcall   _LCD_4BIT
0BC1           3006   ;        EFM8_JDY40_test.c:894: TIMER0_Init(); 
0BC1 120000    3007            lcall   _TIMER0_Init
0BC4           3008   ;        EFM8_JDY40_test.c:896: InitPinADC(2, 1); // Configure P2.1 as analog input
0BC4 756001    3009            mov     _InitPinADC_PARM_2,#0x01
0BC7 758202    3010            mov     dpl,#0x02
0BCA 120000    3011            lcall   _InitPinADC
0BCD           3012   ;        EFM8_JDY40_test.c:897: InitPinADC(2, 3); // Configure P2.1 as analog input
0BCD 756003    3013            mov     _InitPinADC_PARM_2,#0x03
0BD0 758202    3014            mov     dpl,#0x02
0BD3 120000    3015            lcall   _InitPinADC
0BD6           3016   ;        EFM8_JDY40_test.c:898: InitADC();
0BD6 120000    3017            lcall   _InitADC
0BD9           3018   ;        EFM8_JDY40_test.c:902: SendATCommand("AT+VER\r\n");
0BD9 90E2D8    3019            mov     dptr,#__str_7
0BDC 75F080    3020            mov     b,#0x80
0BDF 120000    3021            lcall   _SendATCommand
0BE2           3022   ;        EFM8_JDY40_test.c:903: SendATCommand("AT+BAUD\r\n");
0BE2 90E318    3023            mov     dptr,#__str_8
0BE5 75F080    3024            mov     b,#0x80
0BE8 120000    3025            lcall   _SendATCommand
0BEB           3026   ;        EFM8_JDY40_test.c:904: SendATCommand("AT+RFID\r\n");
0BEB 90E358    3027            mov     dptr,#__str_9
0BEE 75F080    3028            mov     b,#0x80
0BF1 120000    3029            lcall   _SendATCommand
0BF4           3030   ;        EFM8_JDY40_test.c:905: SendATCommand("AT+DVID\r\n");
0BF4 90E398    3031            mov     dptr,#__str_10
0BF7 75F080    3032            mov     b,#0x80
0BFA 120000    3033            lcall   _SendATCommand
0BFD           3034   ;        EFM8_JDY40_test.c:906: SendATCommand("AT+RFC120\r\n");
0BFD 90E3D8    3035            mov     dptr,#__str_11
0C00 75F080    3036            mov     b,#0x80
0C03 120000    3037            lcall   _SendATCommand
0C06           3038   ;        EFM8_JDY40_test.c:907: SendATCommand("AT+POWE\r\n");
0C06 90E418    3039            mov     dptr,#__str_12
0C09 75F080    3040            mov     b,#0x80
0C0C 120000    3041            lcall   _SendATCommand
0C0F           3042   ;        EFM8_JDY40_test.c:908: SendATCommand("AT+CLSS\r\n");
0C0F 90E458    3043            mov     dptr,#__str_13
0C12 75F080    3044            mov     b,#0x80
0C15 120000    3045            lcall   _SendATCommand
0C18           3046   ;        EFM8_JDY40_test.c:912: SendATCommand("AT+DVIDFFFF\r\n");  
0C18 90E498    3047            mov     dptr,#__str_14
0C1B 75F080    3048            mov     b,#0x80
0C1E 120000    3049            lcall   _SendATCommand
0C21           3050   ;        EFM8_JDY40_test.c:914: WriteCommand(0x40);  // Set CGRAM address
0C21 758240    3051            mov     dpl,#0x40
0C24 120000    3052            lcall   _WriteCommand
0C27           3053   ;        EFM8_JDY40_test.c:915: for(i=0; i<8; i++) {
0C27 7A00      3054            mov     r2,#0x00
0C29 7B00      3055            mov     r3,#0x00
0C2B           3056   L034028?:
0C2B C3        3057            clr     c
0C2C EA        3058            mov     a,r2
0C2D 9408      3059            subb    a,#0x08
0C2F EB        3060            mov     a,r3
0C30 6480      3061            xrl     a,#0x80
0C32 9480      3062            subb    a,#0x80
0C34 5000      3063            jnc     L034031?
0C36           3064   ;        EFM8_JDY40_test.c:917: WriteData(customMouth[i]);
0C36 EA        3065            mov     a,r2
0C37 2450      3066            add     a,#_customMouth
0C39 F582      3067            mov     dpl,a
0C3B EB        3068            mov     a,r3
0C3C 3413      3069            addc    a,#(_customMouth >> 8)
0C3E F583      3070            mov     dph,a
0C40 E4        3071            clr     a
0C41 93        3072            movc    a,@a+dptr
0C42 F582      3073            mov     dpl,a
0C44 C002      3074            push    ar2
0C46 C003      3075            push    ar3
0C48 120000    3076            lcall   _WriteData
0C4B D003      3077            pop     ar3
0C4D D002      3078            pop     ar2
0C4F           3079   ;        EFM8_JDY40_test.c:915: for(i=0; i<8; i++) {
0C4F 0A        3080            inc     r2
0C50 BA00D8    3081            cjne    r2,#0x00,L034028?
0C53 0B        3082            inc     r3
0C54 8000      3083            sjmp    L034028?
0C56           3084   L034031?:
0C56           3085   ;        EFM8_JDY40_test.c:920: WriteCommand(0x48);
0C56 758248    3086            mov     dpl,#0x48
0C59 120000    3087            lcall   _WriteCommand
0C5C           3088   ;        EFM8_JDY40_test.c:921: for(i=0; i<8; i++) {
0C5C 7A00      3089            mov     r2,#0x00
0C5E 7B00      3090            mov     r3,#0x00
0C60           3091   L034032?:
0C60 C3        3092            clr     c
0C61 EA        3093            mov     a,r2
0C62 9408      3094            subb    a,#0x08
0C64 EB        3095            mov     a,r3
0C65 6480      3096            xrl     a,#0x80
0C67 9480      3097            subb    a,#0x80
0C69 5000      3098            jnc     L034035?
0C6B           3099   ;        EFM8_JDY40_test.c:923: WriteData(customEye[i]);
0C6B EA        3100            mov     a,r2
0C6C 2410      3101            add     a,#_customEye
0C6E F582      3102            mov     dpl,a
0C70 EB        3103            mov     a,r3
0C71 3413      3104            addc    a,#(_customEye >> 8)
0C73 F583      3105            mov     dph,a
0C75 E4        3106            clr     a
0C76 93        3107            movc    a,@a+dptr
0C77 F582      3108            mov     dpl,a
0C79 C002      3109            push    ar2
0C7B C003      3110            push    ar3
0C7D 120000    3111            lcall   _WriteData
0C80 D003      3112            pop     ar3
0C82 D002      3113            pop     ar2
0C84           3114   ;        EFM8_JDY40_test.c:921: for(i=0; i<8; i++) {
0C84 0A        3115            inc     r2
0C85 BA0058    3116            cjne    r2,#0x00,L034032?
0C88 0B        3117            inc     r3
0C89 8000      3118            sjmp    L034032?
0C8B           3119   L034035?:
0C8B           3120   ;        EFM8_JDY40_test.c:926: WriteCommand(0x50);  // Set CGRAM address
0C8B 758250    3121            mov     dpl,#0x50
0C8E 120000    3122            lcall   _WriteCommand
0C91           3123   ;        EFM8_JDY40_test.c:927: for(i=0; i<8; i++) {
0C91 7A00      3124            mov     r2,#0x00
0C93 7B00      3125            mov     r3,#0x00
0C95           3126   L034036?:
0C95 C3        3127            clr     c
0C96 EA        3128            mov     a,r2
0C97 9408      3129            subb    a,#0x08
0C99 EB        3130            mov     a,r3
0C9A 6480      3131            xrl     a,#0x80
0C9C 9480      3132            subb    a,#0x80
0C9E 5000      3133            jnc     L034039?
0CA0           3134   ;        EFM8_JDY40_test.c:929: WriteData(customOpenMouth[i]);
0CA0 EA        3135            mov     a,r2
0CA1 24D0      3136            add     a,#_customOpenMouth
0CA3 F582      3137            mov     dpl,a
0CA5 EB        3138            mov     a,r3
0CA6 3412      3139            addc    a,#(_customOpenMouth >> 8)
0CA8 F583      3140            mov     dph,a
0CAA E4        3141            clr     a
0CAB 93        3142            movc    a,@a+dptr
0CAC F582      3143            mov     dpl,a
0CAE C002      3144            push    ar2
0CB0 C003      3145            push    ar3
0CB2 120000    3146            lcall   _WriteData
0CB5 D003      3147            pop     ar3
0CB7 D002      3148            pop     ar2
0CB9           3149   ;        EFM8_JDY40_test.c:927: for(i=0; i<8; i++) {
0CB9 0A        3150            inc     r2
0CBA BA00D8    3151            cjne    r2,#0x00,L034036?
0CBD 0B        3152            inc     r3
0CBE 8000      3153            sjmp    L034036?
0CC0           3154   L034039?:
0CC0           3155   ;        EFM8_JDY40_test.c:932: WriteCommand(0x58);  // Set CGRAM address
0CC0 758258    3156            mov     dpl,#0x58
0CC3 120000    3157            lcall   _WriteCommand
0CC6           3158   ;        EFM8_JDY40_test.c:933: for(i=0; i<8; i++) {
0CC6 7A00      3159            mov     r2,#0x00
0CC8 7B00      3160            mov     r3,#0x00
0CCA           3161   L034040?:
0CCA C3        3162            clr     c
0CCB EA        3163            mov     a,r2
0CCC 9408      3164            subb    a,#0x08
0CCE EB        3165            mov     a,r3
0CCF 6480      3166            xrl     a,#0x80
0CD1 9480      3167            subb    a,#0x80
0CD3 5000      3168            jnc     L034043?
0CD5           3169   ;        EFM8_JDY40_test.c:935: WriteData(customSparkle[i]);
0CD5 EA        3170            mov     a,r2
0CD6 2480      3171            add     a,#_customSparkle
0CD8 F582      3172            mov     dpl,a
0CDA EB        3173            mov     a,r3
0CDB 3412      3174            addc    a,#(_customSparkle >> 8)
0CDD F583      3175            mov     dph,a
0CDF E4        3176            clr     a
0CE0 93        3177            movc    a,@a+dptr
0CE1 F582      3178            mov     dpl,a
0CE3 C002      3179            push    ar2
0CE5 C003      3180            push    ar3
0CE7 120000    3181            lcall   _WriteData
0CEA D003      3182            pop     ar3
0CEC D002      3183            pop     ar2
0CEE           3184   ;        EFM8_JDY40_test.c:933: for(i=0; i<8; i++) {
0CEE 0A        3185            inc     r2
0CEF BA0058    3186            cjne    r2,#0x00,L034040?
0CF2 0B        3187            inc     r3
0CF3 8000      3188            sjmp    L034040?
0CF5           3189   L034043?:
0CF5           3190   ;        EFM8_JDY40_test.c:938: WriteCommand(0x60);  // Set CGRAM address
0CF5 758260    3191            mov     dpl,#0x60
0CF8 120000    3192            lcall   _WriteCommand
0CFB           3193   ;        EFM8_JDY40_test.c:939: for(i=0; i<8; i++) {
0CFB 7A00      3194            mov     r2,#0x00
0CFD 7B00      3195            mov     r3,#0x00
0CFF           3196   L034044?:
0CFF C3        3197            clr     c
0D00 EA        3198            mov     a,r2
0D01 9408      3199            subb    a,#0x08
0D03 EB        3200            mov     a,r3
0D04 6480      3201            xrl     a,#0x80
0D06 9480      3202            subb    a,#0x80
0D08 5000      3203            jnc     L034047?
0D0A           3204   ;        EFM8_JDY40_test.c:941: WriteData(customMoney[i]);
0D0A EA        3205            mov     a,r2
0D0B 2440      3206            add     a,#_customMoney
0D0D F582      3207            mov     dpl,a
0D0F EB        3208            mov     a,r3
0D10 3412      3209            addc    a,#(_customMoney >> 8)
0D12 F583      3210            mov     dph,a
0D14 E4        3211            clr     a
0D15 93        3212            movc    a,@a+dptr
0D16 F582      3213            mov     dpl,a
0D18 C002      3214            push    ar2
0D1A C003      3215            push    ar3
0D1C 120000    3216            lcall   _WriteData
0D1F D003      3217            pop     ar3
0D21 D002      3218            pop     ar2
0D23           3219   ;        EFM8_JDY40_test.c:939: for(i=0; i<8; i++) {
0D23 0A        3220            inc     r2
0D24 BA00D8    3221            cjne    r2,#0x00,L034044?
0D27 0B        3222            inc     r3
0D28 8000      3223            sjmp    L034044?
0D2A           3224   L034047?:
0D2A           3225   ;        EFM8_JDY40_test.c:944: WriteCommand(0x68);  // Set CGRAM address
0D2A 758268    3226            mov     dpl,#0x68
0D2D 120000    3227            lcall   _WriteCommand
0D30           3228   ;        EFM8_JDY40_test.c:945: for(i=0; i<8; i++) {
0D30 7A00      3229            mov     r2,#0x00
0D32 7B00      3230            mov     r3,#0x00
0D34           3231   L034048?:
0D34 C3        3232            clr     c
0D35 EA        3233            mov     a,r2
0D36 9408      3234            subb    a,#0x08
0D38 EB        3235            mov     a,r3
0D39 6480      3236            xrl     a,#0x80
0D3B 9480      3237            subb    a,#0x80
0D3D 5000      3238            jnc     L034051?
0D3F           3239   ;        EFM8_JDY40_test.c:947: WriteData(customHappyMouth[i]);
0D3F EA        3240            mov     a,r2
0D40 2400      3241            add     a,#_customHappyMouth
0D42 F582      3242            mov     dpl,a
0D44 EB        3243            mov     a,r3
0D45 3412      3244            addc    a,#(_customHappyMouth >> 8)
0D47 F583      3245            mov     dph,a
0D49 E4        3246            clr     a
0D4A 93        3247            movc    a,@a+dptr
0D4B F582      3248            mov     dpl,a
0D4D C002      3249            push    ar2
0D4F C003      3250            push    ar3
0D51 120000    3251            lcall   _WriteData
0D54 D003      3252            pop     ar3
0D56 D002      3253            pop     ar2
0D58           3254   ;        EFM8_JDY40_test.c:945: for(i=0; i<8; i++) {
0D58 0A        3255            inc     r2
0D59 BA0058    3256            cjne    r2,#0x00,L034048?
0D5C 0B        3257            inc     r3
0D5D 8000      3258            sjmp    L034048?
0D5F           3259   L034051?:
0D5F           3260   ;        EFM8_JDY40_test.c:950: WriteCommand(0x87);
0D5F 758287    3261            mov     dpl,#0x87
0D62 120000    3262            lcall   _WriteCommand
0D65           3263   ;        EFM8_JDY40_test.c:951: WriteData(1);
0D65 758201    3264            mov     dpl,#0x01
0D68 120000    3265            lcall   _WriteData
0D6B           3266   ;        EFM8_JDY40_test.c:953: WriteCommand(0x88);
0D6B 758288    3267            mov     dpl,#0x88
0D6E 120000    3268            lcall   _WriteCommand
0D71           3269   ;        EFM8_JDY40_test.c:954: WriteData(1);
0D71 758201    3270            mov     dpl,#0x01
0D74 120000    3271            lcall   _WriteData
0D77           3272   ;        EFM8_JDY40_test.c:956: WriteCommand(0xC9);
0D77 7582C9    3273            mov     dpl,#0xC9
0D7A 120000    3274            lcall   _WriteCommand
0D7D           3275   ;        EFM8_JDY40_test.c:957: WriteData(0);
0D7D 758200    3276            mov     dpl,#0x00
0D80 120000    3277            lcall   _WriteData
0D83           3278   ;        EFM8_JDY40_test.c:959: P1_5 = 0;
0D83 C295      3279            clr     _P1_5
0D85           3280   ;        EFM8_JDY40_test.c:960: while(1)
0D85           3281   L034026?:
0D85           3282   ;        EFM8_JDY40_test.c:962: EMAGNET = 0;
0D85 C295      3283            clr     _P1_5
0D87           3284   ;        EFM8_JDY40_test.c:964: count = GetPeriod(200);
0D87 9000C8    3285            mov     dptr,#0x00C8
0D8A 120000    3286            lcall   _GetPeriod
0D8D           3287   ;        EFM8_JDY40_test.c:965: f = GetFrequency(count);
0D8D 120000    3288            lcall   _GetFrequency
0D90 858288    3289            mov     _main_f_1_199,dpl
0D93 858389    3290            mov     (_main_f_1_199 + 1),dph
0D96 85F08A    3291            mov     (_main_f_1_199 + 2),b
0D99 F58B      3292            mov     (_main_f_1_199 + 3),a
0D9B           3293   ;        EFM8_JDY40_test.c:967: sprintf(msg, "%05ld\n\r", f); // subtracted so that it sends a smaller value
0D9B C088      3294            push    _main_f_1_199
0D9D C089      3295            push    (_main_f_1_199 + 1)
0D9F C08A      3296            push    (_main_f_1_199 + 2)
0DA1 C08B      3297            push    (_main_f_1_199 + 3)
0DA3 7418      3298            mov     a,#__str_5
0DA5 C0E0      3299            push    acc
0DA7 74E1      3300            mov     a,#(__str_5 >> 8)
0DA9 C0E0      3301            push    acc
0DAB 7480      3302            mov     a,#0x80
0DAD C0E0      3303            push    acc
0DAF 7418      3304            mov     a,#_msg
0DB1 C0E0      3305            push    acc
0DB3 744D      3306            mov     a,#(_msg >> 8)
0DB5 C0E0      3307            push    acc
0DB7 7440      3308            mov     a,#0x40
0DB9 C0E0      3309            push    acc
0DBB 120000    3310            lcall   _sprintf
0DBE E581      3311            mov     a,sp
0DC0 24F6      3312            add     a,#0xf6
0DC2 F581      3313            mov     sp,a
0DC4           3314   ;        EFM8_JDY40_test.c:968: sendstr1(msg);
0DC4 904D18    3315            mov     dptr,#_msg
0DC7 75F040    3316            mov     b,#0x40
0DCA 120000    3317            lcall   _sendstr1
0DCD           3318   ;        EFM8_JDY40_test.c:969: waitms(50);
0DCD 900032    3319            mov     dptr,#0x0032
0DD0 120000    3320            lcall   _waitms
0DD3           3321   ;        EFM8_JDY40_test.c:972: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0DD3 75820E    3322            mov     dpl,#0x0E
0DD6 120000    3323            lcall   _Volts_at_Pin
0DD9 858208    3324            mov     _main_sloc0_1_0,dpl
0DDC 858309    3325            mov     (_main_sloc0_1_0 + 1),dph
0DDF 85F00A    3326            mov     (_main_sloc0_1_0 + 2),b
0DE2 F50B      3327            mov     (_main_sloc0_1_0 + 3),a
0DE4 8508C8    3328            mov     _main_v_1_199,_main_sloc0_1_0
0DE7 8509C9    3329            mov     (_main_v_1_199 + 1),(_main_sloc0_1_0 + 1)
0DEA 850ACA    3330            mov     (_main_v_1_199 + 2),(_main_sloc0_1_0 + 2)
0DED 850BCB    3331            mov     (_main_v_1_199 + 3),(_main_sloc0_1_0 + 3)
0DF0           3332   ;        EFM8_JDY40_test.c:973: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0DF0 758210    3333            mov     dpl,#0x10
0DF3 120000    3334            lcall   _Volts_at_Pin
0DF6 858208    3335            mov     _main_sloc0_1_0,dpl
0DF9 858309    3336            mov     (_main_sloc0_1_0 + 1),dph
0DFC 85F00A    3337            mov     (_main_sloc0_1_0 + 2),b
0DFF F50B      3338            mov     (_main_sloc0_1_0 + 3),a
0E01 8508CC    3339            mov     (_main_v_1_199 + 0x0004),_main_sloc0_1_0
0E04 8509CD    3340            mov     ((_main_v_1_199 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0E07 850ACE    3341            mov     ((_main_v_1_199 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0E0A 850BCF    3342            mov     ((_main_v_1_199 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0E0D           3343   ;        EFM8_JDY40_test.c:976: if(RXU1()) // Something has arrived
0E0D 120000    3344            lcall   _RXU1
0E10 4000      3345            jc      L034095?
0E12 020000    3346            ljmp    L034026?
0E15           3347   L034095?:
0E15           3348   ;        EFM8_JDY40_test.c:979: getstr1(buff, sizeof(buff));
0E15 75D814    3349            mov     _getstr1_PARM_2,#0x14
0E18 904D58    3350            mov     dptr,#_buff
0E1B 75F040    3351            mov     b,#0x40
0E1E 120000    3352            lcall   _getstr1
0E21           3353   ;        EFM8_JDY40_test.c:980: if ( strcmp(buff, "A") == 0 )
0E21 750098    3354            mov     _strcmp_PARM_2,#__str_15
0E24 7501E8    3355            mov     (_strcmp_PARM_2 + 1),#(__str_15 >> 8)
0E27 750280    3356            mov     (_strcmp_PARM_2 + 2),#0x80
0E2A 904D58    3357            mov     dptr,#_buff
0E2D 75F040    3358            mov     b,#0x40
0E30 120000    3359            lcall   _strcmp
0E33 E582      3360            mov     a,dpl
0E35 8583F0    3361            mov     b,dph
0E38 45F0      3362            orl     a,b
0E3A 6000      3363            jz      L034096?
0E3C 020000    3364            ljmp    L034009?
0E3F           3365   L034096?:
0E3F           3366   ;        EFM8_JDY40_test.c:982: waitms(500);
0E3F 9001F4    3367            mov     dptr,#0x01F4
0E42 120000    3368            lcall   _waitms
0E45           3369   ;        EFM8_JDY40_test.c:983: while(1)
0E45           3370   L034006?:
0E45           3371   ;        EFM8_JDY40_test.c:985: waitms(5);
0E45 900005    3372            mov     dptr,#0x0005
0E48 120000    3373            lcall   _waitms
0E4B           3374   ;        EFM8_JDY40_test.c:986: direction=3; 
0E4B 755803    3375            mov     _direction,#0x03
0E4E E4        3376            clr     a
0E4F F559      3377            mov     (_direction + 1),a
0E51           3378   ;        EFM8_JDY40_test.c:989: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0E51 75820E    3379            mov     dpl,#0x0E
0E54 120000    3380            lcall   _Volts_at_Pin
0E57 858208    3381            mov     _main_sloc0_1_0,dpl
0E5A 858309    3382            mov     (_main_sloc0_1_0 + 1),dph
0E5D 85F00A    3383            mov     (_main_sloc0_1_0 + 2),b
0E60 F50B      3384            mov     (_main_sloc0_1_0 + 3),a
0E62 8508C8    3385            mov     _main_v_1_199,_main_sloc0_1_0
0E65 8509C9    3386            mov     (_main_v_1_199 + 1),(_main_sloc0_1_0 + 1)
0E68 850ACA    3387            mov     (_main_v_1_199 + 2),(_main_sloc0_1_0 + 2)
0E6B 850BCB    3388            mov     (_main_v_1_199 + 3),(_main_sloc0_1_0 + 3)
0E6E           3389   ;        EFM8_JDY40_test.c:990: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0E6E 758210    3390            mov     dpl,#0x10
0E71 120000    3391            lcall   _Volts_at_Pin
0E74 858208    3392            mov     _main_sloc0_1_0,dpl
0E77 858309    3393            mov     (_main_sloc0_1_0 + 1),dph
0E7A 85F00A    3394            mov     (_main_sloc0_1_0 + 2),b
0E7D F50B      3395            mov     (_main_sloc0_1_0 + 3),a
0E7F 8508CC    3396            mov     (_main_v_1_199 + 0x0004),_main_sloc0_1_0
0E82 8509CD    3397            mov     ((_main_v_1_199 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0E85 850ACE    3398            mov     ((_main_v_1_199 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0E88 850BCF    3399            mov     ((_main_v_1_199 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0E8B           3400   ;        EFM8_JDY40_test.c:991: count = GetPeriod(200);
0E8B 9000C8    3401            mov     dptr,#0x00C8
0E8E 120000    3402            lcall   _GetPeriod
0E91           3403   ;        EFM8_JDY40_test.c:992: f = GetFrequency(count);
0E91 120000    3404            lcall   _GetFrequency
0E94 8582A8    3405            mov     _automaticmode_PARM_3,dpl
0E97 8583A9    3406            mov     (_automaticmode_PARM_3 + 1),dph
0E9A 85F0AA    3407            mov     (_automaticmode_PARM_3 + 2),b
0E9D F5AB      3408            mov     (_automaticmode_PARM_3 + 3),a
0E9F           3409   ;        EFM8_JDY40_test.c:993: automaticmode(v[0], v[1], f);
0E9F 85CCF8    3410            mov     _automaticmode_PARM_2,(_main_v_1_199 + 0x0004)
0EA2 85CDF9    3411            mov     (_automaticmode_PARM_2 + 1),((_main_v_1_199 + 0x0004) + 1)
0EA5 85CEFA    3412            mov     (_automaticmode_PARM_2 + 2),((_main_v_1_199 + 0x0004) + 2)
0EA8 85CFFB    3413            mov     (_automaticmode_PARM_2 + 3),((_main_v_1_199 + 0x0004) + 3)
0EAB 85C882    3414            mov     dpl,_main_v_1_199
0EAE 85C983    3415            mov     dph,(_main_v_1_199 + 1)
0EB1 85CAF0    3416            mov     b,(_main_v_1_199 + 2)
0EB4 E5CB      3417            mov     a,(_main_v_1_199 + 3)
0EB6 120000    3418            lcall   _automaticmode
0EB9           3419   ;        EFM8_JDY40_test.c:995: if(RXU1())
0EB9 120000    3420            lcall   _RXU1
0EBC 4000      3421            jc      L034097?
0EBE 020000    3422            ljmp    L034006?
0EC1           3423   L034097?:
0EC1           3424   ;        EFM8_JDY40_test.c:997: printf("hello");
0EC1 7418      3425            mov     a,#__str_16
0EC3 C0E0      3426            push    acc
0EC5 74EA      3427            mov     a,#(__str_16 >> 8)
0EC7 C0E0      3428            push    acc
0EC9 7480      3429            mov     a,#0x80
0ECB C0E0      3430            push    acc
0ECD 120000    3431            lcall   _printf
0ED0 1581      3432            dec     sp
0ED2 1581      3433            dec     sp
0ED4 1581      3434            dec     sp
0ED6           3435   ;        EFM8_JDY40_test.c:998: getstr1(buff, sizeof(buff));
0ED6 75D814    3436            mov     _getstr1_PARM_2,#0x14
0ED9 904D58    3437            mov     dptr,#_buff
0EDC 75F040    3438            mov     b,#0x40
0EDF 120000    3439            lcall   _getstr1
0EE2           3440   ;        EFM8_JDY40_test.c:999: if (strcmp(buff, "A") == 0 ) break;
0EE2 750098    3441            mov     _strcmp_PARM_2,#__str_15
0EE5 7501E8    3442            mov     (_strcmp_PARM_2 + 1),#(__str_15 >> 8)
0EE8 750280    3443            mov     (_strcmp_PARM_2 + 2),#0x80
0EEB 904D58    3444            mov     dptr,#_buff
0EEE 75F040    3445            mov     b,#0x40
0EF1 120000    3446            lcall   _strcmp
0EF4 E582      3447            mov     a,dpl
0EF6 8583F0    3448            mov     b,dph
0EF9 45F0      3449            orl     a,b
0EFB 6000      3450            jz      L034098?
0EFD 020000    3451            ljmp    L034006?
0F00           3452   L034098?:
0F00           3453   L034009?:
0F00           3454   ;        EFM8_JDY40_test.c:1007: if ( strcmp(buff, "S") == 0 )   
0F00 750098    3455            mov     _strcmp_PARM_2,#__str_17
0F03 7501EA    3456            mov     (_strcmp_PARM_2 + 1),#(__str_17 >> 8)
0F06 750280    3457            mov     (_strcmp_PARM_2 + 2),#0x80
0F09 904D58    3458            mov     dptr,#_buff
0F0C 75F040    3459            mov     b,#0x40
0F0F 120000    3460            lcall   _strcmp
0F12 E582      3461            mov     a,dpl
0F14 8583F0    3462            mov     b,dph
0F17 45F0      3463            orl     a,b
0F19 7000      3464            jnz     L034011?
0F1B           3465   ;        EFM8_JDY40_test.c:1009: servomotion();
0F1B 120000    3466            lcall   _servomotion
0F1E           3467   ;        EFM8_JDY40_test.c:1010: printf("this should be the motor function");
0F1E 7418      3468            mov     a,#__str_18
0F20 C0E0      3469            push    acc
0F22 74EB      3470            mov     a,#(__str_18 >> 8)
0F24 C0E0      3471            push    acc
0F26 7480      3472            mov     a,#0x80
0F28 C0E0      3473            push    acc
0F2A 120000    3474            lcall   _printf
0F2D 1581      3475            dec     sp
0F2F 1581      3476            dec     sp
0F31 1581      3477            dec     sp
0F33           3478   ;        EFM8_JDY40_test.c:1011: waitms(500);
0F33 9001F4    3479            mov     dptr,#0x01F4
0F36 120000    3480            lcall   _waitms
0F39           3481   L034011?:
0F39           3482   ;        EFM8_JDY40_test.c:1015: sscanf(buff, "K%uW%uG%d\n", &adcwheel1, &adcwheel2, &which);
0F39 7448      3483            mov     a,#_main_which_1_199
0F3B C0E0      3484            push    acc
0F3D 74C0      3485            mov     a,#(_main_which_1_199 >> 8)
0F3F C0E0      3486            push    acc
0F41 7440      3487            mov     a,#0x40
0F43 C0E0      3488            push    acc
0F45 74F8      3489            mov     a,#_main_adcwheel2_1_199
0F47 C0E0      3490            push    acc
0F49 74BF      3491            mov     a,#(_main_adcwheel2_1_199 >> 8)
0F4B C0E0      3492            push    acc
0F4D 7440      3493            mov     a,#0x40
0F4F C0E0      3494            push    acc
0F51 74A8      3495            mov     a,#_main_adcwheel1_1_199
0F53 C0E0      3496            push    acc
0F55 74BF      3497            mov     a,#(_main_adcwheel1_1_199 >> 8)
0F57 C0E0      3498            push    acc
0F59 7440      3499            mov     a,#0x40
0F5B C0E0      3500            push    acc
0F5D 7458      3501            mov     a,#__str_19
0F5F C0E0      3502            push    acc
0F61 74EB      3503            mov     a,#(__str_19 >> 8)
0F63 C0E0      3504            push    acc
0F65 7480      3505            mov     a,#0x80
0F67 C0E0      3506            push    acc
0F69 7458      3507            mov     a,#_buff
0F6B C0E0      3508            push    acc
0F6D 744D      3509            mov     a,#(_buff >> 8)
0F6F C0E0      3510            push    acc
0F71 7440      3511            mov     a,#0x40
0F73 C0E0      3512            push    acc
0F75 120000    3513            lcall   _sscanf
0F78 E581      3514            mov     a,sp
0F7A 24F1      3515            add     a,#0xf1
0F7C F581      3516            mov     sp,a
0F7E           3517   ;        EFM8_JDY40_test.c:1016: if (which == 0 )
0F7E E548      3518            mov     a,_main_which_1_199
0F80 4549      3519            orl     a,(_main_which_1_199 + 1)
0F82 7000      3520            jnz     L034013?
0F84           3521   ;        EFM8_JDY40_test.c:1018: P2_5 = 0;
0F84 C2A5      3522            clr     _P2_5
0F86           3523   ;        EFM8_JDY40_test.c:1019: P3_7=0;
0F86 C2B7      3524            clr     _P3_7
0F88           3525   ;        EFM8_JDY40_test.c:1020: direction = 1;
0F88 755801    3526            mov     _direction,#0x01
0F8B E4        3527            clr     a
0F8C F559      3528            mov     (_direction + 1),a
0F8E 8000      3529            sjmp    L034014?
0F90           3530   L034013?:
0F90           3531   ;        EFM8_JDY40_test.c:1024: P3_2=0;
0F90 C2B2      3532            clr     _P3_2
0F92           3533   ;        EFM8_JDY40_test.c:1025: P3_0=0;
0F92 C2B0      3534            clr     _P3_0
0F94           3535   ;        EFM8_JDY40_test.c:1026: direction = 0;
0F94 E4        3536            clr     a
0F95 F558      3537            mov     _direction,a
0F97 F559      3538            mov     (_direction + 1),a
0F99           3539   L034014?:
0F99           3540   ;        EFM8_JDY40_test.c:1030: pwm_duty4 = adcwheel2;
0F99 85F818    3541            mov     _pwm_duty4,_main_adcwheel2_1_199
0F9C 85F919    3542            mov     (_pwm_duty4 + 1),(_main_adcwheel2_1_199 + 1)
0F9F           3543   ;        EFM8_JDY40_test.c:1031: if ( adcwheel1 == 5535 ) adcwheel1 = 65535;
0F9F 749F      3544            mov     a,#0x9F
0FA1 B5A858    3545            cjne    a,_main_adcwheel1_1_199,L034016?
0FA4 7415      3546            mov     a,#0x15
0FA6 B5A958    3547            cjne    a,(_main_adcwheel1_1_199 + 1),L034016?
0FA9 75A8FF    3548            mov     _main_adcwheel1_1_199,#0xFF
0FAC 75A9FF    3549            mov     (_main_adcwheel1_1_199 + 1),#0xFF
0FAF           3550   L034016?:
0FAF           3551   ;        EFM8_JDY40_test.c:1032: if ( adcwheel1 == 5086 ) adcwheel1 = 65535;
0FAF 74DE      3552            mov     a,#0xDE
0FB1 B5A898    3553            cjne    a,_main_adcwheel1_1_199,L034018?
0FB4 7413      3554            mov     a,#0x13
0FB6 B5A998    3555            cjne    a,(_main_adcwheel1_1_199 + 1),L034018?
0FB9 75A8FF    3556            mov     _main_adcwheel1_1_199,#0xFF
0FBC 75A9FF    3557            mov     (_main_adcwheel1_1_199 + 1),#0xFF
0FBF           3558   L034018?:
0FBF           3559   ;        EFM8_JDY40_test.c:1033: if ( adcwheel1 == 535 ) adcwheel1 = 65535;
0FBF 7417      3560            mov     a,#0x17
0FC1 B5A8D8    3561            cjne    a,_main_adcwheel1_1_199,L034020?
0FC4 7402      3562            mov     a,#0x02
0FC6 B5A9D8    3563            cjne    a,(_main_adcwheel1_1_199 + 1),L034020?
0FC9 75A8FF    3564            mov     _main_adcwheel1_1_199,#0xFF
0FCC 75A9FF    3565            mov     (_main_adcwheel1_1_199 + 1),#0xFF
0FCF           3566   L034020?:
0FCF           3567   ;        EFM8_JDY40_test.c:1034: if ( adcwheel1 == 86 ) adcwheel1 = 65535;
0FCF 7456      3568            mov     a,#0x56
0FD1 B5A818    3569            cjne    a,_main_adcwheel1_1_199,L034107?
0FD4 E4        3570            clr     a
0FD5 B5A918    3571            cjne    a,(_main_adcwheel1_1_199 + 1),L034107?
0FD8 8000      3572            sjmp    L034108?
0FDA           3573   L034107?:
0FDA 8000      3574            sjmp    L034022?
0FDC           3575   L034108?:
0FDC 75A8FF    3576            mov     _main_adcwheel1_1_199,#0xFF
0FDF 75A9FF    3577            mov     (_main_adcwheel1_1_199 + 1),#0xFF
0FE2           3578   L034022?:
0FE2           3579   ;        EFM8_JDY40_test.c:1035: pwm_duty2 = adcwheel1;
0FE2 85A898    3580            mov     _pwm_duty2,_main_adcwheel1_1_199
0FE5 85A999    3581            mov     (_pwm_duty2 + 1),(_main_adcwheel1_1_199 + 1)
0FE8           3582   ;        EFM8_JDY40_test.c:1038: waitms(5); // The radio seems to need this delay...
0FE8 900005    3583            mov     dptr,#0x0005
0FEB 120000    3584            lcall   _waitms
0FEE 020000    3585            ljmp    L034026?
0FF1           3586            rseg R_CSEG
0FF1           3587   
0000           3588            rseg R_XINIT
0000           3589   
0000           3590            rseg R_CONST
0000           3591   _customMouth:
0000 0E        3592            db 0x0e         ; 14
0001 04        3593            db 0x04         ; 4
0002 00        3594            db 0x00         ; 0
0003 00        3595            db 0x00         ; 0
0004 11        3596            db 0x11         ; 17
0005 15        3597            db 0x15         ; 21
0006 0A        3598            db 0x0a         ; 10
0007 00        3599            db 0x00         ; 0
0008           3600   _customEye:
0008 00        3601            db 0x00         ; 0
0009 0E        3602            db 0x0e         ; 14
000A 19        3603            db 0x19         ; 25
000B 19        3604            db 0x19         ; 25
000C 1F        3605            db 0x1f         ; 31
000D 17        3606            db 0x17         ; 23
000E 0E        3607            db 0x0e         ; 14
000F 00        3608            db 0x00         ; 0
0010           3609   _customOpenMouth:
0010 0E        3610            db 0x0e         ; 14
0011 04        3611            db 0x04         ; 4
0012 00        3612            db 0x00         ; 0
0013 0E        3613            db 0x0e         ; 14
0014 11        3614            db 0x11         ; 17
0015 11        3615            db 0x11         ; 17
0016 0E        3616            db 0x0e         ; 14
0017 00        3617            db 0x00         ; 0
0018           3618   _customSparkle:
0018 04        3619            db 0x04         ; 4
0019 04        3620            db 0x04         ; 4
001A 0A        3621            db 0x0a         ; 10
001B 11        3622            db 0x11         ; 17
001C 0A        3623            db 0x0a         ; 10
001D 04        3624            db 0x04         ; 4
001E 04        3625            db 0x04         ; 4
001F 00        3626            db 0x00         ; 0
0020           3627   _customMoney:
0020 04        3628            db 0x04         ; 4
0021 0E        3629            db 0x0e         ; 14
0022 15        3630            db 0x15         ; 21
0023 14        3631            db 0x14         ; 20
0024 0E        3632            db 0x0e         ; 14
0025 05        3633            db 0x05         ; 5
0026 15        3634            db 0x15         ; 21
0027 0E        3635            db 0x0e         ; 14
0028           3636   _customHappyMouth:
0028 0E        3637            db 0x0e         ; 14
0029 04        3638            db 0x04         ; 4
002A 00        3639            db 0x00         ; 0
002B 15        3640            db 0x15         ; 21
002C 0A        3641            db 0x0a         ; 10
002D 0A        3642            db 0x0a         ; 10
002E 0E        3643            db 0x0e         ; 14
002F 00        3644            db 0x00         ; 0
0030           3645   __str_0:
0030 436F6D6D  3646            db 'Command: %s'
     616E643A
     202573
003B 00        3647            db 0x00
003C           3648   __str_1:
003C 52657370  3649            db 'Response: %s'
     6F6E7365
     3A202573
0048 0D        3650            db 0x0D
0049 0A        3651            db 0x0A
004A 00        3652            db 0x00
004B           3653   __str_2:
004B 41542B44  3654            db 'AT+DVID0000'
     56494430
     303030
0056 0D        3655            db 0x0D
0057 0A        3656            db 0x0A
0058 00        3657            db 0x00
0059           3658   _PrintNumber_HexDigit_1_164:
0059 30313233  3659            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0069 00        3660            db 0x00
006A           3661   __str_4:
006A 204E4F20  3662            db ' NO SIGNAL                     '
     5349474E
     414C2020
     20202020
     20202020
     20202020
     20202020
     202020
0089 0D        3663            db 0x0D
008A 00        3664            db 0x00
008B           3665   __str_5:
008B 2530356C  3666            db '%05ld'
     64
0090 0A        3667            db 0x0A
0091 0D        3668            db 0x0D
0092 00        3669            db 0x00
0093           3670   __str_6:
0093 0D        3671            db 0x0D
0094 0A        3672            db 0x0A
0095 45464D38  3673            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00B0 0D        3674            db 0x0D
00B1 0A        3675            db 0x0A
00B2 00        3676            db 0x00
00B3           3677   __str_7:
00B3 41542B56  3678            db 'AT+VER'
     4552
00B9 0D        3679            db 0x0D
00BA 0A        3680            db 0x0A
00BB 00        3681            db 0x00
00BC           3682   __str_8:
00BC 41542B42  3683            db 'AT+BAUD'
     415544
00C3 0D        3684            db 0x0D
00C4 0A        3685            db 0x0A
00C5 00        3686            db 0x00
00C6           3687   __str_9:
00C6 41542B52  3688            db 'AT+RFID'
     464944
00CD 0D        3689            db 0x0D
00CE 0A        3690            db 0x0A
00CF 00        3691            db 0x00
00D0           3692   __str_10:
00D0 41542B44  3693            db 'AT+DVID'
     564944
00D7 0D        3694            db 0x0D
00D8 0A        3695            db 0x0A
00D9 00        3696            db 0x00
00DA           3697   __str_11:
00DA 41542B52  3698            db 'AT+RFC120'
     46433132
     30
00E3 0D        3699            db 0x0D
00E4 0A        3700            db 0x0A
00E5 00        3701            db 0x00
00E6           3702   __str_12:
00E6 41542B50  3703            db 'AT+POWE'
     4F5745
00ED 0D        3704            db 0x0D
00EE 0A        3705            db 0x0A
00EF 00        3706            db 0x00
00F0           3707   __str_13:
00F0 41542B43  3708            db 'AT+CLSS'
     4C5353
00F7 0D        3709            db 0x0D
00F8 0A        3710            db 0x0A
00F9 00        3711            db 0x00
00FA           3712   __str_14:
00FA 41542B44  3713            db 'AT+DVIDFFFF'
     56494446
     464646
0105 0D        3714            db 0x0D
0106 0A        3715            db 0x0A
0107 00        3716            db 0x00
0108           3717   __str_15:
0108 41        3718            db 'A'
0109 00        3719            db 0x00
010A           3720   __str_16:
010A 68656C6C  3721            db 'hello'
     6F
010F 00        3722            db 0x00
0110           3723   __str_17:
0110 53        3724            db 'S'
0111 00        3725            db 0x00
0112           3726   __str_18:
0112 74686973  3727            db 'this should be the motor function'
     2073686F
     756C6420
     62652074
     6865206D
     6F746F72
     2066756E
     6374696F
     6E
0133 00        3728            db 0x00
0134           3729   __str_19:
0134 4B257557  3730            db 'K%uW%uG%d'
     25754725
     64
013D 0A        3731            db 0x0A
013E 00        3732            db 0x00
013F           3733   
0096           3734            CSEG
0096           3735   
0096           3736   end
