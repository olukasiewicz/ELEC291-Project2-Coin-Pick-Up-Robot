0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 00:51:31 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_164
0000             28            public _main
0000             29            public _automaticmode
0000             30            public _servomotion
0000             31            public _GetFrequency
0000             32            public _PrintNumber
0000             33            public _eputs
0000             34            public _GetPeriod
0000             35            public _Timer2_ISR
0000             36            public _Timer4_ISR
0000             37            public _Volts_at_Pin
0000             38            public _ADC_at_Pin
0000             39            public _InitPinADC
0000             40            public _InitADC
0000             41            public _TIMER0_Init
0000             42            public _ReceptionOff
0000             43            public _SendATCommand
0000             44            public _waitms_or_RI1
0000             45            public _RXU1
0000             46            public _getstr1
0000             47            public _getchar1_with_timeout
0000             48            public _getchar1
0000             49            public _sendstr1
0000             50            public _putchar1
0000             51            public _UART1_Init
0000             52            public _waitms
0000             53            public _Timer3us
0000             54            public _Timer5_ISR
0000             55            public __c51_external_startup
0000             56            public _msg
0000             57            public _buff
0000             58            public _automaticmode_PARM_3
0000             59            public _automaticmode_PARM_2
0000             60            public _PrintNumber_PARM_3
0000             61            public _PrintNumber_PARM_2
0000             62            public _getstr1_PARM_2
0000             63            public _overflow_count
0000             64            public _servo2
0000             65            public _servo1
0000             66            public _servo_counter
0000             67            public _direction
0000             68            public _pwm_duty2
0000             69            public _pwm_counter2
0000             70            public _pwm_duty4
0000             71            public _pwm_counter4
0000             72   ;--------------------------------------------------------
0000             73   ; Special Function Registers
0000             74   ;--------------------------------------------------------
0000             75   _ACC            DATA 0xe0
0000             76   _ADC0ASAH       DATA 0xb6
0000             77   _ADC0ASAL       DATA 0xb5
0000             78   _ADC0ASCF       DATA 0xa1
0000             79   _ADC0ASCT       DATA 0xc7
0000             80   _ADC0CF0        DATA 0xbc
0000             81   _ADC0CF1        DATA 0xb9
0000             82   _ADC0CF2        DATA 0xdf
0000             83   _ADC0CN0        DATA 0xe8
0000             84   _ADC0CN1        DATA 0xb2
0000             85   _ADC0CN2        DATA 0xb3
0000             86   _ADC0GTH        DATA 0xc4
0000             87   _ADC0GTL        DATA 0xc3
0000             88   _ADC0H          DATA 0xbe
0000             89   _ADC0L          DATA 0xbd
0000             90   _ADC0LTH        DATA 0xc6
0000             91   _ADC0LTL        DATA 0xc5
0000             92   _ADC0MX         DATA 0xbb
0000             93   _B              DATA 0xf0
0000             94   _CKCON0         DATA 0x8e
0000             95   _CKCON1         DATA 0xa6
0000             96   _CLEN0          DATA 0xc6
0000             97   _CLIE0          DATA 0xc7
0000             98   _CLIF0          DATA 0xe8
0000             99   _CLKSEL         DATA 0xa9
0000            100   _CLOUT0         DATA 0xd1
0000            101   _CLU0CF         DATA 0xb1
0000            102   _CLU0FN         DATA 0xaf
0000            103   _CLU0MX         DATA 0x84
0000            104   _CLU1CF         DATA 0xb3
0000            105   _CLU1FN         DATA 0xb2
0000            106   _CLU1MX         DATA 0x85
0000            107   _CLU2CF         DATA 0xb6
0000            108   _CLU2FN         DATA 0xb5
0000            109   _CLU2MX         DATA 0x91
0000            110   _CLU3CF         DATA 0xbf
0000            111   _CLU3FN         DATA 0xbe
0000            112   _CLU3MX         DATA 0xae
0000            113   _CMP0CN0        DATA 0x9b
0000            114   _CMP0CN1        DATA 0x99
0000            115   _CMP0MD         DATA 0x9d
0000            116   _CMP0MX         DATA 0x9f
0000            117   _CMP1CN0        DATA 0xbf
0000            118   _CMP1CN1        DATA 0xac
0000            119   _CMP1MD         DATA 0xab
0000            120   _CMP1MX         DATA 0xaa
0000            121   _CRC0CN0        DATA 0xce
0000            122   _CRC0CN1        DATA 0x86
0000            123   _CRC0CNT        DATA 0xd3
0000            124   _CRC0DAT        DATA 0xcb
0000            125   _CRC0FLIP       DATA 0xcf
0000            126   _CRC0IN         DATA 0xca
0000            127   _CRC0ST         DATA 0xd2
0000            128   _DAC0CF0        DATA 0x91
0000            129   _DAC0CF1        DATA 0x92
0000            130   _DAC0H          DATA 0x85
0000            131   _DAC0L          DATA 0x84
0000            132   _DAC1CF0        DATA 0x93
0000            133   _DAC1CF1        DATA 0x94
0000            134   _DAC1H          DATA 0x8a
0000            135   _DAC1L          DATA 0x89
0000            136   _DAC2CF0        DATA 0x95
0000            137   _DAC2CF1        DATA 0x96
0000            138   _DAC2H          DATA 0x8c
0000            139   _DAC2L          DATA 0x8b
0000            140   _DAC3CF0        DATA 0x9a
0000            141   _DAC3CF1        DATA 0x9c
0000            142   _DAC3H          DATA 0x8e
0000            143   _DAC3L          DATA 0x8d
0000            144   _DACGCF0        DATA 0x88
0000            145   _DACGCF1        DATA 0x98
0000            146   _DACGCF2        DATA 0xa2
0000            147   _DERIVID        DATA 0xad
0000            148   _DEVICEID       DATA 0xb5
0000            149   _DPH            DATA 0x83
0000            150   _DPL            DATA 0x82
0000            151   _EIE1           DATA 0xe6
0000            152   _EIE2           DATA 0xf3
0000            153   _EIP1           DATA 0xbb
0000            154   _EIP1H          DATA 0xee
0000            155   _EIP2           DATA 0xed
0000            156   _EIP2H          DATA 0xf6
0000            157   _EMI0CN         DATA 0xe7
0000            158   _FLKEY          DATA 0xb7
0000            159   _HFO0CAL        DATA 0xc7
0000            160   _HFO1CAL        DATA 0xd6
0000            161   _HFOCN          DATA 0xef
0000            162   _I2C0ADM        DATA 0xff
0000            163   _I2C0CN0        DATA 0xba
0000            164   _I2C0DIN        DATA 0xbc
0000            165   _I2C0DOUT       DATA 0xbb
0000            166   _I2C0FCN0       DATA 0xad
0000            167   _I2C0FCN1       DATA 0xab
0000            168   _I2C0FCT        DATA 0xf5
0000            169   _I2C0SLAD       DATA 0xbd
0000            170   _I2C0STAT       DATA 0xb9
0000            171   _IE             DATA 0xa8
0000            172   _IP             DATA 0xb8
0000            173   _IPH            DATA 0xf2
0000            174   _IT01CF         DATA 0xe4
0000            175   _LFO0CN         DATA 0xb1
0000            176   _P0             DATA 0x80
0000            177   _P0MASK         DATA 0xfe
0000            178   _P0MAT          DATA 0xfd
0000            179   _P0MDIN         DATA 0xf1
0000            180   _P0MDOUT        DATA 0xa4
0000            181   _P0SKIP         DATA 0xd4
0000            182   _P1             DATA 0x90
0000            183   _P1MASK         DATA 0xee
0000            184   _P1MAT          DATA 0xed
0000            185   _P1MDIN         DATA 0xf2
0000            186   _P1MDOUT        DATA 0xa5
0000            187   _P1SKIP         DATA 0xd5
0000            188   _P2             DATA 0xa0
0000            189   _P2MASK         DATA 0xfc
0000            190   _P2MAT          DATA 0xfb
0000            191   _P2MDIN         DATA 0xf3
0000            192   _P2MDOUT        DATA 0xa6
0000            193   _P2SKIP         DATA 0xcc
0000            194   _P3             DATA 0xb0
0000            195   _P3MDIN         DATA 0xf4
0000            196   _P3MDOUT        DATA 0x9c
0000            197   _PCA0CENT       DATA 0x9e
0000            198   _PCA0CLR        DATA 0x9c
0000            199   _PCA0CN0        DATA 0xd8
0000            200   _PCA0CPH0       DATA 0xfc
0000            201   _PCA0CPH1       DATA 0xea
0000            202   _PCA0CPH2       DATA 0xec
0000            203   _PCA0CPH3       DATA 0xf5
0000            204   _PCA0CPH4       DATA 0x85
0000            205   _PCA0CPH5       DATA 0xde
0000            206   _PCA0CPL0       DATA 0xfb
0000            207   _PCA0CPL1       DATA 0xe9
0000            208   _PCA0CPL2       DATA 0xeb
0000            209   _PCA0CPL3       DATA 0xf4
0000            210   _PCA0CPL4       DATA 0x84
0000            211   _PCA0CPL5       DATA 0xdd
0000            212   _PCA0CPM0       DATA 0xda
0000            213   _PCA0CPM1       DATA 0xdb
0000            214   _PCA0CPM2       DATA 0xdc
0000            215   _PCA0CPM3       DATA 0xae
0000            216   _PCA0CPM4       DATA 0xaf
0000            217   _PCA0CPM5       DATA 0xcc
0000            218   _PCA0H          DATA 0xfa
0000            219   _PCA0L          DATA 0xf9
0000            220   _PCA0MD         DATA 0xd9
0000            221   _PCA0POL        DATA 0x96
0000            222   _PCA0PWM        DATA 0xf7
0000            223   _PCON0          DATA 0x87
0000            224   _PCON1          DATA 0xcd
0000            225   _PFE0CN         DATA 0xc1
0000            226   _PRTDRV         DATA 0xf6
0000            227   _PSCTL          DATA 0x8f
0000            228   _PSTAT0         DATA 0xaa
0000            229   _PSW            DATA 0xd0
0000            230   _REF0CN         DATA 0xd1
0000            231   _REG0CN         DATA 0xc9
0000            232   _REVID          DATA 0xb6
0000            233   _RSTSRC         DATA 0xef
0000            234   _SBCON1         DATA 0x94
0000            235   _SBRLH1         DATA 0x96
0000            236   _SBRLL1         DATA 0x95
0000            237   _SBUF           DATA 0x99
0000            238   _SBUF0          DATA 0x99
0000            239   _SBUF1          DATA 0x92
0000            240   _SCON           DATA 0x98
0000            241   _SCON0          DATA 0x98
0000            242   _SCON1          DATA 0xc8
0000            243   _SFRPAGE        DATA 0xa7
0000            244   _SFRPGCN        DATA 0xbc
0000            245   _SFRSTACK       DATA 0xd7
0000            246   _SMB0ADM        DATA 0xd6
0000            247   _SMB0ADR        DATA 0xd7
0000            248   _SMB0CF         DATA 0xc1
0000            249   _SMB0CN0        DATA 0xc0
0000            250   _SMB0DAT        DATA 0xc2
0000            251   _SMB0FCN0       DATA 0xc3
0000            252   _SMB0FCN1       DATA 0xc4
0000            253   _SMB0FCT        DATA 0xef
0000            254   _SMB0RXLN       DATA 0xc5
0000            255   _SMB0TC         DATA 0xac
0000            256   _SMOD1          DATA 0x93
0000            257   _SP             DATA 0x81
0000            258   _SPI0CFG        DATA 0xa1
0000            259   _SPI0CKR        DATA 0xa2
0000            260   _SPI0CN0        DATA 0xf8
0000            261   _SPI0DAT        DATA 0xa3
0000            262   _SPI0FCN0       DATA 0x9a
0000            263   _SPI0FCN1       DATA 0x9b
0000            264   _SPI0FCT        DATA 0xf7
0000            265   _SPI0PCF        DATA 0xdf
0000            266   _TCON           DATA 0x88
0000            267   _TH0            DATA 0x8c
0000            268   _TH1            DATA 0x8d
0000            269   _TL0            DATA 0x8a
0000            270   _TL1            DATA 0x8b
0000            271   _TMOD           DATA 0x89
0000            272   _TMR2CN0        DATA 0xc8
0000            273   _TMR2CN1        DATA 0xfd
0000            274   _TMR2H          DATA 0xcf
0000            275   _TMR2L          DATA 0xce
0000            276   _TMR2RLH        DATA 0xcb
0000            277   _TMR2RLL        DATA 0xca
0000            278   _TMR3CN0        DATA 0x91
0000            279   _TMR3CN1        DATA 0xfe
0000            280   _TMR3H          DATA 0x95
0000            281   _TMR3L          DATA 0x94
0000            282   _TMR3RLH        DATA 0x93
0000            283   _TMR3RLL        DATA 0x92
0000            284   _TMR4CN0        DATA 0x98
0000            285   _TMR4CN1        DATA 0xff
0000            286   _TMR4H          DATA 0xa5
0000            287   _TMR4L          DATA 0xa4
0000            288   _TMR4RLH        DATA 0xa3
0000            289   _TMR4RLL        DATA 0xa2
0000            290   _TMR5CN0        DATA 0xc0
0000            291   _TMR5CN1        DATA 0xf1
0000            292   _TMR5H          DATA 0xd5
0000            293   _TMR5L          DATA 0xd4
0000            294   _TMR5RLH        DATA 0xd3
0000            295   _TMR5RLL        DATA 0xd2
0000            296   _UART0PCF       DATA 0xd9
0000            297   _UART1FCN0      DATA 0x9d
0000            298   _UART1FCN1      DATA 0xd8
0000            299   _UART1FCT       DATA 0xfa
0000            300   _UART1LIN       DATA 0x9e
0000            301   _UART1PCF       DATA 0xda
0000            302   _VDM0CN         DATA 0xff
0000            303   _WDTCN          DATA 0x97
0000            304   _XBR0           DATA 0xe1
0000            305   _XBR1           DATA 0xe2
0000            306   _XBR2           DATA 0xe3
0000            307   _XOSC0CN        DATA 0x86
0000            308   _DPTR           DATA 0x8382
0000            309   _TMR2RL         DATA 0xcbca
0000            310   _TMR3RL         DATA 0x9392
0000            311   _TMR4RL         DATA 0xa3a2
0000            312   _TMR5RL         DATA 0xd3d2
0000            313   _TMR0           DATA 0x8c8a
0000            314   _TMR1           DATA 0x8d8b
0000            315   _TMR2           DATA 0xcfce
0000            316   _TMR3           DATA 0x9594
0000            317   _TMR4           DATA 0xa5a4
0000            318   _TMR5           DATA 0xd5d4
0000            319   _SBRL1          DATA 0x9695
0000            320   _PCA0           DATA 0xfaf9
0000            321   _PCA0CP0        DATA 0xfcfb
0000            322   _PCA0CP1        DATA 0xeae9
0000            323   _PCA0CP2        DATA 0xeceb
0000            324   _PCA0CP3        DATA 0xf5f4
0000            325   _PCA0CP4        DATA 0x8584
0000            326   _PCA0CP5        DATA 0xdedd
0000            327   _ADC0ASA        DATA 0xb6b5
0000            328   _ADC0GT         DATA 0xc4c3
0000            329   _ADC0           DATA 0xbebd
0000            330   _ADC0LT         DATA 0xc6c5
0000            331   _DAC0           DATA 0x8584
0000            332   _DAC1           DATA 0x8a89
0000            333   _DAC2           DATA 0x8c8b
0000            334   _DAC3           DATA 0x8e8d
0000            335   ;--------------------------------------------------------
0000            336   ; special function bits
0000            337   ;--------------------------------------------------------
0000            338   _ACC_0          BIT 0xe0
0000            339   _ACC_1          BIT 0xe1
0000            340   _ACC_2          BIT 0xe2
0000            341   _ACC_3          BIT 0xe3
0000            342   _ACC_4          BIT 0xe4
0000            343   _ACC_5          BIT 0xe5
0000            344   _ACC_6          BIT 0xe6
0000            345   _ACC_7          BIT 0xe7
0000            346   _TEMPE          BIT 0xe8
0000            347   _ADGN0          BIT 0xe9
0000            348   _ADGN1          BIT 0xea
0000            349   _ADWINT         BIT 0xeb
0000            350   _ADBUSY         BIT 0xec
0000            351   _ADINT          BIT 0xed
0000            352   _IPOEN          BIT 0xee
0000            353   _ADEN           BIT 0xef
0000            354   _B_0            BIT 0xf0
0000            355   _B_1            BIT 0xf1
0000            356   _B_2            BIT 0xf2
0000            357   _B_3            BIT 0xf3
0000            358   _B_4            BIT 0xf4
0000            359   _B_5            BIT 0xf5
0000            360   _B_6            BIT 0xf6
0000            361   _B_7            BIT 0xf7
0000            362   _C0FIF          BIT 0xe8
0000            363   _C0RIF          BIT 0xe9
0000            364   _C1FIF          BIT 0xea
0000            365   _C1RIF          BIT 0xeb
0000            366   _C2FIF          BIT 0xec
0000            367   _C2RIF          BIT 0xed
0000            368   _C3FIF          BIT 0xee
0000            369   _C3RIF          BIT 0xef
0000            370   _D1SRC0         BIT 0x88
0000            371   _D1SRC1         BIT 0x89
0000            372   _D1AMEN         BIT 0x8a
0000            373   _D01REFSL       BIT 0x8b
0000            374   _D3SRC0         BIT 0x8c
0000            375   _D3SRC1         BIT 0x8d
0000            376   _D3AMEN         BIT 0x8e
0000            377   _D23REFSL       BIT 0x8f
0000            378   _D0UDIS         BIT 0x98
0000            379   _D1UDIS         BIT 0x99
0000            380   _D2UDIS         BIT 0x9a
0000            381   _D3UDIS         BIT 0x9b
0000            382   _EX0            BIT 0xa8
0000            383   _ET0            BIT 0xa9
0000            384   _EX1            BIT 0xaa
0000            385   _ET1            BIT 0xab
0000            386   _ES0            BIT 0xac
0000            387   _ET2            BIT 0xad
0000            388   _ESPI0          BIT 0xae
0000            389   _EA             BIT 0xaf
0000            390   _PX0            BIT 0xb8
0000            391   _PT0            BIT 0xb9
0000            392   _PX1            BIT 0xba
0000            393   _PT1            BIT 0xbb
0000            394   _PS0            BIT 0xbc
0000            395   _PT2            BIT 0xbd
0000            396   _PSPI0          BIT 0xbe
0000            397   _P0_0           BIT 0x80
0000            398   _P0_1           BIT 0x81
0000            399   _P0_2           BIT 0x82
0000            400   _P0_3           BIT 0x83
0000            401   _P0_4           BIT 0x84
0000            402   _P0_5           BIT 0x85
0000            403   _P0_6           BIT 0x86
0000            404   _P0_7           BIT 0x87
0000            405   _P1_0           BIT 0x90
0000            406   _P1_1           BIT 0x91
0000            407   _P1_2           BIT 0x92
0000            408   _P1_3           BIT 0x93
0000            409   _P1_4           BIT 0x94
0000            410   _P1_5           BIT 0x95
0000            411   _P1_6           BIT 0x96
0000            412   _P1_7           BIT 0x97
0000            413   _P2_0           BIT 0xa0
0000            414   _P2_1           BIT 0xa1
0000            415   _P2_2           BIT 0xa2
0000            416   _P2_3           BIT 0xa3
0000            417   _P2_4           BIT 0xa4
0000            418   _P2_5           BIT 0xa5
0000            419   _P2_6           BIT 0xa6
0000            420   _P3_0           BIT 0xb0
0000            421   _P3_1           BIT 0xb1
0000            422   _P3_2           BIT 0xb2
0000            423   _P3_3           BIT 0xb3
0000            424   _P3_4           BIT 0xb4
0000            425   _P3_7           BIT 0xb7
0000            426   _CCF0           BIT 0xd8
0000            427   _CCF1           BIT 0xd9
0000            428   _CCF2           BIT 0xda
0000            429   _CCF3           BIT 0xdb
0000            430   _CCF4           BIT 0xdc
0000            431   _CCF5           BIT 0xdd
0000            432   _CR             BIT 0xde
0000            433   _CF             BIT 0xdf
0000            434   _PARITY         BIT 0xd0
0000            435   _F1             BIT 0xd1
0000            436   _OV             BIT 0xd2
0000            437   _RS0            BIT 0xd3
0000            438   _RS1            BIT 0xd4
0000            439   _F0             BIT 0xd5
0000            440   _AC             BIT 0xd6
0000            441   _CY             BIT 0xd7
0000            442   _RI             BIT 0x98
0000            443   _TI             BIT 0x99
0000            444   _RB8            BIT 0x9a
0000            445   _TB8            BIT 0x9b
0000            446   _REN            BIT 0x9c
0000            447   _CE             BIT 0x9d
0000            448   _SMODE          BIT 0x9e
0000            449   _RI1            BIT 0xc8
0000            450   _TI1            BIT 0xc9
0000            451   _RBX1           BIT 0xca
0000            452   _TBX1           BIT 0xcb
0000            453   _REN1           BIT 0xcc
0000            454   _PERR1          BIT 0xcd
0000            455   _OVR1           BIT 0xce
0000            456   _SI             BIT 0xc0
0000            457   _ACK            BIT 0xc1
0000            458   _ARBLOST        BIT 0xc2
0000            459   _ACKRQ          BIT 0xc3
0000            460   _STO            BIT 0xc4
0000            461   _STA            BIT 0xc5
0000            462   _TXMODE         BIT 0xc6
0000            463   _MASTER         BIT 0xc7
0000            464   _SPIEN          BIT 0xf8
0000            465   _TXNF           BIT 0xf9
0000            466   _NSSMD0         BIT 0xfa
0000            467   _NSSMD1         BIT 0xfb
0000            468   _RXOVRN         BIT 0xfc
0000            469   _MODF           BIT 0xfd
0000            470   _WCOL           BIT 0xfe
0000            471   _SPIF           BIT 0xff
0000            472   _IT0            BIT 0x88
0000            473   _IE0            BIT 0x89
0000            474   _IT1            BIT 0x8a
0000            475   _IE1            BIT 0x8b
0000            476   _TR0            BIT 0x8c
0000            477   _TF0            BIT 0x8d
0000            478   _TR1            BIT 0x8e
0000            479   _TF1            BIT 0x8f
0000            480   _T2XCLK0        BIT 0xc8
0000            481   _T2XCLK1        BIT 0xc9
0000            482   _TR2            BIT 0xca
0000            483   _T2SPLIT        BIT 0xcb
0000            484   _TF2CEN         BIT 0xcc
0000            485   _TF2LEN         BIT 0xcd
0000            486   _TF2L           BIT 0xce
0000            487   _TF2H           BIT 0xcf
0000            488   _T4XCLK0        BIT 0x98
0000            489   _T4XCLK1        BIT 0x99
0000            490   _TR4            BIT 0x9a
0000            491   _T4SPLIT        BIT 0x9b
0000            492   _TF4CEN         BIT 0x9c
0000            493   _TF4LEN         BIT 0x9d
0000            494   _TF4L           BIT 0x9e
0000            495   _TF4H           BIT 0x9f
0000            496   _T5XCLK0        BIT 0xc0
0000            497   _T5XCLK1        BIT 0xc1
0000            498   _TR5            BIT 0xc2
0000            499   _T5SPLIT        BIT 0xc3
0000            500   _TF5CEN         BIT 0xc4
0000            501   _TF5LEN         BIT 0xc5
0000            502   _TF5L           BIT 0xc6
0000            503   _TF5H           BIT 0xc7
0000            504   _RIE            BIT 0xd8
0000            505   _RXTO0          BIT 0xd9
0000            506   _RXTO1          BIT 0xda
0000            507   _RFRQ           BIT 0xdb
0000            508   _TIE            BIT 0xdc
0000            509   _TXHOLD         BIT 0xdd
0000            510   _TXNF1          BIT 0xde
0000            511   _TFRQ           BIT 0xdf
0000            512   ;--------------------------------------------------------
0000            513   ; overlayable register banks
0000            514   ;--------------------------------------------------------
0000            515            rbank0 segment data overlay
0000            516   ;--------------------------------------------------------
0000            517   ; internal ram data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_DSEG
0000            520   _pwm_counter4:
0000            521            ds 2
0002            522   _pwm_duty4:
0002            523            ds 2
0004            524   _pwm_counter2:
0004            525            ds 2
0006            526   _pwm_duty2:
0006            527            ds 2
0008            528   _direction:
0008            529            ds 2
000A            530   _servo_counter:
000A            531            ds 2
000C            532   _servo1:
000C            533            ds 1
000D            534   _servo2:
000D            535            ds 1
000E            536   _overflow_count:
000E            537            ds 1
000F            538   _getstr1_PARM_2:
000F            539            ds 1
0010            540   _PrintNumber_PARM_2:
0010            541            ds 2
0012            542   _PrintNumber_PARM_3:
0012            543            ds 2
0014            544   _PrintNumber_val_1_163:
0014            545            ds 4
0018            546   _PrintNumber_j_1_164:
0018            547            ds 2
001A            548   _PrintNumber_sloc0_1_0:
001A            549            ds 2
001C            550   _PrintNumber_sloc1_1_0:
001C            551            ds 4
0020            552   _automaticmode_PARM_2:
0020            553            ds 4
0024            554   _automaticmode_PARM_3:
0024            555            ds 4
0028            556   _main_adcwheel1_1_182:
0028            557            ds 2
002A            558   _main_adcwheel2_1_182:
002A            559            ds 2
002C            560   _main_which_1_182:
002C            561            ds 2
002E            562   _main_f_1_182:
002E            563            ds 4
0032            564   _main_v_1_182:
0032            565            ds 8
003A            566   _main_sloc0_1_0:
003A            567            ds 4
003E            568   ;--------------------------------------------------------
003E            569   ; overlayable items in internal ram 
003E            570   ;--------------------------------------------------------
0000            571            rseg    R_OSEG
0000            572            rseg    R_OSEG
0000            573            rseg    R_OSEG
0000            574            rseg    R_OSEG
0000            575   _InitPinADC_PARM_2:
0000            576            ds 1
0001            577            rseg    R_OSEG
0001            578            rseg    R_OSEG
0001            579   ;--------------------------------------------------------
0001            580   ; indirectly addressable internal ram data
0001            581   ;--------------------------------------------------------
0000            582            rseg R_ISEG
0000            583   _buff:
0000            584            ds 20
0014            585   _msg:
0014            586            ds 20
0028            587   ;--------------------------------------------------------
0028            588   ; absolute internal ram data
0028            589   ;--------------------------------------------------------
0000            590            DSEG
0000            591   ;--------------------------------------------------------
0000            592   ; bit data
0000            593   ;--------------------------------------------------------
0000            594            rseg R_BSEG
0000            595   ;--------------------------------------------------------
0000            596   ; paged external ram data
0000            597   ;--------------------------------------------------------
0000            598            rseg R_PSEG
0000            599   ;--------------------------------------------------------
0000            600   ; external ram data
0000            601   ;--------------------------------------------------------
0000            602            rseg R_XSEG
0000            603   _PrintNumber_buff_1_164:
0000            604            ds 33
0021            605   ;--------------------------------------------------------
0021            606   ; absolute external ram data
0021            607   ;--------------------------------------------------------
0000            608            XSEG
0000            609   ;--------------------------------------------------------
0000            610   ; external initialized ram data
0000            611   ;--------------------------------------------------------
0000            612            rseg R_IXSEG
0000            613            rseg R_HOME
0000            614            rseg R_GSINIT
0000            615            rseg R_CSEG
0000            616   ;--------------------------------------------------------
0000            617   ; Reset entry point and interrupt vectors
0000            618   ;--------------------------------------------------------
0000            619            CSEG at 0x0000
0000 020000     620            ljmp    _crt0
002B            621            CSEG at 0x002b
002B 020000     622            ljmp    _Timer2_ISR
008B            623            CSEG at 0x008b
008B 020000     624            ljmp    _Timer4_ISR
0093            625            CSEG at 0x0093
0093 020000     626            ljmp    _Timer5_ISR
0096            627   ;--------------------------------------------------------
0096            628   ; global & static initialisations
0096            629   ;--------------------------------------------------------
0000            630            rseg R_HOME
0000            631            rseg R_GSINIT
0000            632            rseg R_GSINIT
0000            633   ;--------------------------------------------------------
0000            634   ; data variables initialization
0000            635   ;--------------------------------------------------------
0000            636            rseg R_DINIT
0000            637   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         638            clr     a
0001 F538       639            mov     _pwm_counter4,a
0003 F539       640            mov     (_pwm_counter4 + 1),a
0005            641   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0?65535)
0005 75F8FF     642            mov     _pwm_duty4,#0xFF
0008 75F9FF     643            mov     (_pwm_duty4 + 1),#0xFF
000B            644   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         645            clr     a
000C F5B8       646            mov     _pwm_counter2,a
000E F5B9       647            mov     (_pwm_counter2 + 1),a
0010            648   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0?65535)
0010 7578FF     649            mov     _pwm_duty2,#0xFF
0013 7579FF     650            mov     (_pwm_duty2 + 1),#0xFF
0016            651   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         652            clr     a
0017 F538       653            mov     _direction,a
0019 F539       654            mov     (_direction + 1),a
001B            655   ;        EFM8_JDY40_test.c:41: volatile unsigned int servo_counter=0;
001B E4         656            clr     a
001C F5F8       657            mov     _servo_counter,a
001E F5F9       658            mov     (_servo_counter + 1),a
0020            659   ;        EFM8_JDY40_test.c:42: volatile unsigned char servo1=250, servo2=250;
0020 75B8FA     660            mov     _servo1,#0xFA
0023            661   ;        EFM8_JDY40_test.c:42: 
0023 7578FA     662            mov     _servo2,#0xFA
0026            663            ; The linker places a 'ret' at the end of segment R_DINIT.
0026            664   ;--------------------------------------------------------
0026            665   ; code
0026            666   ;--------------------------------------------------------
0000            667            rseg R_CSEG
0000            668   ;------------------------------------------------------------
0000            669   ;Allocation info for local variables in function '_c51_external_startup'
0000            670   ;------------------------------------------------------------
0000            671   ;------------------------------------------------------------
0000            672   ;        EFM8_JDY40_test.c:53: char _c51_external_startup (void)
0000            673   ;        -----------------------------------------
0000            674   ;         function _c51_external_startup
0000            675   ;        -----------------------------------------
0000            676   __c51_external_startup:
0000            677            using   0
0000            678   ;        EFM8_JDY40_test.c:56: SFRPAGE = 0x00;
0000 75A700     679            mov     _SFRPAGE,#0x00
0003            680   ;        EFM8_JDY40_test.c:57: WDTCN = 0xDE; //First key
0003 7597DE     681            mov     _WDTCN,#0xDE
0006            682   ;        EFM8_JDY40_test.c:58: WDTCN = 0xAD; //Second key
0006 7597AD     683            mov     _WDTCN,#0xAD
0009            684   ;        EFM8_JDY40_test.c:60: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     685            mov     _VDM0CN,#0x80
000C            686   ;        EFM8_JDY40_test.c:61: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     687            mov     _RSTSRC,#0x06
000F            688   ;        EFM8_JDY40_test.c:68: SFRPAGE = 0x10;
000F 75A710     689            mov     _SFRPAGE,#0x10
0012            690   ;        EFM8_JDY40_test.c:69: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     691            mov     _PFE0CN,#0x20
0015            692   ;        EFM8_JDY40_test.c:70: SFRPAGE = 0x00;
0015 75A700     693            mov     _SFRPAGE,#0x00
0018            694   ;        EFM8_JDY40_test.c:91: CLKSEL = 0x00;
0018 75A900     695            mov     _CLKSEL,#0x00
001B            696   ;        EFM8_JDY40_test.c:92: CLKSEL = 0x00;
001B 75A900     697            mov     _CLKSEL,#0x00
001E            698   ;        EFM8_JDY40_test.c:93: while ((CLKSEL & 0x80) == 0);
001E            699   L002001?:
001E E5A9       700            mov     a,_CLKSEL
0020 30E7C0     701            jnb     acc.7,L002001?
0023            702   ;        EFM8_JDY40_test.c:94: CLKSEL = 0x03;
0023 75A903     703            mov     _CLKSEL,#0x03
0026            704   ;        EFM8_JDY40_test.c:95: CLKSEL = 0x03;
0026 75A903     705            mov     _CLKSEL,#0x03
0029            706   ;        EFM8_JDY40_test.c:96: while ((CLKSEL & 0x80) == 0);
0029            707   L002004?:
0029 E5A9       708            mov     a,_CLKSEL
002B 30E740     709            jnb     acc.7,L002004?
002E            710   ;        EFM8_JDY40_test.c:101: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     711            orl     _P0MDOUT,#0x11
0031            712   ;        EFM8_JDY40_test.c:102: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     713            orl     _P2MDOUT,#0x01
0034            714   ;        EFM8_JDY40_test.c:103: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     715            mov     _XBR0,#0x01
0037            716   ;        EFM8_JDY40_test.c:104: XBR1     = 0X00;
0037 75E200     717            mov     _XBR1,#0x00
003A            718   ;        EFM8_JDY40_test.c:105: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     719            mov     _XBR2,#0x41
003D            720   ;        EFM8_JDY40_test.c:107: P3MDOUT |= 0b10000101;
003D 439C85     721            orl     _P3MDOUT,#0x85
0040            722   ;        EFM8_JDY40_test.c:108: XBR2     = 0x41; // existing line
0040 75E341     723            mov     _XBR2,#0x41
0043            724   ;        EFM8_JDY40_test.c:109: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     725            orl     _P3MDOUT,#0x85
0046            726   ;        EFM8_JDY40_test.c:115: SCON0 = 0x10;
0046 759810     727            mov     _SCON0,#0x10
0049            728   ;        EFM8_JDY40_test.c:116: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     729            mov     _TH1,#0xE6
004C            730   ;        EFM8_JDY40_test.c:117: TL1 = TH1;      // Init Timer1
004C 858D8B     731            mov     _TL1,_TH1
004F            732   ;        EFM8_JDY40_test.c:118: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     733            anl     _TMOD,#0x0F
0052            734   ;        EFM8_JDY40_test.c:119: TMOD |=  0x20;                       
0052 438920     735            orl     _TMOD,#0x20
0055            736   ;        EFM8_JDY40_test.c:120: TR1 = 1; // START Timer1
0055 D28E       737            setb    _TR1
0057            738   ;        EFM8_JDY40_test.c:121: TI = 1;  // Indicate TX0 ready
0057 D299       739            setb    _TI
0059            740   ;        EFM8_JDY40_test.c:125: SFRPAGE=0x10;
0059 75A710     741            mov     _SFRPAGE,#0x10
005C            742   ;        EFM8_JDY40_test.c:126: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     743            mov     _TMR4CN0,#0x00
005F            744   ;        EFM8_JDY40_test.c:127: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     745            orl     _CKCON1,#0x01
0062            746   ;        EFM8_JDY40_test.c:128: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     747            mov     _TMR4RL,#0xA8
0065 75A3FD     748            mov     (_TMR4RL >> 8),#0xFD
0068            749   ;        EFM8_JDY40_test.c:129: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     750            mov     _TMR4,#0xFF
006B 75A5FF     751            mov     (_TMR4 >> 8),#0xFF
006E            752   ;        EFM8_JDY40_test.c:130: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     753            orl     _EIE2,#0x04
0071            754   ;        EFM8_JDY40_test.c:131: TR4=1;
0071 D29A       755            setb    _TR4
0073            756   ;        EFM8_JDY40_test.c:132: EA=1;
0073 D2AF       757            setb    _EA
0075            758   ;        EFM8_JDY40_test.c:135: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     759            mov     _TMR2CN0,#0x00
0078            760   ;        EFM8_JDY40_test.c:136: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     761            orl     _CKCON0,#0x10
007B            762   ;        EFM8_JDY40_test.c:137: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     763            mov     _TMR2RL,#0xA8
007E 75CBFD     764            mov     (_TMR2RL >> 8),#0xFD
0081            765   ;        EFM8_JDY40_test.c:138: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     766            mov     _TMR2,#0xFF
0084 75CFFF     767            mov     (_TMR2 >> 8),#0xFF
0087            768   ;        EFM8_JDY40_test.c:139: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       769            setb    _ET2
0089            770   ;        EFM8_JDY40_test.c:140: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       771            setb    _TR2
008B            772   ;        EFM8_JDY40_test.c:141: SFRPAGE=0x00;
008B 75A700     773            mov     _SFRPAGE,#0x00
008E            774   ;        EFM8_JDY40_test.c:144: SFRPAGE=0x10;
008E 75A710     775            mov     _SFRPAGE,#0x10
0091            776   ;        EFM8_JDY40_test.c:145: TMR5CN0=0x00;
0091 75C000     777            mov     _TMR5CN0,#0x00
0094            778   ;        EFM8_JDY40_test.c:146: TMR5=0xffff;   // Set to reload immediately
0094 75D4FF     779            mov     _TMR5,#0xFF
0097 75D5FF     780            mov     (_TMR5 >> 8),#0xFF
009A            781   ;        EFM8_JDY40_test.c:147: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
009A 43F308     782            orl     _EIE2,#0x08
009D            783   ;        EFM8_JDY40_test.c:148: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
009D D2C2       784            setb    _TR5
009F            785   ;        EFM8_JDY40_test.c:150: EA=1;
009F D2AF       786            setb    _EA
00A1            787   ;        EFM8_JDY40_test.c:152: SFRPAGE=0x00;
00A1 75A700     788            mov     _SFRPAGE,#0x00
00A4            789   ;        EFM8_JDY40_test.c:155: return 0;
00A4 758200     790            mov     dpl,#0x00
00A7 22         791            ret
00A8            792   ;------------------------------------------------------------
00A8            793   ;Allocation info for local variables in function 'Timer5_ISR'
00A8            794   ;------------------------------------------------------------
00A8            795   ;------------------------------------------------------------
00A8            796   ;        EFM8_JDY40_test.c:158: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
00A8            797   ;        -----------------------------------------
00A8            798   ;         function Timer5_ISR
00A8            799   ;        -----------------------------------------
00A8            800   _Timer5_ISR:
00A8 C0E0       801            push    acc
00AA C002       802            push    ar2
00AC C003       803            push    ar3
00AE C0D0       804            push    psw
00B0 75D000     805            mov     psw,#0x00
00B3            806   ;        EFM8_JDY40_test.c:160: SFRPAGE=0x10;
00B3 75A710     807            mov     _SFRPAGE,#0x10
00B6            808   ;        EFM8_JDY40_test.c:161: TF5H = 0; // Clear Timer5 interrupt flag
00B6 C2C7       809            clr     _TF5H
00B8            810   ;        EFM8_JDY40_test.c:162: TMR5RL=(0x10000L-(SYSCLK/(12L*100000L)));
00B8 75D2C4     811            mov     _TMR5RL,#0xC4
00BB 75D3FF     812            mov     (_TMR5RL >> 8),#0xFF
00BE            813   ;        EFM8_JDY40_test.c:163: servo_counter++;
00BE 7401       814            mov     a,#0x01
00C0 25F8       815            add     a,_servo_counter
00C2 F5F8       816            mov     _servo_counter,a
00C4 E4         817            clr     a
00C5 35F9       818            addc    a,(_servo_counter + 1)
00C7 F5F9       819            mov     (_servo_counter + 1),a
00C9            820   ;        EFM8_JDY40_test.c:164: if(servo_counter==2000)
00C9 74D0       821            mov     a,#0xD0
00CB B5F800     822            cjne    a,_servo_counter,L003002?
00CE 7407       823            mov     a,#0x07
00D0 B5F900     824            cjne    a,(_servo_counter + 1),L003002?
00D3            825   ;        EFM8_JDY40_test.c:166: servo_counter=0;
00D3 E4         826            clr     a
00D4 F5F8       827            mov     _servo_counter,a
00D6 F5F9       828            mov     (_servo_counter + 1),a
00D8            829   L003002?:
00D8            830   ;        EFM8_JDY40_test.c:168: if(servo1>=servo_counter)
00D8 AAB8       831            mov     r2,_servo1
00DA 7B00       832            mov     r3,#0x00
00DC C3         833            clr     c
00DD EA         834            mov     a,r2
00DE 95F8       835            subb    a,_servo_counter
00E0 EB         836            mov     a,r3
00E1 95F9       837            subb    a,(_servo_counter + 1)
00E3 4000       838            jc      L003004?
00E5            839   ;        EFM8_JDY40_test.c:170: SERVO1=1;
00E5 D293       840            setb    _P1_3
00E7 8000       841            sjmp    L003005?
00E9            842   L003004?:
00E9            843   ;        EFM8_JDY40_test.c:174: SERVO1=0;
00E9 C293       844            clr     _P1_3
00EB            845   L003005?:
00EB            846   ;        EFM8_JDY40_test.c:176: if(servo2>=servo_counter)
00EB AA78       847            mov     r2,_servo2
00ED 7B00       848            mov     r3,#0x00
00EF C3         849            clr     c
00F0 EA         850            mov     a,r2
00F1 95F8       851            subb    a,_servo_counter
00F3 EB         852            mov     a,r3
00F4 95F9       853            subb    a,(_servo_counter + 1)
00F6 4000       854            jc      L003007?
00F8            855   ;        EFM8_JDY40_test.c:178: SERVO2=1;
00F8 D294       856            setb    _P1_4
00FA 8000       857            sjmp    L003009?
00FC            858   L003007?:
00FC            859   ;        EFM8_JDY40_test.c:182: SERVO2=0;
00FC C294       860            clr     _P1_4
00FE            861   L003009?:
00FE D0D0       862            pop     psw
0100 D003       863            pop     ar3
0102 D002       864            pop     ar2
0104 D0E0       865            pop     acc
0106 32         866            reti
0107            867   ;        eliminated unneeded push/pop dpl
0107            868   ;        eliminated unneeded push/pop dph
0107            869   ;        eliminated unneeded push/pop b
0107            870   ;------------------------------------------------------------
0107            871   ;Allocation info for local variables in function 'Timer3us'
0107            872   ;------------------------------------------------------------
0107            873   ;us                        Allocated to registers r2 
0107            874   ;i                         Allocated to registers r3 
0107            875   ;------------------------------------------------------------
0107            876   ;        EFM8_JDY40_test.c:187: void Timer3us(unsigned char us)
0107            877   ;        -----------------------------------------
0107            878   ;         function Timer3us
0107            879   ;        -----------------------------------------
0107            880   _Timer3us:
0107 AA82       881            mov     r2,dpl
0109            882   ;        EFM8_JDY40_test.c:192: CKCON0|=0b_0100_0000;
0109 438E40     883            orl     _CKCON0,#0x40
010C            884   ;        EFM8_JDY40_test.c:194: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
010C 7592B8     885            mov     _TMR3RL,#0xB8
010F 7593FF     886            mov     (_TMR3RL >> 8),#0xFF
0112            887   ;        EFM8_JDY40_test.c:195: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0112 859294     888            mov     _TMR3,_TMR3RL
0115 859395     889            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0118            890   ;        EFM8_JDY40_test.c:197: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0118 759104     891            mov     _TMR3CN0,#0x04
011B            892   ;        EFM8_JDY40_test.c:198: for (i = 0; i < us; i++)       // Count <us> overflows
011B 7B00       893            mov     r3,#0x00
011D            894   L004004?:
011D C3         895            clr     c
011E EB         896            mov     a,r3
011F 9A         897            subb    a,r2
0120 5000       898            jnc     L004007?
0122            899   ;        EFM8_JDY40_test.c:200: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0122            900   L004001?:
0122 E591       901            mov     a,_TMR3CN0
0124 30E7C0     902            jnb     acc.7,L004001?
0127            903   ;        EFM8_JDY40_test.c:201: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0127 53917F     904            anl     _TMR3CN0,#0x7F
012A            905   ;        EFM8_JDY40_test.c:198: for (i = 0; i < us; i++)       // Count <us> overflows
012A 0B         906            inc     r3
012B 8000       907            sjmp    L004004?
012D            908   L004007?:
012D            909   ;        EFM8_JDY40_test.c:203: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
012D 759100     910            mov     _TMR3CN0,#0x00
0130 22         911            ret
0131            912   ;------------------------------------------------------------
0131            913   ;Allocation info for local variables in function 'waitms'
0131            914   ;------------------------------------------------------------
0131            915   ;ms                        Allocated to registers r2 r3 
0131            916   ;j                         Allocated to registers r4 r5 
0131            917   ;k                         Allocated to registers r6 
0131            918   ;------------------------------------------------------------
0131            919   ;        EFM8_JDY40_test.c:207: void waitms (unsigned int ms)
0131            920   ;        -----------------------------------------
0131            921   ;         function waitms
0131            922   ;        -----------------------------------------
0131            923   _waitms:
0131 AA82       924            mov     r2,dpl
0133 AB83       925            mov     r3,dph
0135            926   ;        EFM8_JDY40_test.c:211: for(j=0; j<ms; j++)
0135 7C00       927            mov     r4,#0x00
0137 7D00       928            mov     r5,#0x00
0139            929   L005005?:
0139 C3         930            clr     c
013A EC         931            mov     a,r4
013B 9A         932            subb    a,r2
013C ED         933            mov     a,r5
013D 9B         934            subb    a,r3
013E 5000       935            jnc     L005009?
0140            936   ;        EFM8_JDY40_test.c:212: for (k=0; k<4; k++) Timer3us(250);
0140 7E00       937            mov     r6,#0x00
0142            938   L005001?:
0142 BE0400     939            cjne    r6,#0x04,L005018?
0145            940   L005018?:
0145 5000       941            jnc     L005007?
0147 7582FA     942            mov     dpl,#0xFA
014A C002       943            push    ar2
014C C003       944            push    ar3
014E C004       945            push    ar4
0150 C005       946            push    ar5
0152 C006       947            push    ar6
0154 120000     948            lcall   _Timer3us
0157 D006       949            pop     ar6
0159 D005       950            pop     ar5
015B D004       951            pop     ar4
015D D003       952            pop     ar3
015F D002       953            pop     ar2
0161 0E         954            inc     r6
0162 8000       955            sjmp    L005001?
0164            956   L005007?:
0164            957   ;        EFM8_JDY40_test.c:211: for(j=0; j<ms; j++)
0164 0C         958            inc     r4
0165 BC0040     959            cjne    r4,#0x00,L005005?
0168 0D         960            inc     r5
0169 8000       961            sjmp    L005005?
016B            962   L005009?:
016B 22         963            ret
016C            964   ;------------------------------------------------------------
016C            965   ;Allocation info for local variables in function 'UART1_Init'
016C            966   ;------------------------------------------------------------
016C            967   ;baudrate                  Allocated to registers r2 r3 r4 r5 
016C            968   ;------------------------------------------------------------
016C            969   ;        EFM8_JDY40_test.c:215: void UART1_Init (unsigned long baudrate)
016C            970   ;        -----------------------------------------
016C            971   ;         function UART1_Init
016C            972   ;        -----------------------------------------
016C            973   _UART1_Init:
016C AA82       974            mov     r2,dpl
016E AB83       975            mov     r3,dph
0170 ACF0       976            mov     r4,b
0172 FD         977            mov     r5,a
0173            978   ;        EFM8_JDY40_test.c:217: SFRPAGE = 0x20;
0173 75A720     979            mov     _SFRPAGE,#0x20
0176            980   ;        EFM8_JDY40_test.c:218: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0176 75930C     981            mov     _SMOD1,#0x0C
0179            982   ;        EFM8_JDY40_test.c:219: SCON1 = 0x10;
0179 75C810     983            mov     _SCON1,#0x10
017C            984   ;        EFM8_JDY40_test.c:220: SBCON1 =0x00;   // disable baud rate generator
017C 759400     985            mov     _SBCON1,#0x00
017F            986   ;        EFM8_JDY40_test.c:221: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
017F 8A00       987            mov     __divulong_PARM_2,r2
0181 8B01       988            mov     (__divulong_PARM_2 + 1),r3
0183 8C02       989            mov     (__divulong_PARM_2 + 2),r4
0185 8D03       990            mov     (__divulong_PARM_2 + 3),r5
0187 90A200     991            mov     dptr,#0xA200
018A 75F04A     992            mov     b,#0x4A
018D 7404       993            mov     a,#0x04
018F 120000     994            lcall   __divulong
0192 AA82       995            mov     r2,dpl
0194 AB83       996            mov     r3,dph
0196 ACF0       997            mov     r4,b
0198 FD         998            mov     r5,a
0199 750018     999            mov     __divulong_PARM_2,#0x18
019C E4        1000            clr     a
019D F501      1001            mov     (__divulong_PARM_2 + 1),a
019F F502      1002            mov     (__divulong_PARM_2 + 2),a
01A1 F503      1003            mov     (__divulong_PARM_2 + 3),a
01A3 8A82      1004            mov     dpl,r2
01A5 8B83      1005            mov     dph,r3
01A7 8CF0      1006            mov     b,r4
01A9 ED        1007            mov     a,r5
01AA 120000    1008            lcall   __divulong
01AD AA82      1009            mov     r2,dpl
01AF AB83      1010            mov     r3,dph
01B1 ACF0      1011            mov     r4,b
01B3 FD        1012            mov     r5,a
01B4 E4        1013            clr     a
01B5 C3        1014            clr     c
01B6 9A        1015            subb    a,r2
01B7 FA        1016            mov     r2,a
01B8 E4        1017            clr     a
01B9 9B        1018            subb    a,r3
01BA FB        1019            mov     r3,a
01BB 7401      1020            mov     a,#0x01
01BD 9C        1021            subb    a,r4
01BE E4        1022            clr     a
01BF 9D        1023            subb    a,r5
01C0 8A95      1024            mov     _SBRL1,r2
01C2 8B96      1025            mov     (_SBRL1 >> 8),r3
01C4           1026   ;        EFM8_JDY40_test.c:222: TI1 = 1; // indicate ready for TX
01C4 D2C9      1027            setb    _TI1
01C6           1028   ;        EFM8_JDY40_test.c:223: SBCON1 |= 0x40;   // enable baud rate generator
01C6 439440    1029            orl     _SBCON1,#0x40
01C9           1030   ;        EFM8_JDY40_test.c:224: SFRPAGE = 0x00;
01C9 75A700    1031            mov     _SFRPAGE,#0x00
01CC 22        1032            ret
01CD           1033   ;------------------------------------------------------------
01CD           1034   ;Allocation info for local variables in function 'putchar1'
01CD           1035   ;------------------------------------------------------------
01CD           1036   ;c                         Allocated to registers r2 
01CD           1037   ;------------------------------------------------------------
01CD           1038   ;        EFM8_JDY40_test.c:227: void putchar1 (char c) 
01CD           1039   ;        -----------------------------------------
01CD           1040   ;         function putchar1
01CD           1041   ;        -----------------------------------------
01CD           1042   _putchar1:
01CD AA82      1043            mov     r2,dpl
01CF           1044   ;        EFM8_JDY40_test.c:229: SFRPAGE = 0x20;
01CF 75A720    1045            mov     _SFRPAGE,#0x20
01D2           1046   ;        EFM8_JDY40_test.c:230: while (!TI1);
01D2           1047   L007001?:
01D2           1048   ;        EFM8_JDY40_test.c:231: TI1=0;
01D2 10C990    1049            jbc     _TI1,L007008?
01D5 8000      1050            sjmp    L007001?
01D7           1051   L007008?:
01D7           1052   ;        EFM8_JDY40_test.c:232: SBUF1 = c;
01D7 8A92      1053            mov     _SBUF1,r2
01D9           1054   ;        EFM8_JDY40_test.c:233: SFRPAGE = 0x00;
01D9 75A700    1055            mov     _SFRPAGE,#0x00
01DC 22        1056            ret
01DD           1057   ;------------------------------------------------------------
01DD           1058   ;Allocation info for local variables in function 'sendstr1'
01DD           1059   ;------------------------------------------------------------
01DD           1060   ;s                         Allocated to registers r2 r3 r4 
01DD           1061   ;------------------------------------------------------------
01DD           1062   ;        EFM8_JDY40_test.c:236: void sendstr1 (char * s)
01DD           1063   ;        -----------------------------------------
01DD           1064   ;         function sendstr1
01DD           1065   ;        -----------------------------------------
01DD           1066   _sendstr1:
01DD AA82      1067            mov     r2,dpl
01DF AB83      1068            mov     r3,dph
01E1 ACF0      1069            mov     r4,b
01E3           1070   ;        EFM8_JDY40_test.c:238: while(*s)
01E3           1071   L008001?:
01E3 8A82      1072            mov     dpl,r2
01E5 8B83      1073            mov     dph,r3
01E7 8CF0      1074            mov     b,r4
01E9 120000    1075            lcall   __gptrget
01EC FD        1076            mov     r5,a
01ED 6000      1077            jz      L008004?
01EF           1078   ;        EFM8_JDY40_test.c:240: putchar1(*s);
01EF 8D82      1079            mov     dpl,r5
01F1 C002      1080            push    ar2
01F3 C003      1081            push    ar3
01F5 C004      1082            push    ar4
01F7 120000    1083            lcall   _putchar1
01FA D004      1084            pop     ar4
01FC D003      1085            pop     ar3
01FE D002      1086            pop     ar2
0200           1087   ;        EFM8_JDY40_test.c:241: s++;     
0200 0A        1088            inc     r2
0201 BA00D0    1089            cjne    r2,#0x00,L008001?
0204 0B        1090            inc     r3
0205 8000      1091            sjmp    L008001?
0207           1092   L008004?:
0207 22        1093            ret
0208           1094   ;------------------------------------------------------------
0208           1095   ;Allocation info for local variables in function 'getchar1'
0208           1096   ;------------------------------------------------------------
0208           1097   ;c                         Allocated to registers 
0208           1098   ;------------------------------------------------------------
0208           1099   ;        EFM8_JDY40_test.c:245: char getchar1 (void)
0208           1100   ;        -----------------------------------------
0208           1101   ;         function getchar1
0208           1102   ;        -----------------------------------------
0208           1103   _getchar1:
0208           1104   ;        EFM8_JDY40_test.c:248: SFRPAGE = 0x20;
0208 75A720    1105            mov     _SFRPAGE,#0x20
020B           1106   ;        EFM8_JDY40_test.c:249: while (!RI1);
020B           1107   L009001?:
020B           1108   ;        EFM8_JDY40_test.c:250: RI1=0;
020B 10C8D0    1109            jbc     _RI1,L009008?
020E 8000      1110            sjmp    L009001?
0210           1111   L009008?:
0210           1112   ;        EFM8_JDY40_test.c:252: SCON1&=0b_0011_1111;
0210 53C83F    1113            anl     _SCON1,#0x3F
0213           1114   ;        EFM8_JDY40_test.c:253: c = SBUF1;
0213 859282    1115            mov     dpl,_SBUF1
0216           1116   ;        EFM8_JDY40_test.c:254: SFRPAGE = 0x00;
0216 75A700    1117            mov     _SFRPAGE,#0x00
0219           1118   ;        EFM8_JDY40_test.c:255: return (c);
0219 22        1119            ret
021A           1120   ;------------------------------------------------------------
021A           1121   ;Allocation info for local variables in function 'getchar1_with_timeout'
021A           1122   ;------------------------------------------------------------
021A           1123   ;c                         Allocated to registers 
021A           1124   ;timeout                   Allocated to registers r2 r3 
021A           1125   ;------------------------------------------------------------
021A           1126   ;        EFM8_JDY40_test.c:258: char getchar1_with_timeout (void)
021A           1127   ;        -----------------------------------------
021A           1128   ;         function getchar1_with_timeout
021A           1129   ;        -----------------------------------------
021A           1130   _getchar1_with_timeout:
021A           1131   ;        EFM8_JDY40_test.c:262: SFRPAGE = 0x20;
021A 75A720    1132            mov     _SFRPAGE,#0x20
021D           1133   ;        EFM8_JDY40_test.c:264: while (!RI1)
021D 7A00      1134            mov     r2,#0x00
021F 7B00      1135            mov     r3,#0x00
0221           1136   L010003?:
0221 20C850    1137            jb      _RI1,L010005?
0224           1138   ;        EFM8_JDY40_test.c:266: SFRPAGE = 0x00;
0224 75A700    1139            mov     _SFRPAGE,#0x00
0227           1140   ;        EFM8_JDY40_test.c:267: Timer3us(20);
0227 758214    1141            mov     dpl,#0x14
022A C002      1142            push    ar2
022C C003      1143            push    ar3
022E 120000    1144            lcall   _Timer3us
0231 D003      1145            pop     ar3
0233 D002      1146            pop     ar2
0235           1147   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x20;
0235 75A720    1148            mov     _SFRPAGE,#0x20
0238           1149   ;        EFM8_JDY40_test.c:269: timeout++;
0238 0A        1150            inc     r2
0239 BA0090    1151            cjne    r2,#0x00,L010012?
023C 0B        1152            inc     r3
023D           1153   L010012?:
023D           1154   ;        EFM8_JDY40_test.c:270: if(timeout==25000)
023D BAA810    1155            cjne    r2,#0xA8,L010003?
0240 BB6110    1156            cjne    r3,#0x61,L010003?
0243           1157   ;        EFM8_JDY40_test.c:272: SFRPAGE = 0x00;
0243 75A700    1158            mov     _SFRPAGE,#0x00
0246           1159   ;        EFM8_JDY40_test.c:273: return ('\n'); // Timeout after half second
0246 75820A    1160            mov     dpl,#0x0A
0249 22        1161            ret
024A           1162   L010005?:
024A           1163   ;        EFM8_JDY40_test.c:276: RI1=0;
024A C2C8      1164            clr     _RI1
024C           1165   ;        EFM8_JDY40_test.c:278: SCON1&=0b_0011_1111;
024C 53C83F    1166            anl     _SCON1,#0x3F
024F           1167   ;        EFM8_JDY40_test.c:279: c = SBUF1;
024F 859282    1168            mov     dpl,_SBUF1
0252           1169   ;        EFM8_JDY40_test.c:280: SFRPAGE = 0x00;
0252 75A700    1170            mov     _SFRPAGE,#0x00
0255           1171   ;        EFM8_JDY40_test.c:281: return (c);
0255 22        1172            ret
0256           1173   ;------------------------------------------------------------
0256           1174   ;Allocation info for local variables in function 'getstr1'
0256           1175   ;------------------------------------------------------------
0256           1176   ;n                         Allocated with name '_getstr1_PARM_2'
0256           1177   ;s                         Allocated to registers r2 r3 r4 
0256           1178   ;c                         Allocated to registers r1 
0256           1179   ;cnt                       Allocated to registers r5 
0256           1180   ;------------------------------------------------------------
0256           1181   ;        EFM8_JDY40_test.c:284: void getstr1 (char * s, unsigned char n)
0256           1182   ;        -----------------------------------------
0256           1183   ;         function getstr1
0256           1184   ;        -----------------------------------------
0256           1185   _getstr1:
0256 AA82      1186            mov     r2,dpl
0258 AB83      1187            mov     r3,dph
025A ACF0      1188            mov     r4,b
025C           1189   ;        EFM8_JDY40_test.c:290: while(1)
025C 7D00      1190            mov     r5,#0x00
025E 8A06      1191            mov     ar6,r2
0260 8B07      1192            mov     ar7,r3
0262 8C00      1193            mov     ar0,r4
0264           1194   L011007?:
0264           1195   ;        EFM8_JDY40_test.c:292: c=getchar1_with_timeout();
0264 C002      1196            push    ar2
0266 C003      1197            push    ar3
0268 C004      1198            push    ar4
026A C005      1199            push    ar5
026C C006      1200            push    ar6
026E C007      1201            push    ar7
0270 C000      1202            push    ar0
0272 120000    1203            lcall   _getchar1_with_timeout
0275 A982      1204            mov     r1,dpl
0277 D000      1205            pop     ar0
0279 D007      1206            pop     ar7
027B D006      1207            pop     ar6
027D D005      1208            pop     ar5
027F D004      1209            pop     ar4
0281 D003      1210            pop     ar3
0283 D002      1211            pop     ar2
0285           1212   ;        EFM8_JDY40_test.c:293: if(c=='\n')
0285 B90A10    1213            cjne    r1,#0x0A,L011002?
0288           1214   ;        EFM8_JDY40_test.c:295: *s=0;
0288 8A82      1215            mov     dpl,r2
028A 8B83      1216            mov     dph,r3
028C 8CF0      1217            mov     b,r4
028E E4        1218            clr     a
028F           1219   ;        EFM8_JDY40_test.c:296: return;
028F 020000    1220            ljmp    __gptrput
0292           1221   L011002?:
0292           1222   ;        EFM8_JDY40_test.c:299: if (cnt<n)
0292 C3        1223            clr     c
0293 ED        1224            mov     a,r5
0294 95F8      1225            subb    a,_getstr1_PARM_2
0296 5000      1226            jnc     L011004?
0298           1227   ;        EFM8_JDY40_test.c:301: cnt++;
0298 0D        1228            inc     r5
0299           1229   ;        EFM8_JDY40_test.c:302: *s=c;
0299 8E82      1230            mov     dpl,r6
029B 8F83      1231            mov     dph,r7
029D 88F0      1232            mov     b,r0
029F E9        1233            mov     a,r1
02A0 120000    1234            lcall   __gptrput
02A3 A3        1235            inc     dptr
02A4 AE82      1236            mov     r6,dpl
02A6 AF83      1237            mov     r7,dph
02A8           1238   ;        EFM8_JDY40_test.c:303: s++;
02A8 8E02      1239            mov     ar2,r6
02AA 8F03      1240            mov     ar3,r7
02AC 8804      1241            mov     ar4,r0
02AE 8000      1242            sjmp    L011007?
02B0           1243   L011004?:
02B0           1244   ;        EFM8_JDY40_test.c:307: *s=0;
02B0 8A82      1245            mov     dpl,r2
02B2 8B83      1246            mov     dph,r3
02B4 8CF0      1247            mov     b,r4
02B6 E4        1248            clr     a
02B7           1249   ;        EFM8_JDY40_test.c:308: return;
02B7 020000    1250            ljmp    __gptrput
02BA           1251   ;------------------------------------------------------------
02BA           1252   ;Allocation info for local variables in function 'RXU1'
02BA           1253   ;------------------------------------------------------------
02BA           1254   ;------------------------------------------------------------
02BA           1255   ;        EFM8_JDY40_test.c:314: bit RXU1 (void)
02BA           1256   ;        -----------------------------------------
02BA           1257   ;         function RXU1
02BA           1258   ;        -----------------------------------------
02BA           1259   _RXU1:
02BA           1260   ;        EFM8_JDY40_test.c:317: SFRPAGE = 0x20;
02BA 75A720    1261            mov     _SFRPAGE,#0x20
02BD           1262   ;        EFM8_JDY40_test.c:318: mybit=RI1;
02BD A2C8      1263            mov     c,_RI1
02BF           1264   ;        EFM8_JDY40_test.c:319: SFRPAGE = 0x00;
02BF 75A700    1265            mov     _SFRPAGE,#0x00
02C2           1266   ;        EFM8_JDY40_test.c:320: return mybit;
02C2 22        1267            ret
02C3           1268   ;------------------------------------------------------------
02C3           1269   ;Allocation info for local variables in function 'waitms_or_RI1'
02C3           1270   ;------------------------------------------------------------
02C3           1271   ;ms                        Allocated to registers r2 r3 
02C3           1272   ;j                         Allocated to registers r4 r5 
02C3           1273   ;k                         Allocated to registers r6 
02C3           1274   ;------------------------------------------------------------
02C3           1275   ;        EFM8_JDY40_test.c:323: void waitms_or_RI1 (unsigned int ms)
02C3           1276   ;        -----------------------------------------
02C3           1277   ;         function waitms_or_RI1
02C3           1278   ;        -----------------------------------------
02C3           1279   _waitms_or_RI1:
02C3 AA82      1280            mov     r2,dpl
02C5 AB83      1281            mov     r3,dph
02C7           1282   ;        EFM8_JDY40_test.c:327: for(j=0; j<ms; j++)
02C7 7C00      1283            mov     r4,#0x00
02C9 7D00      1284            mov     r5,#0x00
02CB           1285   L013007?:
02CB C3        1286            clr     c
02CC EC        1287            mov     a,r4
02CD 9A        1288            subb    a,r2
02CE ED        1289            mov     a,r5
02CF 9B        1290            subb    a,r3
02D0 5000      1291            jnc     L013011?
02D2           1292   ;        EFM8_JDY40_test.c:329: for (k=0; k<4; k++)
02D2 7E00      1293            mov     r6,#0x00
02D4           1294   L013003?:
02D4 BE0490    1295            cjne    r6,#0x04,L013019?
02D7           1296   L013019?:
02D7 5000      1297            jnc     L013009?
02D9           1298   ;        EFM8_JDY40_test.c:331: if(RXU1()) return;
02D9 C002      1299            push    ar2
02DB C003      1300            push    ar3
02DD C004      1301            push    ar4
02DF C005      1302            push    ar5
02E1 C006      1303            push    ar6
02E3 120000    1304            lcall   _RXU1
02E6 E4        1305            clr     a
02E7 33        1306            rlc     a
02E8 D006      1307            pop     ar6
02EA D005      1308            pop     ar5
02EC D004      1309            pop     ar4
02EE D003      1310            pop     ar3
02F0 D002      1311            pop     ar2
02F2 6000      1312            jz      L013002?
02F4 22        1313            ret
02F5           1314   L013002?:
02F5           1315   ;        EFM8_JDY40_test.c:332: Timer3us(250);
02F5 7582FA    1316            mov     dpl,#0xFA
02F8 C002      1317            push    ar2
02FA C003      1318            push    ar3
02FC C004      1319            push    ar4
02FE C005      1320            push    ar5
0300 C006      1321            push    ar6
0302 120000    1322            lcall   _Timer3us
0305 D006      1323            pop     ar6
0307 D005      1324            pop     ar5
0309 D004      1325            pop     ar4
030B D003      1326            pop     ar3
030D D002      1327            pop     ar2
030F           1328   ;        EFM8_JDY40_test.c:329: for (k=0; k<4; k++)
030F 0E        1329            inc     r6
0310 8000      1330            sjmp    L013003?
0312           1331   L013009?:
0312           1332   ;        EFM8_JDY40_test.c:327: for(j=0; j<ms; j++)
0312 0C        1333            inc     r4
0313 BC00D0    1334            cjne    r4,#0x00,L013007?
0316 0D        1335            inc     r5
0317 8000      1336            sjmp    L013007?
0319           1337   L013011?:
0319 22        1338            ret
031A           1339   ;------------------------------------------------------------
031A           1340   ;Allocation info for local variables in function 'SendATCommand'
031A           1341   ;------------------------------------------------------------
031A           1342   ;s                         Allocated to registers r2 r3 r4 
031A           1343   ;------------------------------------------------------------
031A           1344   ;        EFM8_JDY40_test.c:337: void SendATCommand (char * s)
031A           1345   ;        -----------------------------------------
031A           1346   ;         function SendATCommand
031A           1347   ;        -----------------------------------------
031A           1348   _SendATCommand:
031A AA82      1349            mov     r2,dpl
031C AB83      1350            mov     r3,dph
031E ACF0      1351            mov     r4,b
0320           1352   ;        EFM8_JDY40_test.c:339: printf("Command: %s", s);
0320 C002      1353            push    ar2
0322 C003      1354            push    ar3
0324 C004      1355            push    ar4
0326 C002      1356            push    ar2
0328 C003      1357            push    ar3
032A C004      1358            push    ar4
032C 7450      1359            mov     a,#__str_0
032E C0E0      1360            push    acc
0330 74C9      1361            mov     a,#(__str_0 >> 8)
0332 C0E0      1362            push    acc
0334 7480      1363            mov     a,#0x80
0336 C0E0      1364            push    acc
0338 120000    1365            lcall   _printf
033B E581      1366            mov     a,sp
033D 24FA      1367            add     a,#0xfa
033F F581      1368            mov     sp,a
0341           1369   ;        EFM8_JDY40_test.c:340: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0341 C2A0      1370            clr     _P2_0
0343           1371   ;        EFM8_JDY40_test.c:341: waitms(5);
0343 900005    1372            mov     dptr,#0x0005
0346 120000    1373            lcall   _waitms
0349 D004      1374            pop     ar4
034B D003      1375            pop     ar3
034D D002      1376            pop     ar2
034F           1377   ;        EFM8_JDY40_test.c:342: sendstr1(s);
034F 8A82      1378            mov     dpl,r2
0351 8B83      1379            mov     dph,r3
0353 8CF0      1380            mov     b,r4
0355 120000    1381            lcall   _sendstr1
0358           1382   ;        EFM8_JDY40_test.c:343: getstr1(buff, sizeof(buff)-1);
0358 75F813    1383            mov     _getstr1_PARM_2,#0x13
035B 901950    1384            mov     dptr,#_buff
035E 75F040    1385            mov     b,#0x40
0361 120000    1386            lcall   _getstr1
0364           1387   ;        EFM8_JDY40_test.c:344: waitms(10);
0364 90000A    1388            mov     dptr,#0x000A
0367 120000    1389            lcall   _waitms
036A           1390   ;        EFM8_JDY40_test.c:345: P2_0=1; // 'set' pin to 1 is normal operation mode.
036A D2A0      1391            setb    _P2_0
036C           1392   ;        EFM8_JDY40_test.c:346: printf("Response: %s\r\n", buff);
036C 7450      1393            mov     a,#_buff
036E C0E0      1394            push    acc
0370 7419      1395            mov     a,#(_buff >> 8)
0372 C0E0      1396            push    acc
0374 7440      1397            mov     a,#0x40
0376 C0E0      1398            push    acc
0378 7410      1399            mov     a,#__str_1
037A C0E0      1400            push    acc
037C 74CA      1401            mov     a,#(__str_1 >> 8)
037E C0E0      1402            push    acc
0380 7480      1403            mov     a,#0x80
0382 C0E0      1404            push    acc
0384 120000    1405            lcall   _printf
0387 E581      1406            mov     a,sp
0389 24FA      1407            add     a,#0xfa
038B F581      1408            mov     sp,a
038D 22        1409            ret
038E           1410   ;------------------------------------------------------------
038E           1411   ;Allocation info for local variables in function 'ReceptionOff'
038E           1412   ;------------------------------------------------------------
038E           1413   ;------------------------------------------------------------
038E           1414   ;        EFM8_JDY40_test.c:349: void ReceptionOff (void)
038E           1415   ;        -----------------------------------------
038E           1416   ;         function ReceptionOff
038E           1417   ;        -----------------------------------------
038E           1418   _ReceptionOff:
038E           1419   ;        EFM8_JDY40_test.c:351: P2_0=0; // 'set' pin to 0 is 'AT' mode.
038E C2A0      1420            clr     _P2_0
0390           1421   ;        EFM8_JDY40_test.c:352: waitms(10);
0390 90000A    1422            mov     dptr,#0x000A
0393 120000    1423            lcall   _waitms
0396           1424   ;        EFM8_JDY40_test.c:353: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0396 90CA50    1425            mov     dptr,#__str_2
0399 75F080    1426            mov     b,#0x80
039C 120000    1427            lcall   _sendstr1
039F           1428   ;        EFM8_JDY40_test.c:354: waitms(10);
039F 90000A    1429            mov     dptr,#0x000A
03A2 120000    1430            lcall   _waitms
03A5           1431   ;        EFM8_JDY40_test.c:356: SCON1&=0b_0011_1111;
03A5 53C83F    1432            anl     _SCON1,#0x3F
03A8           1433   ;        EFM8_JDY40_test.c:357: P2_0=1; // 'set' pin to 1 is normal operation mode.
03A8 D2A0      1434            setb    _P2_0
03AA 22        1435            ret
03AB           1436   ;------------------------------------------------------------
03AB           1437   ;Allocation info for local variables in function 'TIMER0_Init'
03AB           1438   ;------------------------------------------------------------
03AB           1439   ;------------------------------------------------------------
03AB           1440   ;        EFM8_JDY40_test.c:361: void TIMER0_Init(void)
03AB           1441   ;        -----------------------------------------
03AB           1442   ;         function TIMER0_Init
03AB           1443   ;        -----------------------------------------
03AB           1444   _TIMER0_Init:
03AB           1445   ;        EFM8_JDY40_test.c:363: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
03AB 5389F0    1446            anl     _TMOD,#0xF0
03AE           1447   ;        EFM8_JDY40_test.c:364: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
03AE 438901    1448            orl     _TMOD,#0x01
03B1           1449   ;        EFM8_JDY40_test.c:365: TR0=0; // Stop Timer/Counter 0
03B1 C28C      1450            clr     _TR0
03B3 22        1451            ret
03B4           1452   ;------------------------------------------------------------
03B4           1453   ;Allocation info for local variables in function 'InitADC'
03B4           1454   ;------------------------------------------------------------
03B4           1455   ;------------------------------------------------------------
03B4           1456   ;        EFM8_JDY40_test.c:369: void InitADC (void)
03B4           1457   ;        -----------------------------------------
03B4           1458   ;         function InitADC
03B4           1459   ;        -----------------------------------------
03B4           1460   _InitADC:
03B4           1461   ;        EFM8_JDY40_test.c:371: SFRPAGE = 0x00;
03B4 75A700    1462            mov     _SFRPAGE,#0x00
03B7           1463   ;        EFM8_JDY40_test.c:372: ADEN=0; // Disable ADC
03B7 C2EF      1464            clr     _ADEN
03B9           1465   ;        EFM8_JDY40_test.c:377: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03B9 75B280    1466            mov     _ADC0CN1,#0x80
03BC           1467   ;        EFM8_JDY40_test.c:381: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03BC 75BC20    1468            mov     _ADC0CF0,#0x20
03BF           1469   ;        EFM8_JDY40_test.c:385: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03BF 75B91E    1470            mov     _ADC0CF1,#0x1E
03C2           1471   ;        EFM8_JDY40_test.c:394: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03C2 75E800    1472            mov     _ADC0CN0,#0x00
03C5           1473   ;        EFM8_JDY40_test.c:399: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03C5 75DF3F    1474            mov     _ADC0CF2,#0x3F
03C8           1475   ;        EFM8_JDY40_test.c:403: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03C8 75B300    1476            mov     _ADC0CN2,#0x00
03CB           1477   ;        EFM8_JDY40_test.c:405: ADEN=1; // Enable ADC
03CB D2EF      1478            setb    _ADEN
03CD 22        1479            ret
03CE           1480   ;------------------------------------------------------------
03CE           1481   ;Allocation info for local variables in function 'InitPinADC'
03CE           1482   ;------------------------------------------------------------
03CE           1483   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
03CE           1484   ;portno                    Allocated to registers r2 
03CE           1485   ;mask                      Allocated to registers r3 
03CE           1486   ;------------------------------------------------------------
03CE           1487   ;        EFM8_JDY40_test.c:408: void InitPinADC (unsigned char portno, unsigned char pinno)
03CE           1488   ;        -----------------------------------------
03CE           1489   ;         function InitPinADC
03CE           1490   ;        -----------------------------------------
03CE           1491   _InitPinADC:
03CE AA82      1492            mov     r2,dpl
03D0           1493   ;        EFM8_JDY40_test.c:412: mask=1<<pinno;
03D0 8560F0    1494            mov     b,_InitPinADC_PARM_2
03D3 05F0      1495            inc     b
03D5 7401      1496            mov     a,#0x01
03D7 8000      1497            sjmp    L018013?
03D9           1498   L018011?:
03D9 25E0      1499            add     a,acc
03DB           1500   L018013?:
03DB D5F0D0    1501            djnz    b,L018011?
03DE FB        1502            mov     r3,a
03DF           1503   ;        EFM8_JDY40_test.c:414: SFRPAGE = 0x20;
03DF 75A720    1504            mov     _SFRPAGE,#0x20
03E2           1505   ;        EFM8_JDY40_test.c:415: switch (portno)
03E2 BA0010    1506            cjne    r2,#0x00,L018014?
03E5 8000      1507            sjmp    L018001?
03E7           1508   L018014?:
03E7 BA0190    1509            cjne    r2,#0x01,L018015?
03EA 8000      1510            sjmp    L018002?
03EC           1511   L018015?:
03EC           1512   ;        EFM8_JDY40_test.c:417: case 0:
03EC BA0210    1513            cjne    r2,#0x02,L018005?
03EF 8000      1514            sjmp    L018003?
03F1           1515   L018001?:
03F1           1516   ;        EFM8_JDY40_test.c:418: P0MDIN &= (~mask); // Set pin as analog input
03F1 EB        1517            mov     a,r3
03F2 F4        1518            cpl     a
03F3 FA        1519            mov     r2,a
03F4 52F1      1520            anl     _P0MDIN,a
03F6           1521   ;        EFM8_JDY40_test.c:419: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03F6 EB        1522            mov     a,r3
03F7 42D4      1523            orl     _P0SKIP,a
03F9           1524   ;        EFM8_JDY40_test.c:420: break;
03F9           1525   ;        EFM8_JDY40_test.c:421: case 1:
03F9 8000      1526            sjmp    L018005?
03FB           1527   L018002?:
03FB           1528   ;        EFM8_JDY40_test.c:422: P1MDIN &= (~mask); // Set pin as analog input
03FB EB        1529            mov     a,r3
03FC F4        1530            cpl     a
03FD FA        1531            mov     r2,a
03FE 52F2      1532            anl     _P1MDIN,a
0400           1533   ;        EFM8_JDY40_test.c:423: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0400 EB        1534            mov     a,r3
0401 42D5      1535            orl     _P1SKIP,a
0403           1536   ;        EFM8_JDY40_test.c:424: break;
0403           1537   ;        EFM8_JDY40_test.c:425: case 2:
0403 8000      1538            sjmp    L018005?
0405           1539   L018003?:
0405           1540   ;        EFM8_JDY40_test.c:426: P2MDIN &= (~mask); // Set pin as analog input
0405 EB        1541            mov     a,r3
0406 F4        1542            cpl     a
0407 FA        1543            mov     r2,a
0408 52F3      1544            anl     _P2MDIN,a
040A           1545   ;        EFM8_JDY40_test.c:427: P2SKIP |= mask; // Skip Crossbar decoding for this pin
040A EB        1546            mov     a,r3
040B 42CC      1547            orl     _P2SKIP,a
040D           1548   ;        EFM8_JDY40_test.c:431: }
040D           1549   L018005?:
040D           1550   ;        EFM8_JDY40_test.c:432: SFRPAGE = 0x00;
040D 75A700    1551            mov     _SFRPAGE,#0x00
0410 22        1552            ret
0411           1553   ;------------------------------------------------------------
0411           1554   ;Allocation info for local variables in function 'ADC_at_Pin'
0411           1555   ;------------------------------------------------------------
0411           1556   ;pin                       Allocated to registers 
0411           1557   ;------------------------------------------------------------
0411           1558   ;        EFM8_JDY40_test.c:435: unsigned int ADC_at_Pin(unsigned char pin)
0411           1559   ;        -----------------------------------------
0411           1560   ;         function ADC_at_Pin
0411           1561   ;        -----------------------------------------
0411           1562   _ADC_at_Pin:
0411 8582BB    1563            mov     _ADC0MX,dpl
0414           1564   ;        EFM8_JDY40_test.c:438: ADINT = 0;
0414 C2ED      1565            clr     _ADINT
0416           1566   ;        EFM8_JDY40_test.c:439: ADBUSY = 1;     // Convert voltage at the pin
0416 D2EC      1567            setb    _ADBUSY
0418           1568   ;        EFM8_JDY40_test.c:440: while (!ADINT); // Wait for conversion to complete
0418           1569   L019001?:
0418 30ED90    1570            jnb     _ADINT,L019001?
041B           1571   ;        EFM8_JDY40_test.c:441: return (ADC0);
041B 85BD82    1572            mov     dpl,_ADC0
041E 85BE83    1573            mov     dph,(_ADC0 >> 8)
0421 22        1574            ret
0422           1575   ;------------------------------------------------------------
0422           1576   ;Allocation info for local variables in function 'Volts_at_Pin'
0422           1577   ;------------------------------------------------------------
0422           1578   ;pin                       Allocated to registers r2 
0422           1579   ;------------------------------------------------------------
0422           1580   ;        EFM8_JDY40_test.c:444: float Volts_at_Pin(unsigned char pin)
0422           1581   ;        -----------------------------------------
0422           1582   ;         function Volts_at_Pin
0422           1583   ;        -----------------------------------------
0422           1584   _Volts_at_Pin:
0422           1585   ;        EFM8_JDY40_test.c:446: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0422 120000    1586            lcall   _ADC_at_Pin
0425 120000    1587            lcall   ___uint2fs
0428 AA82      1588            mov     r2,dpl
042A AB83      1589            mov     r3,dph
042C ACF0      1590            mov     r4,b
042E FD        1591            mov     r5,a
042F C002      1592            push    ar2
0431 C003      1593            push    ar3
0433 C004      1594            push    ar4
0435 C005      1595            push    ar5
0437 906C8B    1596            mov     dptr,#0x6C8B
043A 75F053    1597            mov     b,#0x53
043D 7440      1598            mov     a,#0x40
043F 120000    1599            lcall   ___fsmul
0442 AA82      1600            mov     r2,dpl
0444 AB83      1601            mov     r3,dph
0446 ACF0      1602            mov     r4,b
0448 FD        1603            mov     r5,a
0449 E581      1604            mov     a,sp
044B 24FC      1605            add     a,#0xfc
044D F581      1606            mov     sp,a
044F E4        1607            clr     a
0450 C0E0      1608            push    acc
0452 74FC      1609            mov     a,#0xFC
0454 C0E0      1610            push    acc
0456 747F      1611            mov     a,#0x7F
0458 C0E0      1612            push    acc
045A 7446      1613            mov     a,#0x46
045C C0E0      1614            push    acc
045E 8A82      1615            mov     dpl,r2
0460 8B83      1616            mov     dph,r3
0462 8CF0      1617            mov     b,r4
0464 ED        1618            mov     a,r5
0465 120000    1619            lcall   ___fsdiv
0468 AA82      1620            mov     r2,dpl
046A AB83      1621            mov     r3,dph
046C ACF0      1622            mov     r4,b
046E FD        1623            mov     r5,a
046F E581      1624            mov     a,sp
0471 24FC      1625            add     a,#0xfc
0473 F581      1626            mov     sp,a
0475 8A82      1627            mov     dpl,r2
0477 8B83      1628            mov     dph,r3
0479 8CF0      1629            mov     b,r4
047B ED        1630            mov     a,r5
047C 22        1631            ret
047D           1632   ;------------------------------------------------------------
047D           1633   ;Allocation info for local variables in function 'Timer4_ISR'
047D           1634   ;------------------------------------------------------------
047D           1635   ;------------------------------------------------------------
047D           1636   ;        EFM8_JDY40_test.c:450: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
047D           1637   ;        -----------------------------------------
047D           1638   ;         function Timer4_ISR
047D           1639   ;        -----------------------------------------
047D           1640   _Timer4_ISR:
047D C0E0      1641            push    acc
047F C0D0      1642            push    psw
0481 75D000    1643            mov     psw,#0x00
0484           1644   ;        EFM8_JDY40_test.c:452: SFRPAGE=0x10;
0484 75A710    1645            mov     _SFRPAGE,#0x10
0487           1646   ;        EFM8_JDY40_test.c:453: TF4H = 0; 
0487 C29F      1647            clr     _TF4H
0489           1648   ;        EFM8_JDY40_test.c:455: pwm_counter4 += 256; // counting steps
0489 853838    1649            mov     _pwm_counter4,_pwm_counter4
048C 7401      1650            mov     a,#0x01
048E 2539      1651            add     a,(_pwm_counter4 + 1)
0490 F539      1652            mov     (_pwm_counter4 + 1),a
0492           1653   ;        EFM8_JDY40_test.c:456: if ( direction == 1) {
0492 7401      1654            mov     a,#0x01
0494 B53890    1655            cjne    a,_direction,L021009?
0497 E4        1656            clr     a
0498 B53990    1657            cjne    a,(_direction + 1),L021009?
049B 8000      1658            sjmp    L021010?
049D           1659   L021009?:
049D 8000      1660            sjmp    L021002?
049F           1661   L021010?:
049F           1662   ;        EFM8_JDY40_test.c:457: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
049F C3        1663            clr     c
04A0 E538      1664            mov     a,_pwm_counter4
04A2 95F8      1665            subb    a,_pwm_duty4
04A4 E539      1666            mov     a,(_pwm_counter4 + 1)
04A6 95F9      1667            subb    a,(_pwm_duty4 + 1)
04A8 92B0      1668            mov     _P3_0,c
04AA           1669   L021002?:
04AA           1670   ;        EFM8_JDY40_test.c:459: if ( direction  == 0 ) {
04AA E538      1671            mov     a,_direction
04AC 4539      1672            orl     a,(_direction + 1)
04AE 7000      1673            jnz     L021004?
04B0           1674   ;        EFM8_JDY40_test.c:460: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
04B0 C3        1675            clr     c
04B1 E538      1676            mov     a,_pwm_counter4
04B3 95F8      1677            subb    a,_pwm_duty4
04B5 E539      1678            mov     a,(_pwm_counter4 + 1)
04B7 95F9      1679            subb    a,(_pwm_duty4 + 1)
04B9 92A5      1680            mov     _P2_5,c
04BB           1681   L021004?:
04BB           1682   ;        EFM8_JDY40_test.c:462: if ( direction == 3 ) 
04BB E538      1683            mov     a,_direction
04BD E539      1684            mov     a,(_direction + 1)
04BF D0D0      1685            pop     psw
04C1 D0E0      1686            pop     acc
04C3 32        1687            reti
04C4           1688   ;        eliminated unneeded push/pop dpl
04C4           1689   ;        eliminated unneeded push/pop dph
04C4           1690   ;        eliminated unneeded push/pop b
04C4           1691   ;------------------------------------------------------------
04C4           1692   ;Allocation info for local variables in function 'Timer2_ISR'
04C4           1693   ;------------------------------------------------------------
04C4           1694   ;------------------------------------------------------------
04C4           1695   ;        EFM8_JDY40_test.c:467: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
04C4           1696   ;        -----------------------------------------
04C4           1697   ;         function Timer2_ISR
04C4           1698   ;        -----------------------------------------
04C4           1699   _Timer2_ISR:
04C4 C0E0      1700            push    acc
04C6 C0D0      1701            push    psw
04C8 75D000    1702            mov     psw,#0x00
04CB           1703   ;        EFM8_JDY40_test.c:469: SFRPAGE=0x0;
04CB 75A700    1704            mov     _SFRPAGE,#0x00
04CE           1705   ;        EFM8_JDY40_test.c:470: TF2H = 0; // Clear Timer2 interrupt flag
04CE C2CF      1706            clr     _TF2H
04D0           1707   ;        EFM8_JDY40_test.c:471: pwm_counter2 += 256; // counting steps
04D0 85B8B8    1708            mov     _pwm_counter2,_pwm_counter2
04D3 7401      1709            mov     a,#0x01
04D5 25B9      1710            add     a,(_pwm_counter2 + 1)
04D7 F5B9      1711            mov     (_pwm_counter2 + 1),a
04D9           1712   ;        EFM8_JDY40_test.c:472: if ( direction == 1) {
04D9 7401      1713            mov     a,#0x01
04DB B53890    1714            cjne    a,_direction,L022009?
04DE E4        1715            clr     a
04DF B53990    1716            cjne    a,(_direction + 1),L022009?
04E2 8000      1717            sjmp    L022010?
04E4           1718   L022009?:
04E4 8000      1719            sjmp    L022002?
04E6           1720   L022010?:
04E6           1721   ;        EFM8_JDY40_test.c:473: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
04E6 C3        1722            clr     c
04E7 E5B8      1723            mov     a,_pwm_counter2
04E9 9578      1724            subb    a,_pwm_duty2
04EB E5B9      1725            mov     a,(_pwm_counter2 + 1)
04ED 9579      1726            subb    a,(_pwm_duty2 + 1)
04EF 92B2      1727            mov     _P3_2,c
04F1           1728   L022002?:
04F1           1729   ;        EFM8_JDY40_test.c:475: if (direction == 0 ){
04F1 E538      1730            mov     a,_direction
04F3 4539      1731            orl     a,(_direction + 1)
04F5 7000      1732            jnz     L022004?
04F7           1733   ;        EFM8_JDY40_test.c:476: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
04F7 C3        1734            clr     c
04F8 E5B8      1735            mov     a,_pwm_counter2
04FA 9578      1736            subb    a,_pwm_duty2
04FC E5B9      1737            mov     a,(_pwm_counter2 + 1)
04FE 9579      1738            subb    a,(_pwm_duty2 + 1)
0500 92B7      1739            mov     _P3_7,c
0502           1740   L022004?:
0502           1741   ;        EFM8_JDY40_test.c:478: if ( direction == 3 ) 
0502 E538      1742            mov     a,_direction
0504 E539      1743            mov     a,(_direction + 1)
0506 D0D0      1744            pop     psw
0508 D0E0      1745            pop     acc
050A 32        1746            reti
050B           1747   ;        eliminated unneeded push/pop dpl
050B           1748   ;        eliminated unneeded push/pop dph
050B           1749   ;        eliminated unneeded push/pop b
050B           1750   ;------------------------------------------------------------
050B           1751   ;Allocation info for local variables in function 'GetPeriod'
050B           1752   ;------------------------------------------------------------
050B           1753   ;n                         Allocated to registers r2 r3 
050B           1754   ;overflow_count            Allocated to registers r4 r5 
050B           1755   ;i                         Allocated to registers r6 
050B           1756   ;------------------------------------------------------------
050B           1757   ;        EFM8_JDY40_test.c:485: unsigned long GetPeriod (int n)
050B           1758   ;        -----------------------------------------
050B           1759   ;         function GetPeriod
050B           1760   ;        -----------------------------------------
050B           1761   _GetPeriod:
050B AA82      1762            mov     r2,dpl
050D AB83      1763            mov     r3,dph
050F           1764   ;        EFM8_JDY40_test.c:490: TR0=0; // Stop Timer/Counter 0
050F C28C      1765            clr     _TR0
0511           1766   ;        EFM8_JDY40_test.c:491: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0511 5389F0    1767            anl     _TMOD,#0xF0
0514           1768   ;        EFM8_JDY40_test.c:492: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0514 438901    1769            orl     _TMOD,#0x01
0517           1770   ;        EFM8_JDY40_test.c:495: TR0=0;
0517 C28C      1771            clr     _TR0
0519           1772   ;        EFM8_JDY40_test.c:496: TL0=0; TH0=0; TF0=0; overflow_count=0;
0519 758A00    1773            mov     _TL0,#0x00
051C 758C00    1774            mov     _TH0,#0x00
051F C28D      1775            clr     _TF0
0521           1776   ;        EFM8_JDY40_test.c:497: TR0=1;
0521 D28C      1777            setb    _TR0
0523           1778   ;        EFM8_JDY40_test.c:500: TR0=0;
0523 C28C      1779            clr     _TR0
0525           1780   ;        EFM8_JDY40_test.c:501: TL0=0; TH0=0; TF0=0; overflow_count=0;
0525 758A00    1781            mov     _TL0,#0x00
0528 758C00    1782            mov     _TH0,#0x00
052B C28D      1783            clr     _TF0
052D           1784   ;        EFM8_JDY40_test.c:502: TR0=1;
052D D28C      1785            setb    _TR0
052F           1786   ;        EFM8_JDY40_test.c:503: while(PERIOD_PIN!=0) // Wait for the signal to be zero
052F 7C00      1787            mov     r4,#0x00
0531 7D00      1788            mov     r5,#0x00
0533           1789   L023005?:
0533 3086D0    1790            jnb     _P0_6,L023007?
0536           1791   ;        EFM8_JDY40_test.c:505: if(TF0==1) // Did the 16-bit timer overflow?
0536           1792   ;        EFM8_JDY40_test.c:507: TF0=0;
0536 108D10    1793            jbc     _TF0,L023050?
0539 8000      1794            sjmp    L023005?
053B           1795   L023050?:
053B           1796   ;        EFM8_JDY40_test.c:508: overflow_count++;
053B 0C        1797            inc     r4
053C BC0050    1798            cjne    r4,#0x00,L023051?
053F 0D        1799            inc     r5
0540           1800   L023051?:
0540           1801   ;        EFM8_JDY40_test.c:509: if(overflow_count==10) // If it overflows too many times assume no signal is present
0540 BC0A90    1802            cjne    r4,#0x0A,L023005?
0543 BD0090    1803            cjne    r5,#0x00,L023005?
0546           1804   ;        EFM8_JDY40_test.c:511: TR0=0;
0546 C28C      1805            clr     _TR0
0548           1806   ;        EFM8_JDY40_test.c:512: return 0; // No signal
0548 900000    1807            mov     dptr,#(0x00&0x00ff)
054B E4        1808            clr     a
054C F5F0      1809            mov     b,a
054E 22        1810            ret
054F           1811   L023007?:
054F           1812   ;        EFM8_JDY40_test.c:518: TR0=0;
054F C28C      1813            clr     _TR0
0551           1814   ;        EFM8_JDY40_test.c:519: TL0=0; TH0=0; TF0=0; overflow_count=0;
0551 758A00    1815            mov     _TL0,#0x00
0554 758C00    1816            mov     _TH0,#0x00
0557 C28D      1817            clr     _TF0
0559           1818   ;        EFM8_JDY40_test.c:520: TR0=1;
0559 D28C      1819            setb    _TR0
055B           1820   ;        EFM8_JDY40_test.c:521: while(PERIOD_PIN!=1) // Wait for the signal to be one
055B 7C00      1821            mov     r4,#0x00
055D 7D00      1822            mov     r5,#0x00
055F           1823   L023012?:
055F 2086D0    1824            jb      _P0_6,L023014?
0562           1825   ;        EFM8_JDY40_test.c:523: if(TF0==1) // Did the 16-bit timer overflow?
0562           1826   ;        EFM8_JDY40_test.c:525: TF0=0;
0562 108D10    1827            jbc     _TF0,L023055?
0565 8000      1828            sjmp    L023012?
0567           1829   L023055?:
0567           1830   ;        EFM8_JDY40_test.c:526: overflow_count++;
0567 0C        1831            inc     r4
0568 BC0050    1832            cjne    r4,#0x00,L023056?
056B 0D        1833            inc     r5
056C           1834   L023056?:
056C           1835   ;        EFM8_JDY40_test.c:527: if(overflow_count==10) // If it overflows too many times assume no signal is present
056C BC0A90    1836            cjne    r4,#0x0A,L023012?
056F BD0090    1837            cjne    r5,#0x00,L023012?
0572           1838   ;        EFM8_JDY40_test.c:529: TR0=0;
0572 C28C      1839            clr     _TR0
0574           1840   ;        EFM8_JDY40_test.c:530: return 0; // No signal
0574 900000    1841            mov     dptr,#(0x00&0x00ff)
0577 E4        1842            clr     a
0578 F5F0      1843            mov     b,a
057A 22        1844            ret
057B           1845   L023014?:
057B           1846   ;        EFM8_JDY40_test.c:536: TR0=0;
057B C28C      1847            clr     _TR0
057D           1848   ;        EFM8_JDY40_test.c:537: TL0=0; TH0=0; TF0=0; overflow_count=0;
057D 758A00    1849            mov     _TL0,#0x00
0580 758C00    1850            mov     _TH0,#0x00
0583 C28D      1851            clr     _TF0
0585 7C00      1852            mov     r4,#0x00
0587 7D00      1853            mov     r5,#0x00
0589           1854   ;        EFM8_JDY40_test.c:538: TR0=1; // Start the timer
0589 D28C      1855            setb    _TR0
058B           1856   ;        EFM8_JDY40_test.c:539: for(i=0; i<n; i++) // Measure the time of 'n' periods
058B 7E00      1857            mov     r6,#0x00
058D           1858   L023025?:
058D 8E07      1859            mov     ar7,r6
058F 7800      1860            mov     r0,#0x00
0591 C3        1861            clr     c
0592 EF        1862            mov     a,r7
0593 9A        1863            subb    a,r2
0594 E8        1864            mov     a,r0
0595 6480      1865            xrl     a,#0x80
0597 8BF0      1866            mov     b,r3
0599 63F080    1867            xrl     b,#0x80
059C 95F0      1868            subb    a,b
059E 5000      1869            jnc     L023028?
05A0           1870   ;        EFM8_JDY40_test.c:541: while(PERIOD_PIN!=0) // Wait for the signal to be zero
05A0 8C07      1871            mov     ar7,r4
05A2 8D00      1872            mov     ar0,r5
05A4           1873   L023017?:
05A4 308650    1874            jnb     _P0_6,L023043?
05A7           1875   ;        EFM8_JDY40_test.c:543: if(TF0==1) // Did the 16-bit timer overflow?
05A7           1876   ;        EFM8_JDY40_test.c:545: TF0=0;
05A7 108D90    1877            jbc     _TF0,L023061?
05AA 8000      1878            sjmp    L023017?
05AC           1879   L023061?:
05AC           1880   ;        EFM8_JDY40_test.c:546: overflow_count++;
05AC 0F        1881            inc     r7
05AD BF0010    1882            cjne    r7,#0x00,L023017?
05B0 08        1883            inc     r0
05B1           1884   ;        EFM8_JDY40_test.c:549: while(PERIOD_PIN!=1) // Wait for the signal to be one
05B1 8000      1885            sjmp    L023017?
05B3           1886   L023043?:
05B3           1887   L023022?:
05B3 208610    1888            jb      _P0_6,L023047?
05B6           1889   ;        EFM8_JDY40_test.c:551: if(TF0==1) // Did the 16-bit timer overflow?
05B6           1890   ;        EFM8_JDY40_test.c:553: TF0=0;
05B6 108D50    1891            jbc     _TF0,L023063?
05B9 8000      1892            sjmp    L023022?
05BB           1893   L023063?:
05BB           1894   ;        EFM8_JDY40_test.c:554: overflow_count++;
05BB 0F        1895            inc     r7
05BC BF00D0    1896            cjne    r7,#0x00,L023022?
05BF 08        1897            inc     r0
05C0 8000      1898            sjmp    L023022?
05C2           1899   L023047?:
05C2 8F04      1900            mov     ar4,r7
05C4 8805      1901            mov     ar5,r0
05C6           1902   ;        EFM8_JDY40_test.c:539: for(i=0; i<n; i++) // Measure the time of 'n' periods
05C6 0E        1903            inc     r6
05C7 8000      1904            sjmp    L023025?
05C9           1905   L023028?:
05C9           1906   ;        EFM8_JDY40_test.c:558: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
05C9 C28C      1907            clr     _TR0
05CB           1908   ;        EFM8_JDY40_test.c:560: return (overflow_count*65536+TH0*256+TL0);
05CB 8D03      1909            mov     ar3,r5
05CD 8C02      1910            mov     ar2,r4
05CF 7D00      1911            mov     r5,#0x00
05D1 7C00      1912            mov     r4,#0x00
05D3 AF8C      1913            mov     r7,_TH0
05D5 7E00      1914            mov     r6,#0x00
05D7 EF        1915            mov     a,r7
05D8 33        1916            rlc     a
05D9 95E0      1917            subb    a,acc
05DB F8        1918            mov     r0,a
05DC F9        1919            mov     r1,a
05DD EE        1920            mov     a,r6
05DE 2C        1921            add     a,r4
05DF FC        1922            mov     r4,a
05E0 EF        1923            mov     a,r7
05E1 3D        1924            addc    a,r5
05E2 FD        1925            mov     r5,a
05E3 E8        1926            mov     a,r0
05E4 3A        1927            addc    a,r2
05E5 FA        1928            mov     r2,a
05E6 E9        1929            mov     a,r1
05E7 3B        1930            addc    a,r3
05E8 FB        1931            mov     r3,a
05E9 AE8A      1932            mov     r6,_TL0
05EB E4        1933            clr     a
05EC FF        1934            mov     r7,a
05ED 33        1935            rlc     a
05EE 95E0      1936            subb    a,acc
05F0 F8        1937            mov     r0,a
05F1 F9        1938            mov     r1,a
05F2 EE        1939            mov     a,r6
05F3 2C        1940            add     a,r4
05F4 FC        1941            mov     r4,a
05F5 EF        1942            mov     a,r7
05F6 3D        1943            addc    a,r5
05F7 FD        1944            mov     r5,a
05F8 E8        1945            mov     a,r0
05F9 3A        1946            addc    a,r2
05FA FA        1947            mov     r2,a
05FB E9        1948            mov     a,r1
05FC 3B        1949            addc    a,r3
05FD 8C82      1950            mov     dpl,r4
05FF 8D83      1951            mov     dph,r5
0601 8AF0      1952            mov     b,r2
0603 22        1953            ret
0604           1954   ;------------------------------------------------------------
0604           1955   ;Allocation info for local variables in function 'eputs'
0604           1956   ;------------------------------------------------------------
0604           1957   ;String                    Allocated to registers r2 r3 r4 
0604           1958   ;------------------------------------------------------------
0604           1959   ;        EFM8_JDY40_test.c:563: void eputs(char *String)
0604           1960   ;        -----------------------------------------
0604           1961   ;         function eputs
0604           1962   ;        -----------------------------------------
0604           1963   _eputs:
0604 AA82      1964            mov     r2,dpl
0606 AB83      1965            mov     r3,dph
0608 ACF0      1966            mov     r4,b
060A           1967   ;        EFM8_JDY40_test.c:565: while(*String)
060A           1968   L024001?:
060A 8A82      1969            mov     dpl,r2
060C 8B83      1970            mov     dph,r3
060E 8CF0      1971            mov     b,r4
0610 120000    1972            lcall   __gptrget
0613 FD        1973            mov     r5,a
0614 6000      1974            jz      L024004?
0616           1975   ;        EFM8_JDY40_test.c:567: putchar(*String);
0616 8D82      1976            mov     dpl,r5
0618 C002      1977            push    ar2
061A C003      1978            push    ar3
061C C004      1979            push    ar4
061E 120000    1980            lcall   _putchar
0621 D004      1981            pop     ar4
0623 D003      1982            pop     ar3
0625 D002      1983            pop     ar2
0627           1984   ;        EFM8_JDY40_test.c:568: String++;
0627 0A        1985            inc     r2
0628 BA0090    1986            cjne    r2,#0x00,L024001?
062B 0B        1987            inc     r3
062C 8000      1988            sjmp    L024001?
062E           1989   L024004?:
062E 22        1990            ret
062F           1991   ;------------------------------------------------------------
062F           1992   ;Allocation info for local variables in function 'PrintNumber'
062F           1993   ;------------------------------------------------------------
062F           1994   ;Base                      Allocated with name '_PrintNumber_PARM_2'
062F           1995   ;digits                    Allocated with name '_PrintNumber_PARM_3'
062F           1996   ;val                       Allocated with name '_PrintNumber_val_1_163'
062F           1997   ;j                         Allocated with name '_PrintNumber_j_1_164'
062F           1998   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
062F           1999   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
062F           2000   ;buff                      Allocated with name '_PrintNumber_buff_1_164'
062F           2001   ;------------------------------------------------------------
062F           2002   ;        EFM8_JDY40_test.c:572: void PrintNumber(long int val, int Base, int digits)
062F           2003   ;        -----------------------------------------
062F           2004   ;         function PrintNumber
062F           2005   ;        -----------------------------------------
062F           2006   _PrintNumber:
062F 858250    2007            mov     _PrintNumber_val_1_163,dpl
0632 858351    2008            mov     (_PrintNumber_val_1_163 + 1),dph
0635 85F052    2009            mov     (_PrintNumber_val_1_163 + 2),b
0638 F553      2010            mov     (_PrintNumber_val_1_163 + 3),a
063A           2011   ;        EFM8_JDY40_test.c:578: buff[NBITS]=0;
063A 90BE60    2012            mov     dptr,#(_PrintNumber_buff_1_164 + 0x0020)
063D E4        2013            clr     a
063E F0        2014            movx    @dptr,a
063F           2015   ;        EFM8_JDY40_test.c:580: if(val<0)
063F E553      2016            mov     a,(_PrintNumber_val_1_163 + 3)
0641 30E750    2017            jnb     acc.7,L025012?
0644           2018   ;        EFM8_JDY40_test.c:582: putchar('-');
0644 75822D    2019            mov     dpl,#0x2D
0647 120000    2020            lcall   _putchar
064A           2021   ;        EFM8_JDY40_test.c:583: val*=-1;
064A C3        2022            clr     c
064B E4        2023            clr     a
064C 9550      2024            subb    a,_PrintNumber_val_1_163
064E F550      2025            mov     _PrintNumber_val_1_163,a
0650 E4        2026            clr     a
0651 9551      2027            subb    a,(_PrintNumber_val_1_163 + 1)
0653 F551      2028            mov     (_PrintNumber_val_1_163 + 1),a
0655 E4        2029            clr     a
0656 9552      2030            subb    a,(_PrintNumber_val_1_163 + 2)
0658 F552      2031            mov     (_PrintNumber_val_1_163 + 2),a
065A E4        2032            clr     a
065B 9553      2033            subb    a,(_PrintNumber_val_1_163 + 3)
065D F553      2034            mov     (_PrintNumber_val_1_163 + 3),a
065F           2035   ;        EFM8_JDY40_test.c:587: while ( (val>0) | (digits>0) )
065F           2036   L025012?:
065F 75A01F    2037            mov     _PrintNumber_j_1_164,#0x1F
0662 E4        2038            clr     a
0663 F5A1      2039            mov     (_PrintNumber_j_1_164 + 1),a
0665 A880      2040            mov     r0,_PrintNumber_PARM_3
0667 A981      2041            mov     r1,(_PrintNumber_PARM_3 + 1)
0669           2042   L025005?:
0669 C3        2043            clr     c
066A E4        2044            clr     a
066B 9550      2045            subb    a,_PrintNumber_val_1_163
066D E4        2046            clr     a
066E 9551      2047            subb    a,(_PrintNumber_val_1_163 + 1)
0670 E4        2048            clr     a
0671 9552      2049            subb    a,(_PrintNumber_val_1_163 + 2)
0673 E4        2050            clr     a
0674 6480      2051            xrl     a,#0x80
0676 8553F0    2052            mov     b,(_PrintNumber_val_1_163 + 3)
0679 63F080    2053            xrl     b,#0x80
067C 95F0      2054            subb    a,b
067E E4        2055            clr     a
067F 33        2056            rlc     a
0680 FE        2057            mov     r6,a
0681 C3        2058            clr     c
0682 E4        2059            clr     a
0683 98        2060            subb    a,r0
0684 E4        2061            clr     a
0685 6480      2062            xrl     a,#0x80
0687 89F0      2063            mov     b,r1
0689 63F080    2064            xrl     b,#0x80
068C 95F0      2065            subb    a,b
068E E4        2066            clr     a
068F 33        2067            rlc     a
0690 FF        2068            mov     r7,a
0691 4E        2069            orl     a,r6
0692 7000      2070            jnz     L025016?
0694 020000    2071            ljmp    L025007?
0697           2072   L025016?:
0697           2073   ;        EFM8_JDY40_test.c:589: buff[j--]=HexDigit[val%Base];
0697 AEA0      2074            mov     r6,_PrintNumber_j_1_164
0699 AFA1      2075            mov     r7,(_PrintNumber_j_1_164 + 1)
069B 15A0      2076            dec     _PrintNumber_j_1_164
069D 74FF      2077            mov     a,#0xff
069F B5A050    2078            cjne    a,_PrintNumber_j_1_164,L025017?
06A2 15A1      2079            dec     (_PrintNumber_j_1_164 + 1)
06A4           2080   L025017?:
06A4 EE        2081            mov     a,r6
06A5 2440      2082            add     a,#_PrintNumber_buff_1_164
06A7 F5F0      2083            mov     _PrintNumber_sloc0_1_0,a
06A9 EF        2084            mov     a,r7
06AA 34BE      2085            addc    a,#(_PrintNumber_buff_1_164 >> 8)
06AC F5F1      2086            mov     (_PrintNumber_sloc0_1_0 + 1),a
06AE 85D040    2087            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
06B1 E5D1      2088            mov     a,(_PrintNumber_PARM_2 + 1)
06B3 F541      2089            mov     (_PrintNumber_sloc1_1_0 + 1),a
06B5 33        2090            rlc     a
06B6 95E0      2091            subb    a,acc
06B8 F542      2092            mov     (_PrintNumber_sloc1_1_0 + 2),a
06BA F543      2093            mov     (_PrintNumber_sloc1_1_0 + 3),a
06BC 854000    2094            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
06BF 854101    2095            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06C2 854202    2096            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06C5 854303    2097            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06C8 855082    2098            mov     dpl,_PrintNumber_val_1_163
06CB 855183    2099            mov     dph,(_PrintNumber_val_1_163 + 1)
06CE 8552F0    2100            mov     b,(_PrintNumber_val_1_163 + 2)
06D1 E553      2101            mov     a,(_PrintNumber_val_1_163 + 3)
06D3 C000      2102            push    ar0
06D5 C001      2103            push    ar1
06D7 120000    2104            lcall   __modslong
06DA AE82      2105            mov     r6,dpl
06DC AF83      2106            mov     r7,dph
06DE EE        2107            mov     a,r6
06DF 24B0      2108            add     a,#_PrintNumber_HexDigit_1_164
06E1 F582      2109            mov     dpl,a
06E3 EF        2110            mov     a,r7
06E4 3411      2111            addc    a,#(_PrintNumber_HexDigit_1_164 >> 8)
06E6 F583      2112            mov     dph,a
06E8 E4        2113            clr     a
06E9 93        2114            movc    a,@a+dptr
06EA 85F082    2115            mov     dpl,_PrintNumber_sloc0_1_0
06ED 85F183    2116            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
06F0 F0        2117            movx    @dptr,a
06F1           2118   ;        EFM8_JDY40_test.c:590: val/=Base;
06F1 854000    2119            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
06F4 854101    2120            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
06F7 854202    2121            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
06FA 854303    2122            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
06FD 855082    2123            mov     dpl,_PrintNumber_val_1_163
0700 855183    2124            mov     dph,(_PrintNumber_val_1_163 + 1)
0703 8552F0    2125            mov     b,(_PrintNumber_val_1_163 + 2)
0706 E553      2126            mov     a,(_PrintNumber_val_1_163 + 3)
0708 120000    2127            lcall   __divslong
070B 858250    2128            mov     _PrintNumber_val_1_163,dpl
070E 858351    2129            mov     (_PrintNumber_val_1_163 + 1),dph
0711 85F052    2130            mov     (_PrintNumber_val_1_163 + 2),b
0714 F553      2131            mov     (_PrintNumber_val_1_163 + 3),a
0716 D001      2132            pop     ar1
0718 D000      2133            pop     ar0
071A           2134   ;        EFM8_JDY40_test.c:591: if(digits!=0) digits--;
071A E8        2135            mov     a,r0
071B 49        2136            orl     a,r1
071C 7000      2137            jnz     L025018?
071E 020000    2138            ljmp    L025005?
0721           2139   L025018?:
0721 18        2140            dec     r0
0722 B8FFF0    2141            cjne    r0,#0xff,L025019?
0725 19        2142            dec     r1
0726           2143   L025019?:
0726 020000    2144            ljmp    L025005?
0729           2145   L025007?:
0729           2146   ;        EFM8_JDY40_test.c:593: eputs(&buff[j+1]);
0729 E5A0      2147            mov     a,_PrintNumber_j_1_164
072B 04        2148            inc     a
072C 2440      2149            add     a,#_PrintNumber_buff_1_164
072E FA        2150            mov     r2,a
072F E4        2151            clr     a
0730 34BE      2152            addc    a,#(_PrintNumber_buff_1_164 >> 8)
0732 FB        2153            mov     r3,a
0733 7C00      2154            mov     r4,#0x00
0735 8A82      2155            mov     dpl,r2
0737 8B83      2156            mov     dph,r3
0739 8CF0      2157            mov     b,r4
073B 020000    2158            ljmp    _eputs
073E           2159   ;------------------------------------------------------------
073E           2160   ;Allocation info for local variables in function 'GetFrequency'
073E           2161   ;------------------------------------------------------------
073E           2162   ;c                         Allocated to registers r2 r3 r4 r5 
073E           2163   ;f                         Allocated to registers r6 r7 r0 r1 
073E           2164   ;------------------------------------------------------------
073E           2165   ;        EFM8_JDY40_test.c:596: unsigned long GetFrequency (long int c)
073E           2166   ;        -----------------------------------------
073E           2167   ;         function GetFrequency
073E           2168   ;        -----------------------------------------
073E           2169   _GetFrequency:
073E AA82      2170            mov     r2,dpl
0740 AB83      2171            mov     r3,dph
0742 ACF0      2172            mov     r4,b
0744 FD        2173            mov     r5,a
0745           2174   ;        EFM8_JDY40_test.c:598: long int f = 0;
0745 7E00      2175            mov     r6,#0x00
0747 7F00      2176            mov     r7,#0x00
0749 7800      2177            mov     r0,#0x00
074B 7900      2178            mov     r1,#0x00
074D           2179   ;        EFM8_JDY40_test.c:600: if(c>0)
074D C3        2180            clr     c
074E E4        2181            clr     a
074F 9A        2182            subb    a,r2
0750 E4        2183            clr     a
0751 9B        2184            subb    a,r3
0752 E4        2185            clr     a
0753 9C        2186            subb    a,r4
0754 E4        2187            clr     a
0755 6480      2188            xrl     a,#0x80
0757 8DF0      2189            mov     b,r5
0759 63F080    2190            xrl     b,#0x80
075C 95F0      2191            subb    a,b
075E 5000      2192            jnc     L026002?
0760           2193   ;        EFM8_JDY40_test.c:602: f=(SYSCLK*200.0)/(c*12);
0760 8A00      2194            mov     __mullong_PARM_2,r2
0762 8B01      2195            mov     (__mullong_PARM_2 + 1),r3
0764 8C02      2196            mov     (__mullong_PARM_2 + 2),r4
0766 8D03      2197            mov     (__mullong_PARM_2 + 3),r5
0768 90000C    2198            mov     dptr,#(0x0C&0x00ff)
076B E4        2199            clr     a
076C F5F0      2200            mov     b,a
076E 120000    2201            lcall   __mullong
0771 120000    2202            lcall   ___slong2fs
0774 AA82      2203            mov     r2,dpl
0776 AB83      2204            mov     r3,dph
0778 ACF0      2205            mov     r4,b
077A FD        2206            mov     r5,a
077B C002      2207            push    ar2
077D C003      2208            push    ar3
077F C004      2209            push    ar4
0781 C005      2210            push    ar5
0783 9093A4    2211            mov     dptr,#0x93A4
0786 75F056    2212            mov     b,#0x56
0789 7450      2213            mov     a,#0x50
078B 120000    2214            lcall   ___fsdiv
078E AA82      2215            mov     r2,dpl
0790 AB83      2216            mov     r3,dph
0792 ACF0      2217            mov     r4,b
0794 FD        2218            mov     r5,a
0795 E581      2219            mov     a,sp
0797 24FC      2220            add     a,#0xfc
0799 F581      2221            mov     sp,a
079B 8A82      2222            mov     dpl,r2
079D 8B83      2223            mov     dph,r3
079F 8CF0      2224            mov     b,r4
07A1 ED        2225            mov     a,r5
07A2 120000    2226            lcall   ___fs2slong
07A5 AE82      2227            mov     r6,dpl
07A7 AF83      2228            mov     r7,dph
07A9 A8F0      2229            mov     r0,b
07AB F9        2230            mov     r1,a
07AC 8000      2231            sjmp    L026003?
07AE           2232   L026002?:
07AE           2233   ;        EFM8_JDY40_test.c:612: eputs(" NO SIGNAL                     \r");
07AE 90D8C0    2234            mov     dptr,#__str_4
07B1 75F080    2235            mov     b,#0x80
07B4 C006      2236            push    ar6
07B6 C007      2237            push    ar7
07B8 C000      2238            push    ar0
07BA C001      2239            push    ar1
07BC 120000    2240            lcall   _eputs
07BF D001      2241            pop     ar1
07C1 D000      2242            pop     ar0
07C3 D007      2243            pop     ar7
07C5 D006      2244            pop     ar6
07C7           2245   L026003?:
07C7           2246   ;        EFM8_JDY40_test.c:615: return f;
07C7 8E82      2247            mov     dpl,r6
07C9 8F83      2248            mov     dph,r7
07CB 88F0      2249            mov     b,r0
07CD E9        2250            mov     a,r1
07CE 22        2251            ret
07CF           2252   ;------------------------------------------------------------
07CF           2253   ;Allocation info for local variables in function 'servomotion'
07CF           2254   ;------------------------------------------------------------
07CF           2255   ;j                         Allocated to registers r2 
07CF           2256   ;------------------------------------------------------------
07CF           2257   ;        EFM8_JDY40_test.c:619: void servomotion(void)
07CF           2258   ;        -----------------------------------------
07CF           2259   ;         function servomotion
07CF           2260   ;        -----------------------------------------
07CF           2261   _servomotion:
07CF           2262   ;        EFM8_JDY40_test.c:622: waitms(500);
07CF 9001F4    2263            mov     dptr,#0x01F4
07D2 120000    2264            lcall   _waitms
07D5           2265   ;        EFM8_JDY40_test.c:623: servo1 = 150;
07D5 75B896    2266            mov     _servo1,#0x96
07D8           2267   ;        EFM8_JDY40_test.c:624: waitms(100);
07D8 900064    2268            mov     dptr,#0x0064
07DB 120000    2269            lcall   _waitms
07DE           2270   ;        EFM8_JDY40_test.c:626: P1_5 = 1;        
07DE D295      2271            setb    _P1_5
07E0           2272   ;        EFM8_JDY40_test.c:629: for(j=250; j>180; j-=5) 
07E0 7AFA      2273            mov     r2,#0xFA
07E2           2274   L027001?:
07E2 EA        2275            mov     a,r2
07E3 244B      2276            add     a,#0xff - 0xB4
07E5 5000      2277            jnc     L027004?
07E7           2278   ;        EFM8_JDY40_test.c:631: servo2 = j;
07E7 8A78      2279            mov     _servo2,r2
07E9           2280   ;        EFM8_JDY40_test.c:632: waitms(20);
07E9 900014    2281            mov     dptr,#0x0014
07EC C002      2282            push    ar2
07EE 120000    2283            lcall   _waitms
07F1 D002      2284            pop     ar2
07F3           2285   ;        EFM8_JDY40_test.c:629: for(j=250; j>180; j-=5) 
07F3 EA        2286            mov     a,r2
07F4 24FB      2287            add     a,#0xfb
07F6 FA        2288            mov     r2,a
07F7 8000      2289            sjmp    L027001?
07F9           2290   L027004?:
07F9           2291   ;        EFM8_JDY40_test.c:635: waitms(1000);
07F9 9003E8    2292            mov     dptr,#0x03E8
07FC 120000    2293            lcall   _waitms
07FF           2294   ;        EFM8_JDY40_test.c:638: for(j=150; j<250; j+=5) 
07FF 7A96      2295            mov     r2,#0x96
0801           2296   L027005?:
0801 BAFAC0    2297            cjne    r2,#0xFA,L027025?
0804           2298   L027025?:
0804 5000      2299            jnc     L027008?
0806           2300   ;        EFM8_JDY40_test.c:640: servo1 = j;
0806 8AB8      2301            mov     _servo1,r2
0808           2302   ;        EFM8_JDY40_test.c:641: waitms(20);
0808 900014    2303            mov     dptr,#0x0014
080B C002      2304            push    ar2
080D 120000    2305            lcall   _waitms
0810 D002      2306            pop     ar2
0812           2307   ;        EFM8_JDY40_test.c:638: for(j=150; j<250; j+=5) 
0812 7405      2308            mov     a,#0x05
0814 2A        2309            add     a,r2
0815 FA        2310            mov     r2,a
0816 8000      2311            sjmp    L027005?
0818           2312   L027008?:
0818           2313   ;        EFM8_JDY40_test.c:644: waitms(1000);
0818 9003E8    2314            mov     dptr,#0x03E8
081B 120000    2315            lcall   _waitms
081E           2316   ;        EFM8_JDY40_test.c:647: for(j=180; j > 90; j-=5){
081E 7AB4      2317            mov     r2,#0xB4
0820           2318   L027009?:
0820 EA        2319            mov     a,r2
0821 24A5      2320            add     a,#0xff - 0x5A
0823 5000      2321            jnc     L027012?
0825           2322   ;        EFM8_JDY40_test.c:648: servo2 = j;
0825 8A78      2323            mov     _servo2,r2
0827           2324   ;        EFM8_JDY40_test.c:649: waitms(20);
0827 900014    2325            mov     dptr,#0x0014
082A C002      2326            push    ar2
082C 120000    2327            lcall   _waitms
082F D002      2328            pop     ar2
0831           2329   ;        EFM8_JDY40_test.c:647: for(j=180; j > 90; j-=5){
0831 EA        2330            mov     a,r2
0832 24FB      2331            add     a,#0xfb
0834 FA        2332            mov     r2,a
0835 8000      2333            sjmp    L027009?
0837           2334   L027012?:
0837           2335   ;        EFM8_JDY40_test.c:654: P1_5 = 0;
0837 C295      2336            clr     _P1_5
0839           2337   ;        EFM8_JDY40_test.c:656: waitms(150);
0839 900096    2338            mov     dptr,#0x0096
083C 120000    2339            lcall   _waitms
083F           2340   ;        EFM8_JDY40_test.c:657: servo1 = 250;
083F 75B8FA    2341            mov     _servo1,#0xFA
0842           2342   ;        EFM8_JDY40_test.c:658: servo2 = 250; 
0842 7578FA    2343            mov     _servo2,#0xFA
0845           2344   ;        EFM8_JDY40_test.c:659: EMAGNET=0;
0845 C295      2345            clr     _P1_5
0847 22        2346            ret
0848           2347   ;------------------------------------------------------------
0848           2348   ;Allocation info for local variables in function 'automaticmode'
0848           2349   ;------------------------------------------------------------
0848           2350   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0848           2351   ;freq                      Allocated with name '_automaticmode_PARM_3'
0848           2352   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0848           2353   ;control                   Allocated to registers 
0848           2354   ;------------------------------------------------------------
0848           2355   ;        EFM8_JDY40_test.c:667: void automaticmode(float fowardper, float sideper, float freq)
0848           2356   ;        -----------------------------------------
0848           2357   ;         function automaticmode
0848           2358   ;        -----------------------------------------
0848           2359   _automaticmode:
0848 AA82      2360            mov     r2,dpl
084A AB83      2361            mov     r3,dph
084C ACF0      2362            mov     r4,b
084E FD        2363            mov     r5,a
084F           2364   ;        EFM8_JDY40_test.c:670: direction = 3;
084F 753803    2365            mov     _direction,#0x03
0852 E4        2366            clr     a
0853 F539      2367            mov     (_direction + 1),a
0855           2368   ;        EFM8_JDY40_test.c:672: P3_7=1;  //wheel 1
0855 D2B7      2369            setb    _P3_7
0857           2370   ;        EFM8_JDY40_test.c:673: P3_2=0;  // wheel 1 
0857 C2B2      2371            clr     _P3_2
0859           2372   ;        EFM8_JDY40_test.c:674: P3_0=0; // wheel 2
0859 C2B0      2373            clr     _P3_0
085B           2374   ;        EFM8_JDY40_test.c:675: P2_5=1; // wheel 2
085B D2A5      2375            setb    _P2_5
085D           2376   ;        EFM8_JDY40_test.c:676: printf("%ld\n\r", freq);
085D C002      2377            push    ar2
085F C003      2378            push    ar3
0861 C004      2379            push    ar4
0863 C005      2380            push    ar5
0865 C0E0      2381            push    _automaticmode_PARM_3
0867 C0E1      2382            push    (_automaticmode_PARM_3 + 1)
0869 C0E2      2383            push    (_automaticmode_PARM_3 + 2)
086B C0E3      2384            push    (_automaticmode_PARM_3 + 3)
086D 74C0      2385            mov     a,#__str_5
086F C0E0      2386            push    acc
0871 74DA      2387            mov     a,#(__str_5 >> 8)
0873 C0E0      2388            push    acc
0875 7480      2389            mov     a,#0x80
0877 C0E0      2390            push    acc
0879 120000    2391            lcall   _printf
087C E581      2392            mov     a,sp
087E 24F9      2393            add     a,#0xf9
0880 F581      2394            mov     sp,a
0882           2395   ;        EFM8_JDY40_test.c:677: if ( freq >= 64100)  //100000    63750   65000
0882 E4        2396            clr     a
0883 C0E0      2397            push    acc
0885 7464      2398            mov     a,#0x64
0887 C0E0      2399            push    acc
0889 747A      2400            mov     a,#0x7A
088B C0E0      2401            push    acc
088D 7447      2402            mov     a,#0x47
088F C0E0      2403            push    acc
0891 85E082    2404            mov     dpl,_automaticmode_PARM_3
0894 85E183    2405            mov     dph,(_automaticmode_PARM_3 + 1)
0897 85E2F0    2406            mov     b,(_automaticmode_PARM_3 + 2)
089A E5E3      2407            mov     a,(_automaticmode_PARM_3 + 3)
089C 120000    2408            lcall   ___fslt
089F AE82      2409            mov     r6,dpl
08A1 E581      2410            mov     a,sp
08A3 24FC      2411            add     a,#0xfc
08A5 F581      2412            mov     sp,a
08A7 D005      2413            pop     ar5
08A9 D004      2414            pop     ar4
08AB D003      2415            pop     ar3
08AD D002      2416            pop     ar2
08AF EE        2417            mov     a,r6
08B0 7000      2418            jnz     L028002?
08B2           2419   ;        EFM8_JDY40_test.c:679: P3_7=0;  //wheel 1
08B2 C2B7      2420            clr     _P3_7
08B4           2421   ;        EFM8_JDY40_test.c:680: P3_2=1;  // wheel 1 
08B4 D2B2      2422            setb    _P3_2
08B6           2423   ;        EFM8_JDY40_test.c:681: P3_0=1; // wheel 2
08B6 D2B0      2424            setb    _P3_0
08B8           2425   ;        EFM8_JDY40_test.c:682: P2_5=0; // wheel 2
08B8 C2A5      2426            clr     _P2_5
08BA           2427   ;        EFM8_JDY40_test.c:683: waitms(150);
08BA 900096    2428            mov     dptr,#0x0096
08BD C002      2429            push    ar2
08BF C003      2430            push    ar3
08C1 C004      2431            push    ar4
08C3 C005      2432            push    ar5
08C5 120000    2433            lcall   _waitms
08C8           2434   ;        EFM8_JDY40_test.c:684: P3_7=0;  //wheel 1
08C8 C2B7      2435            clr     _P3_7
08CA           2436   ;        EFM8_JDY40_test.c:685: P3_2=0;  // wheel 1 
08CA C2B2      2437            clr     _P3_2
08CC           2438   ;        EFM8_JDY40_test.c:686: P3_0=0; // wheel 2
08CC C2B0      2439            clr     _P3_0
08CE           2440   ;        EFM8_JDY40_test.c:687: P2_5=0; // wheel 2
08CE C2A5      2441            clr     _P2_5
08D0           2442   ;        EFM8_JDY40_test.c:688: servomotion();
08D0 120000    2443            lcall   _servomotion
08D3 D005      2444            pop     ar5
08D5 D004      2445            pop     ar4
08D7 D003      2446            pop     ar3
08D9 D002      2447            pop     ar2
08DB           2448   L028002?:
08DB           2449   ;        EFM8_JDY40_test.c:692: if ( fowardper >= p_thresh)
08DB 74CD      2450            mov     a,#0xCD
08DD C0E0      2451            push    acc
08DF 74CC      2452            mov     a,#0xCC
08E1 C0E0      2453            push    acc
08E3 C0E0      2454            push    acc
08E5 743D      2455            mov     a,#0x3D
08E7 C0E0      2456            push    acc
08E9 8A82      2457            mov     dpl,r2
08EB 8B83      2458            mov     dph,r3
08ED 8CF0      2459            mov     b,r4
08EF ED        2460            mov     a,r5
08F0 120000    2461            lcall   ___fslt
08F3 AA82      2462            mov     r2,dpl
08F5 E581      2463            mov     a,sp
08F7 24FC      2464            add     a,#0xfc
08F9 F581      2465            mov     sp,a
08FB EA        2466            mov     a,r2
08FC 7000      2467            jnz     L028004?
08FE           2468   ;        EFM8_JDY40_test.c:694: P3_7=0;  //wheel 1
08FE C2B7      2469            clr     _P3_7
0900           2470   ;        EFM8_JDY40_test.c:695: P3_2=1;  // wheel 1 
0900 D2B2      2471            setb    _P3_2
0902           2472   ;        EFM8_JDY40_test.c:696: P3_0=1; // wheel 2
0902 D2B0      2473            setb    _P3_0
0904           2474   ;        EFM8_JDY40_test.c:697: P2_5=0; // wheel 2
0904 C2A5      2475            clr     _P2_5
0906           2476   ;        EFM8_JDY40_test.c:698: waitms(300);
0906 90012C    2477            mov     dptr,#0x012C
0909 120000    2478            lcall   _waitms
090C           2479   ;        EFM8_JDY40_test.c:699: P3_7=0;  //wheel 1
090C C2B7      2480            clr     _P3_7
090E           2481   ;        EFM8_JDY40_test.c:700: P3_2=1;  // wheel 1 
090E D2B2      2482            setb    _P3_2
0910           2483   ;        EFM8_JDY40_test.c:701: P3_0=0; // wheel 2
0910 C2B0      2484            clr     _P3_0
0912           2485   ;        EFM8_JDY40_test.c:702: P2_5=0; // wheel 2
0912 C2A5      2486            clr     _P2_5
0914           2487   ;        EFM8_JDY40_test.c:703: waitms(750);
0914 9002EE    2488            mov     dptr,#0x02EE
0917           2489   ;        EFM8_JDY40_test.c:704: return;
0917 020000    2490            ljmp    _waitms
091A           2491   L028004?:
091A           2492   ;        EFM8_JDY40_test.c:709: if ( sideper >= p_thresh)
091A 74CD      2493            mov     a,#0xCD
091C C0E0      2494            push    acc
091E 74CC      2495            mov     a,#0xCC
0920 C0E0      2496            push    acc
0922 C0E0      2497            push    acc
0924 743D      2498            mov     a,#0x3D
0926 C0E0      2499            push    acc
0928 853082    2500            mov     dpl,_automaticmode_PARM_2
092B 853183    2501            mov     dph,(_automaticmode_PARM_2 + 1)
092E 8532F0    2502            mov     b,(_automaticmode_PARM_2 + 2)
0931 E533      2503            mov     a,(_automaticmode_PARM_2 + 3)
0933 120000    2504            lcall   ___fslt
0936 AA82      2505            mov     r2,dpl
0938 E581      2506            mov     a,sp
093A 24FC      2507            add     a,#0xfc
093C F581      2508            mov     sp,a
093E EA        2509            mov     a,r2
093F 7000      2510            jnz     L028007?
0941           2511   ;        EFM8_JDY40_test.c:711: P3_7=0;  //wheel 1
0941 C2B7      2512            clr     _P3_7
0943           2513   ;        EFM8_JDY40_test.c:712: P3_2=1;  // wheel 1 
0943 D2B2      2514            setb    _P3_2
0945           2515   ;        EFM8_JDY40_test.c:713: P3_0=0; // wheel 2
0945 C2B0      2516            clr     _P3_0
0947           2517   ;        EFM8_JDY40_test.c:714: P2_5=0; // wheel 2
0947 C2A5      2518            clr     _P2_5
0949           2519   ;        EFM8_JDY40_test.c:715: waitms(750);
0949 9002EE    2520            mov     dptr,#0x02EE
094C           2521   ;        EFM8_JDY40_test.c:716: control = 1;
094C 020000    2522            ljmp    _waitms
094F           2523   L028007?:
094F 22        2524            ret
0950           2525   ;------------------------------------------------------------
0950           2526   ;Allocation info for local variables in function 'main'
0950           2527   ;------------------------------------------------------------
0950           2528   ;timeout                   Allocated to registers 
0950           2529   ;pulse_width               Allocated to registers 
0950           2530   ;pulse_width1              Allocated to registers 
0950           2531   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_182'
0950           2532   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_182'
0950           2533   ;which                     Allocated with name '_main_which_1_182'
0950           2534   ;count                     Allocated to registers r2 r3 r4 r5 
0950           2535   ;f                         Allocated with name '_main_f_1_182'
0950           2536   ;v                         Allocated with name '_main_v_1_182'
0950           2537   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0950           2538   ;------------------------------------------------------------
0950           2539   ;        EFM8_JDY40_test.c:727: void main (void)
0950           2540   ;        -----------------------------------------
0950           2541   ;         function main
0950           2542   ;        -----------------------------------------
0950           2543   _main:
0950           2544   ;        EFM8_JDY40_test.c:745: waitms(500);
0950 9001F4    2545            mov     dptr,#0x01F4
0953 120000    2546            lcall   _waitms
0956           2547   ;        EFM8_JDY40_test.c:746: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0956 7400      2548            mov     a,#__str_6
0958 C0E0      2549            push    acc
095A 74DC      2550            mov     a,#(__str_6 >> 8)
095C C0E0      2551            push    acc
095E 7480      2552            mov     a,#0x80
0960 C0E0      2553            push    acc
0962 120000    2554            lcall   _printf
0965 1581      2555            dec     sp
0967 1581      2556            dec     sp
0969 1581      2557            dec     sp
096B           2558   ;        EFM8_JDY40_test.c:747: UART1_Init(9600);
096B 902580    2559            mov     dptr,#0x2580
096E E4        2560            clr     a
096F F5F0      2561            mov     b,a
0971 120000    2562            lcall   _UART1_Init
0974           2563   ;        EFM8_JDY40_test.c:749: ReceptionOff();
0974 120000    2564            lcall   _ReceptionOff
0977           2565   ;        EFM8_JDY40_test.c:751: TIMER0_Init(); 
0977 120000    2566            lcall   _TIMER0_Init
097A           2567   ;        EFM8_JDY40_test.c:753: InitPinADC(2, 1); // Configure P2.1 as analog input
097A 756001    2568            mov     _InitPinADC_PARM_2,#0x01
097D 758202    2569            mov     dpl,#0x02
0980 120000    2570            lcall   _InitPinADC
0983           2571   ;        EFM8_JDY40_test.c:754: InitPinADC(2, 3); // Configure P2.1 as analog input
0983 756003    2572            mov     _InitPinADC_PARM_2,#0x03
0986 758202    2573            mov     dpl,#0x02
0989 120000    2574            lcall   _InitPinADC
098C           2575   ;        EFM8_JDY40_test.c:755: InitADC();
098C 120000    2576            lcall   _InitADC
098F           2577   ;        EFM8_JDY40_test.c:759: SendATCommand("AT+VER\r\n");
098F 90DC40    2578            mov     dptr,#__str_7
0992 75F080    2579            mov     b,#0x80
0995 120000    2580            lcall   _SendATCommand
0998           2581   ;        EFM8_JDY40_test.c:760: SendATCommand("AT+BAUD\r\n");
0998 90DC80    2582            mov     dptr,#__str_8
099B 75F080    2583            mov     b,#0x80
099E 120000    2584            lcall   _SendATCommand
09A1           2585   ;        EFM8_JDY40_test.c:761: SendATCommand("AT+RFID\r\n");
09A1 90DCC0    2586            mov     dptr,#__str_9
09A4 75F080    2587            mov     b,#0x80
09A7 120000    2588            lcall   _SendATCommand
09AA           2589   ;        EFM8_JDY40_test.c:762: SendATCommand("AT+DVID\r\n");
09AA 90DD00    2590            mov     dptr,#__str_10
09AD 75F080    2591            mov     b,#0x80
09B0 120000    2592            lcall   _SendATCommand
09B3           2593   ;        EFM8_JDY40_test.c:763: SendATCommand("AT+RFC120\r\n");
09B3 90DD40    2594            mov     dptr,#__str_11
09B6 75F080    2595            mov     b,#0x80
09B9 120000    2596            lcall   _SendATCommand
09BC           2597   ;        EFM8_JDY40_test.c:764: SendATCommand("AT+POWE\r\n");
09BC 90DD80    2598            mov     dptr,#__str_12
09BF 75F080    2599            mov     b,#0x80
09C2 120000    2600            lcall   _SendATCommand
09C5           2601   ;        EFM8_JDY40_test.c:765: SendATCommand("AT+CLSS\r\n");
09C5 90DDC0    2602            mov     dptr,#__str_13
09C8 75F080    2603            mov     b,#0x80
09CB 120000    2604            lcall   _SendATCommand
09CE           2605   ;        EFM8_JDY40_test.c:769: SendATCommand("AT+DVIDFFFF\r\n");  
09CE 90DE00    2606            mov     dptr,#__str_14
09D1 75F080    2607            mov     b,#0x80
09D4 120000    2608            lcall   _SendATCommand
09D7           2609   ;        EFM8_JDY40_test.c:771: P1_5 = 0;
09D7 C295      2610            clr     _P1_5
09D9           2611   ;        EFM8_JDY40_test.c:772: while(1)
09D9           2612   L029026?:
09D9           2613   ;        EFM8_JDY40_test.c:774: EMAGNET = 0;
09D9 C295      2614            clr     _P1_5
09DB           2615   ;        EFM8_JDY40_test.c:776: count = GetPeriod(200);
09DB 9000C8    2616            mov     dptr,#0x00C8
09DE 120000    2617            lcall   _GetPeriod
09E1           2618   ;        EFM8_JDY40_test.c:777: f = GetFrequency(count);
09E1 120000    2619            lcall   _GetFrequency
09E4 858270    2620            mov     _main_f_1_182,dpl
09E7 858371    2621            mov     (_main_f_1_182 + 1),dph
09EA 85F072    2622            mov     (_main_f_1_182 + 2),b
09ED F573      2623            mov     (_main_f_1_182 + 3),a
09EF           2624   ;        EFM8_JDY40_test.c:779: sprintf(msg, "%05ld\n\r", f); // subtracted so that it sends a smaller value
09EF C070      2625            push    _main_f_1_182
09F1 C071      2626            push    (_main_f_1_182 + 1)
09F3 C072      2627            push    (_main_f_1_182 + 2)
09F5 C073      2628            push    (_main_f_1_182 + 3)
09F7 7480      2629            mov     a,#__str_15
09F9 C0E0      2630            push    acc
09FB 74DE      2631            mov     a,#(__str_15 >> 8)
09FD C0E0      2632            push    acc
09FF 7480      2633            mov     a,#0x80
0A01 C0E0      2634            push    acc
0A03 7410      2635            mov     a,#_msg
0A05 C0E0      2636            push    acc
0A07 7419      2637            mov     a,#(_msg >> 8)
0A09 C0E0      2638            push    acc
0A0B 7440      2639            mov     a,#0x40
0A0D C0E0      2640            push    acc
0A0F 120000    2641            lcall   _sprintf
0A12 E581      2642            mov     a,sp
0A14 24F6      2643            add     a,#0xf6
0A16 F581      2644            mov     sp,a
0A18           2645   ;        EFM8_JDY40_test.c:780: sendstr1(msg);
0A18 901910    2646            mov     dptr,#_msg
0A1B 75F040    2647            mov     b,#0x40
0A1E 120000    2648            lcall   _sendstr1
0A21           2649   ;        EFM8_JDY40_test.c:781: waitms(50);
0A21 900032    2650            mov     dptr,#0x0032
0A24 120000    2651            lcall   _waitms
0A27           2652   ;        EFM8_JDY40_test.c:784: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0A27 75820E    2653            mov     dpl,#0x0E
0A2A 120000    2654            lcall   _Volts_at_Pin
0A2D 8582F0    2655            mov     _main_sloc0_1_0,dpl
0A30 8583F1    2656            mov     (_main_sloc0_1_0 + 1),dph
0A33 85F0F2    2657            mov     (_main_sloc0_1_0 + 2),b
0A36 F5F3      2658            mov     (_main_sloc0_1_0 + 3),a
0A38 85F0B0    2659            mov     _main_v_1_182,_main_sloc0_1_0
0A3B 85F1B1    2660            mov     (_main_v_1_182 + 1),(_main_sloc0_1_0 + 1)
0A3E 85F2B2    2661            mov     (_main_v_1_182 + 2),(_main_sloc0_1_0 + 2)
0A41 85F3B3    2662            mov     (_main_v_1_182 + 3),(_main_sloc0_1_0 + 3)
0A44           2663   ;        EFM8_JDY40_test.c:785: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0A44 758210    2664            mov     dpl,#0x10
0A47 120000    2665            lcall   _Volts_at_Pin
0A4A 8582F0    2666            mov     _main_sloc0_1_0,dpl
0A4D 8583F1    2667            mov     (_main_sloc0_1_0 + 1),dph
0A50 85F0F2    2668            mov     (_main_sloc0_1_0 + 2),b
0A53 F5F3      2669            mov     (_main_sloc0_1_0 + 3),a
0A55 85F0B4    2670            mov     (_main_v_1_182 + 0x0004),_main_sloc0_1_0
0A58 85F1B5    2671            mov     ((_main_v_1_182 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0A5B 85F2B6    2672            mov     ((_main_v_1_182 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0A5E 85F3B7    2673            mov     ((_main_v_1_182 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0A61           2674   ;        EFM8_JDY40_test.c:788: if(RXU1()) // Something has arrived
0A61 120000    2675            lcall   _RXU1
0A64 4000      2676            jc      L029041?
0A66 020000    2677            ljmp    L029026?
0A69           2678   L029041?:
0A69           2679   ;        EFM8_JDY40_test.c:791: getstr1(buff, sizeof(buff));
0A69 75F814    2680            mov     _getstr1_PARM_2,#0x14
0A6C 901950    2681            mov     dptr,#_buff
0A6F 75F040    2682            mov     b,#0x40
0A72 120000    2683            lcall   _getstr1
0A75           2684   ;        EFM8_JDY40_test.c:792: if ( strcmp(buff, "A") == 0 )
0A75 750080    2685            mov     _strcmp_PARM_2,#__str_16
0A78 7501DF    2686            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
0A7B 750280    2687            mov     (_strcmp_PARM_2 + 2),#0x80
0A7E 901950    2688            mov     dptr,#_buff
0A81 75F040    2689            mov     b,#0x40
0A84 120000    2690            lcall   _strcmp
0A87 E582      2691            mov     a,dpl
0A89 8583F0    2692            mov     b,dph
0A8C 45F0      2693            orl     a,b
0A8E 6000      2694            jz      L029042?
0A90 020000    2695            ljmp    L029009?
0A93           2696   L029042?:
0A93           2697   ;        EFM8_JDY40_test.c:794: waitms(500);
0A93 9001F4    2698            mov     dptr,#0x01F4
0A96 120000    2699            lcall   _waitms
0A99           2700   ;        EFM8_JDY40_test.c:795: while(1)
0A99           2701   L029006?:
0A99           2702   ;        EFM8_JDY40_test.c:797: waitms(5);
0A99 900005    2703            mov     dptr,#0x0005
0A9C 120000    2704            lcall   _waitms
0A9F           2705   ;        EFM8_JDY40_test.c:798: direction=3; 
0A9F 753803    2706            mov     _direction,#0x03
0AA2 E4        2707            clr     a
0AA3 F539      2708            mov     (_direction + 1),a
0AA5           2709   ;        EFM8_JDY40_test.c:801: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0AA5 75820E    2710            mov     dpl,#0x0E
0AA8 120000    2711            lcall   _Volts_at_Pin
0AAB 8582F0    2712            mov     _main_sloc0_1_0,dpl
0AAE 8583F1    2713            mov     (_main_sloc0_1_0 + 1),dph
0AB1 85F0F2    2714            mov     (_main_sloc0_1_0 + 2),b
0AB4 F5F3      2715            mov     (_main_sloc0_1_0 + 3),a
0AB6 85F0B0    2716            mov     _main_v_1_182,_main_sloc0_1_0
0AB9 85F1B1    2717            mov     (_main_v_1_182 + 1),(_main_sloc0_1_0 + 1)
0ABC 85F2B2    2718            mov     (_main_v_1_182 + 2),(_main_sloc0_1_0 + 2)
0ABF 85F3B3    2719            mov     (_main_v_1_182 + 3),(_main_sloc0_1_0 + 3)
0AC2           2720   ;        EFM8_JDY40_test.c:802: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0AC2 758210    2721            mov     dpl,#0x10
0AC5 120000    2722            lcall   _Volts_at_Pin
0AC8 8582F0    2723            mov     _main_sloc0_1_0,dpl
0ACB 8583F1    2724            mov     (_main_sloc0_1_0 + 1),dph
0ACE 85F0F2    2725            mov     (_main_sloc0_1_0 + 2),b
0AD1 F5F3      2726            mov     (_main_sloc0_1_0 + 3),a
0AD3 85F0B4    2727            mov     (_main_v_1_182 + 0x0004),_main_sloc0_1_0
0AD6 85F1B5    2728            mov     ((_main_v_1_182 + 0x0004) + 1),(_main_sloc0_1_0 + 1)
0AD9 85F2B6    2729            mov     ((_main_v_1_182 + 0x0004) + 2),(_main_sloc0_1_0 + 2)
0ADC 85F3B7    2730            mov     ((_main_v_1_182 + 0x0004) + 3),(_main_sloc0_1_0 + 3)
0ADF           2731   ;        EFM8_JDY40_test.c:803: count = GetPeriod(200);
0ADF 9000C8    2732            mov     dptr,#0x00C8
0AE2 120000    2733            lcall   _GetPeriod
0AE5           2734   ;        EFM8_JDY40_test.c:804: f = GetFrequency(count);
0AE5 120000    2735            lcall   _GetFrequency
0AE8 858270    2736            mov     _main_f_1_182,dpl
0AEB 858371    2737            mov     (_main_f_1_182 + 1),dph
0AEE 85F072    2738            mov     (_main_f_1_182 + 2),b
0AF1 F573      2739            mov     (_main_f_1_182 + 3),a
0AF3           2740   ;        EFM8_JDY40_test.c:805: automaticmode(v[0], v[1], f);
0AF3 85B0F0    2741            mov     _main_sloc0_1_0,_main_v_1_182
0AF6 85B1F1    2742            mov     (_main_sloc0_1_0 + 1),(_main_v_1_182 + 1)
0AF9 85B2F2    2743            mov     (_main_sloc0_1_0 + 2),(_main_v_1_182 + 2)
0AFC 85B3F3    2744            mov     (_main_sloc0_1_0 + 3),(_main_v_1_182 + 3)
0AFF AEB4      2745            mov     r6,(_main_v_1_182 + 0x0004)
0B01 AFB5      2746            mov     r7,((_main_v_1_182 + 0x0004) + 1)
0B03 AAB6      2747            mov     r2,((_main_v_1_182 + 0x0004) + 2)
0B05 ABB7      2748            mov     r3,((_main_v_1_182 + 0x0004) + 3)
0B07 857082    2749            mov     dpl,_main_f_1_182
0B0A 857183    2750            mov     dph,(_main_f_1_182 + 1)
0B0D 8572F0    2751            mov     b,(_main_f_1_182 + 2)
0B10 E573      2752            mov     a,(_main_f_1_182 + 3)
0B12 C002      2753            push    ar2
0B14 C003      2754            push    ar3
0B16 C006      2755            push    ar6
0B18 C007      2756            push    ar7
0B1A 120000    2757            lcall   ___slong2fs
0B1D 8582E0    2758            mov     _automaticmode_PARM_3,dpl
0B20 8583E1    2759            mov     (_automaticmode_PARM_3 + 1),dph
0B23 85F0E2    2760            mov     (_automaticmode_PARM_3 + 2),b
0B26 F5E3      2761            mov     (_automaticmode_PARM_3 + 3),a
0B28 D007      2762            pop     ar7
0B2A D006      2763            pop     ar6
0B2C D003      2764            pop     ar3
0B2E D002      2765            pop     ar2
0B30 8E30      2766            mov     _automaticmode_PARM_2,r6
0B32 8F31      2767            mov     (_automaticmode_PARM_2 + 1),r7
0B34 8A32      2768            mov     (_automaticmode_PARM_2 + 2),r2
0B36 8B33      2769            mov     (_automaticmode_PARM_2 + 3),r3
0B38 85F082    2770            mov     dpl,_main_sloc0_1_0
0B3B 85F183    2771            mov     dph,(_main_sloc0_1_0 + 1)
0B3E 85F2F0    2772            mov     b,(_main_sloc0_1_0 + 2)
0B41 E5F3      2773            mov     a,(_main_sloc0_1_0 + 3)
0B43 120000    2774            lcall   _automaticmode
0B46           2775   ;        EFM8_JDY40_test.c:807: if(RXU1())
0B46 120000    2776            lcall   _RXU1
0B49 4000      2777            jc      L029043?
0B4B 020000    2778            ljmp    L029006?
0B4E           2779   L029043?:
0B4E           2780   ;        EFM8_JDY40_test.c:809: printf("hello");
0B4E 7400      2781            mov     a,#__str_17
0B50 C0E0      2782            push    acc
0B52 74E1      2783            mov     a,#(__str_17 >> 8)
0B54 C0E0      2784            push    acc
0B56 7480      2785            mov     a,#0x80
0B58 C0E0      2786            push    acc
0B5A 120000    2787            lcall   _printf
0B5D 1581      2788            dec     sp
0B5F 1581      2789            dec     sp
0B61 1581      2790            dec     sp
0B63           2791   ;        EFM8_JDY40_test.c:810: getstr1(buff, sizeof(buff));
0B63 75F814    2792            mov     _getstr1_PARM_2,#0x14
0B66 901950    2793            mov     dptr,#_buff
0B69 75F040    2794            mov     b,#0x40
0B6C 120000    2795            lcall   _getstr1
0B6F           2796   ;        EFM8_JDY40_test.c:811: if (strcmp(buff, "A") == 0 ) break;
0B6F 750080    2797            mov     _strcmp_PARM_2,#__str_16
0B72 7501DF    2798            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
0B75 750280    2799            mov     (_strcmp_PARM_2 + 2),#0x80
0B78 901950    2800            mov     dptr,#_buff
0B7B 75F040    2801            mov     b,#0x40
0B7E 120000    2802            lcall   _strcmp
0B81 E582      2803            mov     a,dpl
0B83 8583F0    2804            mov     b,dph
0B86 45F0      2805            orl     a,b
0B88 6000      2806            jz      L029044?
0B8A 020000    2807            ljmp    L029006?
0B8D           2808   L029044?:
0B8D           2809   L029009?:
0B8D           2810   ;        EFM8_JDY40_test.c:819: if ( strcmp(buff, "S") == 0 )    
0B8D 750080    2811            mov     _strcmp_PARM_2,#__str_18
0B90 7501E1    2812            mov     (_strcmp_PARM_2 + 1),#(__str_18 >> 8)
0B93 750280    2813            mov     (_strcmp_PARM_2 + 2),#0x80
0B96 901950    2814            mov     dptr,#_buff
0B99 75F040    2815            mov     b,#0x40
0B9C 120000    2816            lcall   _strcmp
0B9F E582      2817            mov     a,dpl
0BA1 8583F0    2818            mov     b,dph
0BA4 45F0      2819            orl     a,b
0BA6 7000      2820            jnz     L029011?
0BA8           2821   ;        EFM8_JDY40_test.c:821: servomotion();
0BA8 120000    2822            lcall   _servomotion
0BAB           2823   ;        EFM8_JDY40_test.c:822: printf("this should be the motor function");
0BAB 7400      2824            mov     a,#__str_19
0BAD C0E0      2825            push    acc
0BAF 74E2      2826            mov     a,#(__str_19 >> 8)
0BB1 C0E0      2827            push    acc
0BB3 7480      2828            mov     a,#0x80
0BB5 C0E0      2829            push    acc
0BB7 120000    2830            lcall   _printf
0BBA 1581      2831            dec     sp
0BBC 1581      2832            dec     sp
0BBE 1581      2833            dec     sp
0BC0           2834   ;        EFM8_JDY40_test.c:823: waitms(500);
0BC0 9001F4    2835            mov     dptr,#0x01F4
0BC3 120000    2836            lcall   _waitms
0BC6           2837   L029011?:
0BC6           2838   ;        EFM8_JDY40_test.c:827: sscanf(buff, "K%uW%uG%d\n", &adcwheel1, &adcwheel2, &which);
0BC6 7430      2839            mov     a,#_main_which_1_182
0BC8 C0E0      2840            push    acc
0BCA 74BD      2841            mov     a,#(_main_which_1_182 >> 8)
0BCC C0E0      2842            push    acc
0BCE 7440      2843            mov     a,#0x40
0BD0 C0E0      2844            push    acc
0BD2 74E0      2845            mov     a,#_main_adcwheel2_1_182
0BD4 C0E0      2846            push    acc
0BD6 74BC      2847            mov     a,#(_main_adcwheel2_1_182 >> 8)
0BD8 C0E0      2848            push    acc
0BDA 7440      2849            mov     a,#0x40
0BDC C0E0      2850            push    acc
0BDE 7490      2851            mov     a,#_main_adcwheel1_1_182
0BE0 C0E0      2852            push    acc
0BE2 74BC      2853            mov     a,#(_main_adcwheel1_1_182 >> 8)
0BE4 C0E0      2854            push    acc
0BE6 7440      2855            mov     a,#0x40
0BE8 C0E0      2856            push    acc
0BEA 7440      2857            mov     a,#__str_20
0BEC C0E0      2858            push    acc
0BEE 74E2      2859            mov     a,#(__str_20 >> 8)
0BF0 C0E0      2860            push    acc
0BF2 7480      2861            mov     a,#0x80
0BF4 C0E0      2862            push    acc
0BF6 7450      2863            mov     a,#_buff
0BF8 C0E0      2864            push    acc
0BFA 7419      2865            mov     a,#(_buff >> 8)
0BFC C0E0      2866            push    acc
0BFE 7440      2867            mov     a,#0x40
0C00 C0E0      2868            push    acc
0C02 120000    2869            lcall   _sscanf
0C05 E581      2870            mov     a,sp
0C07 24F1      2871            add     a,#0xf1
0C09 F581      2872            mov     sp,a
0C0B           2873   ;        EFM8_JDY40_test.c:828: if (which == 0 )
0C0B E530      2874            mov     a,_main_which_1_182
0C0D 4531      2875            orl     a,(_main_which_1_182 + 1)
0C0F 7000      2876            jnz     L029013?
0C11           2877   ;        EFM8_JDY40_test.c:830: P2_5 = 0;
0C11 C2A5      2878            clr     _P2_5
0C13           2879   ;        EFM8_JDY40_test.c:831: P3_7=0;
0C13 C2B7      2880            clr     _P3_7
0C15           2881   ;        EFM8_JDY40_test.c:832: direction = 1;
0C15 753801    2882            mov     _direction,#0x01
0C18 E4        2883            clr     a
0C19 F539      2884            mov     (_direction + 1),a
0C1B 8000      2885            sjmp    L029014?
0C1D           2886   L029013?:
0C1D           2887   ;        EFM8_JDY40_test.c:836: P3_2=0;
0C1D C2B2      2888            clr     _P3_2
0C1F           2889   ;        EFM8_JDY40_test.c:837: P3_0=0;
0C1F C2B0      2890            clr     _P3_0
0C21           2891   ;        EFM8_JDY40_test.c:838: direction = 0;
0C21 E4        2892            clr     a
0C22 F538      2893            mov     _direction,a
0C24 F539      2894            mov     (_direction + 1),a
0C26           2895   L029014?:
0C26           2896   ;        EFM8_JDY40_test.c:842: pwm_duty4 = adcwheel2;
0C26 85E0F8    2897            mov     _pwm_duty4,_main_adcwheel2_1_182
0C29 85E1F9    2898            mov     (_pwm_duty4 + 1),(_main_adcwheel2_1_182 + 1)
0C2C           2899   ;        EFM8_JDY40_test.c:843: if ( adcwheel1 == 5535 ) adcwheel1 = 65535;
0C2C 749F      2900            mov     a,#0x9F
0C2E B59040    2901            cjne    a,_main_adcwheel1_1_182,L029016?
0C31 7415      2902            mov     a,#0x15
0C33 B59140    2903            cjne    a,(_main_adcwheel1_1_182 + 1),L029016?
0C36 7590FF    2904            mov     _main_adcwheel1_1_182,#0xFF
0C39 7591FF    2905            mov     (_main_adcwheel1_1_182 + 1),#0xFF
0C3C           2906   L029016?:
0C3C           2907   ;        EFM8_JDY40_test.c:844: if ( adcwheel1 == 5086 ) adcwheel1 = 65535;
0C3C 74DE      2908            mov     a,#0xDE
0C3E B59080    2909            cjne    a,_main_adcwheel1_1_182,L029018?
0C41 7413      2910            mov     a,#0x13
0C43 B59180    2911            cjne    a,(_main_adcwheel1_1_182 + 1),L029018?
0C46 7590FF    2912            mov     _main_adcwheel1_1_182,#0xFF
0C49 7591FF    2913            mov     (_main_adcwheel1_1_182 + 1),#0xFF
0C4C           2914   L029018?:
0C4C           2915   ;        EFM8_JDY40_test.c:845: if ( adcwheel1 == 535 ) adcwheel1 = 65535;
0C4C 7417      2916            mov     a,#0x17
0C4E B590C0    2917            cjne    a,_main_adcwheel1_1_182,L029020?
0C51 7402      2918            mov     a,#0x02
0C53 B591C0    2919            cjne    a,(_main_adcwheel1_1_182 + 1),L029020?
0C56 7590FF    2920            mov     _main_adcwheel1_1_182,#0xFF
0C59 7591FF    2921            mov     (_main_adcwheel1_1_182 + 1),#0xFF
0C5C           2922   L029020?:
0C5C           2923   ;        EFM8_JDY40_test.c:846: if ( adcwheel1 == 86 ) adcwheel1 = 65535;
0C5C 7456      2924            mov     a,#0x56
0C5E B59000    2925            cjne    a,_main_adcwheel1_1_182,L029053?
0C61 E4        2926            clr     a
0C62 B59100    2927            cjne    a,(_main_adcwheel1_1_182 + 1),L029053?
0C65 8000      2928            sjmp    L029054?
0C67           2929   L029053?:
0C67 8000      2930            sjmp    L029022?
0C69           2931   L029054?:
0C69 7590FF    2932            mov     _main_adcwheel1_1_182,#0xFF
0C6C 7591FF    2933            mov     (_main_adcwheel1_1_182 + 1),#0xFF
0C6F           2934   L029022?:
0C6F           2935   ;        EFM8_JDY40_test.c:847: pwm_duty2 = adcwheel1;
0C6F 859078    2936            mov     _pwm_duty2,_main_adcwheel1_1_182
0C72 859179    2937            mov     (_pwm_duty2 + 1),(_main_adcwheel1_1_182 + 1)
0C75           2938   ;        EFM8_JDY40_test.c:850: waitms(5); // The radio seems to need this delay...
0C75 900005    2939            mov     dptr,#0x0005
0C78 120000    2940            lcall   _waitms
0C7B 020000    2941            ljmp    L029026?
0C7E           2942            rseg R_CSEG
0C7E           2943   
0000           2944            rseg R_XINIT
0000           2945   
0000           2946            rseg R_CONST
0000           2947   __str_0:
0000 436F6D6D  2948            db 'Command: %s'
     616E643A
     202573
000B 00        2949            db 0x00
000C           2950   __str_1:
000C 52657370  2951            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2952            db 0x0D
0019 0A        2953            db 0x0A
001A 00        2954            db 0x00
001B           2955   __str_2:
001B 41542B44  2956            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2957            db 0x0D
0027 0A        2958            db 0x0A
0028 00        2959            db 0x00
0029           2960   _PrintNumber_HexDigit_1_164:
0029 30313233  2961            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0039 00        2962            db 0x00
003A           2963   __str_4:
003A 204E4F20  2964            db ' NO SIGNAL                     '
     5349474E
     414C2020
     20202020
     20202020
     20202020
     20202020
     202020
0059 0D        2965            db 0x0D
005A 00        2966            db 0x00
005B           2967   __str_5:
005B 256C64    2968            db '%ld'
005E 0A        2969            db 0x0A
005F 0D        2970            db 0x0D
0060 00        2971            db 0x00
0061           2972   __str_6:
0061 0D        2973            db 0x0D
0062 0A        2974            db 0x0A
0063 45464D38  2975            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
007E 0D        2976            db 0x0D
007F 0A        2977            db 0x0A
0080 00        2978            db 0x00
0081           2979   __str_7:
0081 41542B56  2980            db 'AT+VER'
     4552
0087 0D        2981            db 0x0D
0088 0A        2982            db 0x0A
0089 00        2983            db 0x00
008A           2984   __str_8:
008A 41542B42  2985            db 'AT+BAUD'
     415544
0091 0D        2986            db 0x0D
0092 0A        2987            db 0x0A
0093 00        2988            db 0x00
0094           2989   __str_9:
0094 41542B52  2990            db 'AT+RFID'
     464944
009B 0D        2991            db 0x0D
009C 0A        2992            db 0x0A
009D 00        2993            db 0x00
009E           2994   __str_10:
009E 41542B44  2995            db 'AT+DVID'
     564944
00A5 0D        2996            db 0x0D
00A6 0A        2997            db 0x0A
00A7 00        2998            db 0x00
00A8           2999   __str_11:
00A8 41542B52  3000            db 'AT+RFC120'
     46433132
     30
00B1 0D        3001            db 0x0D
00B2 0A        3002            db 0x0A
00B3 00        3003            db 0x00
00B4           3004   __str_12:
00B4 41542B50  3005            db 'AT+POWE'
     4F5745
00BB 0D        3006            db 0x0D
00BC 0A        3007            db 0x0A
00BD 00        3008            db 0x00
00BE           3009   __str_13:
00BE 41542B43  3010            db 'AT+CLSS'
     4C5353
00C5 0D        3011            db 0x0D
00C6 0A        3012            db 0x0A
00C7 00        3013            db 0x00
00C8           3014   __str_14:
00C8 41542B44  3015            db 'AT+DVIDFFFF'
     56494446
     464646
00D3 0D        3016            db 0x0D
00D4 0A        3017            db 0x0A
00D5 00        3018            db 0x00
00D6           3019   __str_15:
00D6 2530356C  3020            db '%05ld'
     64
00DB 0A        3021            db 0x0A
00DC 0D        3022            db 0x0D
00DD 00        3023            db 0x00
00DE           3024   __str_16:
00DE 41        3025            db 'A'
00DF 00        3026            db 0x00
00E0           3027   __str_17:
00E0 68656C6C  3028            db 'hello'
     6F
00E5 00        3029            db 0x00
00E6           3030   __str_18:
00E6 53        3031            db 'S'
00E7 00        3032            db 0x00
00E8           3033   __str_19:
00E8 74686973  3034            db 'this should be the motor function'
     2073686F
     756C6420
     62652074
     6865206D
     6F746F72
     2066756E
     6374696F
     6E
0109 00        3035            db 0x00
010A           3036   __str_20:
010A 4B257557  3037            db 'K%uW%uG%d'
     25754725
     64
0113 0A        3038            db 0x0A
0114 00        3039            db 0x00
0115           3040   
0096           3041            CSEG
0096           3042   
0096           3043   end
