0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 30 14:16:18 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _PrintNumber_HexDigit_1_163
0000             28            public _customFrown
0000             29            public _customSad
0000             30            public _customSparkle
0000             31            public _main
0000             32            public _CoinDecider
0000             33            public _LCD_4BIT
0000             34            public _WriteCommand
0000             35            public _WriteData
0000             36            public _LCD_byte
0000             37            public _LCD_pulse
0000             38            public _automaticmode
0000             39            public _GetFrequency
0000             40            public _PrintNumber
0000             41            public _eputs
0000             42            public _GetPeriod
0000             43            public _ADCsteeringRatio
0000             44            public _ADCtoPWM
0000             45            public _Timer2_ISR
0000             46            public _Timer4_ISR
0000             47            public _Volts_at_Pin
0000             48            public _ADC_at_Pin
0000             49            public _InitPinADC
0000             50            public _InitADC
0000             51            public _TIMER0_Init
0000             52            public _ReceptionOff
0000             53            public _SendATCommand
0000             54            public _waitms_or_RI1
0000             55            public _RXU1
0000             56            public _getstr1
0000             57            public _getchar1_with_timeout
0000             58            public _getchar1
0000             59            public _sendstr1
0000             60            public _putchar1
0000             61            public _UART1_Init
0000             62            public _waitms
0000             63            public _Timer3us
0000             64            public __c51_external_startup
0000             65            public _msg
0000             66            public _buff
0000             67            public _automaticmode_PARM_2
0000             68            public _GetFrequency_PARM_2
0000             69            public _PrintNumber_PARM_3
0000             70            public _PrintNumber_PARM_2
0000             71            public _ADCsteeringRatio_PARM_4
0000             72            public _ADCsteeringRatio_PARM_3
0000             73            public _ADCsteeringRatio_PARM_2
0000             74            public _getstr1_PARM_2
0000             75            public _overflow_count
0000             76            public _peggingsidnatu
0000             77            public _direction
0000             78            public _pwm_duty2
0000             79            public _pwm_counter2
0000             80            public _pwm_duty4
0000             81            public _pwm_counter4
0000             82   ;--------------------------------------------------------
0000             83   ; Special Function Registers
0000             84   ;--------------------------------------------------------
0000             85   _ACC            DATA 0xe0
0000             86   _ADC0ASAH       DATA 0xb6
0000             87   _ADC0ASAL       DATA 0xb5
0000             88   _ADC0ASCF       DATA 0xa1
0000             89   _ADC0ASCT       DATA 0xc7
0000             90   _ADC0CF0        DATA 0xbc
0000             91   _ADC0CF1        DATA 0xb9
0000             92   _ADC0CF2        DATA 0xdf
0000             93   _ADC0CN0        DATA 0xe8
0000             94   _ADC0CN1        DATA 0xb2
0000             95   _ADC0CN2        DATA 0xb3
0000             96   _ADC0GTH        DATA 0xc4
0000             97   _ADC0GTL        DATA 0xc3
0000             98   _ADC0H          DATA 0xbe
0000             99   _ADC0L          DATA 0xbd
0000            100   _ADC0LTH        DATA 0xc6
0000            101   _ADC0LTL        DATA 0xc5
0000            102   _ADC0MX         DATA 0xbb
0000            103   _B              DATA 0xf0
0000            104   _CKCON0         DATA 0x8e
0000            105   _CKCON1         DATA 0xa6
0000            106   _CLEN0          DATA 0xc6
0000            107   _CLIE0          DATA 0xc7
0000            108   _CLIF0          DATA 0xe8
0000            109   _CLKSEL         DATA 0xa9
0000            110   _CLOUT0         DATA 0xd1
0000            111   _CLU0CF         DATA 0xb1
0000            112   _CLU0FN         DATA 0xaf
0000            113   _CLU0MX         DATA 0x84
0000            114   _CLU1CF         DATA 0xb3
0000            115   _CLU1FN         DATA 0xb2
0000            116   _CLU1MX         DATA 0x85
0000            117   _CLU2CF         DATA 0xb6
0000            118   _CLU2FN         DATA 0xb5
0000            119   _CLU2MX         DATA 0x91
0000            120   _CLU3CF         DATA 0xbf
0000            121   _CLU3FN         DATA 0xbe
0000            122   _CLU3MX         DATA 0xae
0000            123   _CMP0CN0        DATA 0x9b
0000            124   _CMP0CN1        DATA 0x99
0000            125   _CMP0MD         DATA 0x9d
0000            126   _CMP0MX         DATA 0x9f
0000            127   _CMP1CN0        DATA 0xbf
0000            128   _CMP1CN1        DATA 0xac
0000            129   _CMP1MD         DATA 0xab
0000            130   _CMP1MX         DATA 0xaa
0000            131   _CRC0CN0        DATA 0xce
0000            132   _CRC0CN1        DATA 0x86
0000            133   _CRC0CNT        DATA 0xd3
0000            134   _CRC0DAT        DATA 0xcb
0000            135   _CRC0FLIP       DATA 0xcf
0000            136   _CRC0IN         DATA 0xca
0000            137   _CRC0ST         DATA 0xd2
0000            138   _DAC0CF0        DATA 0x91
0000            139   _DAC0CF1        DATA 0x92
0000            140   _DAC0H          DATA 0x85
0000            141   _DAC0L          DATA 0x84
0000            142   _DAC1CF0        DATA 0x93
0000            143   _DAC1CF1        DATA 0x94
0000            144   _DAC1H          DATA 0x8a
0000            145   _DAC1L          DATA 0x89
0000            146   _DAC2CF0        DATA 0x95
0000            147   _DAC2CF1        DATA 0x96
0000            148   _DAC2H          DATA 0x8c
0000            149   _DAC2L          DATA 0x8b
0000            150   _DAC3CF0        DATA 0x9a
0000            151   _DAC3CF1        DATA 0x9c
0000            152   _DAC3H          DATA 0x8e
0000            153   _DAC3L          DATA 0x8d
0000            154   _DACGCF0        DATA 0x88
0000            155   _DACGCF1        DATA 0x98
0000            156   _DACGCF2        DATA 0xa2
0000            157   _DERIVID        DATA 0xad
0000            158   _DEVICEID       DATA 0xb5
0000            159   _DPH            DATA 0x83
0000            160   _DPL            DATA 0x82
0000            161   _EIE1           DATA 0xe6
0000            162   _EIE2           DATA 0xf3
0000            163   _EIP1           DATA 0xbb
0000            164   _EIP1H          DATA 0xee
0000            165   _EIP2           DATA 0xed
0000            166   _EIP2H          DATA 0xf6
0000            167   _EMI0CN         DATA 0xe7
0000            168   _FLKEY          DATA 0xb7
0000            169   _HFO0CAL        DATA 0xc7
0000            170   _HFO1CAL        DATA 0xd6
0000            171   _HFOCN          DATA 0xef
0000            172   _I2C0ADM        DATA 0xff
0000            173   _I2C0CN0        DATA 0xba
0000            174   _I2C0DIN        DATA 0xbc
0000            175   _I2C0DOUT       DATA 0xbb
0000            176   _I2C0FCN0       DATA 0xad
0000            177   _I2C0FCN1       DATA 0xab
0000            178   _I2C0FCT        DATA 0xf5
0000            179   _I2C0SLAD       DATA 0xbd
0000            180   _I2C0STAT       DATA 0xb9
0000            181   _IE             DATA 0xa8
0000            182   _IP             DATA 0xb8
0000            183   _IPH            DATA 0xf2
0000            184   _IT01CF         DATA 0xe4
0000            185   _LFO0CN         DATA 0xb1
0000            186   _P0             DATA 0x80
0000            187   _P0MASK         DATA 0xfe
0000            188   _P0MAT          DATA 0xfd
0000            189   _P0MDIN         DATA 0xf1
0000            190   _P0MDOUT        DATA 0xa4
0000            191   _P0SKIP         DATA 0xd4
0000            192   _P1             DATA 0x90
0000            193   _P1MASK         DATA 0xee
0000            194   _P1MAT          DATA 0xed
0000            195   _P1MDIN         DATA 0xf2
0000            196   _P1MDOUT        DATA 0xa5
0000            197   _P1SKIP         DATA 0xd5
0000            198   _P2             DATA 0xa0
0000            199   _P2MASK         DATA 0xfc
0000            200   _P2MAT          DATA 0xfb
0000            201   _P2MDIN         DATA 0xf3
0000            202   _P2MDOUT        DATA 0xa6
0000            203   _P2SKIP         DATA 0xcc
0000            204   _P3             DATA 0xb0
0000            205   _P3MDIN         DATA 0xf4
0000            206   _P3MDOUT        DATA 0x9c
0000            207   _PCA0CENT       DATA 0x9e
0000            208   _PCA0CLR        DATA 0x9c
0000            209   _PCA0CN0        DATA 0xd8
0000            210   _PCA0CPH0       DATA 0xfc
0000            211   _PCA0CPH1       DATA 0xea
0000            212   _PCA0CPH2       DATA 0xec
0000            213   _PCA0CPH3       DATA 0xf5
0000            214   _PCA0CPH4       DATA 0x85
0000            215   _PCA0CPH5       DATA 0xde
0000            216   _PCA0CPL0       DATA 0xfb
0000            217   _PCA0CPL1       DATA 0xe9
0000            218   _PCA0CPL2       DATA 0xeb
0000            219   _PCA0CPL3       DATA 0xf4
0000            220   _PCA0CPL4       DATA 0x84
0000            221   _PCA0CPL5       DATA 0xdd
0000            222   _PCA0CPM0       DATA 0xda
0000            223   _PCA0CPM1       DATA 0xdb
0000            224   _PCA0CPM2       DATA 0xdc
0000            225   _PCA0CPM3       DATA 0xae
0000            226   _PCA0CPM4       DATA 0xaf
0000            227   _PCA0CPM5       DATA 0xcc
0000            228   _PCA0H          DATA 0xfa
0000            229   _PCA0L          DATA 0xf9
0000            230   _PCA0MD         DATA 0xd9
0000            231   _PCA0POL        DATA 0x96
0000            232   _PCA0PWM        DATA 0xf7
0000            233   _PCON0          DATA 0x87
0000            234   _PCON1          DATA 0xcd
0000            235   _PFE0CN         DATA 0xc1
0000            236   _PRTDRV         DATA 0xf6
0000            237   _PSCTL          DATA 0x8f
0000            238   _PSTAT0         DATA 0xaa
0000            239   _PSW            DATA 0xd0
0000            240   _REF0CN         DATA 0xd1
0000            241   _REG0CN         DATA 0xc9
0000            242   _REVID          DATA 0xb6
0000            243   _RSTSRC         DATA 0xef
0000            244   _SBCON1         DATA 0x94
0000            245   _SBRLH1         DATA 0x96
0000            246   _SBRLL1         DATA 0x95
0000            247   _SBUF           DATA 0x99
0000            248   _SBUF0          DATA 0x99
0000            249   _SBUF1          DATA 0x92
0000            250   _SCON           DATA 0x98
0000            251   _SCON0          DATA 0x98
0000            252   _SCON1          DATA 0xc8
0000            253   _SFRPAGE        DATA 0xa7
0000            254   _SFRPGCN        DATA 0xbc
0000            255   _SFRSTACK       DATA 0xd7
0000            256   _SMB0ADM        DATA 0xd6
0000            257   _SMB0ADR        DATA 0xd7
0000            258   _SMB0CF         DATA 0xc1
0000            259   _SMB0CN0        DATA 0xc0
0000            260   _SMB0DAT        DATA 0xc2
0000            261   _SMB0FCN0       DATA 0xc3
0000            262   _SMB0FCN1       DATA 0xc4
0000            263   _SMB0FCT        DATA 0xef
0000            264   _SMB0RXLN       DATA 0xc5
0000            265   _SMB0TC         DATA 0xac
0000            266   _SMOD1          DATA 0x93
0000            267   _SP             DATA 0x81
0000            268   _SPI0CFG        DATA 0xa1
0000            269   _SPI0CKR        DATA 0xa2
0000            270   _SPI0CN0        DATA 0xf8
0000            271   _SPI0DAT        DATA 0xa3
0000            272   _SPI0FCN0       DATA 0x9a
0000            273   _SPI0FCN1       DATA 0x9b
0000            274   _SPI0FCT        DATA 0xf7
0000            275   _SPI0PCF        DATA 0xdf
0000            276   _TCON           DATA 0x88
0000            277   _TH0            DATA 0x8c
0000            278   _TH1            DATA 0x8d
0000            279   _TL0            DATA 0x8a
0000            280   _TL1            DATA 0x8b
0000            281   _TMOD           DATA 0x89
0000            282   _TMR2CN0        DATA 0xc8
0000            283   _TMR2CN1        DATA 0xfd
0000            284   _TMR2H          DATA 0xcf
0000            285   _TMR2L          DATA 0xce
0000            286   _TMR2RLH        DATA 0xcb
0000            287   _TMR2RLL        DATA 0xca
0000            288   _TMR3CN0        DATA 0x91
0000            289   _TMR3CN1        DATA 0xfe
0000            290   _TMR3H          DATA 0x95
0000            291   _TMR3L          DATA 0x94
0000            292   _TMR3RLH        DATA 0x93
0000            293   _TMR3RLL        DATA 0x92
0000            294   _TMR4CN0        DATA 0x98
0000            295   _TMR4CN1        DATA 0xff
0000            296   _TMR4H          DATA 0xa5
0000            297   _TMR4L          DATA 0xa4
0000            298   _TMR4RLH        DATA 0xa3
0000            299   _TMR4RLL        DATA 0xa2
0000            300   _TMR5CN0        DATA 0xc0
0000            301   _TMR5CN1        DATA 0xf1
0000            302   _TMR5H          DATA 0xd5
0000            303   _TMR5L          DATA 0xd4
0000            304   _TMR5RLH        DATA 0xd3
0000            305   _TMR5RLL        DATA 0xd2
0000            306   _UART0PCF       DATA 0xd9
0000            307   _UART1FCN0      DATA 0x9d
0000            308   _UART1FCN1      DATA 0xd8
0000            309   _UART1FCT       DATA 0xfa
0000            310   _UART1LIN       DATA 0x9e
0000            311   _UART1PCF       DATA 0xda
0000            312   _VDM0CN         DATA 0xff
0000            313   _WDTCN          DATA 0x97
0000            314   _XBR0           DATA 0xe1
0000            315   _XBR1           DATA 0xe2
0000            316   _XBR2           DATA 0xe3
0000            317   _XOSC0CN        DATA 0x86
0000            318   _DPTR           DATA 0x8382
0000            319   _TMR2RL         DATA 0xcbca
0000            320   _TMR3RL         DATA 0x9392
0000            321   _TMR4RL         DATA 0xa3a2
0000            322   _TMR5RL         DATA 0xd3d2
0000            323   _TMR0           DATA 0x8c8a
0000            324   _TMR1           DATA 0x8d8b
0000            325   _TMR2           DATA 0xcfce
0000            326   _TMR3           DATA 0x9594
0000            327   _TMR4           DATA 0xa5a4
0000            328   _TMR5           DATA 0xd5d4
0000            329   _SBRL1          DATA 0x9695
0000            330   _PCA0           DATA 0xfaf9
0000            331   _PCA0CP0        DATA 0xfcfb
0000            332   _PCA0CP1        DATA 0xeae9
0000            333   _PCA0CP2        DATA 0xeceb
0000            334   _PCA0CP3        DATA 0xf5f4
0000            335   _PCA0CP4        DATA 0x8584
0000            336   _PCA0CP5        DATA 0xdedd
0000            337   _ADC0ASA        DATA 0xb6b5
0000            338   _ADC0GT         DATA 0xc4c3
0000            339   _ADC0           DATA 0xbebd
0000            340   _ADC0LT         DATA 0xc6c5
0000            341   _DAC0           DATA 0x8584
0000            342   _DAC1           DATA 0x8a89
0000            343   _DAC2           DATA 0x8c8b
0000            344   _DAC3           DATA 0x8e8d
0000            345   ;--------------------------------------------------------
0000            346   ; special function bits
0000            347   ;--------------------------------------------------------
0000            348   _ACC_0          BIT 0xe0
0000            349   _ACC_1          BIT 0xe1
0000            350   _ACC_2          BIT 0xe2
0000            351   _ACC_3          BIT 0xe3
0000            352   _ACC_4          BIT 0xe4
0000            353   _ACC_5          BIT 0xe5
0000            354   _ACC_6          BIT 0xe6
0000            355   _ACC_7          BIT 0xe7
0000            356   _TEMPE          BIT 0xe8
0000            357   _ADGN0          BIT 0xe9
0000            358   _ADGN1          BIT 0xea
0000            359   _ADWINT         BIT 0xeb
0000            360   _ADBUSY         BIT 0xec
0000            361   _ADINT          BIT 0xed
0000            362   _IPOEN          BIT 0xee
0000            363   _ADEN           BIT 0xef
0000            364   _B_0            BIT 0xf0
0000            365   _B_1            BIT 0xf1
0000            366   _B_2            BIT 0xf2
0000            367   _B_3            BIT 0xf3
0000            368   _B_4            BIT 0xf4
0000            369   _B_5            BIT 0xf5
0000            370   _B_6            BIT 0xf6
0000            371   _B_7            BIT 0xf7
0000            372   _C0FIF          BIT 0xe8
0000            373   _C0RIF          BIT 0xe9
0000            374   _C1FIF          BIT 0xea
0000            375   _C1RIF          BIT 0xeb
0000            376   _C2FIF          BIT 0xec
0000            377   _C2RIF          BIT 0xed
0000            378   _C3FIF          BIT 0xee
0000            379   _C3RIF          BIT 0xef
0000            380   _D1SRC0         BIT 0x88
0000            381   _D1SRC1         BIT 0x89
0000            382   _D1AMEN         BIT 0x8a
0000            383   _D01REFSL       BIT 0x8b
0000            384   _D3SRC0         BIT 0x8c
0000            385   _D3SRC1         BIT 0x8d
0000            386   _D3AMEN         BIT 0x8e
0000            387   _D23REFSL       BIT 0x8f
0000            388   _D0UDIS         BIT 0x98
0000            389   _D1UDIS         BIT 0x99
0000            390   _D2UDIS         BIT 0x9a
0000            391   _D3UDIS         BIT 0x9b
0000            392   _EX0            BIT 0xa8
0000            393   _ET0            BIT 0xa9
0000            394   _EX1            BIT 0xaa
0000            395   _ET1            BIT 0xab
0000            396   _ES0            BIT 0xac
0000            397   _ET2            BIT 0xad
0000            398   _ESPI0          BIT 0xae
0000            399   _EA             BIT 0xaf
0000            400   _PX0            BIT 0xb8
0000            401   _PT0            BIT 0xb9
0000            402   _PX1            BIT 0xba
0000            403   _PT1            BIT 0xbb
0000            404   _PS0            BIT 0xbc
0000            405   _PT2            BIT 0xbd
0000            406   _PSPI0          BIT 0xbe
0000            407   _P0_0           BIT 0x80
0000            408   _P0_1           BIT 0x81
0000            409   _P0_2           BIT 0x82
0000            410   _P0_3           BIT 0x83
0000            411   _P0_4           BIT 0x84
0000            412   _P0_5           BIT 0x85
0000            413   _P0_6           BIT 0x86
0000            414   _P0_7           BIT 0x87
0000            415   _P1_0           BIT 0x90
0000            416   _P1_1           BIT 0x91
0000            417   _P1_2           BIT 0x92
0000            418   _P1_3           BIT 0x93
0000            419   _P1_4           BIT 0x94
0000            420   _P1_5           BIT 0x95
0000            421   _P1_6           BIT 0x96
0000            422   _P1_7           BIT 0x97
0000            423   _P2_0           BIT 0xa0
0000            424   _P2_1           BIT 0xa1
0000            425   _P2_2           BIT 0xa2
0000            426   _P2_3           BIT 0xa3
0000            427   _P2_4           BIT 0xa4
0000            428   _P2_5           BIT 0xa5
0000            429   _P2_6           BIT 0xa6
0000            430   _P3_0           BIT 0xb0
0000            431   _P3_1           BIT 0xb1
0000            432   _P3_2           BIT 0xb2
0000            433   _P3_3           BIT 0xb3
0000            434   _P3_4           BIT 0xb4
0000            435   _P3_7           BIT 0xb7
0000            436   _CCF0           BIT 0xd8
0000            437   _CCF1           BIT 0xd9
0000            438   _CCF2           BIT 0xda
0000            439   _CCF3           BIT 0xdb
0000            440   _CCF4           BIT 0xdc
0000            441   _CCF5           BIT 0xdd
0000            442   _CR             BIT 0xde
0000            443   _CF             BIT 0xdf
0000            444   _PARITY         BIT 0xd0
0000            445   _F1             BIT 0xd1
0000            446   _OV             BIT 0xd2
0000            447   _RS0            BIT 0xd3
0000            448   _RS1            BIT 0xd4
0000            449   _F0             BIT 0xd5
0000            450   _AC             BIT 0xd6
0000            451   _CY             BIT 0xd7
0000            452   _RI             BIT 0x98
0000            453   _TI             BIT 0x99
0000            454   _RB8            BIT 0x9a
0000            455   _TB8            BIT 0x9b
0000            456   _REN            BIT 0x9c
0000            457   _CE             BIT 0x9d
0000            458   _SMODE          BIT 0x9e
0000            459   _RI1            BIT 0xc8
0000            460   _TI1            BIT 0xc9
0000            461   _RBX1           BIT 0xca
0000            462   _TBX1           BIT 0xcb
0000            463   _REN1           BIT 0xcc
0000            464   _PERR1          BIT 0xcd
0000            465   _OVR1           BIT 0xce
0000            466   _SI             BIT 0xc0
0000            467   _ACK            BIT 0xc1
0000            468   _ARBLOST        BIT 0xc2
0000            469   _ACKRQ          BIT 0xc3
0000            470   _STO            BIT 0xc4
0000            471   _STA            BIT 0xc5
0000            472   _TXMODE         BIT 0xc6
0000            473   _MASTER         BIT 0xc7
0000            474   _SPIEN          BIT 0xf8
0000            475   _TXNF           BIT 0xf9
0000            476   _NSSMD0         BIT 0xfa
0000            477   _NSSMD1         BIT 0xfb
0000            478   _RXOVRN         BIT 0xfc
0000            479   _MODF           BIT 0xfd
0000            480   _WCOL           BIT 0xfe
0000            481   _SPIF           BIT 0xff
0000            482   _IT0            BIT 0x88
0000            483   _IE0            BIT 0x89
0000            484   _IT1            BIT 0x8a
0000            485   _IE1            BIT 0x8b
0000            486   _TR0            BIT 0x8c
0000            487   _TF0            BIT 0x8d
0000            488   _TR1            BIT 0x8e
0000            489   _TF1            BIT 0x8f
0000            490   _T2XCLK0        BIT 0xc8
0000            491   _T2XCLK1        BIT 0xc9
0000            492   _TR2            BIT 0xca
0000            493   _T2SPLIT        BIT 0xcb
0000            494   _TF2CEN         BIT 0xcc
0000            495   _TF2LEN         BIT 0xcd
0000            496   _TF2L           BIT 0xce
0000            497   _TF2H           BIT 0xcf
0000            498   _T4XCLK0        BIT 0x98
0000            499   _T4XCLK1        BIT 0x99
0000            500   _TR4            BIT 0x9a
0000            501   _T4SPLIT        BIT 0x9b
0000            502   _TF4CEN         BIT 0x9c
0000            503   _TF4LEN         BIT 0x9d
0000            504   _TF4L           BIT 0x9e
0000            505   _TF4H           BIT 0x9f
0000            506   _T5XCLK0        BIT 0xc0
0000            507   _T5XCLK1        BIT 0xc1
0000            508   _TR5            BIT 0xc2
0000            509   _T5SPLIT        BIT 0xc3
0000            510   _TF5CEN         BIT 0xc4
0000            511   _TF5LEN         BIT 0xc5
0000            512   _TF5L           BIT 0xc6
0000            513   _TF5H           BIT 0xc7
0000            514   _RIE            BIT 0xd8
0000            515   _RXTO0          BIT 0xd9
0000            516   _RXTO1          BIT 0xda
0000            517   _RFRQ           BIT 0xdb
0000            518   _TIE            BIT 0xdc
0000            519   _TXHOLD         BIT 0xdd
0000            520   _TXNF1          BIT 0xde
0000            521   _TFRQ           BIT 0xdf
0000            522   ;--------------------------------------------------------
0000            523   ; overlayable register banks
0000            524   ;--------------------------------------------------------
0000            525            rbank0 segment data overlay
0000            526   ;--------------------------------------------------------
0000            527   ; internal ram data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_DSEG
0000            530   _pwm_counter4:
0000            531            ds 2
0002            532   _pwm_duty4:
0002            533            ds 2
0004            534   _pwm_counter2:
0004            535            ds 2
0006            536   _pwm_duty2:
0006            537            ds 2
0008            538   _direction:
0008            539            ds 2
000A            540   _peggingsidnatu:
000A            541            ds 2
000C            542   _overflow_count:
000C            543            ds 1
000D            544   _getstr1_PARM_2:
000D            545            ds 1
000E            546   _ADCsteeringRatio_PARM_2:
000E            547            ds 2
0010            548   _ADCsteeringRatio_PARM_3:
0010            549            ds 3
0013            550   _ADCsteeringRatio_PARM_4:
0013            551            ds 3
0016            552   _ADCsteeringRatio_centersteering_1_143:
0016            553            ds 2
0018            554   _ADCsteeringRatio_sloc0_1_0:
0018            555            ds 3
001B            556   _PrintNumber_PARM_2:
001B            557            ds 2
001D            558   _PrintNumber_PARM_3:
001D            559            ds 2
001F            560   _PrintNumber_val_1_162:
001F            561            ds 4
0023            562   _PrintNumber_j_1_163:
0023            563            ds 2
0025            564   _PrintNumber_sloc0_1_0:
0025            565            ds 2
0027            566   _PrintNumber_sloc1_1_0:
0027            567            ds 4
002B            568   _GetFrequency_PARM_2:
002B            569            ds 2
002D            570   _automaticmode_PARM_2:
002D            571            ds 4
0031            572   _main_speed_1_196:
0031            573            ds 2
0033            574   _main_steering_1_196:
0033            575            ds 2
0035            576   _main_adcwheel1_1_196:
0035            577            ds 2
0037            578   _main_adcwheel2_1_196:
0037            579            ds 2
0039            580   _main_f_1_196:
0039            581            ds 4
003D            582   _main_v_1_196:
003D            583            ds 8
0045            584   ;--------------------------------------------------------
0045            585   ; overlayable items in internal ram 
0045            586   ;--------------------------------------------------------
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   _InitPinADC_PARM_2:
0000            592            ds 1
0001            593            rseg    R_OSEG
0001            594            rseg    R_OSEG
0001            595   ;--------------------------------------------------------
0001            596   ; indirectly addressable internal ram data
0001            597   ;--------------------------------------------------------
0000            598            rseg R_ISEG
0000            599   _buff:
0000            600            ds 20
0014            601   _msg:
0014            602            ds 20
0028            603   ;--------------------------------------------------------
0028            604   ; absolute internal ram data
0028            605   ;--------------------------------------------------------
0000            606            DSEG
0000            607   ;--------------------------------------------------------
0000            608   ; bit data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_BSEG
0000            611   ;--------------------------------------------------------
0000            612   ; paged external ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_PSEG
0000            615   ;--------------------------------------------------------
0000            616   ; external ram data
0000            617   ;--------------------------------------------------------
0000            618            rseg R_XSEG
0000            619   _ADCsteeringRatio_steeringFactor_1_143:
0000            620            ds 4
0004            621   _ADCsteeringRatio_wheel1Speed_1_143:
0004            622            ds 2
0006            623   _ADCsteeringRatio_wheel2Speed_1_143:
0006            624            ds 2
0008            625   _PrintNumber_buff_1_163:
0008            626            ds 33
0029            627   ;--------------------------------------------------------
0029            628   ; absolute external ram data
0029            629   ;--------------------------------------------------------
0000            630            XSEG
0000            631   ;--------------------------------------------------------
0000            632   ; external initialized ram data
0000            633   ;--------------------------------------------------------
0000            634            rseg R_IXSEG
0000            635            rseg R_HOME
0000            636            rseg R_GSINIT
0000            637            rseg R_CSEG
0000            638   ;--------------------------------------------------------
0000            639   ; Reset entry point and interrupt vectors
0000            640   ;--------------------------------------------------------
0000            641            CSEG at 0x0000
0000 020000     642            ljmp    _crt0
002B            643            CSEG at 0x002b
002B 020000     644            ljmp    _Timer2_ISR
008B            645            CSEG at 0x008b
008B 020000     646            ljmp    _Timer4_ISR
008E            647   ;--------------------------------------------------------
008E            648   ; global & static initialisations
008E            649   ;--------------------------------------------------------
0000            650            rseg R_HOME
0000            651            rseg R_GSINIT
0000            652            rseg R_GSINIT
0000            653   ;--------------------------------------------------------
0000            654   ; data variables initialization
0000            655   ;--------------------------------------------------------
0000            656            rseg R_DINIT
0000            657   ;        EFM8_JDY40_test.c:23: volatile unsigned int pwm_counter4=0;
0000 E4         658            clr     a
0001 F580       659            mov     _pwm_counter4,a
0003 F581       660            mov     (_pwm_counter4 + 1),a
0005            661   ;        EFM8_JDY40_test.c:24: volatile unsigned int pwm_duty4=65535; //(0?65535)
0005 7540FF     662            mov     _pwm_duty4,#0xFF
0008 7541FF     663            mov     (_pwm_duty4 + 1),#0xFF
000B            664   ;        EFM8_JDY40_test.c:29: volatile unsigned int pwm_counter2=0;
000B E4         665            clr     a
000C F500       666            mov     _pwm_counter2,a
000E F501       667            mov     (_pwm_counter2 + 1),a
0010            668   ;        EFM8_JDY40_test.c:30: volatile unsigned int pwm_duty2=65535; //(0?65535)
0010 75C0FF     669            mov     _pwm_duty2,#0xFF
0013 75C1FF     670            mov     (_pwm_duty2 + 1),#0xFF
0016            671   ;        EFM8_JDY40_test.c:31: volatile int direction=0;
0016 E4         672            clr     a
0017 F580       673            mov     _direction,a
0019 F581       674            mov     (_direction + 1),a
001B            675   ;        EFM8_JDY40_test.c:32: volatile int peggingsidnatu=0;
001B E4         676            clr     a
001C F540       677            mov     _peggingsidnatu,a
001E F541       678            mov     (_peggingsidnatu + 1),a
0020            679            ; The linker places a 'ret' at the end of segment R_DINIT.
0020            680   ;--------------------------------------------------------
0020            681   ; code
0020            682   ;--------------------------------------------------------
0000            683            rseg R_CSEG
0000            684   ;------------------------------------------------------------
0000            685   ;Allocation info for local variables in function '_c51_external_startup'
0000            686   ;------------------------------------------------------------
0000            687   ;------------------------------------------------------------
0000            688   ;        EFM8_JDY40_test.c:75: char _c51_external_startup (void)
0000            689   ;        -----------------------------------------
0000            690   ;         function _c51_external_startup
0000            691   ;        -----------------------------------------
0000            692   __c51_external_startup:
0000            693            using   0
0000            694   ;        EFM8_JDY40_test.c:78: SFRPAGE = 0x00;
0000 75A700     695            mov     _SFRPAGE,#0x00
0003            696   ;        EFM8_JDY40_test.c:79: WDTCN = 0xDE; //First key
0003 7597DE     697            mov     _WDTCN,#0xDE
0006            698   ;        EFM8_JDY40_test.c:80: WDTCN = 0xAD; //Second key
0006 7597AD     699            mov     _WDTCN,#0xAD
0009            700   ;        EFM8_JDY40_test.c:82: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     701            mov     _VDM0CN,#0x80
000C            702   ;        EFM8_JDY40_test.c:83: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     703            mov     _RSTSRC,#0x06
000F            704   ;        EFM8_JDY40_test.c:90: SFRPAGE = 0x10;
000F 75A710     705            mov     _SFRPAGE,#0x10
0012            706   ;        EFM8_JDY40_test.c:91: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     707            mov     _PFE0CN,#0x20
0015            708   ;        EFM8_JDY40_test.c:92: SFRPAGE = 0x00;
0015 75A700     709            mov     _SFRPAGE,#0x00
0018            710   ;        EFM8_JDY40_test.c:113: CLKSEL = 0x00;
0018 75A900     711            mov     _CLKSEL,#0x00
001B            712   ;        EFM8_JDY40_test.c:114: CLKSEL = 0x00;
001B 75A900     713            mov     _CLKSEL,#0x00
001E            714   ;        EFM8_JDY40_test.c:115: while ((CLKSEL & 0x80) == 0);
001E            715   L002001?:
001E E5A9       716            mov     a,_CLKSEL
0020 30E7E8     717            jnb     acc.7,L002001?
0023            718   ;        EFM8_JDY40_test.c:116: CLKSEL = 0x03;
0023 75A903     719            mov     _CLKSEL,#0x03
0026            720   ;        EFM8_JDY40_test.c:117: CLKSEL = 0x03;
0026 75A903     721            mov     _CLKSEL,#0x03
0029            722   ;        EFM8_JDY40_test.c:118: while ((CLKSEL & 0x80) == 0);
0029            723   L002004?:
0029 E5A9       724            mov     a,_CLKSEL
002B 30E768     725            jnb     acc.7,L002004?
002E            726   ;        EFM8_JDY40_test.c:123: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     727            orl     _P0MDOUT,#0x11
0031            728   ;        EFM8_JDY40_test.c:124: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     729            orl     _P2MDOUT,#0x01
0034            730   ;        EFM8_JDY40_test.c:125: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     731            mov     _XBR0,#0x01
0037            732   ;        EFM8_JDY40_test.c:126: XBR1     = 0X00;
0037 75E200     733            mov     _XBR1,#0x00
003A            734   ;        EFM8_JDY40_test.c:127: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     735            mov     _XBR2,#0x41
003D            736   ;        EFM8_JDY40_test.c:129: P3MDOUT |= 0b10000101;
003D 439C85     737            orl     _P3MDOUT,#0x85
0040            738   ;        EFM8_JDY40_test.c:130: XBR2     = 0x41; // existing line
0040 75E341     739            mov     _XBR2,#0x41
0043            740   ;        EFM8_JDY40_test.c:131: P3MDOUT |= 0b10000101;  // <== Add this
0043 439C85     741            orl     _P3MDOUT,#0x85
0046            742   ;        EFM8_JDY40_test.c:137: SCON0 = 0x10;
0046 759810     743            mov     _SCON0,#0x10
0049            744   ;        EFM8_JDY40_test.c:138: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     745            mov     _TH1,#0xE6
004C            746   ;        EFM8_JDY40_test.c:139: TL1 = TH1;      // Init Timer1
004C 858D8B     747            mov     _TL1,_TH1
004F            748   ;        EFM8_JDY40_test.c:140: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     749            anl     _TMOD,#0x0F
0052            750   ;        EFM8_JDY40_test.c:141: TMOD |=  0x20;                       
0052 438920     751            orl     _TMOD,#0x20
0055            752   ;        EFM8_JDY40_test.c:142: TR1 = 1; // START Timer1
0055 D28E       753            setb    _TR1
0057            754   ;        EFM8_JDY40_test.c:143: TI = 1;  // Indicate TX0 ready
0057 D299       755            setb    _TI
0059            756   ;        EFM8_JDY40_test.c:147: SFRPAGE=0x10;
0059 75A710     757            mov     _SFRPAGE,#0x10
005C            758   ;        EFM8_JDY40_test.c:148: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
005C 759800     759            mov     _TMR4CN0,#0x00
005F            760   ;        EFM8_JDY40_test.c:149: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
005F 43A601     761            orl     _CKCON1,#0x01
0062            762   ;        EFM8_JDY40_test.c:150: TMR4RL = TIMER4_RELOAD;
0062 75A2A8     763            mov     _TMR4RL,#0xA8
0065 75A3FD     764            mov     (_TMR4RL >> 8),#0xFD
0068            765   ;        EFM8_JDY40_test.c:151: TMR4=0xffff;   // Set to reload immediately
0068 75A4FF     766            mov     _TMR4,#0xFF
006B 75A5FF     767            mov     (_TMR4 >> 8),#0xFF
006E            768   ;        EFM8_JDY40_test.c:152: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
006E 43F304     769            orl     _EIE2,#0x04
0071            770   ;        EFM8_JDY40_test.c:153: TR4=1;
0071 D29A       771            setb    _TR4
0073            772   ;        EFM8_JDY40_test.c:154: EA=1;
0073 D2AF       773            setb    _EA
0075            774   ;        EFM8_JDY40_test.c:157: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0075 75C800     775            mov     _TMR2CN0,#0x00
0078            776   ;        EFM8_JDY40_test.c:158: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
0078 438E10     777            orl     _CKCON0,#0x10
007B            778   ;        EFM8_JDY40_test.c:159: TMR2RL=TIMER2_RELOAD; // Initialize reload value
007B 75CAA8     779            mov     _TMR2RL,#0xA8
007E 75CBFD     780            mov     (_TMR2RL >> 8),#0xFD
0081            781   ;        EFM8_JDY40_test.c:160: TMR2=0xffff;   // Set to reload immediately
0081 75CEFF     782            mov     _TMR2,#0xFF
0084 75CFFF     783            mov     (_TMR2 >> 8),#0xFF
0087            784   ;        EFM8_JDY40_test.c:161: ET2=1;         // Enable Timer2 interrupts
0087 D2AD       785            setb    _ET2
0089            786   ;        EFM8_JDY40_test.c:162: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0089 D2CA       787            setb    _TR2
008B            788   ;        EFM8_JDY40_test.c:163: SFRPAGE=0x00;
008B 75A700     789            mov     _SFRPAGE,#0x00
008E            790   ;        EFM8_JDY40_test.c:164: return 0;
008E 758200     791            mov     dpl,#0x00
0091 22         792            ret
0092            793   ;------------------------------------------------------------
0092            794   ;Allocation info for local variables in function 'Timer3us'
0092            795   ;------------------------------------------------------------
0092            796   ;us                        Allocated to registers r2 
0092            797   ;i                         Allocated to registers r3 
0092            798   ;------------------------------------------------------------
0092            799   ;        EFM8_JDY40_test.c:168: void Timer3us(unsigned char us)
0092            800   ;        -----------------------------------------
0092            801   ;         function Timer3us
0092            802   ;        -----------------------------------------
0092            803   _Timer3us:
0092 AA82       804            mov     r2,dpl
0094            805   ;        EFM8_JDY40_test.c:173: CKCON0|=0b_0100_0000;
0094 438E40     806            orl     _CKCON0,#0x40
0097            807   ;        EFM8_JDY40_test.c:175: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0097 7592B8     808            mov     _TMR3RL,#0xB8
009A 7593FF     809            mov     (_TMR3RL >> 8),#0xFF
009D            810   ;        EFM8_JDY40_test.c:176: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
009D 859294     811            mov     _TMR3,_TMR3RL
00A0 859395     812            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00A3            813   ;        EFM8_JDY40_test.c:178: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00A3 759104     814            mov     _TMR3CN0,#0x04
00A6            815   ;        EFM8_JDY40_test.c:179: for (i = 0; i < us; i++)       // Count <us> overflows
00A6 7B00       816            mov     r3,#0x00
00A8            817   L003004?:
00A8 C3         818            clr     c
00A9 EB         819            mov     a,r3
00AA 9A         820            subb    a,r2
00AB 5000       821            jnc     L003007?
00AD            822   ;        EFM8_JDY40_test.c:181: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00AD            823   L003001?:
00AD E591       824            mov     a,_TMR3CN0
00AF 30E768     825            jnb     acc.7,L003001?
00B2            826   ;        EFM8_JDY40_test.c:182: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00B2 53917F     827            anl     _TMR3CN0,#0x7F
00B5            828   ;        EFM8_JDY40_test.c:179: for (i = 0; i < us; i++)       // Count <us> overflows
00B5 0B         829            inc     r3
00B6 8000       830            sjmp    L003004?
00B8            831   L003007?:
00B8            832   ;        EFM8_JDY40_test.c:184: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00B8 759100     833            mov     _TMR3CN0,#0x00
00BB 22         834            ret
00BC            835   ;------------------------------------------------------------
00BC            836   ;Allocation info for local variables in function 'waitms'
00BC            837   ;------------------------------------------------------------
00BC            838   ;ms                        Allocated to registers r2 r3 
00BC            839   ;j                         Allocated to registers r4 r5 
00BC            840   ;k                         Allocated to registers r6 
00BC            841   ;------------------------------------------------------------
00BC            842   ;        EFM8_JDY40_test.c:187: void waitms (unsigned int ms)
00BC            843   ;        -----------------------------------------
00BC            844   ;         function waitms
00BC            845   ;        -----------------------------------------
00BC            846   _waitms:
00BC AA82       847            mov     r2,dpl
00BE AB83       848            mov     r3,dph
00C0            849   ;        EFM8_JDY40_test.c:191: for(j=0; j<ms; j++)
00C0 7C00       850            mov     r4,#0x00
00C2 7D00       851            mov     r5,#0x00
00C4            852   L004005?:
00C4 C3         853            clr     c
00C5 EC         854            mov     a,r4
00C6 9A         855            subb    a,r2
00C7 ED         856            mov     a,r5
00C8 9B         857            subb    a,r3
00C9 5000       858            jnc     L004009?
00CB            859   ;        EFM8_JDY40_test.c:192: for (k=0; k<4; k++) Timer3us(250);
00CB 7E00       860            mov     r6,#0x00
00CD            861   L004001?:
00CD BE04A8     862            cjne    r6,#0x04,L004018?
00D0            863   L004018?:
00D0 5000       864            jnc     L004007?
00D2 7582FA     865            mov     dpl,#0xFA
00D5 C002       866            push    ar2
00D7 C003       867            push    ar3
00D9 C004       868            push    ar4
00DB C005       869            push    ar5
00DD C006       870            push    ar6
00DF 120000     871            lcall   _Timer3us
00E2 D006       872            pop     ar6
00E4 D005       873            pop     ar5
00E6 D004       874            pop     ar4
00E8 D003       875            pop     ar3
00EA D002       876            pop     ar2
00EC 0E         877            inc     r6
00ED 8000       878            sjmp    L004001?
00EF            879   L004007?:
00EF            880   ;        EFM8_JDY40_test.c:191: for(j=0; j<ms; j++)
00EF 0C         881            inc     r4
00F0 BC00E8     882            cjne    r4,#0x00,L004005?
00F3 0D         883            inc     r5
00F4 8000       884            sjmp    L004005?
00F6            885   L004009?:
00F6 22         886            ret
00F7            887   ;------------------------------------------------------------
00F7            888   ;Allocation info for local variables in function 'UART1_Init'
00F7            889   ;------------------------------------------------------------
00F7            890   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00F7            891   ;------------------------------------------------------------
00F7            892   ;        EFM8_JDY40_test.c:195: void UART1_Init (unsigned long baudrate)
00F7            893   ;        -----------------------------------------
00F7            894   ;         function UART1_Init
00F7            895   ;        -----------------------------------------
00F7            896   _UART1_Init:
00F7 AA82       897            mov     r2,dpl
00F9 AB83       898            mov     r3,dph
00FB ACF0       899            mov     r4,b
00FD FD         900            mov     r5,a
00FE            901   ;        EFM8_JDY40_test.c:197: SFRPAGE = 0x20;
00FE 75A720     902            mov     _SFRPAGE,#0x20
0101            903   ;        EFM8_JDY40_test.c:198: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0101 75930C     904            mov     _SMOD1,#0x0C
0104            905   ;        EFM8_JDY40_test.c:199: SCON1 = 0x10;
0104 75C810     906            mov     _SCON1,#0x10
0107            907   ;        EFM8_JDY40_test.c:200: SBCON1 =0x00;   // disable baud rate generator
0107 759400     908            mov     _SBCON1,#0x00
010A            909   ;        EFM8_JDY40_test.c:201: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
010A 8A00       910            mov     __divulong_PARM_2,r2
010C 8B01       911            mov     (__divulong_PARM_2 + 1),r3
010E 8C02       912            mov     (__divulong_PARM_2 + 2),r4
0110 8D03       913            mov     (__divulong_PARM_2 + 3),r5
0112 90A200     914            mov     dptr,#0xA200
0115 75F04A     915            mov     b,#0x4A
0118 7404       916            mov     a,#0x04
011A 120000     917            lcall   __divulong
011D AA82       918            mov     r2,dpl
011F AB83       919            mov     r3,dph
0121 ACF0       920            mov     r4,b
0123 FD         921            mov     r5,a
0124 750018     922            mov     __divulong_PARM_2,#0x18
0127 E4         923            clr     a
0128 F501       924            mov     (__divulong_PARM_2 + 1),a
012A F502       925            mov     (__divulong_PARM_2 + 2),a
012C F503       926            mov     (__divulong_PARM_2 + 3),a
012E 8A82       927            mov     dpl,r2
0130 8B83       928            mov     dph,r3
0132 8CF0       929            mov     b,r4
0134 ED         930            mov     a,r5
0135 120000     931            lcall   __divulong
0138 AA82       932            mov     r2,dpl
013A AB83       933            mov     r3,dph
013C ACF0       934            mov     r4,b
013E FD         935            mov     r5,a
013F E4         936            clr     a
0140 C3         937            clr     c
0141 9A         938            subb    a,r2
0142 FA         939            mov     r2,a
0143 E4         940            clr     a
0144 9B         941            subb    a,r3
0145 FB         942            mov     r3,a
0146 7401       943            mov     a,#0x01
0148 9C         944            subb    a,r4
0149 E4         945            clr     a
014A 9D         946            subb    a,r5
014B 8A95       947            mov     _SBRL1,r2
014D 8B96       948            mov     (_SBRL1 >> 8),r3
014F            949   ;        EFM8_JDY40_test.c:202: TI1 = 1; // indicate ready for TX
014F D2C9       950            setb    _TI1
0151            951   ;        EFM8_JDY40_test.c:203: SBCON1 |= 0x40;   // enable baud rate generator
0151 439440     952            orl     _SBCON1,#0x40
0154            953   ;        EFM8_JDY40_test.c:204: SFRPAGE = 0x00;
0154 75A700     954            mov     _SFRPAGE,#0x00
0157 22         955            ret
0158            956   ;------------------------------------------------------------
0158            957   ;Allocation info for local variables in function 'putchar1'
0158            958   ;------------------------------------------------------------
0158            959   ;c                         Allocated to registers r2 
0158            960   ;------------------------------------------------------------
0158            961   ;        EFM8_JDY40_test.c:207: void putchar1 (char c) 
0158            962   ;        -----------------------------------------
0158            963   ;         function putchar1
0158            964   ;        -----------------------------------------
0158            965   _putchar1:
0158 AA82       966            mov     r2,dpl
015A            967   ;        EFM8_JDY40_test.c:209: SFRPAGE = 0x20;
015A 75A720     968            mov     _SFRPAGE,#0x20
015D            969   ;        EFM8_JDY40_test.c:210: while (!TI1);
015D            970   L006001?:
015D            971   ;        EFM8_JDY40_test.c:211: TI1=0;
015D 10C938     972            jbc     _TI1,L006008?
0160 8000       973            sjmp    L006001?
0162            974   L006008?:
0162            975   ;        EFM8_JDY40_test.c:212: SBUF1 = c;
0162 8A92       976            mov     _SBUF1,r2
0164            977   ;        EFM8_JDY40_test.c:213: SFRPAGE = 0x00;
0164 75A700     978            mov     _SFRPAGE,#0x00
0167 22         979            ret
0168            980   ;------------------------------------------------------------
0168            981   ;Allocation info for local variables in function 'sendstr1'
0168            982   ;------------------------------------------------------------
0168            983   ;s                         Allocated to registers r2 r3 r4 
0168            984   ;------------------------------------------------------------
0168            985   ;        EFM8_JDY40_test.c:216: void sendstr1 (char * s)
0168            986   ;        -----------------------------------------
0168            987   ;         function sendstr1
0168            988   ;        -----------------------------------------
0168            989   _sendstr1:
0168 AA82       990            mov     r2,dpl
016A AB83       991            mov     r3,dph
016C ACF0       992            mov     r4,b
016E            993   ;        EFM8_JDY40_test.c:218: while(*s)
016E            994   L007001?:
016E 8A82       995            mov     dpl,r2
0170 8B83       996            mov     dph,r3
0172 8CF0       997            mov     b,r4
0174 120000     998            lcall   __gptrget
0177 FD         999            mov     r5,a
0178 6000      1000            jz      L007004?
017A           1001   ;        EFM8_JDY40_test.c:220: putchar1(*s);
017A 8D82      1002            mov     dpl,r5
017C C002      1003            push    ar2
017E C003      1004            push    ar3
0180 C004      1005            push    ar4
0182 120000    1006            lcall   _putchar1
0185 D004      1007            pop     ar4
0187 D003      1008            pop     ar3
0189 D002      1009            pop     ar2
018B           1010   ;        EFM8_JDY40_test.c:221: s++;     
018B 0A        1011            inc     r2
018C BA0078    1012            cjne    r2,#0x00,L007001?
018F 0B        1013            inc     r3
0190 8000      1014            sjmp    L007001?
0192           1015   L007004?:
0192 22        1016            ret
0193           1017   ;------------------------------------------------------------
0193           1018   ;Allocation info for local variables in function 'getchar1'
0193           1019   ;------------------------------------------------------------
0193           1020   ;c                         Allocated to registers 
0193           1021   ;------------------------------------------------------------
0193           1022   ;        EFM8_JDY40_test.c:225: char getchar1 (void)
0193           1023   ;        -----------------------------------------
0193           1024   ;         function getchar1
0193           1025   ;        -----------------------------------------
0193           1026   _getchar1:
0193           1027   ;        EFM8_JDY40_test.c:228: SFRPAGE = 0x20;
0193 75A720    1028            mov     _SFRPAGE,#0x20
0196           1029   ;        EFM8_JDY40_test.c:229: while (!RI1);
0196           1030   L008001?:
0196           1031   ;        EFM8_JDY40_test.c:230: RI1=0;
0196 10C878    1032            jbc     _RI1,L008008?
0199 8000      1033            sjmp    L008001?
019B           1034   L008008?:
019B           1035   ;        EFM8_JDY40_test.c:232: SCON1&=0b_0011_1111;
019B 53C83F    1036            anl     _SCON1,#0x3F
019E           1037   ;        EFM8_JDY40_test.c:233: c = SBUF1;
019E 859282    1038            mov     dpl,_SBUF1
01A1           1039   ;        EFM8_JDY40_test.c:234: SFRPAGE = 0x00;
01A1 75A700    1040            mov     _SFRPAGE,#0x00
01A4           1041   ;        EFM8_JDY40_test.c:235: return (c);
01A4 22        1042            ret
01A5           1043   ;------------------------------------------------------------
01A5           1044   ;Allocation info for local variables in function 'getchar1_with_timeout'
01A5           1045   ;------------------------------------------------------------
01A5           1046   ;c                         Allocated to registers 
01A5           1047   ;timeout                   Allocated to registers r2 r3 
01A5           1048   ;------------------------------------------------------------
01A5           1049   ;        EFM8_JDY40_test.c:238: char getchar1_with_timeout (void)
01A5           1050   ;        -----------------------------------------
01A5           1051   ;         function getchar1_with_timeout
01A5           1052   ;        -----------------------------------------
01A5           1053   _getchar1_with_timeout:
01A5           1054   ;        EFM8_JDY40_test.c:242: SFRPAGE = 0x20;
01A5 75A720    1055            mov     _SFRPAGE,#0x20
01A8           1056   ;        EFM8_JDY40_test.c:244: while (!RI1)
01A8 7A00      1057            mov     r2,#0x00
01AA 7B00      1058            mov     r3,#0x00
01AC           1059   L009003?:
01AC 20C8F8    1060            jb      _RI1,L009005?
01AF           1061   ;        EFM8_JDY40_test.c:246: SFRPAGE = 0x00;
01AF 75A700    1062            mov     _SFRPAGE,#0x00
01B2           1063   ;        EFM8_JDY40_test.c:247: Timer3us(20);
01B2 758214    1064            mov     dpl,#0x14
01B5 C002      1065            push    ar2
01B7 C003      1066            push    ar3
01B9 120000    1067            lcall   _Timer3us
01BC D003      1068            pop     ar3
01BE D002      1069            pop     ar2
01C0           1070   ;        EFM8_JDY40_test.c:248: SFRPAGE = 0x20;
01C0 75A720    1071            mov     _SFRPAGE,#0x20
01C3           1072   ;        EFM8_JDY40_test.c:249: timeout++;
01C3 0A        1073            inc     r2
01C4 BA0038    1074            cjne    r2,#0x00,L009012?
01C7 0B        1075            inc     r3
01C8           1076   L009012?:
01C8           1077   ;        EFM8_JDY40_test.c:250: if(timeout==25000)
01C8 BAA8B8    1078            cjne    r2,#0xA8,L009003?
01CB BB61B8    1079            cjne    r3,#0x61,L009003?
01CE           1080   ;        EFM8_JDY40_test.c:252: SFRPAGE = 0x00;
01CE 75A700    1081            mov     _SFRPAGE,#0x00
01D1           1082   ;        EFM8_JDY40_test.c:253: return ('\n'); // Timeout after half second
01D1 75820A    1083            mov     dpl,#0x0A
01D4 22        1084            ret
01D5           1085   L009005?:
01D5           1086   ;        EFM8_JDY40_test.c:256: RI1=0;
01D5 C2C8      1087            clr     _RI1
01D7           1088   ;        EFM8_JDY40_test.c:258: SCON1&=0b_0011_1111;
01D7 53C83F    1089            anl     _SCON1,#0x3F
01DA           1090   ;        EFM8_JDY40_test.c:259: c = SBUF1;
01DA 859282    1091            mov     dpl,_SBUF1
01DD           1092   ;        EFM8_JDY40_test.c:260: SFRPAGE = 0x00;
01DD 75A700    1093            mov     _SFRPAGE,#0x00
01E0           1094   ;        EFM8_JDY40_test.c:261: return (c);
01E0 22        1095            ret
01E1           1096   ;------------------------------------------------------------
01E1           1097   ;Allocation info for local variables in function 'getstr1'
01E1           1098   ;------------------------------------------------------------
01E1           1099   ;n                         Allocated with name '_getstr1_PARM_2'
01E1           1100   ;s                         Allocated to registers r2 r3 r4 
01E1           1101   ;c                         Allocated to registers r1 
01E1           1102   ;cnt                       Allocated to registers r5 
01E1           1103   ;------------------------------------------------------------
01E1           1104   ;        EFM8_JDY40_test.c:264: void getstr1 (char * s, unsigned char n)
01E1           1105   ;        -----------------------------------------
01E1           1106   ;         function getstr1
01E1           1107   ;        -----------------------------------------
01E1           1108   _getstr1:
01E1 AA82      1109            mov     r2,dpl
01E3 AB83      1110            mov     r3,dph
01E5 ACF0      1111            mov     r4,b
01E7           1112   ;        EFM8_JDY40_test.c:270: while(1)
01E7 7D00      1113            mov     r5,#0x00
01E9 8A06      1114            mov     ar6,r2
01EB 8B07      1115            mov     ar7,r3
01ED 8C00      1116            mov     ar0,r4
01EF           1117   L010007?:
01EF           1118   ;        EFM8_JDY40_test.c:272: c=getchar1_with_timeout();
01EF C002      1119            push    ar2
01F1 C003      1120            push    ar3
01F3 C004      1121            push    ar4
01F5 C005      1122            push    ar5
01F7 C006      1123            push    ar6
01F9 C007      1124            push    ar7
01FB C000      1125            push    ar0
01FD 120000    1126            lcall   _getchar1_with_timeout
0200 A982      1127            mov     r1,dpl
0202 D000      1128            pop     ar0
0204 D007      1129            pop     ar7
0206 D006      1130            pop     ar6
0208 D005      1131            pop     ar5
020A D004      1132            pop     ar4
020C D003      1133            pop     ar3
020E D002      1134            pop     ar2
0210           1135   ;        EFM8_JDY40_test.c:273: if(c=='\n')
0210 B90AB8    1136            cjne    r1,#0x0A,L010002?
0213           1137   ;        EFM8_JDY40_test.c:275: *s=0;
0213 8A82      1138            mov     dpl,r2
0215 8B83      1139            mov     dph,r3
0217 8CF0      1140            mov     b,r4
0219 E4        1141            clr     a
021A           1142   ;        EFM8_JDY40_test.c:276: return;
021A 020000    1143            ljmp    __gptrput
021D           1144   L010002?:
021D           1145   ;        EFM8_JDY40_test.c:279: if (cnt<n)
021D C3        1146            clr     c
021E ED        1147            mov     a,r5
021F 95C0      1148            subb    a,_getstr1_PARM_2
0221 5000      1149            jnc     L010004?
0223           1150   ;        EFM8_JDY40_test.c:281: cnt++;
0223 0D        1151            inc     r5
0224           1152   ;        EFM8_JDY40_test.c:282: *s=c;
0224 8E82      1153            mov     dpl,r6
0226 8F83      1154            mov     dph,r7
0228 88F0      1155            mov     b,r0
022A E9        1156            mov     a,r1
022B 120000    1157            lcall   __gptrput
022E A3        1158            inc     dptr
022F AE82      1159            mov     r6,dpl
0231 AF83      1160            mov     r7,dph
0233           1161   ;        EFM8_JDY40_test.c:283: s++;
0233 8E02      1162            mov     ar2,r6
0235 8F03      1163            mov     ar3,r7
0237 8804      1164            mov     ar4,r0
0239 8000      1165            sjmp    L010007?
023B           1166   L010004?:
023B           1167   ;        EFM8_JDY40_test.c:287: *s=0;
023B 8A82      1168            mov     dpl,r2
023D 8B83      1169            mov     dph,r3
023F 8CF0      1170            mov     b,r4
0241 E4        1171            clr     a
0242           1172   ;        EFM8_JDY40_test.c:288: return;
0242 020000    1173            ljmp    __gptrput
0245           1174   ;------------------------------------------------------------
0245           1175   ;Allocation info for local variables in function 'RXU1'
0245           1176   ;------------------------------------------------------------
0245           1177   ;------------------------------------------------------------
0245           1178   ;        EFM8_JDY40_test.c:294: bit RXU1 (void)
0245           1179   ;        -----------------------------------------
0245           1180   ;         function RXU1
0245           1181   ;        -----------------------------------------
0245           1182   _RXU1:
0245           1183   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x20;
0245 75A720    1184            mov     _SFRPAGE,#0x20
0248           1185   ;        EFM8_JDY40_test.c:298: mybit=RI1;
0248 A2C8      1186            mov     c,_RI1
024A           1187   ;        EFM8_JDY40_test.c:299: SFRPAGE = 0x00;
024A 75A700    1188            mov     _SFRPAGE,#0x00
024D           1189   ;        EFM8_JDY40_test.c:300: return mybit;
024D 22        1190            ret
024E           1191   ;------------------------------------------------------------
024E           1192   ;Allocation info for local variables in function 'waitms_or_RI1'
024E           1193   ;------------------------------------------------------------
024E           1194   ;ms                        Allocated to registers r2 r3 
024E           1195   ;j                         Allocated to registers r4 r5 
024E           1196   ;k                         Allocated to registers r6 
024E           1197   ;------------------------------------------------------------
024E           1198   ;        EFM8_JDY40_test.c:303: void waitms_or_RI1 (unsigned int ms)
024E           1199   ;        -----------------------------------------
024E           1200   ;         function waitms_or_RI1
024E           1201   ;        -----------------------------------------
024E           1202   _waitms_or_RI1:
024E AA82      1203            mov     r2,dpl
0250 AB83      1204            mov     r3,dph
0252           1205   ;        EFM8_JDY40_test.c:307: for(j=0; j<ms; j++)
0252 7C00      1206            mov     r4,#0x00
0254 7D00      1207            mov     r5,#0x00
0256           1208   L012007?:
0256 C3        1209            clr     c
0257 EC        1210            mov     a,r4
0258 9A        1211            subb    a,r2
0259 ED        1212            mov     a,r5
025A 9B        1213            subb    a,r3
025B 5000      1214            jnc     L012011?
025D           1215   ;        EFM8_JDY40_test.c:309: for (k=0; k<4; k++)
025D 7E00      1216            mov     r6,#0x00
025F           1217   L012003?:
025F BE0438    1218            cjne    r6,#0x04,L012019?
0262           1219   L012019?:
0262 5000      1220            jnc     L012009?
0264           1221   ;        EFM8_JDY40_test.c:311: if(RXU1()) return;
0264 C002      1222            push    ar2
0266 C003      1223            push    ar3
0268 C004      1224            push    ar4
026A C005      1225            push    ar5
026C C006      1226            push    ar6
026E 120000    1227            lcall   _RXU1
0271 E4        1228            clr     a
0272 33        1229            rlc     a
0273 D006      1230            pop     ar6
0275 D005      1231            pop     ar5
0277 D004      1232            pop     ar4
0279 D003      1233            pop     ar3
027B D002      1234            pop     ar2
027D 6000      1235            jz      L012002?
027F 22        1236            ret
0280           1237   L012002?:
0280           1238   ;        EFM8_JDY40_test.c:312: Timer3us(250);
0280 7582FA    1239            mov     dpl,#0xFA
0283 C002      1240            push    ar2
0285 C003      1241            push    ar3
0287 C004      1242            push    ar4
0289 C005      1243            push    ar5
028B C006      1244            push    ar6
028D 120000    1245            lcall   _Timer3us
0290 D006      1246            pop     ar6
0292 D005      1247            pop     ar5
0294 D004      1248            pop     ar4
0296 D003      1249            pop     ar3
0298 D002      1250            pop     ar2
029A           1251   ;        EFM8_JDY40_test.c:309: for (k=0; k<4; k++)
029A 0E        1252            inc     r6
029B 8000      1253            sjmp    L012003?
029D           1254   L012009?:
029D           1255   ;        EFM8_JDY40_test.c:307: for(j=0; j<ms; j++)
029D 0C        1256            inc     r4
029E BC0078    1257            cjne    r4,#0x00,L012007?
02A1 0D        1258            inc     r5
02A2 8000      1259            sjmp    L012007?
02A4           1260   L012011?:
02A4 22        1261            ret
02A5           1262   ;------------------------------------------------------------
02A5           1263   ;Allocation info for local variables in function 'SendATCommand'
02A5           1264   ;------------------------------------------------------------
02A5           1265   ;s                         Allocated to registers r2 r3 r4 
02A5           1266   ;------------------------------------------------------------
02A5           1267   ;        EFM8_JDY40_test.c:317: void SendATCommand (char * s)
02A5           1268   ;        -----------------------------------------
02A5           1269   ;         function SendATCommand
02A5           1270   ;        -----------------------------------------
02A5           1271   _SendATCommand:
02A5 AA82      1272            mov     r2,dpl
02A7 AB83      1273            mov     r3,dph
02A9 ACF0      1274            mov     r4,b
02AB           1275   ;        EFM8_JDY40_test.c:319: printf("Command: %s", s);
02AB C002      1276            push    ar2
02AD C003      1277            push    ar3
02AF C004      1278            push    ar4
02B1 C002      1279            push    ar2
02B3 C003      1280            push    ar3
02B5 C004      1281            push    ar4
02B7 74F8      1282            mov     a,#__str_0
02B9 C0E0      1283            push    acc
02BB 74CC      1284            mov     a,#(__str_0 >> 8)
02BD C0E0      1285            push    acc
02BF 7480      1286            mov     a,#0x80
02C1 C0E0      1287            push    acc
02C3 120000    1288            lcall   _printf
02C6 E581      1289            mov     a,sp
02C8 24FA      1290            add     a,#0xfa
02CA F581      1291            mov     sp,a
02CC           1292   ;        EFM8_JDY40_test.c:320: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02CC C2A0      1293            clr     _P2_0
02CE           1294   ;        EFM8_JDY40_test.c:321: waitms(5);
02CE 900005    1295            mov     dptr,#0x0005
02D1 120000    1296            lcall   _waitms
02D4 D004      1297            pop     ar4
02D6 D003      1298            pop     ar3
02D8 D002      1299            pop     ar2
02DA           1300   ;        EFM8_JDY40_test.c:322: sendstr1(s);
02DA 8A82      1301            mov     dpl,r2
02DC 8B83      1302            mov     dph,r3
02DE 8CF0      1303            mov     b,r4
02E0 120000    1304            lcall   _sendstr1
02E3           1305   ;        EFM8_JDY40_test.c:323: getstr1(buff, sizeof(buff)-1);
02E3 75C013    1306            mov     _getstr1_PARM_2,#0x13
02E6 904D50    1307            mov     dptr,#_buff
02E9 75F040    1308            mov     b,#0x40
02EC 120000    1309            lcall   _getstr1
02EF           1310   ;        EFM8_JDY40_test.c:324: waitms(10);
02EF 90000A    1311            mov     dptr,#0x000A
02F2 120000    1312            lcall   _waitms
02F5           1313   ;        EFM8_JDY40_test.c:325: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F5 D2A0      1314            setb    _P2_0
02F7           1315   ;        EFM8_JDY40_test.c:326: printf("Response: %s\r\n", buff);
02F7 7450      1316            mov     a,#_buff
02F9 C0E0      1317            push    acc
02FB 744D      1318            mov     a,#(_buff >> 8)
02FD C0E0      1319            push    acc
02FF 7440      1320            mov     a,#0x40
0301 C0E0      1321            push    acc
0303 74B8      1322            mov     a,#__str_1
0305 C0E0      1323            push    acc
0307 74CD      1324            mov     a,#(__str_1 >> 8)
0309 C0E0      1325            push    acc
030B 7480      1326            mov     a,#0x80
030D C0E0      1327            push    acc
030F 120000    1328            lcall   _printf
0312 E581      1329            mov     a,sp
0314 24FA      1330            add     a,#0xfa
0316 F581      1331            mov     sp,a
0318 22        1332            ret
0319           1333   ;------------------------------------------------------------
0319           1334   ;Allocation info for local variables in function 'ReceptionOff'
0319           1335   ;------------------------------------------------------------
0319           1336   ;------------------------------------------------------------
0319           1337   ;        EFM8_JDY40_test.c:329: void ReceptionOff (void)
0319           1338   ;        -----------------------------------------
0319           1339   ;         function ReceptionOff
0319           1340   ;        -----------------------------------------
0319           1341   _ReceptionOff:
0319           1342   ;        EFM8_JDY40_test.c:331: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0319 C2A0      1343            clr     _P2_0
031B           1344   ;        EFM8_JDY40_test.c:332: waitms(10);
031B 90000A    1345            mov     dptr,#0x000A
031E 120000    1346            lcall   _waitms
0321           1347   ;        EFM8_JDY40_test.c:333: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0321 90CDF8    1348            mov     dptr,#__str_2
0324 75F080    1349            mov     b,#0x80
0327 120000    1350            lcall   _sendstr1
032A           1351   ;        EFM8_JDY40_test.c:334: waitms(10);
032A 90000A    1352            mov     dptr,#0x000A
032D 120000    1353            lcall   _waitms
0330           1354   ;        EFM8_JDY40_test.c:336: SCON1&=0b_0011_1111;
0330 53C83F    1355            anl     _SCON1,#0x3F
0333           1356   ;        EFM8_JDY40_test.c:337: P2_0=1; // 'set' pin to 1 is normal operation mode.
0333 D2A0      1357            setb    _P2_0
0335 22        1358            ret
0336           1359   ;------------------------------------------------------------
0336           1360   ;Allocation info for local variables in function 'TIMER0_Init'
0336           1361   ;------------------------------------------------------------
0336           1362   ;------------------------------------------------------------
0336           1363   ;        EFM8_JDY40_test.c:341: void TIMER0_Init(void)
0336           1364   ;        -----------------------------------------
0336           1365   ;         function TIMER0_Init
0336           1366   ;        -----------------------------------------
0336           1367   _TIMER0_Init:
0336           1368   ;        EFM8_JDY40_test.c:343: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0336 5389F0    1369            anl     _TMOD,#0xF0
0339           1370   ;        EFM8_JDY40_test.c:344: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0339 438901    1371            orl     _TMOD,#0x01
033C           1372   ;        EFM8_JDY40_test.c:345: TR0=0; // Stop Timer/Counter 0
033C C28C      1373            clr     _TR0
033E 22        1374            ret
033F           1375   ;------------------------------------------------------------
033F           1376   ;Allocation info for local variables in function 'InitADC'
033F           1377   ;------------------------------------------------------------
033F           1378   ;------------------------------------------------------------
033F           1379   ;        EFM8_JDY40_test.c:349: void InitADC (void)
033F           1380   ;        -----------------------------------------
033F           1381   ;         function InitADC
033F           1382   ;        -----------------------------------------
033F           1383   _InitADC:
033F           1384   ;        EFM8_JDY40_test.c:351: SFRPAGE = 0x00;
033F 75A700    1385            mov     _SFRPAGE,#0x00
0342           1386   ;        EFM8_JDY40_test.c:352: ADEN=0; // Disable ADC
0342 C2EF      1387            clr     _ADEN
0344           1388   ;        EFM8_JDY40_test.c:357: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0344 75B280    1389            mov     _ADC0CN1,#0x80
0347           1390   ;        EFM8_JDY40_test.c:361: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0347 75BC20    1391            mov     _ADC0CF0,#0x20
034A           1392   ;        EFM8_JDY40_test.c:365: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
034A 75B91E    1393            mov     _ADC0CF1,#0x1E
034D           1394   ;        EFM8_JDY40_test.c:374: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
034D 75E800    1395            mov     _ADC0CN0,#0x00
0350           1396   ;        EFM8_JDY40_test.c:379: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0350 75DF3F    1397            mov     _ADC0CF2,#0x3F
0353           1398   ;        EFM8_JDY40_test.c:383: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0353 75B300    1399            mov     _ADC0CN2,#0x00
0356           1400   ;        EFM8_JDY40_test.c:385: ADEN=1; // Enable ADC
0356 D2EF      1401            setb    _ADEN
0358 22        1402            ret
0359           1403   ;------------------------------------------------------------
0359           1404   ;Allocation info for local variables in function 'InitPinADC'
0359           1405   ;------------------------------------------------------------
0359           1406   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0359           1407   ;portno                    Allocated to registers r2 
0359           1408   ;mask                      Allocated to registers r3 
0359           1409   ;------------------------------------------------------------
0359           1410   ;        EFM8_JDY40_test.c:388: void InitPinADC (unsigned char portno, unsigned char pinno)
0359           1411   ;        -----------------------------------------
0359           1412   ;         function InitPinADC
0359           1413   ;        -----------------------------------------
0359           1414   _InitPinADC:
0359 AA82      1415            mov     r2,dpl
035B           1416   ;        EFM8_JDY40_test.c:392: mask=1<<pinno;
035B 8560F0    1417            mov     b,_InitPinADC_PARM_2
035E 05F0      1418            inc     b
0360 7401      1419            mov     a,#0x01
0362 8000      1420            sjmp    L017013?
0364           1421   L017011?:
0364 25E0      1422            add     a,acc
0366           1423   L017013?:
0366 D5F078    1424            djnz    b,L017011?
0369 FB        1425            mov     r3,a
036A           1426   ;        EFM8_JDY40_test.c:394: SFRPAGE = 0x20;
036A 75A720    1427            mov     _SFRPAGE,#0x20
036D           1428   ;        EFM8_JDY40_test.c:395: switch (portno)
036D BA00B8    1429            cjne    r2,#0x00,L017014?
0370 8000      1430            sjmp    L017001?
0372           1431   L017014?:
0372 BA0138    1432            cjne    r2,#0x01,L017015?
0375 8000      1433            sjmp    L017002?
0377           1434   L017015?:
0377           1435   ;        EFM8_JDY40_test.c:397: case 0:
0377 BA02B8    1436            cjne    r2,#0x02,L017005?
037A 8000      1437            sjmp    L017003?
037C           1438   L017001?:
037C           1439   ;        EFM8_JDY40_test.c:398: P0MDIN &= (~mask); // Set pin as analog input
037C EB        1440            mov     a,r3
037D F4        1441            cpl     a
037E FA        1442            mov     r2,a
037F 52F1      1443            anl     _P0MDIN,a
0381           1444   ;        EFM8_JDY40_test.c:399: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0381 EB        1445            mov     a,r3
0382 42D4      1446            orl     _P0SKIP,a
0384           1447   ;        EFM8_JDY40_test.c:400: break;
0384           1448   ;        EFM8_JDY40_test.c:401: case 1:
0384 8000      1449            sjmp    L017005?
0386           1450   L017002?:
0386           1451   ;        EFM8_JDY40_test.c:402: P1MDIN &= (~mask); // Set pin as analog input
0386 EB        1452            mov     a,r3
0387 F4        1453            cpl     a
0388 FA        1454            mov     r2,a
0389 52F2      1455            anl     _P1MDIN,a
038B           1456   ;        EFM8_JDY40_test.c:403: P1SKIP |= mask; // Skip Crossbar decoding for this pin
038B EB        1457            mov     a,r3
038C 42D5      1458            orl     _P1SKIP,a
038E           1459   ;        EFM8_JDY40_test.c:404: break;
038E           1460   ;        EFM8_JDY40_test.c:405: case 2:
038E 8000      1461            sjmp    L017005?
0390           1462   L017003?:
0390           1463   ;        EFM8_JDY40_test.c:406: P2MDIN &= (~mask); // Set pin as analog input
0390 EB        1464            mov     a,r3
0391 F4        1465            cpl     a
0392 FA        1466            mov     r2,a
0393 52F3      1467            anl     _P2MDIN,a
0395           1468   ;        EFM8_JDY40_test.c:407: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0395 EB        1469            mov     a,r3
0396 42CC      1470            orl     _P2SKIP,a
0398           1471   ;        EFM8_JDY40_test.c:411: }
0398           1472   L017005?:
0398           1473   ;        EFM8_JDY40_test.c:412: SFRPAGE = 0x00;
0398 75A700    1474            mov     _SFRPAGE,#0x00
039B 22        1475            ret
039C           1476   ;------------------------------------------------------------
039C           1477   ;Allocation info for local variables in function 'ADC_at_Pin'
039C           1478   ;------------------------------------------------------------
039C           1479   ;pin                       Allocated to registers 
039C           1480   ;------------------------------------------------------------
039C           1481   ;        EFM8_JDY40_test.c:415: unsigned int ADC_at_Pin(unsigned char pin)
039C           1482   ;        -----------------------------------------
039C           1483   ;         function ADC_at_Pin
039C           1484   ;        -----------------------------------------
039C           1485   _ADC_at_Pin:
039C 8582BB    1486            mov     _ADC0MX,dpl
039F           1487   ;        EFM8_JDY40_test.c:418: ADINT = 0;
039F C2ED      1488            clr     _ADINT
03A1           1489   ;        EFM8_JDY40_test.c:419: ADBUSY = 1;     // Convert voltage at the pin
03A1 D2EC      1490            setb    _ADBUSY
03A3           1491   ;        EFM8_JDY40_test.c:420: while (!ADINT); // Wait for conversion to complete
03A3           1492   L018001?:
03A3 30ED40    1493            jnb     _ADINT,L018001?
03A6           1494   ;        EFM8_JDY40_test.c:421: return (ADC0);
03A6 85BD82    1495            mov     dpl,_ADC0
03A9 85BE83    1496            mov     dph,(_ADC0 >> 8)
03AC 22        1497            ret
03AD           1498   ;------------------------------------------------------------
03AD           1499   ;Allocation info for local variables in function 'Volts_at_Pin'
03AD           1500   ;------------------------------------------------------------
03AD           1501   ;pin                       Allocated to registers r2 
03AD           1502   ;------------------------------------------------------------
03AD           1503   ;        EFM8_JDY40_test.c:424: float Volts_at_Pin(unsigned char pin)
03AD           1504   ;        -----------------------------------------
03AD           1505   ;         function Volts_at_Pin
03AD           1506   ;        -----------------------------------------
03AD           1507   _Volts_at_Pin:
03AD           1508   ;        EFM8_JDY40_test.c:426: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
03AD 120000    1509            lcall   _ADC_at_Pin
03B0 120000    1510            lcall   ___uint2fs
03B3 AA82      1511            mov     r2,dpl
03B5 AB83      1512            mov     r3,dph
03B7 ACF0      1513            mov     r4,b
03B9 FD        1514            mov     r5,a
03BA C002      1515            push    ar2
03BC C003      1516            push    ar3
03BE C004      1517            push    ar4
03C0 C005      1518            push    ar5
03C2 906C8B    1519            mov     dptr,#0x6C8B
03C5 75F053    1520            mov     b,#0x53
03C8 7440      1521            mov     a,#0x40
03CA 120000    1522            lcall   ___fsmul
03CD AA82      1523            mov     r2,dpl
03CF AB83      1524            mov     r3,dph
03D1 ACF0      1525            mov     r4,b
03D3 FD        1526            mov     r5,a
03D4 E581      1527            mov     a,sp
03D6 24FC      1528            add     a,#0xfc
03D8 F581      1529            mov     sp,a
03DA E4        1530            clr     a
03DB C0E0      1531            push    acc
03DD 74FC      1532            mov     a,#0xFC
03DF C0E0      1533            push    acc
03E1 747F      1534            mov     a,#0x7F
03E3 C0E0      1535            push    acc
03E5 7446      1536            mov     a,#0x46
03E7 C0E0      1537            push    acc
03E9 8A82      1538            mov     dpl,r2
03EB 8B83      1539            mov     dph,r3
03ED 8CF0      1540            mov     b,r4
03EF ED        1541            mov     a,r5
03F0 120000    1542            lcall   ___fsdiv
03F3 AA82      1543            mov     r2,dpl
03F5 AB83      1544            mov     r3,dph
03F7 ACF0      1545            mov     r4,b
03F9 FD        1546            mov     r5,a
03FA E581      1547            mov     a,sp
03FC 24FC      1548            add     a,#0xfc
03FE F581      1549            mov     sp,a
0400 8A82      1550            mov     dpl,r2
0402 8B83      1551            mov     dph,r3
0404 8CF0      1552            mov     b,r4
0406 ED        1553            mov     a,r5
0407 22        1554            ret
0408           1555   ;------------------------------------------------------------
0408           1556   ;Allocation info for local variables in function 'Timer4_ISR'
0408           1557   ;------------------------------------------------------------
0408           1558   ;------------------------------------------------------------
0408           1559   ;        EFM8_JDY40_test.c:430: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
0408           1560   ;        -----------------------------------------
0408           1561   ;         function Timer4_ISR
0408           1562   ;        -----------------------------------------
0408           1563   _Timer4_ISR:
0408 C0E0      1564            push    acc
040A C0D0      1565            push    psw
040C 75D000    1566            mov     psw,#0x00
040F           1567   ;        EFM8_JDY40_test.c:432: SFRPAGE=0x10;
040F 75A710    1568            mov     _SFRPAGE,#0x10
0412           1569   ;        EFM8_JDY40_test.c:433: TF4H = 0; 
0412 C29F      1570            clr     _TF4H
0414           1571   ;        EFM8_JDY40_test.c:435: pwm_counter4 += 256; // counting steps
0414 858080    1572            mov     _pwm_counter4,_pwm_counter4
0417 7401      1573            mov     a,#0x01
0419 2581      1574            add     a,(_pwm_counter4 + 1)
041B F581      1575            mov     (_pwm_counter4 + 1),a
041D           1576   ;        EFM8_JDY40_test.c:436: if ( direction == 1) {
041D 7401      1577            mov     a,#0x01
041F B58080    1578            cjne    a,_direction,L020009?
0422 E4        1579            clr     a
0423 B58180    1580            cjne    a,(_direction + 1),L020009?
0426 8000      1581            sjmp    L020010?
0428           1582   L020009?:
0428 8000      1583            sjmp    L020002?
042A           1584   L020010?:
042A           1585   ;        EFM8_JDY40_test.c:437: PWMOUT4 = (pwm_counter4 < pwm_duty4) ? 1 : 0;
042A C3        1586            clr     c
042B E580      1587            mov     a,_pwm_counter4
042D 9540      1588            subb    a,_pwm_duty4
042F E581      1589            mov     a,(_pwm_counter4 + 1)
0431 9541      1590            subb    a,(_pwm_duty4 + 1)
0433 92B0      1591            mov     _P3_0,c
0435           1592   L020002?:
0435           1593   ;        EFM8_JDY40_test.c:439: if ( direction  == 0 ) {
0435 E580      1594            mov     a,_direction
0437 4581      1595            orl     a,(_direction + 1)
0439 7000      1596            jnz     L020004?
043B           1597   ;        EFM8_JDY40_test.c:440: PWMOUT4R = (pwm_counter4 < pwm_duty4) ? 1 : 0;
043B C3        1598            clr     c
043C E580      1599            mov     a,_pwm_counter4
043E 9540      1600            subb    a,_pwm_duty4
0440 E581      1601            mov     a,(_pwm_counter4 + 1)
0442 9541      1602            subb    a,(_pwm_duty4 + 1)
0444 92A5      1603            mov     _P2_5,c
0446           1604   L020004?:
0446           1605   ;        EFM8_JDY40_test.c:442: if ( direction == 3 ) 
0446 E580      1606            mov     a,_direction
0448 E581      1607            mov     a,(_direction + 1)
044A D0D0      1608            pop     psw
044C D0E0      1609            pop     acc
044E 32        1610            reti
044F           1611   ;        eliminated unneeded push/pop dpl
044F           1612   ;        eliminated unneeded push/pop dph
044F           1613   ;        eliminated unneeded push/pop b
044F           1614   ;------------------------------------------------------------
044F           1615   ;Allocation info for local variables in function 'Timer2_ISR'
044F           1616   ;------------------------------------------------------------
044F           1617   ;------------------------------------------------------------
044F           1618   ;        EFM8_JDY40_test.c:447: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
044F           1619   ;        -----------------------------------------
044F           1620   ;         function Timer2_ISR
044F           1621   ;        -----------------------------------------
044F           1622   _Timer2_ISR:
044F C0E0      1623            push    acc
0451 C0D0      1624            push    psw
0453 75D000    1625            mov     psw,#0x00
0456           1626   ;        EFM8_JDY40_test.c:449: SFRPAGE=0x0;
0456 75A700    1627            mov     _SFRPAGE,#0x00
0459           1628   ;        EFM8_JDY40_test.c:450: TF2H = 0; // Clear Timer2 interrupt flag
0459 C2CF      1629            clr     _TF2H
045B           1630   ;        EFM8_JDY40_test.c:451: pwm_counter2 += 256; // counting steps
045B 850000    1631            mov     _pwm_counter2,_pwm_counter2
045E 7401      1632            mov     a,#0x01
0460 2501      1633            add     a,(_pwm_counter2 + 1)
0462 F501      1634            mov     (_pwm_counter2 + 1),a
0464           1635   ;        EFM8_JDY40_test.c:452: if ( direction == 1) {
0464 7401      1636            mov     a,#0x01
0466 B58080    1637            cjne    a,_direction,L021009?
0469 E4        1638            clr     a
046A B58180    1639            cjne    a,(_direction + 1),L021009?
046D 8000      1640            sjmp    L021010?
046F           1641   L021009?:
046F 8000      1642            sjmp    L021002?
0471           1643   L021010?:
0471           1644   ;        EFM8_JDY40_test.c:453: PWMOUT2 = (pwm_counter2 < pwm_duty2) ? 1 : 0; ////////////////////////change this to pwm_duty2 later on 
0471 C3        1645            clr     c
0472 E500      1646            mov     a,_pwm_counter2
0474 95C0      1647            subb    a,_pwm_duty2
0476 E501      1648            mov     a,(_pwm_counter2 + 1)
0478 95C1      1649            subb    a,(_pwm_duty2 + 1)
047A 92B2      1650            mov     _P3_2,c
047C           1651   L021002?:
047C           1652   ;        EFM8_JDY40_test.c:455: if (direction == 0 ){
047C E580      1653            mov     a,_direction
047E 4581      1654            orl     a,(_direction + 1)
0480 7000      1655            jnz     L021004?
0482           1656   ;        EFM8_JDY40_test.c:456: PWMOUT2R = (pwm_counter2 < pwm_duty2) ? 1 : 0;
0482 C3        1657            clr     c
0483 E500      1658            mov     a,_pwm_counter2
0485 95C0      1659            subb    a,_pwm_duty2
0487 E501      1660            mov     a,(_pwm_counter2 + 1)
0489 95C1      1661            subb    a,(_pwm_duty2 + 1)
048B 92B7      1662            mov     _P3_7,c
048D           1663   L021004?:
048D           1664   ;        EFM8_JDY40_test.c:458: if ( direction == 3 ) 
048D E580      1665            mov     a,_direction
048F E581      1666            mov     a,(_direction + 1)
0491 D0D0      1667            pop     psw
0493 D0E0      1668            pop     acc
0495 32        1669            reti
0496           1670   ;        eliminated unneeded push/pop dpl
0496           1671   ;        eliminated unneeded push/pop dph
0496           1672   ;        eliminated unneeded push/pop b
0496           1673   ;------------------------------------------------------------
0496           1674   ;Allocation info for local variables in function 'ADCtoPWM'
0496           1675   ;------------------------------------------------------------
0496           1676   ;adc_value                 Allocated to registers r2 r3 
0496           1677   ;------------------------------------------------------------
0496           1678   ;        EFM8_JDY40_test.c:462: unsigned int ADCtoPWM(int adc_value)
0496           1679   ;        -----------------------------------------
0496           1680   ;         function ADCtoPWM
0496           1681   ;        -----------------------------------------
0496           1682   _ADCtoPWM:
0496 AA82      1683            mov     r2,dpl
0498 AB83      1684            mov     r3,dph
049A           1685   ;        EFM8_JDY40_test.c:467: return (unsigned int)((adc_value * 65535UL) / 1023UL);
049A 8A00      1686            mov     __mullong_PARM_2,r2
049C EB        1687            mov     a,r3
049D F501      1688            mov     (__mullong_PARM_2 + 1),a
049F 33        1689            rlc     a
04A0 95E0      1690            subb    a,acc
04A2 F502      1691            mov     (__mullong_PARM_2 + 2),a
04A4 F503      1692            mov     (__mullong_PARM_2 + 3),a
04A6 90FFFF    1693            mov     dptr,#0xFFFF
04A9 E4        1694            clr     a
04AA F5F0      1695            mov     b,a
04AC 120000    1696            lcall   __mullong
04AF 7500FF    1697            mov     __divulong_PARM_2,#0xFF
04B2 750103    1698            mov     (__divulong_PARM_2 + 1),#0x03
04B5 750200    1699            mov     (__divulong_PARM_2 + 2),#0x00
04B8 750300    1700            mov     (__divulong_PARM_2 + 3),#0x00
04BB 020000    1701            ljmp    __divulong
04BE           1702   ;------------------------------------------------------------
04BE           1703   ;Allocation info for local variables in function 'ADCsteeringRatio'
04BE           1704   ;------------------------------------------------------------
04BE           1705   ;steering                  Allocated with name '_ADCsteeringRatio_PARM_2'
04BE           1706   ;ADCwheel1                 Allocated with name '_ADCsteeringRatio_PARM_3'
04BE           1707   ;ADCwheel2                 Allocated with name '_ADCsteeringRatio_PARM_4'
04BE           1708   ;speed                     Allocated to registers r2 r3 
04BE           1709   ;centersteering            Allocated with name '_ADCsteeringRatio_centersteering_1_143'
04BE           1710   ;centerspeed               Allocated to registers 
04BE           1711   ;delta                     Allocated to registers r4 r5 
04BE           1712   ;sloc0                     Allocated with name '_ADCsteeringRatio_sloc0_1_0'
04BE           1713   ;steeringFactor            Allocated with name '_ADCsteeringRatio_steeringFactor_1_143'
04BE           1714   ;baseSpeed                 Allocated with name '_ADCsteeringRatio_baseSpeed_1_143'
04BE           1715   ;baseSteer                 Allocated with name '_ADCsteeringRatio_baseSteer_1_143'
04BE           1716   ;wheel1Speed               Allocated with name '_ADCsteeringRatio_wheel1Speed_1_143'
04BE           1717   ;wheel2Speed               Allocated with name '_ADCsteeringRatio_wheel2Speed_1_143'
04BE           1718   ;------------------------------------------------------------
04BE           1719   ;        EFM8_JDY40_test.c:475: void ADCsteeringRatio(int speed, int steering, int *ADCwheel1, int *ADCwheel2) 
04BE           1720   ;        -----------------------------------------
04BE           1721   ;         function ADCsteeringRatio
04BE           1722   ;        -----------------------------------------
04BE           1723   _ADCsteeringRatio:
04BE AA82      1724            mov     r2,dpl
04C0 AB83      1725            mov     r3,dph
04C2           1726   ;        EFM8_JDY40_test.c:487: centersteering = steering - 508;
04C2 E580      1727            mov     a,_ADCsteeringRatio_PARM_2
04C4 2404      1728            add     a,#0x04
04C6 F5A0      1729            mov     _ADCsteeringRatio_centersteering_1_143,a
04C8 E581      1730            mov     a,(_ADCsteeringRatio_PARM_2 + 1)
04CA 34FE      1731            addc    a,#0xfe
04CC F5A1      1732            mov     (_ADCsteeringRatio_centersteering_1_143 + 1),a
04CE           1733   ;        EFM8_JDY40_test.c:488: centerspeed = speed - 504;
04CE EA        1734            mov     a,r2
04CF 2408      1735            add     a,#0x08
04D1 F582      1736            mov     dpl,a
04D3 EB        1737            mov     a,r3
04D4 34FE      1738            addc    a,#0xfe
04D6 F583      1739            mov     dph,a
04D8           1740   ;        EFM8_JDY40_test.c:490: baseSpeed = abs(centerspeed);
04D8 120000    1741            lcall   _abs
04DB AA82      1742            mov     r2,dpl
04DD AB83      1743            mov     r3,dph
04DF           1744   ;        EFM8_JDY40_test.c:491: baseSteer = abs(centersteering);
04DF 85A082    1745            mov     dpl,_ADCsteeringRatio_centersteering_1_143
04E2 85A183    1746            mov     dph,(_ADCsteeringRatio_centersteering_1_143 + 1)
04E5 C002      1747            push    ar2
04E7 C003      1748            push    ar3
04E9 120000    1749            lcall   _abs
04EC AE82      1750            mov     r6,dpl
04EE AF83      1751            mov     r7,dph
04F0 D003      1752            pop     ar3
04F2 D002      1753            pop     ar2
04F4           1754   ;        EFM8_JDY40_test.c:492: if ( baseSpeed < 3 && baseSteer < 3 ) 
04F4 C3        1755            clr     c
04F5 EA        1756            mov     a,r2
04F6 9403      1757            subb    a,#0x03
04F8 EB        1758            mov     a,r3
04F9 6480      1759            xrl     a,#0x80
04FB 9480      1760            subb    a,#0x80
04FD E4        1761            clr     a
04FE 33        1762            rlc     a
04FF F8        1763            mov     r0,a
0500 6000      1764            jz      L023002?
0502 C3        1765            clr     c
0503 EE        1766            mov     a,r6
0504 9403      1767            subb    a,#0x03
0506 EF        1768            mov     a,r7
0507 6480      1769            xrl     a,#0x80
0509 9480      1770            subb    a,#0x80
050B 5000      1771            jnc     L023002?
050D           1772   ;        EFM8_JDY40_test.c:494: *ADCwheel1 = 0;
050D 8530F0    1773            mov     _ADCsteeringRatio_sloc0_1_0,_ADCsteeringRatio_PARM_3
0510 8531F1    1774            mov     (_ADCsteeringRatio_sloc0_1_0 + 1),(_ADCsteeringRatio_PARM_3 + 1)
0513 8532F2    1775            mov     (_ADCsteeringRatio_sloc0_1_0 + 2),(_ADCsteeringRatio_PARM_3 + 2)
0516 85F082    1776            mov     dpl,_ADCsteeringRatio_sloc0_1_0
0519 85F183    1777            mov     dph,(_ADCsteeringRatio_sloc0_1_0 + 1)
051C 85F2F0    1778            mov     b,(_ADCsteeringRatio_sloc0_1_0 + 2)
051F E4        1779            clr     a
0520 120000    1780            lcall   __gptrput
0523 A3        1781            inc     dptr
0524 E4        1782            clr     a
0525 120000    1783            lcall   __gptrput
0528           1784   ;        EFM8_JDY40_test.c:495: *ADCwheel2 = 0;
0528 85E0F0    1785            mov     _ADCsteeringRatio_sloc0_1_0,_ADCsteeringRatio_PARM_4
052B 85E1F1    1786            mov     (_ADCsteeringRatio_sloc0_1_0 + 1),(_ADCsteeringRatio_PARM_4 + 1)
052E 85E2F2    1787            mov     (_ADCsteeringRatio_sloc0_1_0 + 2),(_ADCsteeringRatio_PARM_4 + 2)
0531 85F082    1788            mov     dpl,_ADCsteeringRatio_sloc0_1_0
0534 85F183    1789            mov     dph,(_ADCsteeringRatio_sloc0_1_0 + 1)
0537 85F2F0    1790            mov     b,(_ADCsteeringRatio_sloc0_1_0 + 2)
053A E4        1791            clr     a
053B 120000    1792            lcall   __gptrput
053E A3        1793            inc     dptr
053F E4        1794            clr     a
0540           1795   ;        EFM8_JDY40_test.c:496: return;
0540 020000    1796            ljmp    __gptrput
0543           1797   L023002?:
0543           1798   ;        EFM8_JDY40_test.c:500: steeringFactor = (float)centersteering / 508; // ranges from -1.0 (full left) to +1.0 (full right)
0543 C000      1799            push    ar0
0545 85A082    1800            mov     dpl,_ADCsteeringRatio_centersteering_1_143
0548 85A183    1801            mov     dph,(_ADCsteeringRatio_centersteering_1_143 + 1)
054B C002      1802            push    ar2
054D C003      1803            push    ar3
054F C006      1804            push    ar6
0551 C007      1805            push    ar7
0553 120000    1806            lcall   ___sint2fs
0556 A982      1807            mov     r1,dpl
0558 AC83      1808            mov     r4,dph
055A ADF0      1809            mov     r5,b
055C F8        1810            mov     r0,a
055D E4        1811            clr     a
055E C0E0      1812            push    acc
0560 C0E0      1813            push    acc
0562 74FE      1814            mov     a,#0xFE
0564 C0E0      1815            push    acc
0566 7443      1816            mov     a,#0x43
0568 C0E0      1817            push    acc
056A 8982      1818            mov     dpl,r1
056C 8C83      1819            mov     dph,r4
056E 8DF0      1820            mov     b,r5
0570 E8        1821            mov     a,r0
0571 120000    1822            lcall   ___fsdiv
0574 AC82      1823            mov     r4,dpl
0576 AD83      1824            mov     r5,dph
0578 A8F0      1825            mov     r0,b
057A F9        1826            mov     r1,a
057B E581      1827            mov     a,sp
057D 24FC      1828            add     a,#0xfc
057F F581      1829            mov     sp,a
0581 90C258    1830            mov     dptr,#_ADCsteeringRatio_steeringFactor_1_143
0584 EC        1831            mov     a,r4
0585 F0        1832            movx    @dptr,a
0586 A3        1833            inc     dptr
0587 ED        1834            mov     a,r5
0588 F0        1835            movx    @dptr,a
0589 A3        1836            inc     dptr
058A E8        1837            mov     a,r0
058B F0        1838            movx    @dptr,a
058C A3        1839            inc     dptr
058D E9        1840            mov     a,r1
058E F0        1841            movx    @dptr,a
058F           1842   ;        EFM8_JDY40_test.c:502: if ( steeringFactor > 1 ) steeringFactor = 1;
058F C000      1843            push    ar0
0591 E4        1844            clr     a
0592 C0E0      1845            push    acc
0594 C0E0      1846            push    acc
0596 7480      1847            mov     a,#0x80
0598 C0E0      1848            push    acc
059A 743F      1849            mov     a,#0x3F
059C C0E0      1850            push    acc
059E 8C82      1851            mov     dpl,r4
05A0 8D83      1852            mov     dph,r5
05A2 88F0      1853            mov     b,r0
05A4 E9        1854            mov     a,r1
05A5 120000    1855            lcall   ___fsgt
05A8 AC82      1856            mov     r4,dpl
05AA E581      1857            mov     a,sp
05AC 24FC      1858            add     a,#0xfc
05AE F581      1859            mov     sp,a
05B0 D000      1860            pop     ar0
05B2 D007      1861            pop     ar7
05B4 D006      1862            pop     ar6
05B6 D003      1863            pop     ar3
05B8 D002      1864            pop     ar2
05BA D000      1865            pop     ar0
05BC EC        1866            mov     a,r4
05BD 6000      1867            jz      L023005?
05BF 90C258    1868            mov     dptr,#_ADCsteeringRatio_steeringFactor_1_143
05C2 E4        1869            clr     a
05C3 F0        1870            movx    @dptr,a
05C4 A3        1871            inc     dptr
05C5 F0        1872            movx    @dptr,a
05C6 A3        1873            inc     dptr
05C7 7480      1874            mov     a,#0x80
05C9 F0        1875            movx    @dptr,a
05CA A3        1876            inc     dptr
05CB 743F      1877            mov     a,#0x3F
05CD F0        1878            movx    @dptr,a
05CE           1879   L023005?:
05CE           1880   ;        EFM8_JDY40_test.c:505: delta = ((int)(baseSpeed * steeringFactor));
05CE C000      1881            push    ar0
05D0 8A82      1882            mov     dpl,r2
05D2 8B83      1883            mov     dph,r3
05D4 C002      1884            push    ar2
05D6 C003      1885            push    ar3
05D8 C006      1886            push    ar6
05DA C007      1887            push    ar7
05DC 120000    1888            lcall   ___sint2fs
05DF AC82      1889            mov     r4,dpl
05E1 AD83      1890            mov     r5,dph
05E3 A9F0      1891            mov     r1,b
05E5 F8        1892            mov     r0,a
05E6 90C258    1893            mov     dptr,#_ADCsteeringRatio_steeringFactor_1_143
05E9 E0        1894            movx    a,@dptr
05EA C0E0      1895            push    acc
05EC A3        1896            inc     dptr
05ED E0        1897            movx    a,@dptr
05EE C0E0      1898            push    acc
05F0 A3        1899            inc     dptr
05F1 E0        1900            movx    a,@dptr
05F2 C0E0      1901            push    acc
05F4 A3        1902            inc     dptr
05F5 E0        1903            movx    a,@dptr
05F6 C0E0      1904            push    acc
05F8 8C82      1905            mov     dpl,r4
05FA 8D83      1906            mov     dph,r5
05FC 89F0      1907            mov     b,r1
05FE E8        1908            mov     a,r0
05FF 120000    1909            lcall   ___fsmul
0602 AC82      1910            mov     r4,dpl
0604 AD83      1911            mov     r5,dph
0606 A8F0      1912            mov     r0,b
0608 F9        1913            mov     r1,a
0609 E581      1914            mov     a,sp
060B 24FC      1915            add     a,#0xfc
060D F581      1916            mov     sp,a
060F 8C82      1917            mov     dpl,r4
0611 8D83      1918            mov     dph,r5
0613 88F0      1919            mov     b,r0
0615 E9        1920            mov     a,r1
0616 C000      1921            push    ar0
0618 120000    1922            lcall   ___fs2sint
061B AC82      1923            mov     r4,dpl
061D AD83      1924            mov     r5,dph
061F D000      1925            pop     ar0
0621 D007      1926            pop     ar7
0623 D006      1927            pop     ar6
0625 D003      1928            pop     ar3
0627 D002      1929            pop     ar2
0629           1930   ;        EFM8_JDY40_test.c:507: wheel1Speed = baseSpeed - delta;
0629 EA        1931            mov     a,r2
062A C3        1932            clr     c
062B 9C        1933            subb    a,r4
062C F8        1934            mov     r0,a
062D EB        1935            mov     a,r3
062E 9D        1936            subb    a,r5
062F F9        1937            mov     r1,a
0630 90C2B8    1938            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0633 E8        1939            mov     a,r0
0634 F0        1940            movx    @dptr,a
0635 A3        1941            inc     dptr
0636 E9        1942            mov     a,r1
0637 F0        1943            movx    @dptr,a
0638           1944   ;        EFM8_JDY40_test.c:508: wheel2Speed = baseSpeed + delta;
0638 EC        1945            mov     a,r4
0639 2A        1946            add     a,r2
063A F5F0      1947            mov     _ADCsteeringRatio_sloc0_1_0,a
063C ED        1948            mov     a,r5
063D 3B        1949            addc    a,r3
063E F5F1      1950            mov     (_ADCsteeringRatio_sloc0_1_0 + 1),a
0640 90C318    1951            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
0643 E5F0      1952            mov     a,_ADCsteeringRatio_sloc0_1_0
0645 F0        1953            movx    @dptr,a
0646 A3        1954            inc     dptr
0647 E5F1      1955            mov     a,(_ADCsteeringRatio_sloc0_1_0 + 1)
0649 F0        1956            movx    @dptr,a
064A           1957   ;        EFM8_JDY40_test.c:509: if (wheel1Speed > 507) wheel1Speed = 507;
064A C3        1958            clr     c
064B 74FB      1959            mov     a,#0xFB
064D 98        1960            subb    a,r0
064E 7481      1961            mov     a,#(0x01 ^ 0x80)
0650 89F0      1962            mov     b,r1
0652 63F080    1963            xrl     b,#0x80
0655 95F0      1964            subb    a,b
0657 D000      1965            pop     ar0
0659 5000      1966            jnc     L023007?
065B 90C2B8    1967            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
065E 74FB      1968            mov     a,#0xFB
0660 F0        1969            movx    @dptr,a
0661 A3        1970            inc     dptr
0662 7401      1971            mov     a,#0x01
0664 F0        1972            movx    @dptr,a
0665           1973   L023007?:
0665           1974   ;        EFM8_JDY40_test.c:510: if (wheel1Speed < 0) wheel1Speed = 0;
0665 90C2B8    1975            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0668 E0        1976            movx    a,@dptr
0669 FA        1977            mov     r2,a
066A A3        1978            inc     dptr
066B E0        1979            movx    a,@dptr
066C FB        1980            mov     r3,a
066D 30E7D0    1981            jnb     acc.7,L023009?
0670 90C2B8    1982            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0673 E4        1983            clr     a
0674 F0        1984            movx    @dptr,a
0675 A3        1985            inc     dptr
0676 F0        1986            movx    @dptr,a
0677           1987   L023009?:
0677           1988   ;        EFM8_JDY40_test.c:512: if (wheel2Speed > 507) wheel2Speed = 507;
0677 C3        1989            clr     c
0678 74FB      1990            mov     a,#0xFB
067A 95F0      1991            subb    a,_ADCsteeringRatio_sloc0_1_0
067C 7481      1992            mov     a,#(0x01 ^ 0x80)
067E 85F1F0    1993            mov     b,(_ADCsteeringRatio_sloc0_1_0 + 1)
0681 63F080    1994            xrl     b,#0x80
0684 95F0      1995            subb    a,b
0686 5000      1996            jnc     L023011?
0688 90C318    1997            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
068B 74FB      1998            mov     a,#0xFB
068D F0        1999            movx    @dptr,a
068E A3        2000            inc     dptr
068F 7401      2001            mov     a,#0x01
0691 F0        2002            movx    @dptr,a
0692           2003   L023011?:
0692           2004   ;        EFM8_JDY40_test.c:513: if (wheel2Speed < 0) wheel2Speed = 0;
0692 90C318    2005            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
0695 E0        2006            movx    a,@dptr
0696 FA        2007            mov     r2,a
0697 A3        2008            inc     dptr
0698 E0        2009            movx    a,@dptr
0699 FB        2010            mov     r3,a
069A 30E750    2011            jnb     acc.7,L023013?
069D 90C318    2012            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
06A0 E4        2013            clr     a
06A1 F0        2014            movx    @dptr,a
06A2 A3        2015            inc     dptr
06A3 F0        2016            movx    @dptr,a
06A4           2017   L023013?:
06A4           2018   ;        EFM8_JDY40_test.c:515: if ( baseSpeed < 3 && baseSteer > 3 ) 
06A4 E8        2019            mov     a,r0
06A5 7000      2020            jnz     L023047?
06A7 020000    2021            ljmp    L023023?
06AA           2022   L023047?:
06AA C3        2023            clr     c
06AB 7403      2024            mov     a,#0x03
06AD 9E        2025            subb    a,r6
06AE E4        2026            clr     a
06AF 6480      2027            xrl     a,#0x80
06B1 8FF0      2028            mov     b,r7
06B3 63F080    2029            xrl     b,#0x80
06B6 95F0      2030            subb    a,b
06B8 5000      2031            jnc     L023023?
06BA           2032   ;        EFM8_JDY40_test.c:518: wheel1Speed = 507 - centersteering;
06BA 74FB      2033            mov     a,#0xFB
06BC C3        2034            clr     c
06BD 95A0      2035            subb    a,_ADCsteeringRatio_centersteering_1_143
06BF FA        2036            mov     r2,a
06C0 7401      2037            mov     a,#0x01
06C2 95A1      2038            subb    a,(_ADCsteeringRatio_centersteering_1_143 + 1)
06C4 FB        2039            mov     r3,a
06C5 90C2B8    2040            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06C8 EA        2041            mov     a,r2
06C9 F0        2042            movx    @dptr,a
06CA A3        2043            inc     dptr
06CB EB        2044            mov     a,r3
06CC F0        2045            movx    @dptr,a
06CD           2046   ;        EFM8_JDY40_test.c:519: wheel2Speed = 507 + centersteering;      
06CD 74FB      2047            mov     a,#0xFB
06CF 25A0      2048            add     a,_ADCsteeringRatio_centersteering_1_143
06D1 FC        2049            mov     r4,a
06D2 7401      2050            mov     a,#0x01
06D4 35A1      2051            addc    a,(_ADCsteeringRatio_centersteering_1_143 + 1)
06D6 FD        2052            mov     r5,a
06D7 90C318    2053            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
06DA EC        2054            mov     a,r4
06DB F0        2055            movx    @dptr,a
06DC A3        2056            inc     dptr
06DD ED        2057            mov     a,r5
06DE F0        2058            movx    @dptr,a
06DF           2059   ;        EFM8_JDY40_test.c:521: if (wheel1Speed > 507) wheel1Speed = 507;
06DF C3        2060            clr     c
06E0 74FB      2061            mov     a,#0xFB
06E2 9A        2062            subb    a,r2
06E3 7481      2063            mov     a,#(0x01 ^ 0x80)
06E5 8BF0      2064            mov     b,r3
06E7 63F080    2065            xrl     b,#0x80
06EA 95F0      2066            subb    a,b
06EC 5000      2067            jnc     L023015?
06EE 90C2B8    2068            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06F1 74FB      2069            mov     a,#0xFB
06F3 F0        2070            movx    @dptr,a
06F4 A3        2071            inc     dptr
06F5 7401      2072            mov     a,#0x01
06F7 F0        2073            movx    @dptr,a
06F8           2074   L023015?:
06F8           2075   ;        EFM8_JDY40_test.c:522: if (wheel1Speed < 0) wheel1Speed = 0;
06F8 90C2B8    2076            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
06FB E0        2077            movx    a,@dptr
06FC FA        2078            mov     r2,a
06FD A3        2079            inc     dptr
06FE E0        2080            movx    a,@dptr
06FF FB        2081            mov     r3,a
0700 30E750    2082            jnb     acc.7,L023017?
0703 90C2B8    2083            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
0706 E4        2084            clr     a
0707 F0        2085            movx    @dptr,a
0708 A3        2086            inc     dptr
0709 F0        2087            movx    @dptr,a
070A           2088   L023017?:
070A           2089   ;        EFM8_JDY40_test.c:524: if (wheel2Speed > 507) wheel2Speed = 507;
070A C3        2090            clr     c
070B 74FB      2091            mov     a,#0xFB
070D 9C        2092            subb    a,r4
070E 7481      2093            mov     a,#(0x01 ^ 0x80)
0710 8DF0      2094            mov     b,r5
0712 63F080    2095            xrl     b,#0x80
0715 95F0      2096            subb    a,b
0717 5000      2097            jnc     L023019?
0719 90C318    2098            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
071C 74FB      2099            mov     a,#0xFB
071E F0        2100            movx    @dptr,a
071F A3        2101            inc     dptr
0720 7401      2102            mov     a,#0x01
0722 F0        2103            movx    @dptr,a
0723           2104   L023019?:
0723           2105   ;        EFM8_JDY40_test.c:525: if (wheel2Speed < 0) wheel2Speed = 0;
0723 90C318    2106            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
0726 E0        2107            movx    a,@dptr
0727 FA        2108            mov     r2,a
0728 A3        2109            inc     dptr
0729 E0        2110            movx    a,@dptr
072A FB        2111            mov     r3,a
072B 30E7D0    2112            jnb     acc.7,L023023?
072E 90C318    2113            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
0731 E4        2114            clr     a
0732 F0        2115            movx    @dptr,a
0733 A3        2116            inc     dptr
0734 F0        2117            movx    @dptr,a
0735           2118   L023023?:
0735           2119   ;        EFM8_JDY40_test.c:527: *ADCwheel1 = (unsigned int)((wheel1Speed * 1023L) / 507L);
0735 AA30      2120            mov     r2,_ADCsteeringRatio_PARM_3
0737 AB31      2121            mov     r3,(_ADCsteeringRatio_PARM_3 + 1)
0739 AC32      2122            mov     r4,(_ADCsteeringRatio_PARM_3 + 2)
073B 90C2B8    2123            mov     dptr,#_ADCsteeringRatio_wheel1Speed_1_143
073E E0        2124            movx    a,@dptr
073F FD        2125            mov     r5,a
0740 A3        2126            inc     dptr
0741 E0        2127            movx    a,@dptr
0742 8D00      2128            mov     __mullong_PARM_2,r5
0744 F501      2129            mov     (__mullong_PARM_2 + 1),a
0746 33        2130            rlc     a
0747 95E0      2131            subb    a,acc
0749 F502      2132            mov     (__mullong_PARM_2 + 2),a
074B F503      2133            mov     (__mullong_PARM_2 + 3),a
074D 9003FF    2134            mov     dptr,#0x03FF
0750 E4        2135            clr     a
0751 F5F0      2136            mov     b,a
0753 C002      2137            push    ar2
0755 C003      2138            push    ar3
0757 C004      2139            push    ar4
0759 120000    2140            lcall   __mullong
075C 7500FB    2141            mov     __divslong_PARM_2,#0xFB
075F 750101    2142            mov     (__divslong_PARM_2 + 1),#0x01
0762 750200    2143            mov     (__divslong_PARM_2 + 2),#0x00
0765 750300    2144            mov     (__divslong_PARM_2 + 3),#0x00
0768 120000    2145            lcall   __divslong
076B AD82      2146            mov     r5,dpl
076D AE83      2147            mov     r6,dph
076F D004      2148            pop     ar4
0771 D003      2149            pop     ar3
0773 D002      2150            pop     ar2
0775 8A82      2151            mov     dpl,r2
0777 8B83      2152            mov     dph,r3
0779 8CF0      2153            mov     b,r4
077B ED        2154            mov     a,r5
077C 120000    2155            lcall   __gptrput
077F A3        2156            inc     dptr
0780 EE        2157            mov     a,r6
0781 120000    2158            lcall   __gptrput
0784           2159   ;        EFM8_JDY40_test.c:528: *ADCwheel2 = (unsigned int)((wheel2Speed * 1023L) / 507L);       
0784 AAE0      2160            mov     r2,_ADCsteeringRatio_PARM_4
0786 ABE1      2161            mov     r3,(_ADCsteeringRatio_PARM_4 + 1)
0788 ACE2      2162            mov     r4,(_ADCsteeringRatio_PARM_4 + 2)
078A 90C318    2163            mov     dptr,#_ADCsteeringRatio_wheel2Speed_1_143
078D E0        2164            movx    a,@dptr
078E FD        2165            mov     r5,a
078F A3        2166            inc     dptr
0790 E0        2167            movx    a,@dptr
0791 8D00      2168            mov     __mullong_PARM_2,r5
0793 F501      2169            mov     (__mullong_PARM_2 + 1),a
0795 33        2170            rlc     a
0796 95E0      2171            subb    a,acc
0798 F502      2172            mov     (__mullong_PARM_2 + 2),a
079A F503      2173            mov     (__mullong_PARM_2 + 3),a
079C 9003FF    2174            mov     dptr,#0x03FF
079F E4        2175            clr     a
07A0 F5F0      2176            mov     b,a
07A2 C002      2177            push    ar2
07A4 C003      2178            push    ar3
07A6 C004      2179            push    ar4
07A8 120000    2180            lcall   __mullong
07AB 7500FB    2181            mov     __divslong_PARM_2,#0xFB
07AE 750101    2182            mov     (__divslong_PARM_2 + 1),#0x01
07B1 750200    2183            mov     (__divslong_PARM_2 + 2),#0x00
07B4 750300    2184            mov     (__divslong_PARM_2 + 3),#0x00
07B7 120000    2185            lcall   __divslong
07BA AD82      2186            mov     r5,dpl
07BC AE83      2187            mov     r6,dph
07BE D004      2188            pop     ar4
07C0 D003      2189            pop     ar3
07C2 D002      2190            pop     ar2
07C4 8A82      2191            mov     dpl,r2
07C6 8B83      2192            mov     dph,r3
07C8 8CF0      2193            mov     b,r4
07CA ED        2194            mov     a,r5
07CB 120000    2195            lcall   __gptrput
07CE A3        2196            inc     dptr
07CF EE        2197            mov     a,r6
07D0 020000    2198            ljmp    __gptrput
07D3           2199   ;------------------------------------------------------------
07D3           2200   ;Allocation info for local variables in function 'GetPeriod'
07D3           2201   ;------------------------------------------------------------
07D3           2202   ;n                         Allocated to registers r2 r3 
07D3           2203   ;overflow_count            Allocated to registers r4 r5 
07D3           2204   ;i                         Allocated to registers r6 
07D3           2205   ;------------------------------------------------------------
07D3           2206   ;        EFM8_JDY40_test.c:533: unsigned long GetPeriod (int n)
07D3           2207   ;        -----------------------------------------
07D3           2208   ;         function GetPeriod
07D3           2209   ;        -----------------------------------------
07D3           2210   _GetPeriod:
07D3 AA82      2211            mov     r2,dpl
07D5 AB83      2212            mov     r3,dph
07D7           2213   ;        EFM8_JDY40_test.c:538: TR0=0; // Stop Timer/Counter 0
07D7 C28C      2214            clr     _TR0
07D9           2215   ;        EFM8_JDY40_test.c:539: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
07D9 5389F0    2216            anl     _TMOD,#0xF0
07DC           2217   ;        EFM8_JDY40_test.c:540: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
07DC 438901    2218            orl     _TMOD,#0x01
07DF           2219   ;        EFM8_JDY40_test.c:543: TR0=0;
07DF C28C      2220            clr     _TR0
07E1           2221   ;        EFM8_JDY40_test.c:544: TL0=0; TH0=0; TF0=0; overflow_count=0;
07E1 758A00    2222            mov     _TL0,#0x00
07E4 758C00    2223            mov     _TH0,#0x00
07E7 C28D      2224            clr     _TF0
07E9           2225   ;        EFM8_JDY40_test.c:545: TR0=1;
07E9 D28C      2226            setb    _TR0
07EB           2227   ;        EFM8_JDY40_test.c:548: TR0=0;
07EB C28C      2228            clr     _TR0
07ED           2229   ;        EFM8_JDY40_test.c:549: TL0=0; TH0=0; TF0=0; overflow_count=0;
07ED 758A00    2230            mov     _TL0,#0x00
07F0 758C00    2231            mov     _TH0,#0x00
07F3 C28D      2232            clr     _TF0
07F5           2233   ;        EFM8_JDY40_test.c:550: TR0=1;
07F5 D28C      2234            setb    _TR0
07F7           2235   ;        EFM8_JDY40_test.c:551: while(PERIOD_PIN!=0) // Wait for the signal to be zero
07F7 7C00      2236            mov     r4,#0x00
07F9 7D00      2237            mov     r5,#0x00
07FB           2238   L024005?:
07FB 3097A0    2239            jnb     _P1_7,L024007?
07FE           2240   ;        EFM8_JDY40_test.c:553: if(TF0==1) // Did the 16-bit timer overflow?
07FE           2241   ;        EFM8_JDY40_test.c:555: TF0=0;
07FE 108DE0    2242            jbc     _TF0,L024050?
0801 8000      2243            sjmp    L024005?
0803           2244   L024050?:
0803           2245   ;        EFM8_JDY40_test.c:556: overflow_count++;
0803 0C        2246            inc     r4
0804 BC0020    2247            cjne    r4,#0x00,L024051?
0807 0D        2248            inc     r5
0808           2249   L024051?:
0808           2250   ;        EFM8_JDY40_test.c:557: if(overflow_count==10) // If it overflows too many times assume no signal is present
0808 BC0A60    2251            cjne    r4,#0x0A,L024005?
080B BD0060    2252            cjne    r5,#0x00,L024005?
080E           2253   ;        EFM8_JDY40_test.c:559: TR0=0;
080E C28C      2254            clr     _TR0
0810           2255   ;        EFM8_JDY40_test.c:560: return 0; // No signal
0810 900000    2256            mov     dptr,#(0x00&0x00ff)
0813 E4        2257            clr     a
0814 F5F0      2258            mov     b,a
0816 22        2259            ret
0817           2260   L024007?:
0817           2261   ;        EFM8_JDY40_test.c:566: TR0=0;
0817 C28C      2262            clr     _TR0
0819           2263   ;        EFM8_JDY40_test.c:567: TL0=0; TH0=0; TF0=0; overflow_count=0;
0819 758A00    2264            mov     _TL0,#0x00
081C 758C00    2265            mov     _TH0,#0x00
081F C28D      2266            clr     _TF0
0821           2267   ;        EFM8_JDY40_test.c:568: TR0=1;
0821 D28C      2268            setb    _TR0
0823           2269   ;        EFM8_JDY40_test.c:569: while(PERIOD_PIN!=1) // Wait for the signal to be one
0823 7C00      2270            mov     r4,#0x00
0825 7D00      2271            mov     r5,#0x00
0827           2272   L024012?:
0827 2097A0    2273            jb      _P1_7,L024014?
082A           2274   ;        EFM8_JDY40_test.c:571: if(TF0==1) // Did the 16-bit timer overflow?
082A           2275   ;        EFM8_JDY40_test.c:573: TF0=0;
082A 108DE0    2276            jbc     _TF0,L024055?
082D 8000      2277            sjmp    L024012?
082F           2278   L024055?:
082F           2279   ;        EFM8_JDY40_test.c:574: overflow_count++;
082F 0C        2280            inc     r4
0830 BC0020    2281            cjne    r4,#0x00,L024056?
0833 0D        2282            inc     r5
0834           2283   L024056?:
0834           2284   ;        EFM8_JDY40_test.c:575: if(overflow_count==10) // If it overflows too many times assume no signal is present
0834 BC0A60    2285            cjne    r4,#0x0A,L024012?
0837 BD0060    2286            cjne    r5,#0x00,L024012?
083A           2287   ;        EFM8_JDY40_test.c:577: TR0=0;
083A C28C      2288            clr     _TR0
083C           2289   ;        EFM8_JDY40_test.c:578: return 0; // No signal
083C 900000    2290            mov     dptr,#(0x00&0x00ff)
083F E4        2291            clr     a
0840 F5F0      2292            mov     b,a
0842 22        2293            ret
0843           2294   L024014?:
0843           2295   ;        EFM8_JDY40_test.c:584: TR0=0;
0843 C28C      2296            clr     _TR0
0845           2297   ;        EFM8_JDY40_test.c:585: TL0=0; TH0=0; TF0=0; overflow_count=0;
0845 758A00    2298            mov     _TL0,#0x00
0848 758C00    2299            mov     _TH0,#0x00
084B C28D      2300            clr     _TF0
084D 7C00      2301            mov     r4,#0x00
084F 7D00      2302            mov     r5,#0x00
0851           2303   ;        EFM8_JDY40_test.c:586: TR0=1; // Start the timer
0851 D28C      2304            setb    _TR0
0853           2305   ;        EFM8_JDY40_test.c:587: for(i=0; i<n; i++) // Measure the time of 'n' periods
0853 7E00      2306            mov     r6,#0x00
0855           2307   L024025?:
0855 8E07      2308            mov     ar7,r6
0857 7800      2309            mov     r0,#0x00
0859 C3        2310            clr     c
085A EF        2311            mov     a,r7
085B 9A        2312            subb    a,r2
085C E8        2313            mov     a,r0
085D 6480      2314            xrl     a,#0x80
085F 8BF0      2315            mov     b,r3
0861 63F080    2316            xrl     b,#0x80
0864 95F0      2317            subb    a,b
0866 5000      2318            jnc     L024028?
0868           2319   ;        EFM8_JDY40_test.c:589: while(PERIOD_PIN!=0) // Wait for the signal to be zero
0868 8C07      2320            mov     ar7,r4
086A 8D00      2321            mov     ar0,r5
086C           2322   L024017?:
086C 309720    2323            jnb     _P1_7,L024043?
086F           2324   ;        EFM8_JDY40_test.c:591: if(TF0==1) // Did the 16-bit timer overflow?
086F           2325   ;        EFM8_JDY40_test.c:593: TF0=0;
086F 108D60    2326            jbc     _TF0,L024061?
0872 8000      2327            sjmp    L024017?
0874           2328   L024061?:
0874           2329   ;        EFM8_JDY40_test.c:594: overflow_count++;
0874 0F        2330            inc     r7
0875 BF00E0    2331            cjne    r7,#0x00,L024017?
0878 08        2332            inc     r0
0879           2333   ;        EFM8_JDY40_test.c:597: while(PERIOD_PIN!=1) // Wait for the signal to be one
0879 8000      2334            sjmp    L024017?
087B           2335   L024043?:
087B           2336   L024022?:
087B 2097E0    2337            jb      _P1_7,L024047?
087E           2338   ;        EFM8_JDY40_test.c:599: if(TF0==1) // Did the 16-bit timer overflow?
087E           2339   ;        EFM8_JDY40_test.c:601: TF0=0;
087E 108D20    2340            jbc     _TF0,L024063?
0881 8000      2341            sjmp    L024022?
0883           2342   L024063?:
0883           2343   ;        EFM8_JDY40_test.c:602: overflow_count++;
0883 0F        2344            inc     r7
0884 BF00A0    2345            cjne    r7,#0x00,L024022?
0887 08        2346            inc     r0
0888 8000      2347            sjmp    L024022?
088A           2348   L024047?:
088A 8F04      2349            mov     ar4,r7
088C 8805      2350            mov     ar5,r0
088E           2351   ;        EFM8_JDY40_test.c:587: for(i=0; i<n; i++) // Measure the time of 'n' periods
088E 0E        2352            inc     r6
088F 8000      2353            sjmp    L024025?
0891           2354   L024028?:
0891           2355   ;        EFM8_JDY40_test.c:606: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period in clock cycles!
0891 C28C      2356            clr     _TR0
0893           2357   ;        EFM8_JDY40_test.c:608: return (overflow_count*65536+TH0*256+TL0);
0893 8D03      2358            mov     ar3,r5
0895 8C02      2359            mov     ar2,r4
0897 7D00      2360            mov     r5,#0x00
0899 7C00      2361            mov     r4,#0x00
089B AF8C      2362            mov     r7,_TH0
089D 7E00      2363            mov     r6,#0x00
089F EF        2364            mov     a,r7
08A0 33        2365            rlc     a
08A1 95E0      2366            subb    a,acc
08A3 F8        2367            mov     r0,a
08A4 F9        2368            mov     r1,a
08A5 EE        2369            mov     a,r6
08A6 2C        2370            add     a,r4
08A7 FC        2371            mov     r4,a
08A8 EF        2372            mov     a,r7
08A9 3D        2373            addc    a,r5
08AA FD        2374            mov     r5,a
08AB E8        2375            mov     a,r0
08AC 3A        2376            addc    a,r2
08AD FA        2377            mov     r2,a
08AE E9        2378            mov     a,r1
08AF 3B        2379            addc    a,r3
08B0 FB        2380            mov     r3,a
08B1 AE8A      2381            mov     r6,_TL0
08B3 E4        2382            clr     a
08B4 FF        2383            mov     r7,a
08B5 33        2384            rlc     a
08B6 95E0      2385            subb    a,acc
08B8 F8        2386            mov     r0,a
08B9 F9        2387            mov     r1,a
08BA EE        2388            mov     a,r6
08BB 2C        2389            add     a,r4
08BC FC        2390            mov     r4,a
08BD EF        2391            mov     a,r7
08BE 3D        2392            addc    a,r5
08BF FD        2393            mov     r5,a
08C0 E8        2394            mov     a,r0
08C1 3A        2395            addc    a,r2
08C2 FA        2396            mov     r2,a
08C3 E9        2397            mov     a,r1
08C4 3B        2398            addc    a,r3
08C5 8C82      2399            mov     dpl,r4
08C7 8D83      2400            mov     dph,r5
08C9 8AF0      2401            mov     b,r2
08CB 22        2402            ret
08CC           2403   ;------------------------------------------------------------
08CC           2404   ;Allocation info for local variables in function 'eputs'
08CC           2405   ;------------------------------------------------------------
08CC           2406   ;String                    Allocated to registers r2 r3 r4 
08CC           2407   ;------------------------------------------------------------
08CC           2408   ;        EFM8_JDY40_test.c:611: void eputs(char *String)
08CC           2409   ;        -----------------------------------------
08CC           2410   ;         function eputs
08CC           2411   ;        -----------------------------------------
08CC           2412   _eputs:
08CC AA82      2413            mov     r2,dpl
08CE AB83      2414            mov     r3,dph
08D0 ACF0      2415            mov     r4,b
08D2           2416   ;        EFM8_JDY40_test.c:613: while(*String)
08D2           2417   L025001?:
08D2 8A82      2418            mov     dpl,r2
08D4 8B83      2419            mov     dph,r3
08D6 8CF0      2420            mov     b,r4
08D8 120000    2421            lcall   __gptrget
08DB FD        2422            mov     r5,a
08DC 6000      2423            jz      L025004?
08DE           2424   ;        EFM8_JDY40_test.c:615: putchar(*String);
08DE 8D82      2425            mov     dpl,r5
08E0 C002      2426            push    ar2
08E2 C003      2427            push    ar3
08E4 C004      2428            push    ar4
08E6 120000    2429            lcall   _putchar
08E9 D004      2430            pop     ar4
08EB D003      2431            pop     ar3
08ED D002      2432            pop     ar2
08EF           2433   ;        EFM8_JDY40_test.c:616: String++;
08EF 0A        2434            inc     r2
08F0 BA0060    2435            cjne    r2,#0x00,L025001?
08F3 0B        2436            inc     r3
08F4 8000      2437            sjmp    L025001?
08F6           2438   L025004?:
08F6 22        2439            ret
08F7           2440   ;------------------------------------------------------------
08F7           2441   ;Allocation info for local variables in function 'PrintNumber'
08F7           2442   ;------------------------------------------------------------
08F7           2443   ;Base                      Allocated with name '_PrintNumber_PARM_2'
08F7           2444   ;digits                    Allocated with name '_PrintNumber_PARM_3'
08F7           2445   ;val                       Allocated with name '_PrintNumber_val_1_162'
08F7           2446   ;j                         Allocated with name '_PrintNumber_j_1_163'
08F7           2447   ;sloc0                     Allocated with name '_PrintNumber_sloc0_1_0'
08F7           2448   ;sloc1                     Allocated with name '_PrintNumber_sloc1_1_0'
08F7           2449   ;buff                      Allocated with name '_PrintNumber_buff_1_163'
08F7           2450   ;------------------------------------------------------------
08F7           2451   ;        EFM8_JDY40_test.c:620: void PrintNumber(long int val, int Base, int digits)
08F7           2452   ;        -----------------------------------------
08F7           2453   ;         function PrintNumber
08F7           2454   ;        -----------------------------------------
08F7           2455   _PrintNumber:
08F7 858240    2456            mov     _PrintNumber_val_1_162,dpl
08FA 858341    2457            mov     (_PrintNumber_val_1_162 + 1),dph
08FD 85F042    2458            mov     (_PrintNumber_val_1_162 + 2),b
0900 F543      2459            mov     (_PrintNumber_val_1_162 + 3),a
0902           2460   ;        EFM8_JDY40_test.c:626: buff[NBITS]=0;
0902 90C388    2461            mov     dptr,#(_PrintNumber_buff_1_163 + 0x0020)
0905 E4        2462            clr     a
0906 F0        2463            movx    @dptr,a
0907           2464   ;        EFM8_JDY40_test.c:628: if(val<0)
0907 E543      2465            mov     a,(_PrintNumber_val_1_162 + 3)
0909 30E720    2466            jnb     acc.7,L026012?
090C           2467   ;        EFM8_JDY40_test.c:630: putchar('-');
090C 75822D    2468            mov     dpl,#0x2D
090F 120000    2469            lcall   _putchar
0912           2470   ;        EFM8_JDY40_test.c:631: val*=-1;
0912 C3        2471            clr     c
0913 E4        2472            clr     a
0914 9540      2473            subb    a,_PrintNumber_val_1_162
0916 F540      2474            mov     _PrintNumber_val_1_162,a
0918 E4        2475            clr     a
0919 9541      2476            subb    a,(_PrintNumber_val_1_162 + 1)
091B F541      2477            mov     (_PrintNumber_val_1_162 + 1),a
091D E4        2478            clr     a
091E 9542      2479            subb    a,(_PrintNumber_val_1_162 + 2)
0920 F542      2480            mov     (_PrintNumber_val_1_162 + 2),a
0922 E4        2481            clr     a
0923 9543      2482            subb    a,(_PrintNumber_val_1_162 + 3)
0925 F543      2483            mov     (_PrintNumber_val_1_162 + 3),a
0927           2484   ;        EFM8_JDY40_test.c:635: while ( (val>0) | (digits>0) )
0927           2485   L026012?:
0927 75901F    2486            mov     _PrintNumber_j_1_163,#0x1F
092A E4        2487            clr     a
092B F591      2488            mov     (_PrintNumber_j_1_163 + 1),a
092D A840      2489            mov     r0,_PrintNumber_PARM_3
092F A941      2490            mov     r1,(_PrintNumber_PARM_3 + 1)
0931           2491   L026005?:
0931 C3        2492            clr     c
0932 E4        2493            clr     a
0933 9540      2494            subb    a,_PrintNumber_val_1_162
0935 E4        2495            clr     a
0936 9541      2496            subb    a,(_PrintNumber_val_1_162 + 1)
0938 E4        2497            clr     a
0939 9542      2498            subb    a,(_PrintNumber_val_1_162 + 2)
093B E4        2499            clr     a
093C 6480      2500            xrl     a,#0x80
093E 8543F0    2501            mov     b,(_PrintNumber_val_1_162 + 3)
0941 63F080    2502            xrl     b,#0x80
0944 95F0      2503            subb    a,b
0946 E4        2504            clr     a
0947 33        2505            rlc     a
0948 FE        2506            mov     r6,a
0949 C3        2507            clr     c
094A E4        2508            clr     a
094B 98        2509            subb    a,r0
094C E4        2510            clr     a
094D 6480      2511            xrl     a,#0x80
094F 89F0      2512            mov     b,r1
0951 63F080    2513            xrl     b,#0x80
0954 95F0      2514            subb    a,b
0956 E4        2515            clr     a
0957 33        2516            rlc     a
0958 FF        2517            mov     r7,a
0959 4E        2518            orl     a,r6
095A 7000      2519            jnz     L026016?
095C 020000    2520            ljmp    L026007?
095F           2521   L026016?:
095F           2522   ;        EFM8_JDY40_test.c:637: buff[j--]=HexDigit[val%Base];
095F AE90      2523            mov     r6,_PrintNumber_j_1_163
0961 AF91      2524            mov     r7,(_PrintNumber_j_1_163 + 1)
0963 1590      2525            dec     _PrintNumber_j_1_163
0965 74FF      2526            mov     a,#0xff
0967 B59020    2527            cjne    a,_PrintNumber_j_1_163,L026017?
096A 1591      2528            dec     (_PrintNumber_j_1_163 + 1)
096C           2529   L026017?:
096C EE        2530            mov     a,r6
096D 2468      2531            add     a,#_PrintNumber_buff_1_163
096F F5E8      2532            mov     _PrintNumber_sloc0_1_0,a
0971 EF        2533            mov     a,r7
0972 34C3      2534            addc    a,#(_PrintNumber_buff_1_163 >> 8)
0974 F5E9      2535            mov     (_PrintNumber_sloc0_1_0 + 1),a
0976 859038    2536            mov     _PrintNumber_sloc1_1_0,_PrintNumber_PARM_2
0979 E591      2537            mov     a,(_PrintNumber_PARM_2 + 1)
097B F539      2538            mov     (_PrintNumber_sloc1_1_0 + 1),a
097D 33        2539            rlc     a
097E 95E0      2540            subb    a,acc
0980 F53A      2541            mov     (_PrintNumber_sloc1_1_0 + 2),a
0982 F53B      2542            mov     (_PrintNumber_sloc1_1_0 + 3),a
0984 853800    2543            mov     __modslong_PARM_2,_PrintNumber_sloc1_1_0
0987 853901    2544            mov     (__modslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
098A 853A02    2545            mov     (__modslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
098D 853B03    2546            mov     (__modslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
0990 854082    2547            mov     dpl,_PrintNumber_val_1_162
0993 854183    2548            mov     dph,(_PrintNumber_val_1_162 + 1)
0996 8542F0    2549            mov     b,(_PrintNumber_val_1_162 + 2)
0999 E543      2550            mov     a,(_PrintNumber_val_1_162 + 3)
099B C000      2551            push    ar0
099D C001      2552            push    ar1
099F 120000    2553            lcall   __modslong
09A2 AE82      2554            mov     r6,dpl
09A4 AF83      2555            mov     r7,dph
09A6 EE        2556            mov     a,r6
09A7 24B0      2557            add     a,#_PrintNumber_HexDigit_1_163
09A9 F582      2558            mov     dpl,a
09AB EF        2559            mov     a,r7
09AC 3411      2560            addc    a,#(_PrintNumber_HexDigit_1_163 >> 8)
09AE F583      2561            mov     dph,a
09B0 E4        2562            clr     a
09B1 93        2563            movc    a,@a+dptr
09B2 85E882    2564            mov     dpl,_PrintNumber_sloc0_1_0
09B5 85E983    2565            mov     dph,(_PrintNumber_sloc0_1_0 + 1)
09B8 F0        2566            movx    @dptr,a
09B9           2567   ;        EFM8_JDY40_test.c:638: val/=Base;
09B9 853800    2568            mov     __divslong_PARM_2,_PrintNumber_sloc1_1_0
09BC 853901    2569            mov     (__divslong_PARM_2 + 1),(_PrintNumber_sloc1_1_0 + 1)
09BF 853A02    2570            mov     (__divslong_PARM_2 + 2),(_PrintNumber_sloc1_1_0 + 2)
09C2 853B03    2571            mov     (__divslong_PARM_2 + 3),(_PrintNumber_sloc1_1_0 + 3)
09C5 854082    2572            mov     dpl,_PrintNumber_val_1_162
09C8 854183    2573            mov     dph,(_PrintNumber_val_1_162 + 1)
09CB 8542F0    2574            mov     b,(_PrintNumber_val_1_162 + 2)
09CE E543      2575            mov     a,(_PrintNumber_val_1_162 + 3)
09D0 120000    2576            lcall   __divslong
09D3 858240    2577            mov     _PrintNumber_val_1_162,dpl
09D6 858341    2578            mov     (_PrintNumber_val_1_162 + 1),dph
09D9 85F042    2579            mov     (_PrintNumber_val_1_162 + 2),b
09DC F543      2580            mov     (_PrintNumber_val_1_162 + 3),a
09DE D001      2581            pop     ar1
09E0 D000      2582            pop     ar0
09E2           2583   ;        EFM8_JDY40_test.c:639: if(digits!=0) digits--;
09E2 E8        2584            mov     a,r0
09E3 49        2585            orl     a,r1
09E4 7000      2586            jnz     L026018?
09E6 020000    2587            ljmp    L026005?
09E9           2588   L026018?:
09E9 18        2589            dec     r0
09EA B8FF30    2590            cjne    r0,#0xff,L026019?
09ED 19        2591            dec     r1
09EE           2592   L026019?:
09EE 020000    2593            ljmp    L026005?
09F1           2594   L026007?:
09F1           2595   ;        EFM8_JDY40_test.c:641: eputs(&buff[j+1]);
09F1 E590      2596            mov     a,_PrintNumber_j_1_163
09F3 04        2597            inc     a
09F4 2468      2598            add     a,#_PrintNumber_buff_1_163
09F6 FA        2599            mov     r2,a
09F7 E4        2600            clr     a
09F8 34C3      2601            addc    a,#(_PrintNumber_buff_1_163 >> 8)
09FA FB        2602            mov     r3,a
09FB 7C00      2603            mov     r4,#0x00
09FD 8A82      2604            mov     dpl,r2
09FF 8B83      2605            mov     dph,r3
0A01 8CF0      2606            mov     b,r4
0A03 020000    2607            ljmp    _eputs
0A06           2608   ;------------------------------------------------------------
0A06           2609   ;Allocation info for local variables in function 'GetFrequency'
0A06           2610   ;------------------------------------------------------------
0A06           2611   ;pin                       Allocated with name '_GetFrequency_PARM_2'
0A06           2612   ;c                         Allocated to registers r2 r3 r4 r5 
0A06           2613   ;f                         Allocated to registers r6 r7 r0 r1 
0A06           2614   ;------------------------------------------------------------
0A06           2615   ;        EFM8_JDY40_test.c:644: unsigned long GetFrequency (long int c, int pin)
0A06           2616   ;        -----------------------------------------
0A06           2617   ;         function GetFrequency
0A06           2618   ;        -----------------------------------------
0A06           2619   _GetFrequency:
0A06 AA82      2620            mov     r2,dpl
0A08 AB83      2621            mov     r3,dph
0A0A ACF0      2622            mov     r4,b
0A0C FD        2623            mov     r5,a
0A0D           2624   ;        EFM8_JDY40_test.c:646: long int f = 0;
0A0D 7E00      2625            mov     r6,#0x00
0A0F 7F00      2626            mov     r7,#0x00
0A11 7800      2627            mov     r0,#0x00
0A13 7900      2628            mov     r1,#0x00
0A15           2629   ;        EFM8_JDY40_test.c:648: if(c>0)
0A15 C3        2630            clr     c
0A16 E4        2631            clr     a
0A17 9A        2632            subb    a,r2
0A18 E4        2633            clr     a
0A19 9B        2634            subb    a,r3
0A1A E4        2635            clr     a
0A1B 9C        2636            subb    a,r4
0A1C E4        2637            clr     a
0A1D 6480      2638            xrl     a,#0x80
0A1F 8DF0      2639            mov     b,r5
0A21 63F080    2640            xrl     b,#0x80
0A24 95F0      2641            subb    a,b
0A26 4000      2642            jc      L027006?
0A28 020000    2643            ljmp    L027002?
0A2B           2644   L027006?:
0A2B           2645   ;        EFM8_JDY40_test.c:650: f=(SYSCLK*200.0)/(c*12);
0A2B 8A00      2646            mov     __mullong_PARM_2,r2
0A2D 8B01      2647            mov     (__mullong_PARM_2 + 1),r3
0A2F 8C02      2648            mov     (__mullong_PARM_2 + 2),r4
0A31 8D03      2649            mov     (__mullong_PARM_2 + 3),r5
0A33 90000C    2650            mov     dptr,#(0x0C&0x00ff)
0A36 E4        2651            clr     a
0A37 F5F0      2652            mov     b,a
0A39 120000    2653            lcall   __mullong
0A3C 120000    2654            lcall   ___slong2fs
0A3F AA82      2655            mov     r2,dpl
0A41 AB83      2656            mov     r3,dph
0A43 ACF0      2657            mov     r4,b
0A45 FD        2658            mov     r5,a
0A46 C002      2659            push    ar2
0A48 C003      2660            push    ar3
0A4A C004      2661            push    ar4
0A4C C005      2662            push    ar5
0A4E 9093A4    2663            mov     dptr,#0x93A4
0A51 75F056    2664            mov     b,#0x56
0A54 7450      2665            mov     a,#0x50
0A56 120000    2666            lcall   ___fsdiv
0A59 AA82      2667            mov     r2,dpl
0A5B AB83      2668            mov     r3,dph
0A5D ACF0      2669            mov     r4,b
0A5F FD        2670            mov     r5,a
0A60 E581      2671            mov     a,sp
0A62 24FC      2672            add     a,#0xfc
0A64 F581      2673            mov     sp,a
0A66 8A82      2674            mov     dpl,r2
0A68 8B83      2675            mov     dph,r3
0A6A 8CF0      2676            mov     b,r4
0A6C ED        2677            mov     a,r5
0A6D 120000    2678            lcall   ___fs2slong
0A70 AE82      2679            mov     r6,dpl
0A72 AF83      2680            mov     r7,dph
0A74 A8F0      2681            mov     r0,b
0A76 F9        2682            mov     r1,a
0A77           2683   ;        EFM8_JDY40_test.c:651: eputs(" f");
0A77 90E070    2684            mov     dptr,#__str_4
0A7A 75F080    2685            mov     b,#0x80
0A7D C006      2686            push    ar6
0A7F C007      2687            push    ar7
0A81 C000      2688            push    ar0
0A83 C001      2689            push    ar1
0A85 120000    2690            lcall   _eputs
0A88           2691   ;        EFM8_JDY40_test.c:652: PrintNumber(pin, 10, 1);
0A88 AAF0      2692            mov     r2,_GetFrequency_PARM_2
0A8A E5F1      2693            mov     a,(_GetFrequency_PARM_2 + 1)
0A8C FB        2694            mov     r3,a
0A8D 33        2695            rlc     a
0A8E 95E0      2696            subb    a,acc
0A90 FC        2697            mov     r4,a
0A91 FD        2698            mov     r5,a
0A92 75900A    2699            mov     _PrintNumber_PARM_2,#0x0A
0A95 E4        2700            clr     a
0A96 F591      2701            mov     (_PrintNumber_PARM_2 + 1),a
0A98 754001    2702            mov     _PrintNumber_PARM_3,#0x01
0A9B E4        2703            clr     a
0A9C F541      2704            mov     (_PrintNumber_PARM_3 + 1),a
0A9E 8A82      2705            mov     dpl,r2
0AA0 8B83      2706            mov     dph,r3
0AA2 8CF0      2707            mov     b,r4
0AA4 ED        2708            mov     a,r5
0AA5 120000    2709            lcall   _PrintNumber
0AA8           2710   ;        EFM8_JDY40_test.c:653: eputs(" = ");
0AA8 90E0B0    2711            mov     dptr,#__str_5
0AAB 75F080    2712            mov     b,#0x80
0AAE 120000    2713            lcall   _eputs
0AB1 D001      2714            pop     ar1
0AB3 D000      2715            pop     ar0
0AB5 D007      2716            pop     ar7
0AB7 D006      2717            pop     ar6
0AB9           2718   ;        EFM8_JDY40_test.c:654: PrintNumber(f, 10, 7);
0AB9 75900A    2719            mov     _PrintNumber_PARM_2,#0x0A
0ABC E4        2720            clr     a
0ABD F591      2721            mov     (_PrintNumber_PARM_2 + 1),a
0ABF 754007    2722            mov     _PrintNumber_PARM_3,#0x07
0AC2 E4        2723            clr     a
0AC3 F541      2724            mov     (_PrintNumber_PARM_3 + 1),a
0AC5 8E82      2725            mov     dpl,r6
0AC7 8F83      2726            mov     dph,r7
0AC9 88F0      2727            mov     b,r0
0ACB E9        2728            mov     a,r1
0ACC C006      2729            push    ar6
0ACE C007      2730            push    ar7
0AD0 C000      2731            push    ar0
0AD2 C001      2732            push    ar1
0AD4 120000    2733            lcall   _PrintNumber
0AD7           2734   ;        EFM8_JDY40_test.c:655: eputs("Hz");
0AD7 90E0F0    2735            mov     dptr,#__str_6
0ADA 75F080    2736            mov     b,#0x80
0ADD 120000    2737            lcall   _eputs
0AE0 D001      2738            pop     ar1
0AE2 D000      2739            pop     ar0
0AE4 D007      2740            pop     ar7
0AE6 D006      2741            pop     ar6
0AE8           2742   L027002?:
0AE8           2743   ;        EFM8_JDY40_test.c:663: return f;
0AE8 8E82      2744            mov     dpl,r6
0AEA 8F83      2745            mov     dph,r7
0AEC 88F0      2746            mov     b,r0
0AEE E9        2747            mov     a,r1
0AEF 22        2748            ret
0AF0           2749   ;------------------------------------------------------------
0AF0           2750   ;Allocation info for local variables in function 'automaticmode'
0AF0           2751   ;------------------------------------------------------------
0AF0           2752   ;sideper                   Allocated with name '_automaticmode_PARM_2'
0AF0           2753   ;fowardper                 Allocated to registers r2 r3 r4 r5 
0AF0           2754   ;control                   Allocated to registers 
0AF0           2755   ;------------------------------------------------------------
0AF0           2756   ;        EFM8_JDY40_test.c:672: void automaticmode(float fowardper, float sideper)
0AF0           2757   ;        -----------------------------------------
0AF0           2758   ;         function automaticmode
0AF0           2759   ;        -----------------------------------------
0AF0           2760   _automaticmode:
0AF0 AA82      2761            mov     r2,dpl
0AF2 AB83      2762            mov     r3,dph
0AF4 ACF0      2763            mov     r4,b
0AF6 FD        2764            mov     r5,a
0AF7           2765   ;        EFM8_JDY40_test.c:675: direction = 3;
0AF7 758003    2766            mov     _direction,#0x03
0AFA E4        2767            clr     a
0AFB F581      2768            mov     (_direction + 1),a
0AFD           2769   ;        EFM8_JDY40_test.c:677: P3_7=1;  //wheel 1
0AFD D2B7      2770            setb    _P3_7
0AFF           2771   ;        EFM8_JDY40_test.c:678: P3_2=0;  // wheel 1 
0AFF C2B2      2772            clr     _P3_2
0B01           2773   ;        EFM8_JDY40_test.c:679: P3_0=0; // wheel 2
0B01 C2B0      2774            clr     _P3_0
0B03           2775   ;        EFM8_JDY40_test.c:680: P2_5=1; // wheel 2
0B03 D2A5      2776            setb    _P2_5
0B05           2777   ;        EFM8_JDY40_test.c:683: if ( fowardper >= p_thresh)
0B05 74CD      2778            mov     a,#0xCD
0B07 C0E0      2779            push    acc
0B09 74CC      2780            mov     a,#0xCC
0B0B C0E0      2781            push    acc
0B0D C0E0      2782            push    acc
0B0F 743D      2783            mov     a,#0x3D
0B11 C0E0      2784            push    acc
0B13 8A82      2785            mov     dpl,r2
0B15 8B83      2786            mov     dph,r3
0B17 8CF0      2787            mov     b,r4
0B19 ED        2788            mov     a,r5
0B1A 120000    2789            lcall   ___fslt
0B1D AA82      2790            mov     r2,dpl
0B1F E581      2791            mov     a,sp
0B21 24FC      2792            add     a,#0xfc
0B23 F581      2793            mov     sp,a
0B25 EA        2794            mov     a,r2
0B26 7000      2795            jnz     L028006?
0B28           2796   ;        EFM8_JDY40_test.c:685: P3_7=0;  //wheel 1
0B28 C2B7      2797            clr     _P3_7
0B2A           2798   ;        EFM8_JDY40_test.c:686: P3_2=1;  // wheel 1 
0B2A D2B2      2799            setb    _P3_2
0B2C           2800   ;        EFM8_JDY40_test.c:687: P3_0=1; // wheel 2
0B2C D2B0      2801            setb    _P3_0
0B2E           2802   ;        EFM8_JDY40_test.c:688: P2_5=0; // wheel 2
0B2E C2A5      2803            clr     _P2_5
0B30           2804   ;        EFM8_JDY40_test.c:689: waitms(1500);
0B30 9005DC    2805            mov     dptr,#0x05DC
0B33 120000    2806            lcall   _waitms
0B36           2807   ;        EFM8_JDY40_test.c:690: if ( peggingsidnatu == 0 )
0B36 E540      2808            mov     a,_peggingsidnatu
0B38 4541      2809            orl     a,(_peggingsidnatu + 1)
0B3A 7000      2810            jnz     L028002?
0B3C           2811   ;        EFM8_JDY40_test.c:692: P3_7=0;  //wheel 1
0B3C C2B7      2812            clr     _P3_7
0B3E           2813   ;        EFM8_JDY40_test.c:693: P3_2=1;  // wheel 1 
0B3E D2B2      2814            setb    _P3_2
0B40           2815   ;        EFM8_JDY40_test.c:694: P3_0=0; // wheel 2
0B40 C2B0      2816            clr     _P3_0
0B42           2817   ;        EFM8_JDY40_test.c:695: P2_5=0; // wheel 2
0B42 C2A5      2818            clr     _P2_5
0B44           2819   ;        EFM8_JDY40_test.c:696: waitms(1500);
0B44 9005DC    2820            mov     dptr,#0x05DC
0B47 120000    2821            lcall   _waitms
0B4A           2822   ;        EFM8_JDY40_test.c:697: peggingsidnatu = 1;
0B4A 754001    2823            mov     _peggingsidnatu,#0x01
0B4D E4        2824            clr     a
0B4E F541      2825            mov     (_peggingsidnatu + 1),a
0B50           2826   ;        EFM8_JDY40_test.c:698: return;
0B50 22        2827            ret
0B51           2828   L028002?:
0B51           2829   ;        EFM8_JDY40_test.c:701: if ( peggingsidnatu == 1 )
0B51 7401      2830            mov     a,#0x01
0B53 B540F0    2831            cjne    a,_peggingsidnatu,L028023?
0B56 E4        2832            clr     a
0B57 B541F0    2833            cjne    a,(_peggingsidnatu + 1),L028023?
0B5A 8000      2834            sjmp    L028024?
0B5C           2835   L028023?:
0B5C 8000      2836            sjmp    L028006?
0B5E           2837   L028024?:
0B5E           2838   ;        EFM8_JDY40_test.c:703: P3_7=0;  //wheel 1
0B5E C2B7      2839            clr     _P3_7
0B60           2840   ;        EFM8_JDY40_test.c:704: P3_2=0;  // wheel 1 
0B60 C2B2      2841            clr     _P3_2
0B62           2842   ;        EFM8_JDY40_test.c:705: P3_0=1; // wheel 2
0B62 D2B0      2843            setb    _P3_0
0B64           2844   ;        EFM8_JDY40_test.c:706: P2_5=0; // wheel 2
0B64 C2A5      2845            clr     _P2_5
0B66           2846   ;        EFM8_JDY40_test.c:707: waitms(1500);
0B66 9005DC    2847            mov     dptr,#0x05DC
0B69 120000    2848            lcall   _waitms
0B6C           2849   ;        EFM8_JDY40_test.c:708: peggingsidnatu = 0;
0B6C E4        2850            clr     a
0B6D F540      2851            mov     _peggingsidnatu,a
0B6F F541      2852            mov     (_peggingsidnatu + 1),a
0B71           2853   ;        EFM8_JDY40_test.c:709: return;
0B71 22        2854            ret
0B72           2855   L028006?:
0B72           2856   ;        EFM8_JDY40_test.c:714: if ( sideper >= p_thresh)
0B72 74CD      2857            mov     a,#0xCD
0B74 C0E0      2858            push    acc
0B76 74CC      2859            mov     a,#0xCC
0B78 C0E0      2860            push    acc
0B7A C0E0      2861            push    acc
0B7C 743D      2862            mov     a,#0x3D
0B7E C0E0      2863            push    acc
0B80 85A082    2864            mov     dpl,_automaticmode_PARM_2
0B83 85A183    2865            mov     dph,(_automaticmode_PARM_2 + 1)
0B86 85A2F0    2866            mov     b,(_automaticmode_PARM_2 + 2)
0B89 E5A3      2867            mov     a,(_automaticmode_PARM_2 + 3)
0B8B 120000    2868            lcall   ___fslt
0B8E AA82      2869            mov     r2,dpl
0B90 E581      2870            mov     a,sp
0B92 24FC      2871            add     a,#0xfc
0B94 F581      2872            mov     sp,a
0B96 EA        2873            mov     a,r2
0B97 7000      2874            jnz     L028013?
0B99           2875   ;        EFM8_JDY40_test.c:716: if ( peggingsidnatu == 0 )
0B99 E540      2876            mov     a,_peggingsidnatu
0B9B 4541      2877            orl     a,(_peggingsidnatu + 1)
0B9D 7000      2878            jnz     L028008?
0B9F           2879   ;        EFM8_JDY40_test.c:718: P3_7=0;  //wheel 1
0B9F C2B7      2880            clr     _P3_7
0BA1           2881   ;        EFM8_JDY40_test.c:719: P3_2=1;  // wheel 1 
0BA1 D2B2      2882            setb    _P3_2
0BA3           2883   ;        EFM8_JDY40_test.c:720: P3_0=0; // wheel 2
0BA3 C2B0      2884            clr     _P3_0
0BA5           2885   ;        EFM8_JDY40_test.c:721: P2_5=0; // wheel 2
0BA5 C2A5      2886            clr     _P2_5
0BA7           2887   ;        EFM8_JDY40_test.c:722: waitms(1500);
0BA7 9005DC    2888            mov     dptr,#0x05DC
0BAA           2889   ;        EFM8_JDY40_test.c:724: return;
0BAA 020000    2890            ljmp    _waitms
0BAD           2891   L028008?:
0BAD           2892   ;        EFM8_JDY40_test.c:727: if ( peggingsidnatu == 1 )
0BAD 7401      2893            mov     a,#0x01
0BAF B540F0    2894            cjne    a,_peggingsidnatu,L028027?
0BB2 E4        2895            clr     a
0BB3 B541F0    2896            cjne    a,(_peggingsidnatu + 1),L028027?
0BB6 8000      2897            sjmp    L028028?
0BB8           2898   L028027?:
0BB8 22        2899            ret
0BB9           2900   L028028?:
0BB9           2901   ;        EFM8_JDY40_test.c:729: P3_7=0;  //wheel 1
0BB9 C2B7      2902            clr     _P3_7
0BBB           2903   ;        EFM8_JDY40_test.c:730: P3_2=0;  // wheel 1 
0BBB C2B2      2904            clr     _P3_2
0BBD           2905   ;        EFM8_JDY40_test.c:731: P3_0=1; // wheel 2
0BBD D2B0      2906            setb    _P3_0
0BBF           2907   ;        EFM8_JDY40_test.c:732: P2_5=0; // wheel 2
0BBF C2A5      2908            clr     _P2_5
0BC1           2909   ;        EFM8_JDY40_test.c:733: waitms(1500);
0BC1 9005DC    2910            mov     dptr,#0x05DC
0BC4           2911   ;        EFM8_JDY40_test.c:735: return;
0BC4 020000    2912            ljmp    _waitms
0BC7           2913   L028013?:
0BC7 22        2914            ret
0BC8           2915   ;------------------------------------------------------------
0BC8           2916   ;Allocation info for local variables in function 'LCD_pulse'
0BC8           2917   ;------------------------------------------------------------
0BC8           2918   ;------------------------------------------------------------
0BC8           2919   ;        EFM8_JDY40_test.c:744: void LCD_pulse (void)
0BC8           2920   ;        -----------------------------------------
0BC8           2921   ;         function LCD_pulse
0BC8           2922   ;        -----------------------------------------
0BC8           2923   _LCD_pulse:
0BC8           2924   ;        EFM8_JDY40_test.c:746: LCD_E=1;
0BC8 D2A0      2925            setb    _P2_0
0BCA           2926   ;        EFM8_JDY40_test.c:747: Timer3us(40);
0BCA 758228    2927            mov     dpl,#0x28
0BCD 120000    2928            lcall   _Timer3us
0BD0           2929   ;        EFM8_JDY40_test.c:748: LCD_E=0;
0BD0 C2A0      2930            clr     _P2_0
0BD2 22        2931            ret
0BD3           2932   ;------------------------------------------------------------
0BD3           2933   ;Allocation info for local variables in function 'LCD_byte'
0BD3           2934   ;------------------------------------------------------------
0BD3           2935   ;x                         Allocated to registers r2 
0BD3           2936   ;------------------------------------------------------------
0BD3           2937   ;        EFM8_JDY40_test.c:751: void LCD_byte (unsigned char x)
0BD3           2938   ;        -----------------------------------------
0BD3           2939   ;         function LCD_byte
0BD3           2940   ;        -----------------------------------------
0BD3           2941   _LCD_byte:
0BD3 AA82      2942            mov     r2,dpl
0BD5           2943   ;        EFM8_JDY40_test.c:754: ACC=x; //Send high nible
0BD5 8AE0      2944            mov     _ACC,r2
0BD7           2945   ;        EFM8_JDY40_test.c:755: LCD_D7=ACC_7;
0BD7 A2E7      2946            mov     c,_ACC_7
0BD9 9290      2947            mov     _P1_0,c
0BDB           2948   ;        EFM8_JDY40_test.c:756: LCD_D6=ACC_6;
0BDB A2E6      2949            mov     c,_ACC_6
0BDD 9291      2950            mov     _P1_1,c
0BDF           2951   ;        EFM8_JDY40_test.c:757: LCD_D5=ACC_5;
0BDF A2E5      2952            mov     c,_ACC_5
0BE1 9292      2953            mov     _P1_2,c
0BE3           2954   ;        EFM8_JDY40_test.c:758: LCD_D4=ACC_4;
0BE3 A2E4      2955            mov     c,_ACC_4
0BE5 9293      2956            mov     _P1_3,c
0BE7           2957   ;        EFM8_JDY40_test.c:759: LCD_pulse();
0BE7 C002      2958            push    ar2
0BE9 120000    2959            lcall   _LCD_pulse
0BEC           2960   ;        EFM8_JDY40_test.c:760: Timer3us(40);
0BEC 758228    2961            mov     dpl,#0x28
0BEF 120000    2962            lcall   _Timer3us
0BF2 D002      2963            pop     ar2
0BF4           2964   ;        EFM8_JDY40_test.c:761: ACC=x; //Send low nible
0BF4 8AE0      2965            mov     _ACC,r2
0BF6           2966   ;        EFM8_JDY40_test.c:762: LCD_D7=ACC_3;
0BF6 A2E3      2967            mov     c,_ACC_3
0BF8 9290      2968            mov     _P1_0,c
0BFA           2969   ;        EFM8_JDY40_test.c:763: LCD_D6=ACC_2;
0BFA A2E2      2970            mov     c,_ACC_2
0BFC 9291      2971            mov     _P1_1,c
0BFE           2972   ;        EFM8_JDY40_test.c:764: LCD_D5=ACC_1;
0BFE A2E1      2973            mov     c,_ACC_1
0C00 9292      2974            mov     _P1_2,c
0C02           2975   ;        EFM8_JDY40_test.c:765: LCD_D4=ACC_0;
0C02 A2E0      2976            mov     c,_ACC_0
0C04 9293      2977            mov     _P1_3,c
0C06           2978   ;        EFM8_JDY40_test.c:766: LCD_pulse();
0C06 020000    2979            ljmp    _LCD_pulse
0C09           2980   ;------------------------------------------------------------
0C09           2981   ;Allocation info for local variables in function 'WriteData'
0C09           2982   ;------------------------------------------------------------
0C09           2983   ;x                         Allocated to registers r2 
0C09           2984   ;------------------------------------------------------------
0C09           2985   ;        EFM8_JDY40_test.c:769: void WriteData (unsigned char x)
0C09           2986   ;        -----------------------------------------
0C09           2987   ;         function WriteData
0C09           2988   ;        -----------------------------------------
0C09           2989   _WriteData:
0C09 AA82      2990            mov     r2,dpl
0C0B           2991   ;        EFM8_JDY40_test.c:771: LCD_RS=1;
0C0B D282      2992            setb    _P0_2
0C0D           2993   ;        EFM8_JDY40_test.c:772: LCD_byte(x);
0C0D 8A82      2994            mov     dpl,r2
0C0F 120000    2995            lcall   _LCD_byte
0C12           2996   ;        EFM8_JDY40_test.c:773: waitms(2);
0C12 900002    2997            mov     dptr,#0x0002
0C15 020000    2998            ljmp    _waitms
0C18           2999   ;------------------------------------------------------------
0C18           3000   ;Allocation info for local variables in function 'WriteCommand'
0C18           3001   ;------------------------------------------------------------
0C18           3002   ;x                         Allocated to registers r2 
0C18           3003   ;------------------------------------------------------------
0C18           3004   ;        EFM8_JDY40_test.c:776: void WriteCommand (unsigned char x)
0C18           3005   ;        -----------------------------------------
0C18           3006   ;         function WriteCommand
0C18           3007   ;        -----------------------------------------
0C18           3008   _WriteCommand:
0C18 AA82      3009            mov     r2,dpl
0C1A           3010   ;        EFM8_JDY40_test.c:778: LCD_RS=0;
0C1A C282      3011            clr     _P0_2
0C1C           3012   ;        EFM8_JDY40_test.c:779: LCD_byte(x);
0C1C 8A82      3013            mov     dpl,r2
0C1E 120000    3014            lcall   _LCD_byte
0C21           3015   ;        EFM8_JDY40_test.c:780: waitms(5);
0C21 900005    3016            mov     dptr,#0x0005
0C24 020000    3017            ljmp    _waitms
0C27           3018   ;------------------------------------------------------------
0C27           3019   ;Allocation info for local variables in function 'LCD_4BIT'
0C27           3020   ;------------------------------------------------------------
0C27           3021   ;------------------------------------------------------------
0C27           3022   ;        EFM8_JDY40_test.c:783: void LCD_4BIT (void)
0C27           3023   ;        -----------------------------------------
0C27           3024   ;         function LCD_4BIT
0C27           3025   ;        -----------------------------------------
0C27           3026   _LCD_4BIT:
0C27           3027   ;        EFM8_JDY40_test.c:785: LCD_E=0; // Resting state of LCD's enable is zero
0C27 C2A0      3028            clr     _P2_0
0C29           3029   ;        EFM8_JDY40_test.c:787: waitms(20);
0C29 900014    3030            mov     dptr,#0x0014
0C2C 120000    3031            lcall   _waitms
0C2F           3032   ;        EFM8_JDY40_test.c:789: WriteCommand(0x33);
0C2F 758233    3033            mov     dpl,#0x33
0C32 120000    3034            lcall   _WriteCommand
0C35           3035   ;        EFM8_JDY40_test.c:790: WriteCommand(0x33);
0C35 758233    3036            mov     dpl,#0x33
0C38 120000    3037            lcall   _WriteCommand
0C3B           3038   ;        EFM8_JDY40_test.c:791: WriteCommand(0x32); // Change to 4-bit mode
0C3B 758232    3039            mov     dpl,#0x32
0C3E 120000    3040            lcall   _WriteCommand
0C41           3041   ;        EFM8_JDY40_test.c:794: WriteCommand(0x28);
0C41 758228    3042            mov     dpl,#0x28
0C44 120000    3043            lcall   _WriteCommand
0C47           3044   ;        EFM8_JDY40_test.c:795: WriteCommand(0x0c);
0C47 75820C    3045            mov     dpl,#0x0C
0C4A 120000    3046            lcall   _WriteCommand
0C4D           3047   ;        EFM8_JDY40_test.c:796: WriteCommand(0x01); // Clear screen command (takes some time)
0C4D 758201    3048            mov     dpl,#0x01
0C50 120000    3049            lcall   _WriteCommand
0C53           3050   ;        EFM8_JDY40_test.c:797: waitms(20); // Wait for clear screen command to finsih.
0C53 900014    3051            mov     dptr,#0x0014
0C56 020000    3052            ljmp    _waitms
0C59           3053   ;------------------------------------------------------------
0C59           3054   ;Allocation info for local variables in function 'CoinDecider'
0C59           3055   ;------------------------------------------------------------
0C59           3056   ;freq                      Allocated to registers r2 r3 r4 r5 
0C59           3057   ;------------------------------------------------------------
0C59           3058   ;        EFM8_JDY40_test.c:801: int CoinDecider(long int freq)
0C59           3059   ;        -----------------------------------------
0C59           3060   ;         function CoinDecider
0C59           3061   ;        -----------------------------------------
0C59           3062   _CoinDecider:
0C59 AA82      3063            mov     r2,dpl
0C5B AB83      3064            mov     r3,dph
0C5D ACF0      3065            mov     r4,b
0C5F FD        3066            mov     r5,a
0C60           3067   ;        EFM8_JDY40_test.c:803: if(freq>=56300) // detects a coin
0C60 C3        3068            clr     c
0C61 EA        3069            mov     a,r2
0C62 94EC      3070            subb    a,#0xEC
0C64 EB        3071            mov     a,r3
0C65 94DB      3072            subb    a,#0xDB
0C67 EC        3073            mov     a,r4
0C68 9400      3074            subb    a,#0x00
0C6A ED        3075            mov     a,r5
0C6B 6480      3076            xrl     a,#0x80
0C6D 9480      3077            subb    a,#0x80
0C6F 5000      3078            jnc     L034018?
0C71 020000    3079            ljmp    L034010?
0C74           3080   L034018?:
0C74           3081   ;        EFM8_JDY40_test.c:806: if((freq >= 56200) && (freq < 56400))
0C74 C3        3082            clr     c
0C75 EA        3083            mov     a,r2
0C76 9488      3084            subb    a,#0x88
0C78 EB        3085            mov     a,r3
0C79 94DB      3086            subb    a,#0xDB
0C7B EC        3087            mov     a,r4
0C7C 9400      3088            subb    a,#0x00
0C7E ED        3089            mov     a,r5
0C7F 6480      3090            xrl     a,#0x80
0C81 9480      3091            subb    a,#0x80
0C83 4000      3092            jc      L034006?
0C85 EA        3093            mov     a,r2
0C86 9450      3094            subb    a,#0x50
0C88 EB        3095            mov     a,r3
0C89 94DC      3096            subb    a,#0xDC
0C8B EC        3097            mov     a,r4
0C8C 9400      3098            subb    a,#0x00
0C8E ED        3099            mov     a,r5
0C8F 6480      3100            xrl     a,#0x80
0C91 9480      3101            subb    a,#0x80
0C93 5000      3102            jnc     L034006?
0C95           3103   ;        EFM8_JDY40_test.c:808: printf(" DIME");
0C95 7430      3104            mov     a,#__str_7
0C97 C0E0      3105            push    acc
0C99 74E4      3106            mov     a,#(__str_7 >> 8)
0C9B C0E0      3107            push    acc
0C9D 7480      3108            mov     a,#0x80
0C9F C0E0      3109            push    acc
0CA1 120000    3110            lcall   _printf
0CA4 1581      3111            dec     sp
0CA6 1581      3112            dec     sp
0CA8 1581      3113            dec     sp
0CAA 8000      3114            sjmp    L034007?
0CAC           3115   L034006?:
0CAC           3116   ;        EFM8_JDY40_test.c:812: else if ((freq >= 56400) && (freq < 56700))
0CAC C3        3117            clr     c
0CAD EA        3118            mov     a,r2
0CAE 9450      3119            subb    a,#0x50
0CB0 EB        3120            mov     a,r3
0CB1 94DC      3121            subb    a,#0xDC
0CB3 EC        3122            mov     a,r4
0CB4 9400      3123            subb    a,#0x00
0CB6 ED        3124            mov     a,r5
0CB7 6480      3125            xrl     a,#0x80
0CB9 9480      3126            subb    a,#0x80
0CBB 4000      3127            jc      L034002?
0CBD EA        3128            mov     a,r2
0CBE 947C      3129            subb    a,#0x7C
0CC0 EB        3130            mov     a,r3
0CC1 94DD      3131            subb    a,#0xDD
0CC3 EC        3132            mov     a,r4
0CC4 9400      3133            subb    a,#0x00
0CC6 ED        3134            mov     a,r5
0CC7 6480      3135            xrl     a,#0x80
0CC9 9480      3136            subb    a,#0x80
0CCB 5000      3137            jnc     L034002?
0CCD           3138   ;        EFM8_JDY40_test.c:814: printf(" NICKEL");
0CCD 74F0      3139            mov     a,#__str_8
0CCF C0E0      3140            push    acc
0CD1 74E4      3141            mov     a,#(__str_8 >> 8)
0CD3 C0E0      3142            push    acc
0CD5 7480      3143            mov     a,#0x80
0CD7 C0E0      3144            push    acc
0CD9 120000    3145            lcall   _printf
0CDC 1581      3146            dec     sp
0CDE 1581      3147            dec     sp
0CE0 1581      3148            dec     sp
0CE2 8000      3149            sjmp    L034007?
0CE4           3150   L034002?:
0CE4           3151   ;        EFM8_JDY40_test.c:820: printf(" LOONIE");
0CE4 7430      3152            mov     a,#__str_9
0CE6 C0E0      3153            push    acc
0CE8 74E5      3154            mov     a,#(__str_9 >> 8)
0CEA C0E0      3155            push    acc
0CEC 7480      3156            mov     a,#0x80
0CEE C0E0      3157            push    acc
0CF0 120000    3158            lcall   _printf
0CF3 1581      3159            dec     sp
0CF5 1581      3160            dec     sp
0CF7 1581      3161            dec     sp
0CF9           3162   L034007?:
0CF9           3163   ;        EFM8_JDY40_test.c:822: WriteCommand(0x89);
0CF9 758289    3164            mov     dpl,#0x89
0CFC 120000    3165            lcall   _WriteCommand
0CFF           3166   ;        EFM8_JDY40_test.c:823: WriteData(0);
0CFF 758200    3167            mov     dpl,#0x00
0D02 120000    3168            lcall   _WriteData
0D05           3169   ;        EFM8_JDY40_test.c:825: WriteCommand(0x8b);
0D05 75828B    3170            mov     dpl,#0x8B
0D08 120000    3171            lcall   _WriteCommand
0D0B           3172   ;        EFM8_JDY40_test.c:826: WriteData(0);
0D0B 758200    3173            mov     dpl,#0x00
0D0E 120000    3174            lcall   _WriteData
0D11           3175   ;        EFM8_JDY40_test.c:828: WriteCommand(0xca);
0D11 7582CA    3176            mov     dpl,#0xCA
0D14 120000    3177            lcall   _WriteCommand
0D17           3178   ;        EFM8_JDY40_test.c:829: WriteData(1);
0D17 758201    3179            mov     dpl,#0x01
0D1A 120000    3180            lcall   _WriteData
0D1D           3181   ;        EFM8_JDY40_test.c:830: waitms(1000);
0D1D 9003E8    3182            mov     dptr,#0x03E8
0D20 120000    3183            lcall   _waitms
0D23           3184   ;        EFM8_JDY40_test.c:831: WriteCommand(0x89);
0D23 758289    3185            mov     dpl,#0x89
0D26 120000    3186            lcall   _WriteCommand
0D29           3187   ;        EFM8_JDY40_test.c:832: WriteData(2);
0D29 758202    3188            mov     dpl,#0x02
0D2C 120000    3189            lcall   _WriteData
0D2F           3190   ;        EFM8_JDY40_test.c:834: WriteCommand(0x8b);
0D2F 75828B    3191            mov     dpl,#0x8B
0D32 120000    3192            lcall   _WriteCommand
0D35           3193   ;        EFM8_JDY40_test.c:835: WriteData(2);
0D35 758202    3194            mov     dpl,#0x02
0D38 120000    3195            lcall   _WriteData
0D3B           3196   ;        EFM8_JDY40_test.c:837: WriteCommand(0xca);
0D3B 7582CA    3197            mov     dpl,#0xCA
0D3E 120000    3198            lcall   _WriteCommand
0D41           3199   ;        EFM8_JDY40_test.c:838: WriteData(1);
0D41 758201    3200            mov     dpl,#0x01
0D44 120000    3201            lcall   _WriteData
0D47           3202   ;        EFM8_JDY40_test.c:840: return 1;
0D47 900001    3203            mov     dptr,#0x0001
0D4A           3204   ;        EFM8_JDY40_test.c:848: return 0;
0D4A 22        3205            ret
0D4B           3206   L034010?:
0D4B 900000    3207            mov     dptr,#0x0000
0D4E 22        3208            ret
0D4F           3209   ;------------------------------------------------------------
0D4F           3210   ;Allocation info for local variables in function 'main'
0D4F           3211   ;------------------------------------------------------------
0D4F           3212   ;timeout                   Allocated to registers 
0D4F           3213   ;pulse_width               Allocated to registers 
0D4F           3214   ;pulse_width1              Allocated to registers 
0D4F           3215   ;speed                     Allocated with name '_main_speed_1_196'
0D4F           3216   ;steering                  Allocated with name '_main_steering_1_196'
0D4F           3217   ;adcwheel1                 Allocated with name '_main_adcwheel1_1_196'
0D4F           3218   ;adcwheel2                 Allocated with name '_main_adcwheel2_1_196'
0D4F           3219   ;customMouth0              Allocated to registers 
0D4F           3220   ;customMouth1              Allocated to registers 
0D4F           3221   ;customMouth2              Allocated to registers 
0D4F           3222   ;customMouth3              Allocated to registers 
0D4F           3223   ;customMouth4              Allocated to registers 
0D4F           3224   ;customMouth5              Allocated to registers 
0D4F           3225   ;customMouth6              Allocated to registers 
0D4F           3226   ;customMouth7              Allocated to registers 
0D4F           3227   ;customEye0                Allocated to registers 
0D4F           3228   ;customEye1                Allocated to registers 
0D4F           3229   ;customEye2                Allocated to registers 
0D4F           3230   ;customEye3                Allocated to registers 
0D4F           3231   ;customEye4                Allocated to registers 
0D4F           3232   ;customEye5                Allocated to registers 
0D4F           3233   ;customEye6                Allocated to registers 
0D4F           3234   ;customEye7                Allocated to registers 
0D4F           3235   ;i                         Allocated to registers r2 r3 
0D4F           3236   ;count                     Allocated to registers r2 r3 r4 r5 
0D4F           3237   ;f                         Allocated with name '_main_f_1_196'
0D4F           3238   ;coinPresent               Allocated to registers 
0D4F           3239   ;v                         Allocated with name '_main_v_1_196'
0D4F           3240   ;------------------------------------------------------------
0D4F           3241   ;        EFM8_JDY40_test.c:851: void main (void)
0D4F           3242   ;        -----------------------------------------
0D4F           3243   ;         function main
0D4F           3244   ;        -----------------------------------------
0D4F           3245   _main:
0D4F           3246   ;        EFM8_JDY40_test.c:874: waitms(500);
0D4F 9001F4    3247            mov     dptr,#0x01F4
0D52 120000    3248            lcall   _waitms
0D55           3249   ;        EFM8_JDY40_test.c:875: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0D55 7470      3250            mov     a,#__str_10
0D57 C0E0      3251            push    acc
0D59 74E5      3252            mov     a,#(__str_10 >> 8)
0D5B C0E0      3253            push    acc
0D5D 7480      3254            mov     a,#0x80
0D5F C0E0      3255            push    acc
0D61 120000    3256            lcall   _printf
0D64 1581      3257            dec     sp
0D66 1581      3258            dec     sp
0D68 1581      3259            dec     sp
0D6A           3260   ;        EFM8_JDY40_test.c:876: UART1_Init(9600);
0D6A 902580    3261            mov     dptr,#0x2580
0D6D E4        3262            clr     a
0D6E F5F0      3263            mov     b,a
0D70 120000    3264            lcall   _UART1_Init
0D73           3265   ;        EFM8_JDY40_test.c:878: ReceptionOff();
0D73 120000    3266            lcall   _ReceptionOff
0D76           3267   ;        EFM8_JDY40_test.c:879: LCD_4BIT();
0D76 120000    3268            lcall   _LCD_4BIT
0D79           3269   ;        EFM8_JDY40_test.c:881: TIMER0_Init(); 
0D79 120000    3270            lcall   _TIMER0_Init
0D7C           3271   ;        EFM8_JDY40_test.c:883: InitPinADC(2, 1); // Configure P2.1 as analog input
0D7C 756001    3272            mov     _InitPinADC_PARM_2,#0x01
0D7F 758202    3273            mov     dpl,#0x02
0D82 120000    3274            lcall   _InitPinADC
0D85           3275   ;        EFM8_JDY40_test.c:884: InitPinADC(2, 3); // Configure P2.1 as analog input
0D85 756003    3276            mov     _InitPinADC_PARM_2,#0x03
0D88 758202    3277            mov     dpl,#0x02
0D8B 120000    3278            lcall   _InitPinADC
0D8E           3279   ;        EFM8_JDY40_test.c:885: InitADC();
0D8E 120000    3280            lcall   _InitADC
0D91           3281   ;        EFM8_JDY40_test.c:890: SendATCommand("AT+VER\r\n");
0D91 90E5B0    3282            mov     dptr,#__str_11
0D94 75F080    3283            mov     b,#0x80
0D97 120000    3284            lcall   _SendATCommand
0D9A           3285   ;        EFM8_JDY40_test.c:891: SendATCommand("AT+BAUD\r\n");
0D9A 90E5F0    3286            mov     dptr,#__str_12
0D9D 75F080    3287            mov     b,#0x80
0DA0 120000    3288            lcall   _SendATCommand
0DA3           3289   ;        EFM8_JDY40_test.c:892: SendATCommand("AT+RFID\r\n");
0DA3 90E630    3290            mov     dptr,#__str_13
0DA6 75F080    3291            mov     b,#0x80
0DA9 120000    3292            lcall   _SendATCommand
0DAC           3293   ;        EFM8_JDY40_test.c:893: SendATCommand("AT+DVID\r\n");
0DAC 90E670    3294            mov     dptr,#__str_14
0DAF 75F080    3295            mov     b,#0x80
0DB2 120000    3296            lcall   _SendATCommand
0DB5           3297   ;        EFM8_JDY40_test.c:894: SendATCommand("AT+RFC120\r\n");
0DB5 90E6B0    3298            mov     dptr,#__str_15
0DB8 75F080    3299            mov     b,#0x80
0DBB 120000    3300            lcall   _SendATCommand
0DBE           3301   ;        EFM8_JDY40_test.c:895: SendATCommand("AT+POWE\r\n");
0DBE 90E6F0    3302            mov     dptr,#__str_16
0DC1 75F080    3303            mov     b,#0x80
0DC4 120000    3304            lcall   _SendATCommand
0DC7           3305   ;        EFM8_JDY40_test.c:896: SendATCommand("AT+CLSS\r\n");
0DC7 90E730    3306            mov     dptr,#__str_17
0DCA 75F080    3307            mov     b,#0x80
0DCD 120000    3308            lcall   _SendATCommand
0DD0           3309   ;        EFM8_JDY40_test.c:900: SendATCommand("AT+DVIDFFFF\r\n"); 
0DD0 90E770    3310            mov     dptr,#__str_18
0DD3 75F080    3311            mov     b,#0x80
0DD6 120000    3312            lcall   _SendATCommand
0DD9           3313   ;        EFM8_JDY40_test.c:902: WriteCommand(0x40);  // Set CGRAM address
0DD9 758240    3314            mov     dpl,#0x40
0DDC 120000    3315            lcall   _WriteCommand
0DDF           3316   ;        EFM8_JDY40_test.c:903: WriteData(customMouth0 = 0x00);
0DDF 758200    3317            mov     dpl,#0x00
0DE2 120000    3318            lcall   _WriteData
0DE5           3319   ;        EFM8_JDY40_test.c:904: WriteData(customMouth1 = 0x00);
0DE5 758200    3320            mov     dpl,#0x00
0DE8 120000    3321            lcall   _WriteData
0DEB           3322   ;        EFM8_JDY40_test.c:905: WriteData(customMouth2 = 0x00);
0DEB 758200    3323            mov     dpl,#0x00
0DEE 120000    3324            lcall   _WriteData
0DF1           3325   ;        EFM8_JDY40_test.c:906: WriteData(customMouth3 = 0x11);
0DF1 758211    3326            mov     dpl,#0x11
0DF4 120000    3327            lcall   _WriteData
0DF7           3328   ;        EFM8_JDY40_test.c:907: WriteData(customMouth4 = 0x15);
0DF7 758215    3329            mov     dpl,#0x15
0DFA 120000    3330            lcall   _WriteData
0DFD           3331   ;        EFM8_JDY40_test.c:908: WriteData(customMouth5 = 0x0A);
0DFD 75820A    3332            mov     dpl,#0x0A
0E00 120000    3333            lcall   _WriteData
0E03           3334   ;        EFM8_JDY40_test.c:909: WriteData(customMouth6 = 0x00);
0E03 758200    3335            mov     dpl,#0x00
0E06 120000    3336            lcall   _WriteData
0E09           3337   ;        EFM8_JDY40_test.c:910: WriteData(customMouth7 = 0x00);
0E09 758200    3338            mov     dpl,#0x00
0E0C 120000    3339            lcall   _WriteData
0E0F           3340   ;        EFM8_JDY40_test.c:912: WriteCommand(0x48);
0E0F 758248    3341            mov     dpl,#0x48
0E12 120000    3342            lcall   _WriteCommand
0E15           3343   ;        EFM8_JDY40_test.c:913: WriteData(customEye0 = 0x00);
0E15 758200    3344            mov     dpl,#0x00
0E18 120000    3345            lcall   _WriteData
0E1B           3346   ;        EFM8_JDY40_test.c:914: WriteData(customEye1 = 0x0E);    
0E1B 75820E    3347            mov     dpl,#0x0E
0E1E 120000    3348            lcall   _WriteData
0E21           3349   ;        EFM8_JDY40_test.c:915: WriteData(customEye2 = 0x19);
0E21 758219    3350            mov     dpl,#0x19
0E24 120000    3351            lcall   _WriteData
0E27           3352   ;        EFM8_JDY40_test.c:916: WriteData(customEye3 = 0x19);
0E27 758219    3353            mov     dpl,#0x19
0E2A 120000    3354            lcall   _WriteData
0E2D           3355   ;        EFM8_JDY40_test.c:917: WriteData(customEye4 = 0x1F);
0E2D 75821F    3356            mov     dpl,#0x1F
0E30 120000    3357            lcall   _WriteData
0E33           3358   ;        EFM8_JDY40_test.c:918: WriteData(customEye5 = 0x17);
0E33 758217    3359            mov     dpl,#0x17
0E36 120000    3360            lcall   _WriteData
0E39           3361   ;        EFM8_JDY40_test.c:919: WriteData(customEye6 = 0x0E);
0E39 75820E    3362            mov     dpl,#0x0E
0E3C 120000    3363            lcall   _WriteData
0E3F           3364   ;        EFM8_JDY40_test.c:920: WriteData(customEye7 = 0x00);
0E3F 758200    3365            mov     dpl,#0x00
0E42 120000    3366            lcall   _WriteData
0E45           3367   ;        EFM8_JDY40_test.c:922: WriteCommand(0x56);
0E45 758256    3368            mov     dpl,#0x56
0E48 120000    3369            lcall   _WriteCommand
0E4B           3370   ;        EFM8_JDY40_test.c:923: for(i=0; i<8; i++) {
0E4B 7A00      3371            mov     r2,#0x00
0E4D 7B00      3372            mov     r3,#0x00
0E4F           3373   L035020?:
0E4F C3        3374            clr     c
0E50 EA        3375            mov     a,r2
0E51 9408      3376            subb    a,#0x08
0E53 EB        3377            mov     a,r3
0E54 6480      3378            xrl     a,#0x80
0E56 9480      3379            subb    a,#0x80
0E58 5000      3380            jnc     L035023?
0E5A           3381   ;        EFM8_JDY40_test.c:925: WriteData(customSparkle[i]);
0E5A EA        3382            mov     a,r2
0E5B 2470      3383            add     a,#_customSparkle
0E5D F582      3384            mov     dpl,a
0E5F EB        3385            mov     a,r3
0E60 3412      3386            addc    a,#(_customSparkle >> 8)
0E62 F583      3387            mov     dph,a
0E64 E4        3388            clr     a
0E65 93        3389            movc    a,@a+dptr
0E66 F582      3390            mov     dpl,a
0E68 C002      3391            push    ar2
0E6A C003      3392            push    ar3
0E6C 120000    3393            lcall   _WriteData
0E6F D003      3394            pop     ar3
0E71 D002      3395            pop     ar2
0E73           3396   ;        EFM8_JDY40_test.c:923: for(i=0; i<8; i++) {
0E73 0A        3397            inc     r2
0E74 BA00B0    3398            cjne    r2,#0x00,L035020?
0E77 0B        3399            inc     r3
0E78 8000      3400            sjmp    L035020?
0E7A           3401   L035023?:
0E7A           3402   ;        EFM8_JDY40_test.c:930: WriteCommand(0x89);
0E7A 758289    3403            mov     dpl,#0x89
0E7D 120000    3404            lcall   _WriteCommand
0E80           3405   ;        EFM8_JDY40_test.c:931: WriteData(0);
0E80 758200    3406            mov     dpl,#0x00
0E83 120000    3407            lcall   _WriteData
0E86           3408   ;        EFM8_JDY40_test.c:933: WriteCommand(0x8b);
0E86 75828B    3409            mov     dpl,#0x8B
0E89 120000    3410            lcall   _WriteCommand
0E8C           3411   ;        EFM8_JDY40_test.c:934: WriteData(0);
0E8C 758200    3412            mov     dpl,#0x00
0E8F 120000    3413            lcall   _WriteData
0E92           3414   ;        EFM8_JDY40_test.c:936: WriteCommand(0xca);
0E92 7582CA    3415            mov     dpl,#0xCA
0E95 120000    3416            lcall   _WriteCommand
0E98           3417   ;        EFM8_JDY40_test.c:937: WriteData(1);
0E98 758201    3418            mov     dpl,#0x01
0E9B 120000    3419            lcall   _WriteData
0E9E           3420   ;        EFM8_JDY40_test.c:939: WriteCommand(0x64);
0E9E 758264    3421            mov     dpl,#0x64
0EA1 120000    3422            lcall   _WriteCommand
0EA4           3423   ;        EFM8_JDY40_test.c:940: for(i=0; i<8; i++) {
0EA4 7A00      3424            mov     r2,#0x00
0EA6 7B00      3425            mov     r3,#0x00
0EA8           3426   L035024?:
0EA8 C3        3427            clr     c
0EA9 EA        3428            mov     a,r2
0EAA 9408      3429            subb    a,#0x08
0EAC EB        3430            mov     a,r3
0EAD 6480      3431            xrl     a,#0x80
0EAF 9480      3432            subb    a,#0x80
0EB1 5000      3433            jnc     L035027?
0EB3           3434   ;        EFM8_JDY40_test.c:942: WriteData(customSad[i]);
0EB3 EA        3435            mov     a,r2
0EB4 2430      3436            add     a,#_customSad
0EB6 F582      3437            mov     dpl,a
0EB8 EB        3438            mov     a,r3
0EB9 3412      3439            addc    a,#(_customSad >> 8)
0EBB F583      3440            mov     dph,a
0EBD E4        3441            clr     a
0EBE 93        3442            movc    a,@a+dptr
0EBF F582      3443            mov     dpl,a
0EC1 C002      3444            push    ar2
0EC3 C003      3445            push    ar3
0EC5 120000    3446            lcall   _WriteData
0EC8 D003      3447            pop     ar3
0ECA D002      3448            pop     ar2
0ECC           3449   ;        EFM8_JDY40_test.c:940: for(i=0; i<8; i++) {
0ECC 0A        3450            inc     r2
0ECD BA0030    3451            cjne    r2,#0x00,L035024?
0ED0 0B        3452            inc     r3
0ED1 8000      3453            sjmp    L035024?
0ED3           3454   L035027?:
0ED3           3455   ;        EFM8_JDY40_test.c:944: WriteCommand(0x72);
0ED3 758272    3456            mov     dpl,#0x72
0ED6 120000    3457            lcall   _WriteCommand
0ED9           3458   ;        EFM8_JDY40_test.c:945: for(i=0; i<8; i++) {
0ED9 7A00      3459            mov     r2,#0x00
0EDB 7B00      3460            mov     r3,#0x00
0EDD           3461   L035028?:
0EDD C3        3462            clr     c
0EDE EA        3463            mov     a,r2
0EDF 9408      3464            subb    a,#0x08
0EE1 EB        3465            mov     a,r3
0EE2 6480      3466            xrl     a,#0x80
0EE4 9480      3467            subb    a,#0x80
0EE6 5000      3468            jnc     L035018?
0EE8           3469   ;        EFM8_JDY40_test.c:947: WriteData(customFrown[i]);
0EE8 EA        3470            mov     a,r2
0EE9 24F0      3471            add     a,#_customFrown
0EEB F582      3472            mov     dpl,a
0EED EB        3473            mov     a,r3
0EEE 3411      3474            addc    a,#(_customFrown >> 8)
0EF0 F583      3475            mov     dph,a
0EF2 E4        3476            clr     a
0EF3 93        3477            movc    a,@a+dptr
0EF4 F582      3478            mov     dpl,a
0EF6 C002      3479            push    ar2
0EF8 C003      3480            push    ar3
0EFA 120000    3481            lcall   _WriteData
0EFD D003      3482            pop     ar3
0EFF D002      3483            pop     ar2
0F01           3484   ;        EFM8_JDY40_test.c:945: for(i=0; i<8; i++) {
0F01 0A        3485            inc     r2
0F02           3486   ;        EFM8_JDY40_test.c:949: while(1)
0F02 BA00B0    3487            cjne    r2,#0x00,L035028?
0F05 0B        3488            inc     r3
0F06 8000      3489            sjmp    L035028?
0F08           3490   L035018?:
0F08           3491   ;        EFM8_JDY40_test.c:954: count = GetPeriod(200);
0F08 9000C8    3492            mov     dptr,#0x00C8
0F0B 120000    3493            lcall   _GetPeriod
0F0E AA82      3494            mov     r2,dpl
0F10 AB83      3495            mov     r3,dph
0F12 ACF0      3496            mov     r4,b
0F14 FD        3497            mov     r5,a
0F15           3498   ;        EFM8_JDY40_test.c:955: f = GetFrequency(count, 1);
0F15 75F001    3499            mov     _GetFrequency_PARM_2,#0x01
0F18 E4        3500            clr     a
0F19 F5F1      3501            mov     (_GetFrequency_PARM_2 + 1),a
0F1B 8A82      3502            mov     dpl,r2
0F1D 8B83      3503            mov     dph,r3
0F1F 8CF0      3504            mov     b,r4
0F21 ED        3505            mov     a,r5
0F22 120000    3506            lcall   _GetFrequency
0F25           3507   ;        EFM8_JDY40_test.c:956: coinPresent = CoinDecider(f); 
0F25 8582B8    3508            mov     _main_f_1_196,dpl
0F28 8583B9    3509            mov     (_main_f_1_196 + 1),dph
0F2B 85F0BA    3510            mov     (_main_f_1_196 + 2),b
0F2E F5BB      3511            mov     (_main_f_1_196 + 3),a
0F30 120000    3512            lcall   _CoinDecider
0F33           3513   ;        EFM8_JDY40_test.c:957: sprintf(msg, "%ld", f); // subtracted so that it sends a smaller value
0F33 C0B8      3514            push    _main_f_1_196
0F35 C0B9      3515            push    (_main_f_1_196 + 1)
0F37 C0BA      3516            push    (_main_f_1_196 + 2)
0F39 C0BB      3517            push    (_main_f_1_196 + 3)
0F3B 7430      3518            mov     a,#__str_19
0F3D C0E0      3519            push    acc
0F3F 74E9      3520            mov     a,#(__str_19 >> 8)
0F41 C0E0      3521            push    acc
0F43 7480      3522            mov     a,#0x80
0F45 C0E0      3523            push    acc
0F47 7410      3524            mov     a,#_msg
0F49 C0E0      3525            push    acc
0F4B 744D      3526            mov     a,#(_msg >> 8)
0F4D C0E0      3527            push    acc
0F4F 7440      3528            mov     a,#0x40
0F51 C0E0      3529            push    acc
0F53 120000    3530            lcall   _sprintf
0F56 E581      3531            mov     a,sp
0F58 24F6      3532            add     a,#0xf6
0F5A F581      3533            mov     sp,a
0F5C           3534   ;        EFM8_JDY40_test.c:958: sendstr1(msg);
0F5C 904D10    3535            mov     dptr,#_msg
0F5F 75F040    3536            mov     b,#0x40
0F62 120000    3537            lcall   _sendstr1
0F65           3538   ;        EFM8_JDY40_test.c:961: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0F65 75820E    3539            mov     dpl,#0x0E
0F68 120000    3540            lcall   _Volts_at_Pin
0F6B AE82      3541            mov     r6,dpl
0F6D AF83      3542            mov     r7,dph
0F6F AAF0      3543            mov     r2,b
0F71 FB        3544            mov     r3,a
0F72 8EF8      3545            mov     _main_v_1_196,r6
0F74 8FF9      3546            mov     (_main_v_1_196 + 1),r7
0F76 8AFA      3547            mov     (_main_v_1_196 + 2),r2
0F78 8BFB      3548            mov     (_main_v_1_196 + 3),r3
0F7A           3549   ;        EFM8_JDY40_test.c:962: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0F7A 758210    3550            mov     dpl,#0x10
0F7D 120000    3551            lcall   _Volts_at_Pin
0F80 AA82      3552            mov     r2,dpl
0F82 AB83      3553            mov     r3,dph
0F84 ACF0      3554            mov     r4,b
0F86 FD        3555            mov     r5,a
0F87 8AFC      3556            mov     (_main_v_1_196 + 0x0004),r2
0F89 8BFD      3557            mov     ((_main_v_1_196 + 0x0004) + 1),r3
0F8B 8CFE      3558            mov     ((_main_v_1_196 + 0x0004) + 2),r4
0F8D 8DFF      3559            mov     ((_main_v_1_196 + 0x0004) + 3),r5
0F8F           3560   ;        EFM8_JDY40_test.c:966: printf("%ld", f);
0F8F C0B8      3561            push    _main_f_1_196
0F91 C0B9      3562            push    (_main_f_1_196 + 1)
0F93 C0BA      3563            push    (_main_f_1_196 + 2)
0F95 C0BB      3564            push    (_main_f_1_196 + 3)
0F97 7430      3565            mov     a,#__str_19
0F99 C0E0      3566            push    acc
0F9B 74E9      3567            mov     a,#(__str_19 >> 8)
0F9D C0E0      3568            push    acc
0F9F 7480      3569            mov     a,#0x80
0FA1 C0E0      3570            push    acc
0FA3 120000    3571            lcall   _printf
0FA6 E581      3572            mov     a,sp
0FA8 24F9      3573            add     a,#0xf9
0FAA F581      3574            mov     sp,a
0FAC           3575   ;        EFM8_JDY40_test.c:973: if(RXU1()) // Something has arrived
0FAC 120000    3576            lcall   _RXU1
0FAF 4000      3577            jc      L035057?
0FB1 020000    3578            ljmp    L035016?
0FB4           3579   L035057?:
0FB4           3580   ;        EFM8_JDY40_test.c:976: getstr1(buff, sizeof(buff));
0FB4 75C014    3581            mov     _getstr1_PARM_2,#0x14
0FB7 904D50    3582            mov     dptr,#_buff
0FBA 75F040    3583            mov     b,#0x40
0FBD 120000    3584            lcall   _getstr1
0FC0           3585   ;        EFM8_JDY40_test.c:977: if ( strcmp(buff, "A") == 0 )
0FC0 750070    3586            mov     _strcmp_PARM_2,#__str_20
0FC3 7501EA    3587            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
0FC6 750280    3588            mov     (_strcmp_PARM_2 + 2),#0x80
0FC9 904D50    3589            mov     dptr,#_buff
0FCC 75F040    3590            mov     b,#0x40
0FCF 120000    3591            lcall   _strcmp
0FD2 E582      3592            mov     a,dpl
0FD4 8583F0    3593            mov     b,dph
0FD7 45F0      3594            orl     a,b
0FD9 6000      3595            jz      L035058?
0FDB 020000    3596            ljmp    L035011?
0FDE           3597   L035058?:
0FDE           3598   ;        EFM8_JDY40_test.c:979: waitms(500);
0FDE 9001F4    3599            mov     dptr,#0x01F4
0FE1 120000    3600            lcall   _waitms
0FE4           3601   ;        EFM8_JDY40_test.c:980: while(1)
0FE4           3602   L035006?:
0FE4           3603   ;        EFM8_JDY40_test.c:982: direction=3;                     
0FE4 758003    3604            mov     _direction,#0x03
0FE7 E4        3605            clr     a
0FE8 F581      3606            mov     (_direction + 1),a
0FEA           3607   ;        EFM8_JDY40_test.c:983: v[0] = Volts_at_Pin(QFP32_MUX_P2_1);
0FEA 75820E    3608            mov     dpl,#0x0E
0FED 120000    3609            lcall   _Volts_at_Pin
0FF0 AA82      3610            mov     r2,dpl
0FF2 AB83      3611            mov     r3,dph
0FF4 ACF0      3612            mov     r4,b
0FF6 FD        3613            mov     r5,a
0FF7 8AF8      3614            mov     _main_v_1_196,r2
0FF9 8BF9      3615            mov     (_main_v_1_196 + 1),r3
0FFB 8CFA      3616            mov     (_main_v_1_196 + 2),r4
0FFD 8DFB      3617            mov     (_main_v_1_196 + 3),r5
0FFF           3618   ;        EFM8_JDY40_test.c:984: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
0FFF 758210    3619            mov     dpl,#0x10
1002 120000    3620            lcall   _Volts_at_Pin
1005 AA82      3621            mov     r2,dpl
1007 AB83      3622            mov     r3,dph
1009 ACF0      3623            mov     r4,b
100B FD        3624            mov     r5,a
100C 8AFC      3625            mov     (_main_v_1_196 + 0x0004),r2
100E 8BFD      3626            mov     ((_main_v_1_196 + 0x0004) + 1),r3
1010 8CFE      3627            mov     ((_main_v_1_196 + 0x0004) + 2),r4
1012 8DFF      3628            mov     ((_main_v_1_196 + 0x0004) + 3),r5
1014           3629   ;        EFM8_JDY40_test.c:985: automaticmode(v[0], v[1]);
1014 8AA0      3630            mov     _automaticmode_PARM_2,r2
1016 8BA1      3631            mov     (_automaticmode_PARM_2 + 1),r3
1018 8CA2      3632            mov     (_automaticmode_PARM_2 + 2),r4
101A 8DA3      3633            mov     (_automaticmode_PARM_2 + 3),r5
101C 85F882    3634            mov     dpl,_main_v_1_196
101F 85F983    3635            mov     dph,(_main_v_1_196 + 1)
1022 85FAF0    3636            mov     b,(_main_v_1_196 + 2)
1025 E5FB      3637            mov     a,(_main_v_1_196 + 3)
1027 120000    3638            lcall   _automaticmode
102A           3639   ;        EFM8_JDY40_test.c:986: printf("michelle and xinyi sitting in a tree\n\r");
102A 74B0      3640            mov     a,#__str_21
102C C0E0      3641            push    acc
102E 74EB      3642            mov     a,#(__str_21 >> 8)
1030 C0E0      3643            push    acc
1032 7480      3644            mov     a,#0x80
1034 C0E0      3645            push    acc
1036 120000    3646            lcall   _printf
1039 1581      3647            dec     sp
103B 1581      3648            dec     sp
103D 1581      3649            dec     sp
103F           3650   ;        EFM8_JDY40_test.c:987: if  (RXU1())
103F 120000    3651            lcall   _RXU1
1042 5000      3652            jnc     L035006?
1044           3653   ;        EFM8_JDY40_test.c:989: getstr1(buff, sizeof(buff));
1044 75C014    3654            mov     _getstr1_PARM_2,#0x14
1047 904D50    3655            mov     dptr,#_buff
104A 75F040    3656            mov     b,#0x40
104D 120000    3657            lcall   _getstr1
1050           3658   ;        EFM8_JDY40_test.c:990: if ( strcmp(buff, "A") == 0 ) break;
1050 750070    3659            mov     _strcmp_PARM_2,#__str_20
1053 7501EA    3660            mov     (_strcmp_PARM_2 + 1),#(__str_20 >> 8)
1056 750280    3661            mov     (_strcmp_PARM_2 + 2),#0x80
1059 904D50    3662            mov     dptr,#_buff
105C 75F040    3663            mov     b,#0x40
105F 120000    3664            lcall   _strcmp
1062 E582      3665            mov     a,dpl
1064 8583F0    3666            mov     b,dph
1067 45F0      3667            orl     a,b
1069 6000      3668            jz      L035060?
106B 020000    3669            ljmp    L035006?
106E           3670   L035060?:
106E           3671   ;        EFM8_JDY40_test.c:993: if ( strcmp(buff, "S") == 0 )    
106E 750030    3672            mov     _strcmp_PARM_2,#__str_22
1071 7501EC    3673            mov     (_strcmp_PARM_2 + 1),#(__str_22 >> 8)
1074 750280    3674            mov     (_strcmp_PARM_2 + 2),#0x80
1077 904D50    3675            mov     dptr,#_buff
107A 75F040    3676            mov     b,#0x40
107D 120000    3677            lcall   _strcmp
1080 E582      3678            mov     a,dpl
1082 8583F0    3679            mov     b,dph
1085 45F0      3680            orl     a,b
1087 7000      3681            jnz     L035011?
1089           3682   ;        EFM8_JDY40_test.c:995: printf("this should be the motor function");
1089 7470      3683            mov     a,#__str_23
108B C0E0      3684            push    acc
108D 74EC      3685            mov     a,#(__str_23 >> 8)
108F C0E0      3686            push    acc
1091 7480      3687            mov     a,#0x80
1093 C0E0      3688            push    acc
1095 120000    3689            lcall   _printf
1098 1581      3690            dec     sp
109A 1581      3691            dec     sp
109C 1581      3692            dec     sp
109E           3693   ;        EFM8_JDY40_test.c:996: waitms(500);
109E 9001F4    3694            mov     dptr,#0x01F4
10A1 120000    3695            lcall   _waitms
10A4           3696   L035011?:
10A4           3697   ;        EFM8_JDY40_test.c:1000: sscanf(buff, "S%dT%d", &steering, &speed);
10A4 7488      3698            mov     a,#_main_speed_1_196
10A6 C0E0      3699            push    acc
10A8 74C0      3700            mov     a,#(_main_speed_1_196 >> 8)
10AA C0E0      3701            push    acc
10AC 7440      3702            mov     a,#0x40
10AE C0E0      3703            push    acc
10B0 74D8      3704            mov     a,#_main_steering_1_196
10B2 C0E0      3705            push    acc
10B4 74C0      3706            mov     a,#(_main_steering_1_196 >> 8)
10B6 C0E0      3707            push    acc
10B8 7440      3708            mov     a,#0x40
10BA C0E0      3709            push    acc
10BC 74B0      3710            mov     a,#__str_24
10BE C0E0      3711            push    acc
10C0 74EC      3712            mov     a,#(__str_24 >> 8)
10C2 C0E0      3713            push    acc
10C4 7480      3714            mov     a,#0x80
10C6 C0E0      3715            push    acc
10C8 7450      3716            mov     a,#_buff
10CA C0E0      3717            push    acc
10CC 744D      3718            mov     a,#(_buff >> 8)
10CE C0E0      3719            push    acc
10D0 7440      3720            mov     a,#0x40
10D2 C0E0      3721            push    acc
10D4 120000    3722            lcall   _sscanf
10D7 E581      3723            mov     a,sp
10D9 24F4      3724            add     a,#0xf4
10DB F581      3725            mov     sp,a
10DD           3726   ;        EFM8_JDY40_test.c:1005: if (speed < 480 )
10DD C3        3727            clr     c
10DE E588      3728            mov     a,_main_speed_1_196
10E0 94E0      3729            subb    a,#0xE0
10E2 E589      3730            mov     a,(_main_speed_1_196 + 1)
10E4 6480      3731            xrl     a,#0x80
10E6 9481      3732            subb    a,#0x81
10E8 5000      3733            jnc     L035013?
10EA           3734   ;        EFM8_JDY40_test.c:1007: P2_5 = 0;
10EA C2A5      3735            clr     _P2_5
10EC           3736   ;        EFM8_JDY40_test.c:1008: P3_7=0;
10EC C2B7      3737            clr     _P3_7
10EE           3738   ;        EFM8_JDY40_test.c:1009: direction = 1;
10EE 758001    3739            mov     _direction,#0x01
10F1 E4        3740            clr     a
10F2 F581      3741            mov     (_direction + 1),a
10F4 8000      3742            sjmp    L035014?
10F6           3743   L035013?:
10F6           3744   ;        EFM8_JDY40_test.c:1013: P3_2=0;
10F6 C2B2      3745            clr     _P3_2
10F8           3746   ;        EFM8_JDY40_test.c:1014: P3_0=0;
10F8 C2B0      3747            clr     _P3_0
10FA           3748   ;        EFM8_JDY40_test.c:1015: direction = 0;
10FA E4        3749            clr     a
10FB F580      3750            mov     _direction,a
10FD F581      3751            mov     (_direction + 1),a
10FF           3752   L035014?:
10FF           3753   ;        EFM8_JDY40_test.c:1018: ADCsteeringRatio(speed, steering, &adcwheel1, &adcwheel2);
10FF 753028    3754            mov     _ADCsteeringRatio_PARM_3,#_main_adcwheel1_1_196
1102 753100    3755            mov     (_ADCsteeringRatio_PARM_3 + 1),#0x00
1105 753240    3756            mov     (_ADCsteeringRatio_PARM_3 + 2),#0x40
1108 75E078    3757            mov     _ADCsteeringRatio_PARM_4,#_main_adcwheel2_1_196
110B 75E100    3758            mov     (_ADCsteeringRatio_PARM_4 + 1),#0x00
110E 75E240    3759            mov     (_ADCsteeringRatio_PARM_4 + 2),#0x40
1111 85D880    3760            mov     _ADCsteeringRatio_PARM_2,_main_steering_1_196
1114 85D981    3761            mov     (_ADCsteeringRatio_PARM_2 + 1),(_main_steering_1_196 + 1)
1117 858882    3762            mov     dpl,_main_speed_1_196
111A 858983    3763            mov     dph,(_main_speed_1_196 + 1)
111D 120000    3764            lcall   _ADCsteeringRatio
1120           3765   ;        EFM8_JDY40_test.c:1019: pwm_duty4 = ADCtoPWM(adcwheel1);
1120 852882    3766            mov     dpl,_main_adcwheel1_1_196
1123 852983    3767            mov     dph,(_main_adcwheel1_1_196 + 1)
1126 120000    3768            lcall   _ADCtoPWM
1129 858240    3769            mov     _pwm_duty4,dpl
112C 858341    3770            mov     (_pwm_duty4 + 1),dph
112F           3771   ;        EFM8_JDY40_test.c:1020: pwm_duty2 = ADCtoPWM(adcwheel2);
112F 857882    3772            mov     dpl,_main_adcwheel2_1_196
1132 857983    3773            mov     dph,(_main_adcwheel2_1_196 + 1)
1135 120000    3774            lcall   _ADCtoPWM
1138 8582C0    3775            mov     _pwm_duty2,dpl
113B 8583C1    3776            mov     (_pwm_duty2 + 1),dph
113E           3777   ;        EFM8_JDY40_test.c:1025: waitms(5); // The radio seems to need this delay...
113E 900005    3778            mov     dptr,#0x0005
1141 120000    3779            lcall   _waitms
1144           3780   L035016?:
1144           3781   ;        EFM8_JDY40_test.c:1029: eputs("\n");
1144 90EDB0    3782            mov     dptr,#__str_25
1147 75F080    3783            mov     b,#0x80
114A 120000    3784            lcall   _eputs
114D 020000    3785            ljmp    L035018?
1150           3786            rseg R_CSEG
1150           3787   
0000           3788            rseg R_XINIT
0000           3789   
0000           3790            rseg R_CONST
0000           3791   _customSparkle:
0000 04        3792            db 0x04         ; 4
0001 04        3793            db 0x04         ; 4
0002 0A        3794            db 0x0a         ; 10
0003 11        3795            db 0x11         ; 17
0004 0A        3796            db 0x0a         ; 10
0005 04        3797            db 0x04         ; 4
0006 04        3798            db 0x04         ; 4
0007 00        3799            db 0x00         ; 0
0008           3800   _customSad:
0008 00        3801            db 0x00         ; 0
0009 00        3802            db 0x00         ; 0
000A 00        3803            db 0x00         ; 0
000B 11        3804            db 0x11         ; 17
000C 11        3805            db 0x11         ; 17
000D 0E        3806            db 0x0e         ; 14
000E 00        3807            db 0x00         ; 0
000F 00        3808            db 0x00         ; 0
0010           3809   _customFrown:
0010 00        3810            db 0x00         ; 0
0011 00        3811            db 0x00         ; 0
0012 00        3812            db 0x00         ; 0
0013 0E        3813            db 0x0e         ; 14
0014 11        3814            db 0x11         ; 17
0015 11        3815            db 0x11         ; 17
0016 00        3816            db 0x00         ; 0
0017 00        3817            db 0x00         ; 0
0018           3818   __str_0:
0018 436F6D6D  3819            db 'Command: %s'
     616E643A
     202573
0023 00        3820            db 0x00
0024           3821   __str_1:
0024 52657370  3822            db 'Response: %s'
     6F6E7365
     3A202573
0030 0D        3823            db 0x0D
0031 0A        3824            db 0x0A
0032 00        3825            db 0x00
0033           3826   __str_2:
0033 41542B44  3827            db 'AT+DVID0000'
     56494430
     303030
003E 0D        3828            db 0x0D
003F 0A        3829            db 0x0A
0040 00        3830            db 0x00
0041           3831   _PrintNumber_HexDigit_1_163:
0041 30313233  3832            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0051 00        3833            db 0x00
0052           3834   __str_4:
0052 2066      3835            db ' f'
0054 00        3836            db 0x00
0055           3837   __str_5:
0055 203D20    3838            db ' = '
0058 00        3839            db 0x00
0059           3840   __str_6:
0059 487A      3841            db 'Hz'
005B 00        3842            db 0x00
005C           3843   __str_7:
005C 2044494D  3844            db ' DIME'
     45
0061 00        3845            db 0x00
0062           3846   __str_8:
0062 204E4943  3847            db ' NICKEL'
     4B454C
0069 00        3848            db 0x00
006A           3849   __str_9:
006A 204C4F4F  3850            db ' LOONIE'
     4E4945
0071 00        3851            db 0x00
0072           3852   __str_10:
0072 0D        3853            db 0x0D
0073 0A        3854            db 0x0A
0074 45464D38  3855            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
008F 0D        3856            db 0x0D
0090 0A        3857            db 0x0A
0091 00        3858            db 0x00
0092           3859   __str_11:
0092 41542B56  3860            db 'AT+VER'
     4552
0098 0D        3861            db 0x0D
0099 0A        3862            db 0x0A
009A 00        3863            db 0x00
009B           3864   __str_12:
009B 41542B42  3865            db 'AT+BAUD'
     415544
00A2 0D        3866            db 0x0D
00A3 0A        3867            db 0x0A
00A4 00        3868            db 0x00
00A5           3869   __str_13:
00A5 41542B52  3870            db 'AT+RFID'
     464944
00AC 0D        3871            db 0x0D
00AD 0A        3872            db 0x0A
00AE 00        3873            db 0x00
00AF           3874   __str_14:
00AF 41542B44  3875            db 'AT+DVID'
     564944
00B6 0D        3876            db 0x0D
00B7 0A        3877            db 0x0A
00B8 00        3878            db 0x00
00B9           3879   __str_15:
00B9 41542B52  3880            db 'AT+RFC120'
     46433132
     30
00C2 0D        3881            db 0x0D
00C3 0A        3882            db 0x0A
00C4 00        3883            db 0x00
00C5           3884   __str_16:
00C5 41542B50  3885            db 'AT+POWE'
     4F5745
00CC 0D        3886            db 0x0D
00CD 0A        3887            db 0x0A
00CE 00        3888            db 0x00
00CF           3889   __str_17:
00CF 41542B43  3890            db 'AT+CLSS'
     4C5353
00D6 0D        3891            db 0x0D
00D7 0A        3892            db 0x0A
00D8 00        3893            db 0x00
00D9           3894   __str_18:
00D9 41542B44  3895            db 'AT+DVIDFFFF'
     56494446
     464646
00E4 0D        3896            db 0x0D
00E5 0A        3897            db 0x0A
00E6 00        3898            db 0x00
00E7           3899   __str_19:
00E7 256C64    3900            db '%ld'
00EA 00        3901            db 0x00
00EB           3902   __str_20:
00EB 41        3903            db 'A'
00EC 00        3904            db 0x00
00ED           3905   __str_21:
00ED 6D696368  3906            db 'michelle and xinyi sitting in a tree'
     656C6C65
     20616E64
     2078696E
     79692073
     69747469
     6E672069
     6E206120
     74726565
0111 0A        3907            db 0x0A
0112 0D        3908            db 0x0D
0113 00        3909            db 0x00
0114           3910   __str_22:
0114 53        3911            db 'S'
0115 00        3912            db 0x00
0116           3913   __str_23:
0116 74686973  3914            db 'this should be the motor function'
     2073686F
     756C6420
     62652074
     6865206D
     6F746F72
     2066756E
     6374696F
     6E
0137 00        3915            db 0x00
0138           3916   __str_24:
0138 53256454  3917            db 'S%dT%d'
     2564
013E 00        3918            db 0x00
013F           3919   __str_25:
013F 0A        3920            db 0x0A
0140 00        3921            db 0x00
0141           3922   
008E           3923            CSEG
008E           3924   
008E           3925   end
