0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 02 00:25:43 2025
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_dataPC
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _ReceptionOff
0000             28            public _SendATCommand
0000             29            public _waitms_or_RI1
0000             30            public _RXU1
0000             31            public _getstr1
0000             32            public _getchar1_with_timeout
0000             33            public _getchar1
0000             34            public _sendstr1
0000             35            public _putchar1
0000             36            public _UART1_Init
0000             37            public _waitms
0000             38            public _Timer3us
0000             39            public __c51_external_startup
0000             40            public _buff
0000             41            public _getstr1_PARM_2
0000             42   ;--------------------------------------------------------
0000             43   ; Special Function Registers
0000             44   ;--------------------------------------------------------
0000             45   _ACC            DATA 0xe0
0000             46   _ADC0ASAH       DATA 0xb6
0000             47   _ADC0ASAL       DATA 0xb5
0000             48   _ADC0ASCF       DATA 0xa1
0000             49   _ADC0ASCT       DATA 0xc7
0000             50   _ADC0CF0        DATA 0xbc
0000             51   _ADC0CF1        DATA 0xb9
0000             52   _ADC0CF2        DATA 0xdf
0000             53   _ADC0CN0        DATA 0xe8
0000             54   _ADC0CN1        DATA 0xb2
0000             55   _ADC0CN2        DATA 0xb3
0000             56   _ADC0GTH        DATA 0xc4
0000             57   _ADC0GTL        DATA 0xc3
0000             58   _ADC0H          DATA 0xbe
0000             59   _ADC0L          DATA 0xbd
0000             60   _ADC0LTH        DATA 0xc6
0000             61   _ADC0LTL        DATA 0xc5
0000             62   _ADC0MX         DATA 0xbb
0000             63   _B              DATA 0xf0
0000             64   _CKCON0         DATA 0x8e
0000             65   _CKCON1         DATA 0xa6
0000             66   _CLEN0          DATA 0xc6
0000             67   _CLIE0          DATA 0xc7
0000             68   _CLIF0          DATA 0xe8
0000             69   _CLKSEL         DATA 0xa9
0000             70   _CLOUT0         DATA 0xd1
0000             71   _CLU0CF         DATA 0xb1
0000             72   _CLU0FN         DATA 0xaf
0000             73   _CLU0MX         DATA 0x84
0000             74   _CLU1CF         DATA 0xb3
0000             75   _CLU1FN         DATA 0xb2
0000             76   _CLU1MX         DATA 0x85
0000             77   _CLU2CF         DATA 0xb6
0000             78   _CLU2FN         DATA 0xb5
0000             79   _CLU2MX         DATA 0x91
0000             80   _CLU3CF         DATA 0xbf
0000             81   _CLU3FN         DATA 0xbe
0000             82   _CLU3MX         DATA 0xae
0000             83   _CMP0CN0        DATA 0x9b
0000             84   _CMP0CN1        DATA 0x99
0000             85   _CMP0MD         DATA 0x9d
0000             86   _CMP0MX         DATA 0x9f
0000             87   _CMP1CN0        DATA 0xbf
0000             88   _CMP1CN1        DATA 0xac
0000             89   _CMP1MD         DATA 0xab
0000             90   _CMP1MX         DATA 0xaa
0000             91   _CRC0CN0        DATA 0xce
0000             92   _CRC0CN1        DATA 0x86
0000             93   _CRC0CNT        DATA 0xd3
0000             94   _CRC0DAT        DATA 0xcb
0000             95   _CRC0FLIP       DATA 0xcf
0000             96   _CRC0IN         DATA 0xca
0000             97   _CRC0ST         DATA 0xd2
0000             98   _DAC0CF0        DATA 0x91
0000             99   _DAC0CF1        DATA 0x92
0000            100   _DAC0H          DATA 0x85
0000            101   _DAC0L          DATA 0x84
0000            102   _DAC1CF0        DATA 0x93
0000            103   _DAC1CF1        DATA 0x94
0000            104   _DAC1H          DATA 0x8a
0000            105   _DAC1L          DATA 0x89
0000            106   _DAC2CF0        DATA 0x95
0000            107   _DAC2CF1        DATA 0x96
0000            108   _DAC2H          DATA 0x8c
0000            109   _DAC2L          DATA 0x8b
0000            110   _DAC3CF0        DATA 0x9a
0000            111   _DAC3CF1        DATA 0x9c
0000            112   _DAC3H          DATA 0x8e
0000            113   _DAC3L          DATA 0x8d
0000            114   _DACGCF0        DATA 0x88
0000            115   _DACGCF1        DATA 0x98
0000            116   _DACGCF2        DATA 0xa2
0000            117   _DERIVID        DATA 0xad
0000            118   _DEVICEID       DATA 0xb5
0000            119   _DPH            DATA 0x83
0000            120   _DPL            DATA 0x82
0000            121   _EIE1           DATA 0xe6
0000            122   _EIE2           DATA 0xf3
0000            123   _EIP1           DATA 0xbb
0000            124   _EIP1H          DATA 0xee
0000            125   _EIP2           DATA 0xed
0000            126   _EIP2H          DATA 0xf6
0000            127   _EMI0CN         DATA 0xe7
0000            128   _FLKEY          DATA 0xb7
0000            129   _HFO0CAL        DATA 0xc7
0000            130   _HFO1CAL        DATA 0xd6
0000            131   _HFOCN          DATA 0xef
0000            132   _I2C0ADM        DATA 0xff
0000            133   _I2C0CN0        DATA 0xba
0000            134   _I2C0DIN        DATA 0xbc
0000            135   _I2C0DOUT       DATA 0xbb
0000            136   _I2C0FCN0       DATA 0xad
0000            137   _I2C0FCN1       DATA 0xab
0000            138   _I2C0FCT        DATA 0xf5
0000            139   _I2C0SLAD       DATA 0xbd
0000            140   _I2C0STAT       DATA 0xb9
0000            141   _IE             DATA 0xa8
0000            142   _IP             DATA 0xb8
0000            143   _IPH            DATA 0xf2
0000            144   _IT01CF         DATA 0xe4
0000            145   _LFO0CN         DATA 0xb1
0000            146   _P0             DATA 0x80
0000            147   _P0MASK         DATA 0xfe
0000            148   _P0MAT          DATA 0xfd
0000            149   _P0MDIN         DATA 0xf1
0000            150   _P0MDOUT        DATA 0xa4
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1             DATA 0x90
0000            153   _P1MASK         DATA 0xee
0000            154   _P1MAT          DATA 0xed
0000            155   _P1MDIN         DATA 0xf2
0000            156   _P1MDOUT        DATA 0xa5
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2             DATA 0xa0
0000            159   _P2MASK         DATA 0xfc
0000            160   _P2MAT          DATA 0xfb
0000            161   _P2MDIN         DATA 0xf3
0000            162   _P2MDOUT        DATA 0xa6
0000            163   _P2SKIP         DATA 0xcc
0000            164   _P3             DATA 0xb0
0000            165   _P3MDIN         DATA 0xf4
0000            166   _P3MDOUT        DATA 0x9c
0000            167   _PCA0CENT       DATA 0x9e
0000            168   _PCA0CLR        DATA 0x9c
0000            169   _PCA0CN0        DATA 0xd8
0000            170   _PCA0CPH0       DATA 0xfc
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPH3       DATA 0xf5
0000            174   _PCA0CPH4       DATA 0x85
0000            175   _PCA0CPH5       DATA 0xde
0000            176   _PCA0CPL0       DATA 0xfb
0000            177   _PCA0CPL1       DATA 0xe9
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPL3       DATA 0xf4
0000            180   _PCA0CPL4       DATA 0x84
0000            181   _PCA0CPL5       DATA 0xdd
0000            182   _PCA0CPM0       DATA 0xda
0000            183   _PCA0CPM1       DATA 0xdb
0000            184   _PCA0CPM2       DATA 0xdc
0000            185   _PCA0CPM3       DATA 0xae
0000            186   _PCA0CPM4       DATA 0xaf
0000            187   _PCA0CPM5       DATA 0xcc
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0MD         DATA 0xd9
0000            191   _PCA0POL        DATA 0x96
0000            192   _PCA0PWM        DATA 0xf7
0000            193   _PCON0          DATA 0x87
0000            194   _PCON1          DATA 0xcd
0000            195   _PFE0CN         DATA 0xc1
0000            196   _PRTDRV         DATA 0xf6
0000            197   _PSCTL          DATA 0x8f
0000            198   _PSTAT0         DATA 0xaa
0000            199   _PSW            DATA 0xd0
0000            200   _REF0CN         DATA 0xd1
0000            201   _REG0CN         DATA 0xc9
0000            202   _REVID          DATA 0xb6
0000            203   _RSTSRC         DATA 0xef
0000            204   _SBCON1         DATA 0x94
0000            205   _SBRLH1         DATA 0x96
0000            206   _SBRLL1         DATA 0x95
0000            207   _SBUF           DATA 0x99
0000            208   _SBUF0          DATA 0x99
0000            209   _SBUF1          DATA 0x92
0000            210   _SCON           DATA 0x98
0000            211   _SCON0          DATA 0x98
0000            212   _SCON1          DATA 0xc8
0000            213   _SFRPAGE        DATA 0xa7
0000            214   _SFRPGCN        DATA 0xbc
0000            215   _SFRSTACK       DATA 0xd7
0000            216   _SMB0ADM        DATA 0xd6
0000            217   _SMB0ADR        DATA 0xd7
0000            218   _SMB0CF         DATA 0xc1
0000            219   _SMB0CN0        DATA 0xc0
0000            220   _SMB0DAT        DATA 0xc2
0000            221   _SMB0FCN0       DATA 0xc3
0000            222   _SMB0FCN1       DATA 0xc4
0000            223   _SMB0FCT        DATA 0xef
0000            224   _SMB0RXLN       DATA 0xc5
0000            225   _SMB0TC         DATA 0xac
0000            226   _SMOD1          DATA 0x93
0000            227   _SP             DATA 0x81
0000            228   _SPI0CFG        DATA 0xa1
0000            229   _SPI0CKR        DATA 0xa2
0000            230   _SPI0CN0        DATA 0xf8
0000            231   _SPI0DAT        DATA 0xa3
0000            232   _SPI0FCN0       DATA 0x9a
0000            233   _SPI0FCN1       DATA 0x9b
0000            234   _SPI0FCT        DATA 0xf7
0000            235   _SPI0PCF        DATA 0xdf
0000            236   _TCON           DATA 0x88
0000            237   _TH0            DATA 0x8c
0000            238   _TH1            DATA 0x8d
0000            239   _TL0            DATA 0x8a
0000            240   _TL1            DATA 0x8b
0000            241   _TMOD           DATA 0x89
0000            242   _TMR2CN0        DATA 0xc8
0000            243   _TMR2CN1        DATA 0xfd
0000            244   _TMR2H          DATA 0xcf
0000            245   _TMR2L          DATA 0xce
0000            246   _TMR2RLH        DATA 0xcb
0000            247   _TMR2RLL        DATA 0xca
0000            248   _TMR3CN0        DATA 0x91
0000            249   _TMR3CN1        DATA 0xfe
0000            250   _TMR3H          DATA 0x95
0000            251   _TMR3L          DATA 0x94
0000            252   _TMR3RLH        DATA 0x93
0000            253   _TMR3RLL        DATA 0x92
0000            254   _TMR4CN0        DATA 0x98
0000            255   _TMR4CN1        DATA 0xff
0000            256   _TMR4H          DATA 0xa5
0000            257   _TMR4L          DATA 0xa4
0000            258   _TMR4RLH        DATA 0xa3
0000            259   _TMR4RLL        DATA 0xa2
0000            260   _TMR5CN0        DATA 0xc0
0000            261   _TMR5CN1        DATA 0xf1
0000            262   _TMR5H          DATA 0xd5
0000            263   _TMR5L          DATA 0xd4
0000            264   _TMR5RLH        DATA 0xd3
0000            265   _TMR5RLL        DATA 0xd2
0000            266   _UART0PCF       DATA 0xd9
0000            267   _UART1FCN0      DATA 0x9d
0000            268   _UART1FCN1      DATA 0xd8
0000            269   _UART1FCT       DATA 0xfa
0000            270   _UART1LIN       DATA 0x9e
0000            271   _UART1PCF       DATA 0xda
0000            272   _VDM0CN         DATA 0xff
0000            273   _WDTCN          DATA 0x97
0000            274   _XBR0           DATA 0xe1
0000            275   _XBR1           DATA 0xe2
0000            276   _XBR2           DATA 0xe3
0000            277   _XOSC0CN        DATA 0x86
0000            278   _DPTR           DATA 0x8382
0000            279   _TMR2RL         DATA 0xcbca
0000            280   _TMR3RL         DATA 0x9392
0000            281   _TMR4RL         DATA 0xa3a2
0000            282   _TMR5RL         DATA 0xd3d2
0000            283   _TMR0           DATA 0x8c8a
0000            284   _TMR1           DATA 0x8d8b
0000            285   _TMR2           DATA 0xcfce
0000            286   _TMR3           DATA 0x9594
0000            287   _TMR4           DATA 0xa5a4
0000            288   _TMR5           DATA 0xd5d4
0000            289   _SBRL1          DATA 0x9695
0000            290   _PCA0           DATA 0xfaf9
0000            291   _PCA0CP0        DATA 0xfcfb
0000            292   _PCA0CP1        DATA 0xeae9
0000            293   _PCA0CP2        DATA 0xeceb
0000            294   _PCA0CP3        DATA 0xf5f4
0000            295   _PCA0CP4        DATA 0x8584
0000            296   _PCA0CP5        DATA 0xdedd
0000            297   _ADC0ASA        DATA 0xb6b5
0000            298   _ADC0GT         DATA 0xc4c3
0000            299   _ADC0           DATA 0xbebd
0000            300   _ADC0LT         DATA 0xc6c5
0000            301   _DAC0           DATA 0x8584
0000            302   _DAC1           DATA 0x8a89
0000            303   _DAC2           DATA 0x8c8b
0000            304   _DAC3           DATA 0x8e8d
0000            305   ;--------------------------------------------------------
0000            306   ; special function bits
0000            307   ;--------------------------------------------------------
0000            308   _ACC_0          BIT 0xe0
0000            309   _ACC_1          BIT 0xe1
0000            310   _ACC_2          BIT 0xe2
0000            311   _ACC_3          BIT 0xe3
0000            312   _ACC_4          BIT 0xe4
0000            313   _ACC_5          BIT 0xe5
0000            314   _ACC_6          BIT 0xe6
0000            315   _ACC_7          BIT 0xe7
0000            316   _TEMPE          BIT 0xe8
0000            317   _ADGN0          BIT 0xe9
0000            318   _ADGN1          BIT 0xea
0000            319   _ADWINT         BIT 0xeb
0000            320   _ADBUSY         BIT 0xec
0000            321   _ADINT          BIT 0xed
0000            322   _IPOEN          BIT 0xee
0000            323   _ADEN           BIT 0xef
0000            324   _B_0            BIT 0xf0
0000            325   _B_1            BIT 0xf1
0000            326   _B_2            BIT 0xf2
0000            327   _B_3            BIT 0xf3
0000            328   _B_4            BIT 0xf4
0000            329   _B_5            BIT 0xf5
0000            330   _B_6            BIT 0xf6
0000            331   _B_7            BIT 0xf7
0000            332   _C0FIF          BIT 0xe8
0000            333   _C0RIF          BIT 0xe9
0000            334   _C1FIF          BIT 0xea
0000            335   _C1RIF          BIT 0xeb
0000            336   _C2FIF          BIT 0xec
0000            337   _C2RIF          BIT 0xed
0000            338   _C3FIF          BIT 0xee
0000            339   _C3RIF          BIT 0xef
0000            340   _D1SRC0         BIT 0x88
0000            341   _D1SRC1         BIT 0x89
0000            342   _D1AMEN         BIT 0x8a
0000            343   _D01REFSL       BIT 0x8b
0000            344   _D3SRC0         BIT 0x8c
0000            345   _D3SRC1         BIT 0x8d
0000            346   _D3AMEN         BIT 0x8e
0000            347   _D23REFSL       BIT 0x8f
0000            348   _D0UDIS         BIT 0x98
0000            349   _D1UDIS         BIT 0x99
0000            350   _D2UDIS         BIT 0x9a
0000            351   _D3UDIS         BIT 0x9b
0000            352   _EX0            BIT 0xa8
0000            353   _ET0            BIT 0xa9
0000            354   _EX1            BIT 0xaa
0000            355   _ET1            BIT 0xab
0000            356   _ES0            BIT 0xac
0000            357   _ET2            BIT 0xad
0000            358   _ESPI0          BIT 0xae
0000            359   _EA             BIT 0xaf
0000            360   _PX0            BIT 0xb8
0000            361   _PT0            BIT 0xb9
0000            362   _PX1            BIT 0xba
0000            363   _PT1            BIT 0xbb
0000            364   _PS0            BIT 0xbc
0000            365   _PT2            BIT 0xbd
0000            366   _PSPI0          BIT 0xbe
0000            367   _P0_0           BIT 0x80
0000            368   _P0_1           BIT 0x81
0000            369   _P0_2           BIT 0x82
0000            370   _P0_3           BIT 0x83
0000            371   _P0_4           BIT 0x84
0000            372   _P0_5           BIT 0x85
0000            373   _P0_6           BIT 0x86
0000            374   _P0_7           BIT 0x87
0000            375   _P1_0           BIT 0x90
0000            376   _P1_1           BIT 0x91
0000            377   _P1_2           BIT 0x92
0000            378   _P1_3           BIT 0x93
0000            379   _P1_4           BIT 0x94
0000            380   _P1_5           BIT 0x95
0000            381   _P1_6           BIT 0x96
0000            382   _P1_7           BIT 0x97
0000            383   _P2_0           BIT 0xa0
0000            384   _P2_1           BIT 0xa1
0000            385   _P2_2           BIT 0xa2
0000            386   _P2_3           BIT 0xa3
0000            387   _P2_4           BIT 0xa4
0000            388   _P2_5           BIT 0xa5
0000            389   _P2_6           BIT 0xa6
0000            390   _P3_0           BIT 0xb0
0000            391   _P3_1           BIT 0xb1
0000            392   _P3_2           BIT 0xb2
0000            393   _P3_3           BIT 0xb3
0000            394   _P3_4           BIT 0xb4
0000            395   _P3_7           BIT 0xb7
0000            396   _CCF0           BIT 0xd8
0000            397   _CCF1           BIT 0xd9
0000            398   _CCF2           BIT 0xda
0000            399   _CCF3           BIT 0xdb
0000            400   _CCF4           BIT 0xdc
0000            401   _CCF5           BIT 0xdd
0000            402   _CR             BIT 0xde
0000            403   _CF             BIT 0xdf
0000            404   _PARITY         BIT 0xd0
0000            405   _F1             BIT 0xd1
0000            406   _OV             BIT 0xd2
0000            407   _RS0            BIT 0xd3
0000            408   _RS1            BIT 0xd4
0000            409   _F0             BIT 0xd5
0000            410   _AC             BIT 0xd6
0000            411   _CY             BIT 0xd7
0000            412   _RI             BIT 0x98
0000            413   _TI             BIT 0x99
0000            414   _RB8            BIT 0x9a
0000            415   _TB8            BIT 0x9b
0000            416   _REN            BIT 0x9c
0000            417   _CE             BIT 0x9d
0000            418   _SMODE          BIT 0x9e
0000            419   _RI1            BIT 0xc8
0000            420   _TI1            BIT 0xc9
0000            421   _RBX1           BIT 0xca
0000            422   _TBX1           BIT 0xcb
0000            423   _REN1           BIT 0xcc
0000            424   _PERR1          BIT 0xcd
0000            425   _OVR1           BIT 0xce
0000            426   _SI             BIT 0xc0
0000            427   _ACK            BIT 0xc1
0000            428   _ARBLOST        BIT 0xc2
0000            429   _ACKRQ          BIT 0xc3
0000            430   _STO            BIT 0xc4
0000            431   _STA            BIT 0xc5
0000            432   _TXMODE         BIT 0xc6
0000            433   _MASTER         BIT 0xc7
0000            434   _SPIEN          BIT 0xf8
0000            435   _TXNF           BIT 0xf9
0000            436   _NSSMD0         BIT 0xfa
0000            437   _NSSMD1         BIT 0xfb
0000            438   _RXOVRN         BIT 0xfc
0000            439   _MODF           BIT 0xfd
0000            440   _WCOL           BIT 0xfe
0000            441   _SPIF           BIT 0xff
0000            442   _IT0            BIT 0x88
0000            443   _IE0            BIT 0x89
0000            444   _IT1            BIT 0x8a
0000            445   _IE1            BIT 0x8b
0000            446   _TR0            BIT 0x8c
0000            447   _TF0            BIT 0x8d
0000            448   _TR1            BIT 0x8e
0000            449   _TF1            BIT 0x8f
0000            450   _T2XCLK0        BIT 0xc8
0000            451   _T2XCLK1        BIT 0xc9
0000            452   _TR2            BIT 0xca
0000            453   _T2SPLIT        BIT 0xcb
0000            454   _TF2CEN         BIT 0xcc
0000            455   _TF2LEN         BIT 0xcd
0000            456   _TF2L           BIT 0xce
0000            457   _TF2H           BIT 0xcf
0000            458   _T4XCLK0        BIT 0x98
0000            459   _T4XCLK1        BIT 0x99
0000            460   _TR4            BIT 0x9a
0000            461   _T4SPLIT        BIT 0x9b
0000            462   _TF4CEN         BIT 0x9c
0000            463   _TF4LEN         BIT 0x9d
0000            464   _TF4L           BIT 0x9e
0000            465   _TF4H           BIT 0x9f
0000            466   _T5XCLK0        BIT 0xc0
0000            467   _T5XCLK1        BIT 0xc1
0000            468   _TR5            BIT 0xc2
0000            469   _T5SPLIT        BIT 0xc3
0000            470   _TF5CEN         BIT 0xc4
0000            471   _TF5LEN         BIT 0xc5
0000            472   _TF5L           BIT 0xc6
0000            473   _TF5H           BIT 0xc7
0000            474   _RIE            BIT 0xd8
0000            475   _RXTO0          BIT 0xd9
0000            476   _RXTO1          BIT 0xda
0000            477   _RFRQ           BIT 0xdb
0000            478   _TIE            BIT 0xdc
0000            479   _TXHOLD         BIT 0xdd
0000            480   _TXNF1          BIT 0xde
0000            481   _TFRQ           BIT 0xdf
0000            482   ;--------------------------------------------------------
0000            483   ; overlayable register banks
0000            484   ;--------------------------------------------------------
0000            485            rbank0 segment data overlay
0000            486   ;--------------------------------------------------------
0000            487   ; internal ram data
0000            488   ;--------------------------------------------------------
0000            489            rseg R_DSEG
0000            490   _getstr1_PARM_2:
0000            491            ds 1
0001            492   _main_speed_1_98:
0001            493            ds 2
0003            494   _main_steering_1_98:
0003            495            ds 2
0005            496   ;--------------------------------------------------------
0005            497   ; overlayable items in internal ram 
0005            498   ;--------------------------------------------------------
0000            499            rseg    R_OSEG
0000            500            rseg    R_OSEG
0000            501            rseg    R_OSEG
0000            502   ;--------------------------------------------------------
0000            503   ; indirectly addressable internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_ISEG
0000            506   _buff:
0000            507            ds 20
0014            508   ;--------------------------------------------------------
0014            509   ; absolute internal ram data
0014            510   ;--------------------------------------------------------
0000            511            DSEG
0000            512   ;--------------------------------------------------------
0000            513   ; bit data
0000            514   ;--------------------------------------------------------
0000            515            rseg R_BSEG
0000            516   ;--------------------------------------------------------
0000            517   ; paged external ram data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_PSEG
0000            520   ;--------------------------------------------------------
0000            521   ; external ram data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_XSEG
0000            524   ;--------------------------------------------------------
0000            525   ; absolute external ram data
0000            526   ;--------------------------------------------------------
0000            527            XSEG
0000            528   ;--------------------------------------------------------
0000            529   ; external initialized ram data
0000            530   ;--------------------------------------------------------
0000            531            rseg R_IXSEG
0000            532            rseg R_HOME
0000            533            rseg R_GSINIT
0000            534            rseg R_CSEG
0000            535   ;--------------------------------------------------------
0000            536   ; Reset entry point and interrupt vectors
0000            537   ;--------------------------------------------------------
0000            538            CSEG at 0x0000
0000 020000     539            ljmp    _crt0
0003            540   ;--------------------------------------------------------
0003            541   ; global & static initialisations
0003            542   ;--------------------------------------------------------
0000            543            rseg R_HOME
0000            544            rseg R_GSINIT
0000            545            rseg R_GSINIT
0000            546   ;--------------------------------------------------------
0000            547   ; data variables initialization
0000            548   ;--------------------------------------------------------
0000            549            rseg R_DINIT
0000            550            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            551   ;--------------------------------------------------------
0000            552   ; code
0000            553   ;--------------------------------------------------------
0000            554            rseg R_CSEG
0000            555   ;------------------------------------------------------------
0000            556   ;Allocation info for local variables in function '_c51_external_startup'
0000            557   ;------------------------------------------------------------
0000            558   ;------------------------------------------------------------
0000            559   ;        EFM8_dataPC.c:11: char _c51_external_startup (void)
0000            560   ;        -----------------------------------------
0000            561   ;         function _c51_external_startup
0000            562   ;        -----------------------------------------
0000            563   __c51_external_startup:
0000            564            using   0
0000            565   ;        EFM8_dataPC.c:14: SFRPAGE = 0x00;
0000 75A700     566            mov     _SFRPAGE,#0x00
0003            567   ;        EFM8_dataPC.c:15: WDTCN = 0xDE; //First key
0003 7597DE     568            mov     _WDTCN,#0xDE
0006            569   ;        EFM8_dataPC.c:16: WDTCN = 0xAD; //Second key
0006 7597AD     570            mov     _WDTCN,#0xAD
0009            571   ;        EFM8_dataPC.c:18: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     572            mov     _VDM0CN,#0x80
000C            573   ;        EFM8_dataPC.c:19: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     574            mov     _RSTSRC,#0x06
000F            575   ;        EFM8_dataPC.c:26: SFRPAGE = 0x10;
000F 75A710     576            mov     _SFRPAGE,#0x10
0012            577   ;        EFM8_dataPC.c:27: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     578            mov     _PFE0CN,#0x20
0015            579   ;        EFM8_dataPC.c:28: SFRPAGE = 0x00;
0015 75A700     580            mov     _SFRPAGE,#0x00
0018            581   ;        EFM8_dataPC.c:49: CLKSEL = 0x00;
0018 75A900     582            mov     _CLKSEL,#0x00
001B            583   ;        EFM8_dataPC.c:50: CLKSEL = 0x00;
001B 75A900     584            mov     _CLKSEL,#0x00
001E            585   ;        EFM8_dataPC.c:51: while ((CLKSEL & 0x80) == 0);
001E            586   L002001?:
001E E5A9       587            mov     a,_CLKSEL
0020 30E730     588            jnb     acc.7,L002001?
0023            589   ;        EFM8_dataPC.c:52: CLKSEL = 0x03;
0023 75A903     590            mov     _CLKSEL,#0x03
0026            591   ;        EFM8_dataPC.c:53: CLKSEL = 0x03;
0026 75A903     592            mov     _CLKSEL,#0x03
0029            593   ;        EFM8_dataPC.c:54: while ((CLKSEL & 0x80) == 0);
0029            594   L002004?:
0029 E5A9       595            mov     a,_CLKSEL
002B 30E7B0     596            jnb     acc.7,L002004?
002E            597   ;        EFM8_dataPC.c:59: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     598            orl     _P0MDOUT,#0x11
0031            599   ;        EFM8_dataPC.c:60: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     600            orl     _P2MDOUT,#0x01
0034            601   ;        EFM8_dataPC.c:61: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     602            mov     _XBR0,#0x01
0037            603   ;        EFM8_dataPC.c:62: XBR1     = 0X00;
0037 75E200     604            mov     _XBR1,#0x00
003A            605   ;        EFM8_dataPC.c:63: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     606            mov     _XBR2,#0x41
003D            607   ;        EFM8_dataPC.c:69: SCON0 = 0x10;
003D 759810     608            mov     _SCON0,#0x10
0040            609   ;        EFM8_dataPC.c:70: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     610            mov     _TH1,#0xE6
0043            611   ;        EFM8_dataPC.c:71: TL1 = TH1;      // Init Timer1
0043 858D8B     612            mov     _TL1,_TH1
0046            613   ;        EFM8_dataPC.c:72: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     614            anl     _TMOD,#0x0F
0049            615   ;        EFM8_dataPC.c:73: TMOD |=  0x20;                       
0049 438920     616            orl     _TMOD,#0x20
004C            617   ;        EFM8_dataPC.c:74: TR1 = 1; // START Timer1
004C D28E       618            setb    _TR1
004E            619   ;        EFM8_dataPC.c:75: TI = 1;  // Indicate TX0 ready
004E D299       620            setb    _TI
0050            621   ;        EFM8_dataPC.c:77: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       622            setb    _P2_0
0052            623   ;        EFM8_dataPC.c:79: return 0;
0052 758200     624            mov     dpl,#0x00
0055 22         625            ret
0056            626   ;------------------------------------------------------------
0056            627   ;Allocation info for local variables in function 'Timer3us'
0056            628   ;------------------------------------------------------------
0056            629   ;us                        Allocated to registers r2 
0056            630   ;i                         Allocated to registers r3 
0056            631   ;------------------------------------------------------------
0056            632   ;        EFM8_dataPC.c:83: void Timer3us(unsigned char us)
0056            633   ;        -----------------------------------------
0056            634   ;         function Timer3us
0056            635   ;        -----------------------------------------
0056            636   _Timer3us:
0056 AA82       637            mov     r2,dpl
0058            638   ;        EFM8_dataPC.c:88: CKCON0|=0b_0100_0000;
0058 438E40     639            orl     _CKCON0,#0x40
005B            640   ;        EFM8_dataPC.c:90: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
005B 7592B8     641            mov     _TMR3RL,#0xB8
005E 7593FF     642            mov     (_TMR3RL >> 8),#0xFF
0061            643   ;        EFM8_dataPC.c:91: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0061 859294     644            mov     _TMR3,_TMR3RL
0064 859395     645            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0067            646   ;        EFM8_dataPC.c:93: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0067 759104     647            mov     _TMR3CN0,#0x04
006A            648   ;        EFM8_dataPC.c:94: for (i = 0; i < us; i++)       // Count <us> overflows
006A 7B00       649            mov     r3,#0x00
006C            650   L003004?:
006C C3         651            clr     c
006D EB         652            mov     a,r3
006E 9A         653            subb    a,r2
006F 5000       654            jnc     L003007?
0071            655   ;        EFM8_dataPC.c:96: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0071            656   L003001?:
0071 E591       657            mov     a,_TMR3CN0
0073 30E7B0     658            jnb     acc.7,L003001?
0076            659   ;        EFM8_dataPC.c:97: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0076 53917F     660            anl     _TMR3CN0,#0x7F
0079            661   ;        EFM8_dataPC.c:94: for (i = 0; i < us; i++)       // Count <us> overflows
0079 0B         662            inc     r3
007A 8000       663            sjmp    L003004?
007C            664   L003007?:
007C            665   ;        EFM8_dataPC.c:99: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007C 759100     666            mov     _TMR3CN0,#0x00
007F 22         667            ret
0080            668   ;------------------------------------------------------------
0080            669   ;Allocation info for local variables in function 'waitms'
0080            670   ;------------------------------------------------------------
0080            671   ;ms                        Allocated to registers r2 r3 
0080            672   ;j                         Allocated to registers r4 r5 
0080            673   ;k                         Allocated to registers r6 
0080            674   ;------------------------------------------------------------
0080            675   ;        EFM8_dataPC.c:102: void waitms (unsigned int ms)
0080            676   ;        -----------------------------------------
0080            677   ;         function waitms
0080            678   ;        -----------------------------------------
0080            679   _waitms:
0080 AA82       680            mov     r2,dpl
0082 AB83       681            mov     r3,dph
0084            682   ;        EFM8_dataPC.c:106: for(j=0; j<ms; j++)
0084 7C00       683            mov     r4,#0x00
0086 7D00       684            mov     r5,#0x00
0088            685   L004005?:
0088 C3         686            clr     c
0089 EC         687            mov     a,r4
008A 9A         688            subb    a,r2
008B ED         689            mov     a,r5
008C 9B         690            subb    a,r3
008D 5000       691            jnc     L004009?
008F            692   ;        EFM8_dataPC.c:107: for (k=0; k<4; k++) Timer3us(250);
008F 7E00       693            mov     r6,#0x00
0091            694   L004001?:
0091 BE04F0     695            cjne    r6,#0x04,L004018?
0094            696   L004018?:
0094 5000       697            jnc     L004007?
0096 7582FA     698            mov     dpl,#0xFA
0099 C002       699            push    ar2
009B C003       700            push    ar3
009D C004       701            push    ar4
009F C005       702            push    ar5
00A1 C006       703            push    ar6
00A3 120000     704            lcall   _Timer3us
00A6 D006       705            pop     ar6
00A8 D005       706            pop     ar5
00AA D004       707            pop     ar4
00AC D003       708            pop     ar3
00AE D002       709            pop     ar2
00B0 0E         710            inc     r6
00B1 8000       711            sjmp    L004001?
00B3            712   L004007?:
00B3            713   ;        EFM8_dataPC.c:106: for(j=0; j<ms; j++)
00B3 0C         714            inc     r4
00B4 BC0030     715            cjne    r4,#0x00,L004005?
00B7 0D         716            inc     r5
00B8 8000       717            sjmp    L004005?
00BA            718   L004009?:
00BA 22         719            ret
00BB            720   ;------------------------------------------------------------
00BB            721   ;Allocation info for local variables in function 'UART1_Init'
00BB            722   ;------------------------------------------------------------
00BB            723   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00BB            724   ;------------------------------------------------------------
00BB            725   ;        EFM8_dataPC.c:110: void UART1_Init (unsigned long baudrate)
00BB            726   ;        -----------------------------------------
00BB            727   ;         function UART1_Init
00BB            728   ;        -----------------------------------------
00BB            729   _UART1_Init:
00BB AA82       730            mov     r2,dpl
00BD AB83       731            mov     r3,dph
00BF ACF0       732            mov     r4,b
00C1 FD         733            mov     r5,a
00C2            734   ;        EFM8_dataPC.c:112: SFRPAGE = 0x20;
00C2 75A720     735            mov     _SFRPAGE,#0x20
00C5            736   ;        EFM8_dataPC.c:113: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C5 75930C     737            mov     _SMOD1,#0x0C
00C8            738   ;        EFM8_dataPC.c:114: SCON1 = 0x10;
00C8 75C810     739            mov     _SCON1,#0x10
00CB            740   ;        EFM8_dataPC.c:115: SBCON1 =0x00;   // disable baud rate generator
00CB 759400     741            mov     _SBCON1,#0x00
00CE            742   ;        EFM8_dataPC.c:116: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CE 8A00       743            mov     __divulong_PARM_2,r2
00D0 8B01       744            mov     (__divulong_PARM_2 + 1),r3
00D2 8C02       745            mov     (__divulong_PARM_2 + 2),r4
00D4 8D03       746            mov     (__divulong_PARM_2 + 3),r5
00D6 90A200     747            mov     dptr,#0xA200
00D9 75F04A     748            mov     b,#0x4A
00DC 7404       749            mov     a,#0x04
00DE 120000     750            lcall   __divulong
00E1 AA82       751            mov     r2,dpl
00E3 AB83       752            mov     r3,dph
00E5 ACF0       753            mov     r4,b
00E7 FD         754            mov     r5,a
00E8 750018     755            mov     __divulong_PARM_2,#0x18
00EB E4         756            clr     a
00EC F501       757            mov     (__divulong_PARM_2 + 1),a
00EE F502       758            mov     (__divulong_PARM_2 + 2),a
00F0 F503       759            mov     (__divulong_PARM_2 + 3),a
00F2 8A82       760            mov     dpl,r2
00F4 8B83       761            mov     dph,r3
00F6 8CF0       762            mov     b,r4
00F8 ED         763            mov     a,r5
00F9 120000     764            lcall   __divulong
00FC AA82       765            mov     r2,dpl
00FE AB83       766            mov     r3,dph
0100 ACF0       767            mov     r4,b
0102 FD         768            mov     r5,a
0103 E4         769            clr     a
0104 C3         770            clr     c
0105 9A         771            subb    a,r2
0106 FA         772            mov     r2,a
0107 E4         773            clr     a
0108 9B         774            subb    a,r3
0109 FB         775            mov     r3,a
010A 7401       776            mov     a,#0x01
010C 9C         777            subb    a,r4
010D E4         778            clr     a
010E 9D         779            subb    a,r5
010F 8A95       780            mov     _SBRL1,r2
0111 8B96       781            mov     (_SBRL1 >> 8),r3
0113            782   ;        EFM8_dataPC.c:117: TI1 = 1; // indicate ready for TX
0113 D2C9       783            setb    _TI1
0115            784   ;        EFM8_dataPC.c:118: SBCON1 |= 0x40;   // enable baud rate generator
0115 439440     785            orl     _SBCON1,#0x40
0118            786   ;        EFM8_dataPC.c:119: SFRPAGE = 0x00;
0118 75A700     787            mov     _SFRPAGE,#0x00
011B 22         788            ret
011C            789   ;------------------------------------------------------------
011C            790   ;Allocation info for local variables in function 'putchar1'
011C            791   ;------------------------------------------------------------
011C            792   ;c                         Allocated to registers r2 
011C            793   ;------------------------------------------------------------
011C            794   ;        EFM8_dataPC.c:122: void putchar1 (char c) 
011C            795   ;        -----------------------------------------
011C            796   ;         function putchar1
011C            797   ;        -----------------------------------------
011C            798   _putchar1:
011C AA82       799            mov     r2,dpl
011E            800   ;        EFM8_dataPC.c:124: SFRPAGE = 0x20;
011E 75A720     801            mov     _SFRPAGE,#0x20
0121            802   ;        EFM8_dataPC.c:125: while (!TI1);
0121            803   L006001?:
0121            804   ;        EFM8_dataPC.c:126: TI1=0;
0121 10C980     805            jbc     _TI1,L006008?
0124 8000       806            sjmp    L006001?
0126            807   L006008?:
0126            808   ;        EFM8_dataPC.c:127: SBUF1 = c;
0126 8A92       809            mov     _SBUF1,r2
0128            810   ;        EFM8_dataPC.c:128: SFRPAGE = 0x00;
0128 75A700     811            mov     _SFRPAGE,#0x00
012B 22         812            ret
012C            813   ;------------------------------------------------------------
012C            814   ;Allocation info for local variables in function 'sendstr1'
012C            815   ;------------------------------------------------------------
012C            816   ;s                         Allocated to registers r2 r3 r4 
012C            817   ;------------------------------------------------------------
012C            818   ;        EFM8_dataPC.c:131: void sendstr1 (char * s)
012C            819   ;        -----------------------------------------
012C            820   ;         function sendstr1
012C            821   ;        -----------------------------------------
012C            822   _sendstr1:
012C AA82       823            mov     r2,dpl
012E AB83       824            mov     r3,dph
0130 ACF0       825            mov     r4,b
0132            826   ;        EFM8_dataPC.c:133: while(*s)
0132            827   L007001?:
0132 8A82       828            mov     dpl,r2
0134 8B83       829            mov     dph,r3
0136 8CF0       830            mov     b,r4
0138 120000     831            lcall   __gptrget
013B FD         832            mov     r5,a
013C 6000       833            jz      L007004?
013E            834   ;        EFM8_dataPC.c:135: putchar1(*s);
013E 8D82       835            mov     dpl,r5
0140 C002       836            push    ar2
0142 C003       837            push    ar3
0144 C004       838            push    ar4
0146 120000     839            lcall   _putchar1
0149 D004       840            pop     ar4
014B D003       841            pop     ar3
014D D002       842            pop     ar2
014F            843   ;        EFM8_dataPC.c:136: s++;         
014F 0A         844            inc     r2
0150 BA00C0     845            cjne    r2,#0x00,L007001?
0153 0B         846            inc     r3
0154 8000       847            sjmp    L007001?
0156            848   L007004?:
0156 22         849            ret
0157            850   ;------------------------------------------------------------
0157            851   ;Allocation info for local variables in function 'getchar1'
0157            852   ;------------------------------------------------------------
0157            853   ;c                         Allocated to registers 
0157            854   ;------------------------------------------------------------
0157            855   ;        EFM8_dataPC.c:140: char getchar1 (void)
0157            856   ;        -----------------------------------------
0157            857   ;         function getchar1
0157            858   ;        -----------------------------------------
0157            859   _getchar1:
0157            860   ;        EFM8_dataPC.c:143: SFRPAGE = 0x20;
0157 75A720     861            mov     _SFRPAGE,#0x20
015A            862   ;        EFM8_dataPC.c:144: while (!RI1);
015A            863   L008001?:
015A            864   ;        EFM8_dataPC.c:145: RI1=0;
015A 10C8C0     865            jbc     _RI1,L008008?
015D 8000       866            sjmp    L008001?
015F            867   L008008?:
015F            868   ;        EFM8_dataPC.c:147: SCON1&=0b_0011_1111;
015F 53C83F     869            anl     _SCON1,#0x3F
0162            870   ;        EFM8_dataPC.c:148: c = SBUF1;
0162 859282     871            mov     dpl,_SBUF1
0165            872   ;        EFM8_dataPC.c:149: SFRPAGE = 0x00;
0165 75A700     873            mov     _SFRPAGE,#0x00
0168            874   ;        EFM8_dataPC.c:150: return (c);
0168 22         875            ret
0169            876   ;------------------------------------------------------------
0169            877   ;Allocation info for local variables in function 'getchar1_with_timeout'
0169            878   ;------------------------------------------------------------
0169            879   ;c                         Allocated to registers 
0169            880   ;timeout                   Allocated to registers r2 r3 
0169            881   ;------------------------------------------------------------
0169            882   ;        EFM8_dataPC.c:153: char getchar1_with_timeout (void)
0169            883   ;        -----------------------------------------
0169            884   ;         function getchar1_with_timeout
0169            885   ;        -----------------------------------------
0169            886   _getchar1_with_timeout:
0169            887   ;        EFM8_dataPC.c:157: SFRPAGE = 0x20;
0169 75A720     888            mov     _SFRPAGE,#0x20
016C            889   ;        EFM8_dataPC.c:159: while (!RI1)
016C 7A00       890            mov     r2,#0x00
016E 7B00       891            mov     r3,#0x00
0170            892   L009003?:
0170 20C840     893            jb      _RI1,L009005?
0173            894   ;        EFM8_dataPC.c:161: SFRPAGE = 0x00;
0173 75A700     895            mov     _SFRPAGE,#0x00
0176            896   ;        EFM8_dataPC.c:162: Timer3us(20);
0176 758214     897            mov     dpl,#0x14
0179 C002       898            push    ar2
017B C003       899            push    ar3
017D 120000     900            lcall   _Timer3us
0180 D003       901            pop     ar3
0182 D002       902            pop     ar2
0184            903   ;        EFM8_dataPC.c:163: SFRPAGE = 0x20;
0184 75A720     904            mov     _SFRPAGE,#0x20
0187            905   ;        EFM8_dataPC.c:164: timeout++;
0187 0A         906            inc     r2
0188 BA0080     907            cjne    r2,#0x00,L009012?
018B 0B         908            inc     r3
018C            909   L009012?:
018C            910   ;        EFM8_dataPC.c:165: if(timeout==25000)
018C BAA800     911            cjne    r2,#0xA8,L009003?
018F BB6100     912            cjne    r3,#0x61,L009003?
0192            913   ;        EFM8_dataPC.c:167: SFRPAGE = 0x00;
0192 75A700     914            mov     _SFRPAGE,#0x00
0195            915   ;        EFM8_dataPC.c:168: return ('\n'); // Timeout after half second
0195 75820A     916            mov     dpl,#0x0A
0198 22         917            ret
0199            918   L009005?:
0199            919   ;        EFM8_dataPC.c:171: RI1=0;
0199 C2C8       920            clr     _RI1
019B            921   ;        EFM8_dataPC.c:173: SCON1&=0b_0011_1111;
019B 53C83F     922            anl     _SCON1,#0x3F
019E            923   ;        EFM8_dataPC.c:174: c = SBUF1;
019E 859282     924            mov     dpl,_SBUF1
01A1            925   ;        EFM8_dataPC.c:175: SFRPAGE = 0x00;
01A1 75A700     926            mov     _SFRPAGE,#0x00
01A4            927   ;        EFM8_dataPC.c:176: return (c);
01A4 22         928            ret
01A5            929   ;------------------------------------------------------------
01A5            930   ;Allocation info for local variables in function 'getstr1'
01A5            931   ;------------------------------------------------------------
01A5            932   ;n                         Allocated with name '_getstr1_PARM_2'
01A5            933   ;s                         Allocated to registers r2 r3 r4 
01A5            934   ;c                         Allocated to registers r1 
01A5            935   ;cnt                       Allocated to registers r5 
01A5            936   ;------------------------------------------------------------
01A5            937   ;        EFM8_dataPC.c:179: void getstr1 (char * s, unsigned char n)
01A5            938   ;        -----------------------------------------
01A5            939   ;         function getstr1
01A5            940   ;        -----------------------------------------
01A5            941   _getstr1:
01A5 AA82       942            mov     r2,dpl
01A7 AB83       943            mov     r3,dph
01A9 ACF0       944            mov     r4,b
01AB            945   ;        EFM8_dataPC.c:185: while(1)
01AB 7D00       946            mov     r5,#0x00
01AD 8A06       947            mov     ar6,r2
01AF 8B07       948            mov     ar7,r3
01B1 8C00       949            mov     ar0,r4
01B3            950   L010007?:
01B3            951   ;        EFM8_dataPC.c:187: c=getchar1_with_timeout();
01B3 C002       952            push    ar2
01B5 C003       953            push    ar3
01B7 C004       954            push    ar4
01B9 C005       955            push    ar5
01BB C006       956            push    ar6
01BD C007       957            push    ar7
01BF C000       958            push    ar0
01C1 120000     959            lcall   _getchar1_with_timeout
01C4 A982       960            mov     r1,dpl
01C6 D000       961            pop     ar0
01C8 D007       962            pop     ar7
01CA D006       963            pop     ar6
01CC D005       964            pop     ar5
01CE D004       965            pop     ar4
01D0 D003       966            pop     ar3
01D2 D002       967            pop     ar2
01D4            968   ;        EFM8_dataPC.c:188: if(c=='\n')
01D4 B90A00     969            cjne    r1,#0x0A,L010002?
01D7            970   ;        EFM8_dataPC.c:190: *s=0;
01D7 8A82       971            mov     dpl,r2
01D9 8B83       972            mov     dph,r3
01DB 8CF0       973            mov     b,r4
01DD E4         974            clr     a
01DE            975   ;        EFM8_dataPC.c:191: return;
01DE 020000     976            ljmp    __gptrput
01E1            977   L010002?:
01E1            978   ;        EFM8_dataPC.c:194: if (cnt<n)
01E1 C3         979            clr     c
01E2 ED         980            mov     a,r5
01E3 9550       981            subb    a,_getstr1_PARM_2
01E5 5000       982            jnc     L010004?
01E7            983   ;        EFM8_dataPC.c:196: cnt++;
01E7 0D         984            inc     r5
01E8            985   ;        EFM8_dataPC.c:197: *s=c;
01E8 8E82       986            mov     dpl,r6
01EA 8F83       987            mov     dph,r7
01EC 88F0       988            mov     b,r0
01EE E9         989            mov     a,r1
01EF 120000     990            lcall   __gptrput
01F2 A3         991            inc     dptr
01F3 AE82       992            mov     r6,dpl
01F5 AF83       993            mov     r7,dph
01F7            994   ;        EFM8_dataPC.c:198: s++;
01F7 8E02       995            mov     ar2,r6
01F9 8F03       996            mov     ar3,r7
01FB 8804       997            mov     ar4,r0
01FD 8000       998            sjmp    L010007?
01FF            999   L010004?:
01FF           1000   ;        EFM8_dataPC.c:202: *s=0;
01FF 8A82      1001            mov     dpl,r2
0201 8B83      1002            mov     dph,r3
0203 8CF0      1003            mov     b,r4
0205 E4        1004            clr     a
0206           1005   ;        EFM8_dataPC.c:203: return;
0206 020000    1006            ljmp    __gptrput
0209           1007   ;------------------------------------------------------------
0209           1008   ;Allocation info for local variables in function 'RXU1'
0209           1009   ;------------------------------------------------------------
0209           1010   ;------------------------------------------------------------
0209           1011   ;        EFM8_dataPC.c:209: bit RXU1 (void)
0209           1012   ;        -----------------------------------------
0209           1013   ;         function RXU1
0209           1014   ;        -----------------------------------------
0209           1015   _RXU1:
0209           1016   ;        EFM8_dataPC.c:212: SFRPAGE = 0x20;
0209 75A720    1017            mov     _SFRPAGE,#0x20
020C           1018   ;        EFM8_dataPC.c:213: mybit=RI1;
020C A2C8      1019            mov     c,_RI1
020E           1020   ;        EFM8_dataPC.c:214: SFRPAGE = 0x00;
020E 75A700    1021            mov     _SFRPAGE,#0x00
0211           1022   ;        EFM8_dataPC.c:215: return mybit;
0211 22        1023            ret
0212           1024   ;------------------------------------------------------------
0212           1025   ;Allocation info for local variables in function 'waitms_or_RI1'
0212           1026   ;------------------------------------------------------------
0212           1027   ;ms                        Allocated to registers r2 r3 
0212           1028   ;j                         Allocated to registers r4 r5 
0212           1029   ;k                         Allocated to registers r6 
0212           1030   ;------------------------------------------------------------
0212           1031   ;        EFM8_dataPC.c:218: void waitms_or_RI1 (unsigned int ms)
0212           1032   ;        -----------------------------------------
0212           1033   ;         function waitms_or_RI1
0212           1034   ;        -----------------------------------------
0212           1035   _waitms_or_RI1:
0212 AA82      1036            mov     r2,dpl
0214 AB83      1037            mov     r3,dph
0216           1038   ;        EFM8_dataPC.c:222: for(j=0; j<ms; j++)
0216 7C00      1039            mov     r4,#0x00
0218 7D00      1040            mov     r5,#0x00
021A           1041   L012007?:
021A C3        1042            clr     c
021B EC        1043            mov     a,r4
021C 9A        1044            subb    a,r2
021D ED        1045            mov     a,r5
021E 9B        1046            subb    a,r3
021F 5000      1047            jnc     L012011?
0221           1048   ;        EFM8_dataPC.c:224: for (k=0; k<4; k++)
0221 7E00      1049            mov     r6,#0x00
0223           1050   L012003?:
0223 BE0480    1051            cjne    r6,#0x04,L012019?
0226           1052   L012019?:
0226 5000      1053            jnc     L012009?
0228           1054   ;        EFM8_dataPC.c:226: if(RXU1()) return;
0228 C002      1055            push    ar2
022A C003      1056            push    ar3
022C C004      1057            push    ar4
022E C005      1058            push    ar5
0230 C006      1059            push    ar6
0232 120000    1060            lcall   _RXU1
0235 E4        1061            clr     a
0236 33        1062            rlc     a
0237 D006      1063            pop     ar6
0239 D005      1064            pop     ar5
023B D004      1065            pop     ar4
023D D003      1066            pop     ar3
023F D002      1067            pop     ar2
0241 6000      1068            jz      L012002?
0243 22        1069            ret
0244           1070   L012002?:
0244           1071   ;        EFM8_dataPC.c:227: Timer3us(250);
0244 7582FA    1072            mov     dpl,#0xFA
0247 C002      1073            push    ar2
0249 C003      1074            push    ar3
024B C004      1075            push    ar4
024D C005      1076            push    ar5
024F C006      1077            push    ar6
0251 120000    1078            lcall   _Timer3us
0254 D006      1079            pop     ar6
0256 D005      1080            pop     ar5
0258 D004      1081            pop     ar4
025A D003      1082            pop     ar3
025C D002      1083            pop     ar2
025E           1084   ;        EFM8_dataPC.c:224: for (k=0; k<4; k++)
025E 0E        1085            inc     r6
025F 8000      1086            sjmp    L012003?
0261           1087   L012009?:
0261           1088   ;        EFM8_dataPC.c:222: for(j=0; j<ms; j++)
0261 0C        1089            inc     r4
0262 BC00C0    1090            cjne    r4,#0x00,L012007?
0265 0D        1091            inc     r5
0266 8000      1092            sjmp    L012007?
0268           1093   L012011?:
0268 22        1094            ret
0269           1095   ;------------------------------------------------------------
0269           1096   ;Allocation info for local variables in function 'SendATCommand'
0269           1097   ;------------------------------------------------------------
0269           1098   ;s                         Allocated to registers r2 r3 r4 
0269           1099   ;------------------------------------------------------------
0269           1100   ;        EFM8_dataPC.c:232: void SendATCommand (char * s)
0269           1101   ;        -----------------------------------------
0269           1102   ;         function SendATCommand
0269           1103   ;        -----------------------------------------
0269           1104   _SendATCommand:
0269 AA82      1105            mov     r2,dpl
026B AB83      1106            mov     r3,dph
026D ACF0      1107            mov     r4,b
026F           1108   ;        EFM8_dataPC.c:234: printf("Command: %s", s);
026F C002      1109            push    ar2
0271 C003      1110            push    ar3
0273 C004      1111            push    ar4
0275 C002      1112            push    ar2
0277 C003      1113            push    ar3
0279 C004      1114            push    ar4
027B 7440      1115            mov     a,#__str_0
027D C0E0      1116            push    acc
027F 74BC      1117            mov     a,#(__str_0 >> 8)
0281 C0E0      1118            push    acc
0283 7480      1119            mov     a,#0x80
0285 C0E0      1120            push    acc
0287 120000    1121            lcall   _printf
028A E581      1122            mov     a,sp
028C 24FA      1123            add     a,#0xfa
028E F581      1124            mov     sp,a
0290           1125   ;        EFM8_dataPC.c:235: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0290 C2A0      1126            clr     _P2_0
0292           1127   ;        EFM8_dataPC.c:236: waitms(5);
0292 900005    1128            mov     dptr,#0x0005
0295 120000    1129            lcall   _waitms
0298 D004      1130            pop     ar4
029A D003      1131            pop     ar3
029C D002      1132            pop     ar2
029E           1133   ;        EFM8_dataPC.c:237: sendstr1(s);
029E 8A82      1134            mov     dpl,r2
02A0 8B83      1135            mov     dph,r3
02A2 8CF0      1136            mov     b,r4
02A4 120000    1137            lcall   _sendstr1
02A7           1138   ;        EFM8_dataPC.c:238: getstr1(buff, sizeof(buff)-1);
02A7 755013    1139            mov     _getstr1_PARM_2,#0x13
02AA 904510    1140            mov     dptr,#_buff
02AD 75F040    1141            mov     b,#0x40
02B0 120000    1142            lcall   _getstr1
02B3           1143   ;        EFM8_dataPC.c:239: waitms(10);
02B3 90000A    1144            mov     dptr,#0x000A
02B6 120000    1145            lcall   _waitms
02B9           1146   ;        EFM8_dataPC.c:240: P2_0=1; // 'set' pin to 1 is normal operation mode.
02B9 D2A0      1147            setb    _P2_0
02BB           1148   ;        EFM8_dataPC.c:241: printf("Response: %s\r\n", buff);
02BB 7410      1149            mov     a,#_buff
02BD C0E0      1150            push    acc
02BF 7445      1151            mov     a,#(_buff >> 8)
02C1 C0E0      1152            push    acc
02C3 7440      1153            mov     a,#0x40
02C5 C0E0      1154            push    acc
02C7 7400      1155            mov     a,#__str_1
02C9 C0E0      1156            push    acc
02CB 74BD      1157            mov     a,#(__str_1 >> 8)
02CD C0E0      1158            push    acc
02CF 7480      1159            mov     a,#0x80
02D1 C0E0      1160            push    acc
02D3 120000    1161            lcall   _printf
02D6 E581      1162            mov     a,sp
02D8 24FA      1163            add     a,#0xfa
02DA F581      1164            mov     sp,a
02DC 22        1165            ret
02DD           1166   ;------------------------------------------------------------
02DD           1167   ;Allocation info for local variables in function 'ReceptionOff'
02DD           1168   ;------------------------------------------------------------
02DD           1169   ;------------------------------------------------------------
02DD           1170   ;        EFM8_dataPC.c:244: void ReceptionOff (void)
02DD           1171   ;        -----------------------------------------
02DD           1172   ;         function ReceptionOff
02DD           1173   ;        -----------------------------------------
02DD           1174   _ReceptionOff:
02DD           1175   ;        EFM8_dataPC.c:246: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02DD C2A0      1176            clr     _P2_0
02DF           1177   ;        EFM8_dataPC.c:247: waitms(10);
02DF 90000A    1178            mov     dptr,#0x000A
02E2 120000    1179            lcall   _waitms
02E5           1180   ;        EFM8_dataPC.c:248: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02E5 90BD40    1181            mov     dptr,#__str_2
02E8 75F080    1182            mov     b,#0x80
02EB 120000    1183            lcall   _sendstr1
02EE           1184   ;        EFM8_dataPC.c:249: waitms(10);
02EE 90000A    1185            mov     dptr,#0x000A
02F1 120000    1186            lcall   _waitms
02F4           1187   ;        EFM8_dataPC.c:251: SCON1&=0b_0011_1111;
02F4 53C83F    1188            anl     _SCON1,#0x3F
02F7           1189   ;        EFM8_dataPC.c:252: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F7 D2A0      1190            setb    _P2_0
02F9 22        1191            ret
02FA           1192   ;------------------------------------------------------------
02FA           1193   ;Allocation info for local variables in function 'main'
02FA           1194   ;------------------------------------------------------------
02FA           1195   ;cnt                       Allocated to registers 
02FA           1196   ;speed                     Allocated with name '_main_speed_1_98'
02FA           1197   ;steering                  Allocated with name '_main_steering_1_98'
02FA           1198   ;------------------------------------------------------------
02FA           1199   ;        EFM8_dataPC.c:255: void main (void)
02FA           1200   ;        -----------------------------------------
02FA           1201   ;         function main
02FA           1202   ;        -----------------------------------------
02FA           1203   _main:
02FA           1204   ;        EFM8_dataPC.c:260: waitms(500);
02FA 9001F4    1205            mov     dptr,#0x01F4
02FD 120000    1206            lcall   _waitms
0300           1207   ;        EFM8_dataPC.c:261: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0300 7480      1208            mov     a,#__str_3
0302 C0E0      1209            push    acc
0304 74BD      1210            mov     a,#(__str_3 >> 8)
0306 C0E0      1211            push    acc
0308 7480      1212            mov     a,#0x80
030A C0E0      1213            push    acc
030C 120000    1214            lcall   _printf
030F 1581      1215            dec     sp
0311 1581      1216            dec     sp
0313 1581      1217            dec     sp
0315           1218   ;        EFM8_dataPC.c:262: UART1_Init(9600);
0315 902580    1219            mov     dptr,#0x2580
0318 E4        1220            clr     a
0319 F5F0      1221            mov     b,a
031B 120000    1222            lcall   _UART1_Init
031E           1223   ;        EFM8_dataPC.c:264: ReceptionOff();
031E 120000    1224            lcall   _ReceptionOff
0321           1225   ;        EFM8_dataPC.c:267: SendATCommand("AT+VER\r\n");
0321 90BDC0    1226            mov     dptr,#__str_4
0324 75F080    1227            mov     b,#0x80
0327 120000    1228            lcall   _SendATCommand
032A           1229   ;        EFM8_dataPC.c:268: SendATCommand("AT+BAUD\r\n");
032A 90BE00    1230            mov     dptr,#__str_5
032D 75F080    1231            mov     b,#0x80
0330 120000    1232            lcall   _SendATCommand
0333           1233   ;        EFM8_dataPC.c:269: SendATCommand("AT+RFID\r\n");
0333 90BE40    1234            mov     dptr,#__str_6
0336 75F080    1235            mov     b,#0x80
0339 120000    1236            lcall   _SendATCommand
033C           1237   ;        EFM8_dataPC.c:270: SendATCommand("AT+DVID\r\n");
033C 90BE80    1238            mov     dptr,#__str_7
033F 75F080    1239            mov     b,#0x80
0342 120000    1240            lcall   _SendATCommand
0345           1241   ;        EFM8_dataPC.c:271: SendATCommand("AT+RFC\r\n");
0345 90BEC0    1242            mov     dptr,#__str_8
0348 75F080    1243            mov     b,#0x80
034B 120000    1244            lcall   _SendATCommand
034E           1245   ;        EFM8_dataPC.c:272: SendATCommand("AT+POWE\r\n");
034E 90BF00    1246            mov     dptr,#__str_9
0351 75F080    1247            mov     b,#0x80
0354 120000    1248            lcall   _SendATCommand
0357           1249   ;        EFM8_dataPC.c:273: SendATCommand("AT+CLSS\r\n");
0357 90BF40    1250            mov     dptr,#__str_10
035A 75F080    1251            mov     b,#0x80
035D 120000    1252            lcall   _SendATCommand
0360           1253   ;        EFM8_dataPC.c:277: SendATCommand("AT+DVIDABBA\r\n");  
0360 90BF80    1254            mov     dptr,#__str_11
0363 75F080    1255            mov     b,#0x80
0366 120000    1256            lcall   _SendATCommand
0369           1257   ;        EFM8_dataPC.c:280: while(1)
0369           1258   L015004?:
0369           1259   ;        EFM8_dataPC.c:282: if(RXU1()) // Something has arrived
0369 120000    1260            lcall   _RXU1
036C 5000      1261            jnc     L015004?
036E           1262   ;        EFM8_dataPC.c:284: sscanf(buff, "S%dT%d", &steering, &speed);
036E 7460      1263            mov     a,#_main_speed_1_98
0370 C0E0      1264            push    acc
0372 74B2      1265            mov     a,#(_main_speed_1_98 >> 8)
0374 C0E0      1266            push    acc
0376 7440      1267            mov     a,#0x40
0378 C0E0      1268            push    acc
037A 74B0      1269            mov     a,#_main_steering_1_98
037C C0E0      1270            push    acc
037E 74B2      1271            mov     a,#(_main_steering_1_98 >> 8)
0380 C0E0      1272            push    acc
0382 7440      1273            mov     a,#0x40
0384 C0E0      1274            push    acc
0386 7400      1275            mov     a,#__str_12
0388 C0E0      1276            push    acc
038A 74C0      1277            mov     a,#(__str_12 >> 8)
038C C0E0      1278            push    acc
038E 7480      1279            mov     a,#0x80
0390 C0E0      1280            push    acc
0392 7410      1281            mov     a,#_buff
0394 C0E0      1282            push    acc
0396 7445      1283            mov     a,#(_buff >> 8)
0398 C0E0      1284            push    acc
039A 7440      1285            mov     a,#0x40
039C C0E0      1286            push    acc
039E 120000    1287            lcall   _sscanf
03A1 E581      1288            mov     a,sp
03A3 24F4      1289            add     a,#0xf4
03A5 F581      1290            mov     sp,a
03A7           1291   ;        EFM8_dataPC.c:289: printf("%d, %d", speed, steering); // send to putty
03A7 C0B0      1292            push    _main_steering_1_98
03A9 C0B1      1293            push    (_main_steering_1_98 + 1)
03AB C060      1294            push    _main_speed_1_98
03AD C061      1295            push    (_main_speed_1_98 + 1)
03AF 7480      1296            mov     a,#__str_13
03B1 C0E0      1297            push    acc
03B3 74C0      1298            mov     a,#(__str_13 >> 8)
03B5 C0E0      1299            push    acc
03B7 7480      1300            mov     a,#0x80
03B9 C0E0      1301            push    acc
03BB 120000    1302            lcall   _printf
03BE E581      1303            mov     a,sp
03C0 24F9      1304            add     a,#0xf9
03C2 F581      1305            mov     sp,a
03C4 8000      1306            sjmp    L015004?
03C6           1307            rseg R_CSEG
03C6           1308   
0000           1309            rseg R_XINIT
0000           1310   
0000           1311            rseg R_CONST
0000           1312   __str_0:
0000 436F6D6D  1313            db 'Command: %s'
     616E643A
     202573
000B 00        1314            db 0x00
000C           1315   __str_1:
000C 52657370  1316            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1317            db 0x0D
0019 0A        1318            db 0x0A
001A 00        1319            db 0x00
001B           1320   __str_2:
001B 41542B44  1321            db 'AT+DVID0000'
     56494430
     303030
0026 0D        1322            db 0x0D
0027 0A        1323            db 0x0A
0028 00        1324            db 0x00
0029           1325   __str_3:
0029 0D        1326            db 0x0D
002A 0A        1327            db 0x0A
002B 45464D38  1328            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        1329            db 0x0D
0047 0A        1330            db 0x0A
0048 00        1331            db 0x00
0049           1332   __str_4:
0049 41542B56  1333            db 'AT+VER'
     4552
004F 0D        1334            db 0x0D
0050 0A        1335            db 0x0A
0051 00        1336            db 0x00
0052           1337   __str_5:
0052 41542B42  1338            db 'AT+BAUD'
     415544
0059 0D        1339            db 0x0D
005A 0A        1340            db 0x0A
005B 00        1341            db 0x00
005C           1342   __str_6:
005C 41542B52  1343            db 'AT+RFID'
     464944
0063 0D        1344            db 0x0D
0064 0A        1345            db 0x0A
0065 00        1346            db 0x00
0066           1347   __str_7:
0066 41542B44  1348            db 'AT+DVID'
     564944
006D 0D        1349            db 0x0D
006E 0A        1350            db 0x0A
006F 00        1351            db 0x00
0070           1352   __str_8:
0070 41542B52  1353            db 'AT+RFC'
     4643
0076 0D        1354            db 0x0D
0077 0A        1355            db 0x0A
0078 00        1356            db 0x00
0079           1357   __str_9:
0079 41542B50  1358            db 'AT+POWE'
     4F5745
0080 0D        1359            db 0x0D
0081 0A        1360            db 0x0A
0082 00        1361            db 0x00
0083           1362   __str_10:
0083 41542B43  1363            db 'AT+CLSS'
     4C5353
008A 0D        1364            db 0x0D
008B 0A        1365            db 0x0A
008C 00        1366            db 0x00
008D           1367   __str_11:
008D 41542B44  1368            db 'AT+DVIDABBA'
     56494441
     424241
0098 0D        1369            db 0x0D
0099 0A        1370            db 0x0A
009A 00        1371            db 0x00
009B           1372   __str_12:
009B 53256454  1373            db 'S%dT%d'
     2564
00A1 00        1374            db 0x00
00A2           1375   __str_13:
00A2 25642C20  1376            db '%d, %d'
     2564
00A8 00        1377            db 0x00
00A9           1378   
0003           1379            CSEG
0003           1380   
0003           1381   end
